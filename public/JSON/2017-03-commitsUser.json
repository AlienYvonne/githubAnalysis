{"mail@nlohmann.me": [{"date": "2017-03-31T22:36:05Z", "message": ":hammer: removed unget() function"}, {"date": "2017-03-31T21:58:45Z", "message": "Merge branch 'develop' into feature/manual_lexer"}, {"date": "2017-03-31T21:57:24Z", "message": ":hammer: added minibench to ignore list"}, {"date": "2017-03-31T21:24:33Z", "message": ":hammer: replaced lookup-tables by switches"}, {"date": "2017-03-31T15:11:51Z", "message": ":hammer: moved buffer size to interface"}, {"date": "2017-03-30T15:39:02Z", "message": ":memo: mentioned #540 and fixed #538"}, {"date": "2017-03-29T05:54:26Z", "message": ":hammer: fixed bugs introduced by merging from develop"}, {"date": "2017-03-28T22:57:09Z", "message": "Merge branch 'develop' into feature/manual_lexer"}, {"date": "2017-03-28T22:39:47Z", "message": ":hammer: deprecated j << istream / j >> ostream functions #367\n\nThe implementation is non-standard. Deprecation allows a simpler API in\nthe future without removing any features."}, {"date": "2017-03-28T21:47:17Z", "message": "Merge branch 'develop' into feature/manual_lexer"}, {"date": "2017-03-28T21:28:54Z", "message": ":white_check_mark: added regression test for #464"}, {"date": "2017-03-28T21:24:59Z", "message": ":memo: addressed #514\n\nNaN values never compare equal to themselves or to other NaN values."}, {"date": "2017-03-28T21:20:45Z", "message": ":hammer: cleanup"}, {"date": "2017-03-28T20:10:24Z", "message": ":hammer: fixed a warning in MSVC"}, {"date": "2017-03-28T19:55:26Z", "message": ":checkered_flag: removed __builtin_expect for MSVC"}, {"date": "2017-03-28T19:39:36Z", "message": "Merge branch 'develop' into feature/manual_lexer"}, {"date": "2017-03-28T19:39:16Z", "message": ":memo: documented Xcode 8.3"}, {"date": "2017-03-28T18:42:12Z", "message": ":construction_worker: added Xcode 8.3\n\nhttps://blog.travis-ci.com/2017-03-28-xcode-83-ga-is-here"}, {"date": "2017-03-28T18:29:27Z", "message": ":hammer: fixed test case"}, {"date": "2017-03-28T18:17:00Z", "message": ":hammer: adjusted test case to new signature of token_type_name()"}, {"date": "2017-03-28T18:08:08Z", "message": ":hammer: some cleanup"}, {"date": "2017-03-28T16:06:43Z", "message": ":hammer: fixed buffer overflow"}, {"date": "2017-03-28T15:00:03Z", "message": ":hammer: fixing last failing test cases"}, {"date": "2017-03-27T20:58:44Z", "message": ":hammer: rewrote string parser to cope with UTF-8"}, {"date": "2017-03-26T16:45:04Z", "message": ":hammer: added code for user-defined number types"}, {"date": "2017-03-26T16:12:58Z", "message": ":hammer: added code for locale-independent number parsing"}, {"date": "2017-03-26T15:26:41Z", "message": ":hammer: fixed number parsing"}, {"date": "2017-03-26T14:19:07Z", "message": ":hammer: adjusted more expected exceptions"}, {"date": "2017-03-26T13:29:08Z", "message": ":hammer: fixed \\uxxxx parsing"}, {"date": "2017-03-26T11:14:14Z", "message": "Merge branch 'develop' into feature/manual_lexer"}, {"date": "2017-03-26T10:54:22Z", "message": "Merge branch 'feature/noexcept_exceptions' into develop"}, {"date": "2017-03-26T10:23:10Z", "message": ":hammer: reverted changes that led to Travis failures"}, {"date": "2017-03-25T22:31:03Z", "message": ":hammer: cleanup"}, {"date": "2017-03-25T16:35:57Z", "message": ":hammer: fixed check for is_nothrow_copy_constructible\n\nWe now only demand our exceptions to be is_nothrow_copy_constructible\nif std::runtime_exception is."}, {"date": "2017-03-25T16:25:39Z", "message": ":hammer: small refactoring\n\nThe solution with a std::runtime_error member is more elegant. It\nallows to have std::exception as base class again. However, I still\nhave no idea why GCC thinks the copy constructor may throw..."}, {"date": "2017-03-25T15:22:52Z", "message": ":ambulance: made exceptions nothrow-copy-constructible #531\n\nTo have nothrow-copy-constructible exceptions, we inherit from\nstd::runtime_error which can cope with arbitrary-length error messages.\nIntermediate strings are built with static functions and then passed to\nthe actual constructor."}, {"date": "2017-03-25T13:47:23Z", "message": ":lipstick: cleanup"}, {"date": "2017-03-25T13:19:05Z", "message": ":memo: cleanup after #536"}, {"date": "2017-03-25T13:12:58Z", "message": "Merge branch 'develop' into feature/manual_lexer"}, {"date": "2017-03-24T18:53:19Z", "message": "Merge branch 'develop' into feature/manual_lexer"}, {"date": "2017-03-24T18:51:11Z", "message": ":memo: update after #534"}, {"date": "2017-03-24T18:49:02Z", "message": ":construction: manual lexer\n\nThis commit removed the re2c lexer and replaced it by a manual version.\nIts integration is not yet complete: number parsing does not respect\nlocales or overflows. Furthermore, parsing does not need to end with\nEOF. Therefore, a lot of test cases fail. The idea is to push this\nbranch forward so we can conduct performance comparisons. So far, a\nnice side effect are better diagnosis messages in case of parse errors."}, {"date": "2017-03-22T07:10:31Z", "message": ":memo: update after #527 and #525"}, {"date": "2017-03-22T07:10:02Z", "message": ":rotating_light: fixed a compiler warning #527\n\nThe result of snprintf is later used in situations where a long may\noverflow."}, {"date": "2017-03-17T21:18:48Z", "message": ":ambulance: fix for #519\n\nAdded catch branch for out_of_range exception that can occur if input\nfile contains a number overflow."}, {"date": "2017-03-17T21:18:05Z", "message": ":ambulance: fix for #516 and #518\n\nWe should compare the binary serializations rather than the JSON values\nthemselves. This fix was already done for CBOR and apparently forgotten\nfor MessagePack."}, {"date": "2017-03-16T18:02:05Z", "message": ":lipstick: cleanup after #508"}, {"date": "2017-03-16T17:39:33Z", "message": ":construction: a lot of minor changes\n\n- Removed unused headers.\n- Added override where needed.\n- Added description for parse_error.113 exception.\n- Fixed some conversion warnings.\n- Integrated cbor_expect_string function for CBOR maps.\n- Added documentation on the supported CBOR/MessagePack features.\n- Added test to check all initial bytes for CBOR input."}, {"date": "2017-03-16T17:35:45Z", "message": ":rotating_light: added pedantic flags for GCC\n\nWith GCC 7, there are even more diagnostic flags."}, {"date": "2017-03-14T22:08:19Z", "message": "Merge branch 'feature/getline' into develop"}, {"date": "2017-03-14T22:08:05Z", "message": ":memo: improved documentation for to-CBOR and to-msgpack functions"}, {"date": "2017-03-14T20:31:36Z", "message": ":hammer: added user-defined exception #493\n\nReplaced old std::invalid_argument exception by parse_error.111 to have\nunified exceptions in case of input stream errors."}, {"date": "2017-03-14T20:24:53Z", "message": ":hammer: changed call from \"not good()\" to \"fail()\" #493\n\nAlso merged develop into this feature branch."}, {"date": "2017-03-14T20:11:20Z", "message": ":checkered_flag: added parentheses around max/min calls #506\n\nWhen <Windows.h> is included with MSVC, a macro NOMINMAX is defined\nthat yields compilation errors when max/min calls are encountered. This\ncan be fixed by un-defining NOMINMAX, or by placing parentheses around\nall min/max calls. We chose the latter."}, {"date": "2017-03-14T20:05:38Z", "message": ":ambulance: added special case to fuzzers to fix #504\n\nSince #329, NaN and inf numbers do not yield an exception, but are\nstored internally and are dumped as \u201cnull\u201d. This commit adjusts the\nfuzz testers to deal with this special case."}, {"date": "2017-03-14T15:14:05Z", "message": ":ambulance: fix for #500\n\nRemoved a check that already failed in MSVC."}, {"date": "2017-03-14T15:07:28Z", "message": ":lipstick: fixed indentation"}, {"date": "2017-03-13T18:04:19Z", "message": ":fire: removed accidentally committed binaries"}, {"date": "2017-03-12T19:59:33Z", "message": ":hammer: added user-defined exception 406"}, {"date": "2017-03-12T19:34:30Z", "message": ":twisted_rightwards_arrows: merge branch 'feature/exceptions_3.0.0' into develop"}, {"date": "2017-03-12T19:22:30Z", "message": ":twisted_rightwards_arrows: merge branch 'develop' into feature/exceptions_3.0.0"}, {"date": "2017-03-12T17:38:05Z", "message": ":boom: implemented new handling of NaN and INF #70 #329 #388\n\n- If an overflow occurs during parsing a number from a JSON text, an\nexception (std::out_of_range for the moment, to be replaced by a\nuser-defined exception #244) is thrown so that the overflow is detected\nearly and roundtripping is guaranteed.\n- NaN and INF floating-point values can be stored in a JSON value and\nare not replaced by null. That is, the basic_json class behaves like\ndouble in this regard (no exception occurs). However, NaN and INF are\nserialized to \u201cnull\u201d.\n- Adjusted test cases appropriately."}, {"date": "2017-03-12T16:05:02Z", "message": ":hammer: cleaned up array from_json methods #473\n\nRemoved some code that is not needed any more. Thus, streamlining the\narray from_json methods."}, {"date": "2017-03-12T14:20:17Z", "message": ":white_check_mark: added regression tests for #473\n\nThese tests currently pass without any adjustments to the source code."}, {"date": "2017-03-12T13:39:20Z", "message": ":hammer: added a check function for MsgPack strings #497\n\nTo avoid the error described in #497, I added a function\nmsgpack_expect_string that is executed every time a string is expected\nduring the parsing of a map. In case the current byte does not belong\nto a MsgPack string, an exception is thrown."}, {"date": "2017-03-12T12:49:39Z", "message": ":memo: overworked documentation for the at functions\n\nAdded all possible exceptions to the examples of the at functions."}, {"date": "2017-03-12T10:51:24Z", "message": "Merge branch 'develop' into feature/exceptions_3.0.0"}, {"date": "2017-03-12T10:49:52Z", "message": "Merge branch 'feature/no_exceptions' into develop"}, {"date": "2017-03-12T10:19:27Z", "message": ":construction_worker: fixed a syntax error"}, {"date": "2017-03-12T10:04:26Z", "message": ":construction_worker: fixed no_exceptions test case\n\nThis test case relied on logics that have been replaced by CMake with\n#461. This change enables compilation and execution of the test suite\nwithout exceptions by adding an after_success task."}, {"date": "2017-03-12T09:40:36Z", "message": ":ambulance: fix for #486\n\nImplemented std::less<value_t> to allow using value_t as std::map key\nin MSVC."}, {"date": "2017-03-11T19:16:13Z", "message": ":hammer: added __EXCEPTIONS to the list"}, {"date": "2017-03-11T18:26:12Z", "message": ":ambulance: fix for #493\n\nAdded a test to check if the input stream is good() before executing\ngetline on it. Also added two test cases that set the failbit and\nbadbit before calling file_line_buffer."}, {"date": "2017-03-11T17:43:21Z", "message": ":hammer: added defined() check"}, {"date": "2017-03-11T16:59:24Z", "message": ":checkered_flag: added check for _CPPUNWIND\n\nMSVC does not define __cpp_exceptions, but seems to use _CPPUNWIND when\nexception support is switched on, see\nhttps://msdn.microsoft.com/en-us/library/b0084kay.aspx."}, {"date": "2017-03-11T16:44:54Z", "message": ":hammer: using __cpp_exceptions to detect exception support #498\n\nI used __EXCEPTIONS to detect whether exceptions are supported.\nApparently, this is a macro that is only used by libstdc++\n(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64276). It\u2019s much cleaner\nto use __cpp_exceptions as it is in the standard since C++98.\n\nNote that compiling the unit-tests with \u201c-fno-exceptions\u201d still does\nnot work, because Catch uses throw internally. However, the library\u2019s\nexceptions can be switched off by defining JSON_NOEXCEPTION."}, {"date": "2017-03-11T16:22:14Z", "message": "Merge branch 'feature/vector_bool' into develop"}, {"date": "2017-03-11T15:01:26Z", "message": ":art: cleanup after #496\n\nRan \u201cmake pretty\u201d and added a note to the README file."}, {"date": "2017-03-11T14:46:52Z", "message": ":hammer: fixed interface for to_json function"}, {"date": "2017-03-11T14:44:14Z", "message": ":sparkles: added overload for std::less<value_t> #486\n\nMSVC needs this overload to compile code containing a std::map that\nuses nlohmann::detail::operator as key."}, {"date": "2017-03-11T14:32:44Z", "message": ":sparkles: added overload for std::vector<bool> #494\n\nAdds a to_json function for std::vector<bool> to allow implicit\nconversion from bit vectors to basic_json."}, {"date": "2017-03-09T17:55:27Z", "message": "Merge branch 'develop' into coverity_scan"}, {"date": "2017-03-09T17:20:26Z", "message": ":ambulance: fix for #492\n\nThe original test case relied on an invalidated iterator. This error\ndid not occur before, but only with GCC with -D_GLIBCXX_DEBUG. This\ncommit fixes the test case. The library is unaffected by this change."}, {"date": "2017-03-08T22:30:38Z", "message": ":memo: more documentation for the new exceptions"}, {"date": "2017-03-08T22:12:13Z", "message": ":memo: more documentation for the new exceptions"}, {"date": "2017-03-08T20:03:19Z", "message": ":memo: overworked documentation\n\nReplacing references to std exceptions with user-defined exceptions.\nAlso changed some examples to the new exceptions."}, {"date": "2017-03-08T18:16:53Z", "message": ":hammer: added user-defined exception 501"}, {"date": "2017-03-08T17:37:03Z", "message": ":ambulance: fixing fuzzers to work with new exceptions"}, {"date": "2017-03-08T17:07:21Z", "message": ":hammer: changed an exception"}, {"date": "2017-03-08T15:39:17Z", "message": ":white_check_mark: improved test coverage\n\nTests for parse_error.109 were missing."}, {"date": "2017-03-07T19:05:34Z", "message": ":hammer: added user-defined exception 112"}, {"date": "2017-03-06T22:45:08Z", "message": ":hammer: replaced at() calls in msgpack/cbor"}, {"date": "2017-03-06T21:37:46Z", "message": ":hammer: added user-defined exception 111"}, {"date": "2017-03-06T20:00:13Z", "message": ":hammer: added user-defined exception 110"}, {"date": "2017-03-06T18:34:44Z", "message": ":hammer: user-defined exception 302\n\nAlso moved all exception classes into the detail namespace and\nintroduced them via \u201cusing\u201d into basic_json."}, {"date": "2017-03-05T22:25:22Z", "message": "added user-defined exceptions 404-405"}, {"date": "2017-03-05T22:16:17Z", "message": ":hammer: added user-defined exception 403"}, {"date": "2017-03-05T21:56:39Z", "message": ":hammer: added user-defined exceptions 401-402"}, {"date": "2017-03-05T21:39:21Z", "message": ":hammer: added user-defined exception 311"}, {"date": "2017-03-05T21:31:08Z", "message": ":hammer: added user-defined exception 311"}, {"date": "2017-03-05T18:58:26Z", "message": ":hammer: added user-defined exceptions 313-315"}, {"date": "2017-03-05T18:48:11Z", "message": ":hammer: added user-defined exceptions 310"}, {"date": "2017-03-05T18:42:05Z", "message": ":hammer: added user-defined exceptions 309"}, {"date": "2017-03-05T18:35:24Z", "message": ":hammer: added user-defined exceptions 308"}, {"date": "2017-03-05T18:26:44Z", "message": ":hammer: added user-defined exceptions 307"}, {"date": "2017-03-05T18:15:56Z", "message": ":hammer: added user-defined exceptions 306"}, {"date": "2017-03-05T18:08:12Z", "message": ":hammer: added user-defined exceptions 305"}, {"date": "2017-03-05T17:56:35Z", "message": ":hammer: added user-defined exceptions 303-304"}, {"date": "2017-03-05T17:40:09Z", "message": ":hammer: added user-defined exceptions 301"}, {"date": "2017-03-03T13:34:57Z", "message": ":hammer: added user-defined exceptions 2xx"}, {"date": "2017-03-03T13:00:42Z", "message": ":hammer: added user-defined exceptions 205-206"}, {"date": "2017-03-03T12:38:14Z", "message": ":hammer: added user-defined exceptions 203-204"}, {"date": "2017-03-03T12:19:45Z", "message": ":hammer: added user-defined exceptions 201-202\n\nStarted implementing exceptions for invalid iterators."}, {"date": "2017-03-03T11:59:37Z", "message": "Merge branch 'develop' into feature/exceptions_3.0.0"}, {"date": "2017-03-03T11:56:54Z", "message": ":memo: fixed typo #481"}, {"date": "2017-03-03T11:54:45Z", "message": "Merge branch 'develop' into feature/exceptions_3.0.0"}, {"date": "2017-03-03T11:54:37Z", "message": ":hammer: added user-defined exception 109\n\nThis exception occurs when a JSON pointer contains an array index that\ncan not be converted into a number."}, {"date": "2017-03-03T10:56:58Z", "message": ":hammer: added user-defined exceptions 106-108\n\nThese exceptions occur when JSON pointers are malformed."}, {"date": "2017-03-03T09:01:16Z", "message": ":memo: added missing word"}, {"date": "2017-03-02T17:13:19Z", "message": ":arrow_up: updated Catch to v1.8.1"}, {"date": "2017-03-02T16:55:13Z", "message": ":hammer: added user-defined exceptions 104 and 105\n\nThese exceptions are thrown in case of parse errors in JSON patch\ndocuments."}, {"date": "2017-03-01T20:28:44Z", "message": ":hammer: started with user-defined exceptions #301 #244\n\nAdded class hierarchy for user-defined exceptions (#244). Integrated\nparse exceptions 101-103. Parse exceptions include the byte count of\nthe last read character to locate the position of the error (#301)."}, {"date": "2017-03-01T16:49:03Z", "message": ":fire: removed deprecated constructor #480\n\nThe constructor basic_json(std::istream&, const parser_callback_t) has\nbeen deprecated since version 2.0.0. This commit removes it together\nwith its code example, deprecation macro, and test cases. The code now\nalso compiles with -W-deprecated-declarations."}, {"date": "2017-03-01T16:26:32Z", "message": ":memo: added note to 3.0.0 wiki page #474\n\nI created a wiki page\nhttps://github.com/nlohmann/json/wiki/Road-toward-3.0.0 to describe the\ntransition toward version 3.0.0. On this page, all API-breaking changes\nshall be documented."}, {"date": "2017-03-01T09:15:07Z", "message": ":memo: added a note to ordered maps\n\nThe library does not preserve the insertion order of object keys. There\nare frequent requests to change the library in this aspect. The README\nand the contribution guidelines now contain links to containers that\ncan be used to replace std::map to preserve the insertion order."}], "niels.lohmann@gmail.com": [{"date": "2017-03-30T15:25:29Z", "message": "Merge pull request #540 from tinloaf/diagnostics\n\nProperly pop diagnostics"}, {"date": "2017-03-25T13:12:30Z", "message": "Merge pull request #536 from vpetrigo/feature/VS17_appveyor_support\n\nAdd Visual Studio 17 image to appveyor build matrix"}, {"date": "2017-03-24T18:38:29Z", "message": "Merge pull request #534 from TedLyngmo/utf8_encoding_enhancement\n\nUTF8 encoding enhancement"}, {"date": "2017-03-23T12:57:54Z", "message": "Merge pull request #530 from berkus/patch-1\n\nFix typo"}, {"date": "2017-03-22T06:50:34Z", "message": "Merge pull request #526 from krzysztofwos/feature/exception-base-class\n\nMake exception base class visible in basic_json"}, {"date": "2017-03-17T05:47:11Z", "message": "Merge pull request #510 from alex-weej/patch-1\n\n:art: Namespace `uint8_t` from the C++ stdlib"}, {"date": "2017-03-16T18:00:58Z", "message": "Merge pull request #508 from theodelrieu/feature/c_array_conversion\n\nadd to_json method for C arrays"}, {"date": "2017-03-11T14:57:10Z", "message": "Merge pull request #496 from TedLyngmo/fix_effcplusplus_warnings\n\nFix -Weffc++ warnings (GNU 6.3.1)"}], "lukas.barth@kit.edu": [{"date": "2017-03-30T14:14:02Z", "message": "Also change the re2c file"}, {"date": "2017-03-30T14:10:03Z", "message": "Pop for every push"}], "taenaru@gmail.com": [{"date": "2017-03-25T11:57:58Z", "message": "Add VS17 image to appveyor matrix"}], "ted@lyncon.se": [{"date": "2017-03-24T13:56:48Z", "message": "UTF8 encoding enhancement"}, {"date": "2017-03-11T12:56:38Z", "message": "Fix -Weffc++ warnings (GNU 6.3.1)"}, {"date": "2017-03-11T12:56:38Z", "message": "Fix -Weffc++ warnings (GNU 6.3.1)"}, {"date": "2017-03-11T12:56:38Z", "message": "Fix -Weffc++ warnings (GNU 6.3.1)"}], "berkus@users.noreply.github.com": [{"date": "2017-03-23T12:50:41Z", "message": "Fix typo"}], "krzysztof.wos@gmail.com": [{"date": "2017-03-20T04:07:01Z", "message": "Exit with an error if re2c is not available\n\nInstead of overwriting src/json.hpp with an empty file"}, {"date": "2017-03-20T03:42:44Z", "message": "Make exception base class visible in basic_json"}], "alex@weej.com": [{"date": "2017-03-16T18:24:41Z", "message": ":art: Namespace `uint8_t` from the C++ stdlib"}], "theo.delrieu@tanker.io": [{"date": "2017-03-16T12:43:53Z", "message": "add to_json method for C arrays\n\n    If the array can be converted to basic_json::string_t, the overload\nin this commit is not chosen."}]}