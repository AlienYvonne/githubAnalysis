{"daniel@duerrenbuehl.de": [{"date": "2017-07-31T21:20:37Z", "message": "DOC: add sort mentioning about support in hunter"}, {"date": "2017-07-31T07:49:26Z", "message": "CONFIG: pin cmake to enable only C++"}, {"date": "2017-07-29T09:59:09Z", "message": "REFACTOR: rewrite CMakeLists.txt for better inlcude and reuse\n\nThe rewrite uses more cmake build-in automatisms and build-in generates\nvariables to allow better generic reuse.\n* cmake  files are installed to\n``` <install_prefix>/lib/cmake/nlohmann_json/ ``` for best support on\nmost systems\n* include path is set to ``` include ```  for usage as ``` #include\n<nlohmann/json.hpp> ```"}], "mail@nlohmann.me": [{"date": "2017-07-31T21:17:14Z", "message": ":hammer: fixed GCC warnings in #663\n\nhttps://github.com/nlohmann/json/pull/663#issuecomment-318931884"}, {"date": "2017-07-30T18:30:05Z", "message": ":hammer: cleanup after #663"}, {"date": "2017-07-30T18:01:35Z", "message": "Merge branch 'develop' of https://github.com/nlohmann/json into develop"}, {"date": "2017-07-30T18:01:31Z", "message": ":hammer: using emplace"}, {"date": "2017-07-30T16:30:34Z", "message": ":hammer: simplified a call"}, {"date": "2017-07-30T11:25:36Z", "message": ":hammer: small parser performance improvements\n\n- replaced list of pairs by flat list in next_byte_in_range\n- implemented early exit in case of parse errors\n- reused memory for object keys\n- direct calls to embedded objects/arrays for insertions"}, {"date": "2017-07-28T17:18:50Z", "message": ":hammer: refactored some scanner internals"}, {"date": "2017-07-27T22:21:55Z", "message": ":sparkles: binary formats can be stored in std::string, std::ofstreams or std::ostringstream #477"}, {"date": "2017-07-27T18:33:11Z", "message": ":sparkles: implemented exception-free parser #458 #582\n\nYou can now pass a boolean \"allow_exceptions\" to the parse functions. If it is false, no exceptions are thrown in case of a parse error. Instead, parsing is stopped at the first error and a JSON value of type \"discarded\" (check with is_discarded()) is returned."}, {"date": "2017-07-27T04:04:35Z", "message": ":hammer: fixed an error in MSVC"}, {"date": "2017-07-26T21:59:56Z", "message": ":hammer: fixed compilation error"}, {"date": "2017-07-26T21:44:55Z", "message": ":hammer: cleanup"}, {"date": "2017-07-23T21:02:24Z", "message": ":hammer: using input/output adapters for CBOR and MessagePack\n\n- You can now pass a reference to a vector to the to_cbor and to_msgpack functions. The output will be written (appended) to the vector. #476\n\n- You can now pass an output stream with uint8_t character type to the to_cbor and to_msgpack functions. #477\n\n- You can now read from uint8_t */size in the to_cbor and to_msgpack functions. An input adapter will be created from this pair, so you need to use braces. #478"}, {"date": "2017-07-23T16:11:34Z", "message": ":hammer: reorganized interfaces for parse/accept functions #623\n\nWe now rely on implicit conversions to an input_adapter object in the parse/accept functions."}, {"date": "2017-07-22T20:57:22Z", "message": ":hammer: adding destroy function to discard values"}, {"date": "2017-07-22T14:41:42Z", "message": ":hammer: trying to fix the sanitizer error\n\nTravis found an error with Clang 3.8's sanitizers, see https://travis-ci.org/nlohmann/json/jobs/256366699. Unfortunately, I cannot reproduce this error with clang version 6.0.0 (trunk 308825) locally. However, this seems to be an issue, because so far, we did not reset a value after moving from it."}, {"date": "2017-07-22T13:33:31Z", "message": ":hammer: fixed some warnings"}, {"date": "2017-07-22T13:18:38Z", "message": ":zap: started working on parser with provded result reference #418\n\nInternally, the parser now writes its result into a JSON value provided as a reference. To be usable, the public interfaces need to be extended."}, {"date": "2017-07-22T11:35:04Z", "message": ":hammer: further cleanup"}, {"date": "2017-07-21T16:26:07Z", "message": ":hammer: more cleanup using clang-tidy"}, {"date": "2017-07-20T21:01:16Z", "message": ":hammer: cleanup\n\n- Replaced codepoint calculation by bit operations.\n- Fixed several clang-tidy warnings."}, {"date": "2017-07-17T05:53:02Z", "message": ":bug: fix for #656\n\nA complete rewrite of the string escape function. It now provides codepoint-to-\\uxxxx escaping. Invalid UTF-8 byte sequences are not escaped, but copied as-is. I haven\u2019t spent much time optimizing the code - but the library now agrees with Python on every single Unicode character\u2019s escaping (see file test/data/json_nlohmann_tests/all_unicode_ascii.json).\n\nOther minor changes: replaced \"size_t\" by \"std::size_t\""}, {"date": "2017-07-09T10:19:14Z", "message": ":construction_worker: removing Clang 3.9 and 4.0\n\nThese versions are still not working properly: https://travis-ci.org/nlohmann/json/jobs/251675281"}, {"date": "2017-07-09T09:51:38Z", "message": ":memo: cleanup after #650\n\nAs <iostream> is not included in json.hpp any more, all code examples need to include <iostream> now."}, {"date": "2017-07-09T09:10:18Z", "message": ":construction_worker: adding two recent Clang versions\n\nMaybe the simple approach is working now - at least it is in https://github.com/taocpp/PEGTL/blob/master/.travis.yml"}, {"date": "2017-07-08T20:59:19Z", "message": ":construction_worker: added GCC7"}, {"date": "2017-07-08T20:59:04Z", "message": ":hammer: improved performance in dump for deeply nested values"}, {"date": "2017-07-08T20:16:45Z", "message": ":memo: fixed documentation\n\nThere was an issue in the documentation example before. Unfortunately, I did not recreate the example outputs."}, {"date": "2017-07-08T19:35:13Z", "message": ":hammer: removed exception parse_error.111\n\nIt makes no sense to have this special exception. Instead of throwing when an input adapter is created, it is better to detect a parse error in later usage when an EOF is \"read\" unexpectedly."}, {"date": "2017-07-08T18:31:13Z", "message": ":hammer: simplified binary write\n\nAlso added some comments and improved the documentation."}, {"date": "2017-07-08T16:34:08Z", "message": ":hammer: excluded uncovered lines\n\nThese breaks were just added to silence a GCC warning - the GCC is right about warning as it cannot know that the expect function will not return in these two scenarios."}, {"date": "2017-07-08T14:34:00Z", "message": "Merge branch 'feature/undo_171' into develop"}, {"date": "2017-07-08T14:18:27Z", "message": ":memo: fixed typos"}, {"date": "2017-07-08T11:33:13Z", "message": ":fire: removing usused functions #645\n\nIt seems these functions are not required any more. The code was added in commit 7e32457 to fix issue #171. There are still regression tests for #171, so when this commit passes the CI, the functions may be removed for good."}, {"date": "2017-07-08T10:55:05Z", "message": ":memo: added version string for Xcode 9"}, {"date": "2017-07-08T10:11:45Z", "message": ":arrow_up: Catch v1.9.6"}, {"date": "2017-07-08T10:03:12Z", "message": ":hammer: fixed a pedantic warning"}, {"date": "2017-07-08T09:57:09Z", "message": ":construction_worker: added Xcode 9 beta\n\nSee https://twitter.com/travisci/status/880550780368855040"}, {"date": "2017-07-07T21:38:04Z", "message": ":white_check_mark: re-added test\n\nI have no idea why this test has been removed in the first place."}, {"date": "2017-07-07T21:37:16Z", "message": ":bug: fixed undefined behavior bug\n\nWhen an empty vector was passed to the parse function, an empty iterator range was used to construct an input iterator. Unfortunately, we then cannot use the start iterator to derive a pointer from.\n\nFound with Xcode's undefined behavior sanitizer."}, {"date": "2017-07-07T20:41:22Z", "message": ":hammer: fixed some pedantic GCC warnings"}, {"date": "2017-07-07T19:16:33Z", "message": ":memo: fix for #639\n\nRemoved deprecated documentation of the comparison operator."}], "niels.lohmann@gmail.com": [{"date": "2017-07-30T18:01:03Z", "message": "Merge pull request #669 from dan-42/change_installed_cmake_include_path\n\nREFACTOR: rewrite CMakeLists.txt for better inlcude and reuse"}, {"date": "2017-07-30T18:00:46Z", "message": "Merge pull request #663 from himikof/move-construction\n\nSupport moving from rvalues in std::initializer_list"}, {"date": "2017-07-30T17:49:24Z", "message": "Merge branch 'develop' into move-construction"}, {"date": "2017-07-27T18:48:56Z", "message": "Merge pull request #666 from effolkronium/develop\n\nenable_testing only if the JSON_BuildTests is ON"}, {"date": "2017-07-15T09:39:27Z", "message": "Merge pull request #652 from olegendo/develop\n\nRename BuildTests to JSON_BuildTests"}, {"date": "2017-07-13T17:16:41Z", "message": ":page_facing_up: added code of conduct\n\nadded Contributor Covenant Code of Conduct"}, {"date": "2017-07-12T05:58:45Z", "message": "Merge pull request #654 from ryanjmulder/develop\n\nadd ensure_ascii parameter to dump. #330"}, {"date": "2017-07-09T21:12:35Z", "message": "Merge pull request #643 from theodelrieu/refacto/split_basic_json\n\nRefacto/split basic json"}, {"date": "2017-07-09T09:12:46Z", "message": "Merge pull request #650 from olegendo/develop\n\nDon't include <iostream>, use std::make_shared"}], "effolkronium@gmail.com": [{"date": "2017-07-27T14:50:24Z", "message": "enable_testing only if JSON_BuildTests is ON"}], "himikof@gmail.com": [{"date": "2017-07-25T09:17:32Z", "message": "Move from rvalues eagerly to work around MSVC problem\n\nOn MSVC compiler, temporaries that are constructed during a\nlist initialization, are sometimes destroyed even before calling\nthe initializing constructor, instead of at the end of the\ncontaining full-expression. This is clearly non-conforming to\n[class.temporary].\nAs the impact of this bug is silently producing incorrect\nJSON values, move eagerly from rvalues to be safe.\n\nSee https://stackoverflow.com/questions/24586411"}, {"date": "2017-07-24T09:29:06Z", "message": "Make detail::json_ref do less work by deferring moves/copies"}, {"date": "2017-07-23T22:02:03Z", "message": "Fix an actually invalid test\n\nC++ overload resolution/list initialization rules are hard."}, {"date": "2017-07-23T20:59:34Z", "message": "Update tests while fixing possible UB\n\nstd::initializer_list does not own the temporaries created in\nits initialization. Therefore, storing it in an independent\nstack variable is unsafe."}, {"date": "2017-07-23T20:57:17Z", "message": "Support moving from rvalues in an std::initializer_list\n\nThis commit works around an issue in std::initializer_list design.\nBy using a detail::json_ref proxy with a mutable value inside,\nrvalue-ness of an input to list initializer is remembered and\nused later to move from the proxy instead of copying."}, {"date": "2017-07-23T20:50:59Z", "message": "Optimize json construction from rvalue string_t/array_t/object_t"}, {"date": "2017-07-23T20:47:15Z", "message": "Add some tests for std::move from std::initializer_list"}], "ryanjmulder@gmail.com": [{"date": "2017-07-11T18:18:02Z", "message": "restore necessary comman in documentation of dump"}, {"date": "2017-07-11T17:59:07Z", "message": "update comment on dump to not indicate that ensure_ascii is true by default"}, {"date": "2017-07-11T17:41:56Z", "message": "add ensure_ascii parameter to dump. #330"}], "olegendo@gcc.gnu.org": [{"date": "2017-07-11T13:57:49Z", "message": "Rename BuildTests to JSON_BuildTests\n\nThis avoids potential conflicts with other libraries when the library is\nbuilt from source and included in a bigger cmake build."}, {"date": "2017-07-09T06:20:28Z", "message": "fix typo"}, {"date": "2017-07-09T06:19:08Z", "message": "use std::make_shared"}, {"date": "2017-07-09T06:04:49Z", "message": "include <iosfwd> instead of <iostream>\n\navoid bloat caused by <iostream> and std::cout and friends in apps where\niostream are not used."}], "delrieutheo@gmail.com": [{"date": "2017-07-09T15:43:59Z", "message": "move serializer outside of basic_json"}, {"date": "2017-07-09T15:31:25Z", "message": "move binary_{reader,writer} outside of basic_json"}, {"date": "2017-07-09T15:20:03Z", "message": "move json_reverse_iterator outside of basic_json"}, {"date": "2017-07-09T14:53:36Z", "message": "move internal_iterator/iter_impl/iteration_proxy outside of basic_json"}, {"date": "2017-07-01T18:18:42Z", "message": "move primitive_iterator outside of basic_json"}, {"date": "2017-07-09T14:38:24Z", "message": "move lexer/parser outside of basic_json"}, {"date": "2017-07-01T18:01:28Z", "message": "move input adapters outside of basic_json"}, {"date": "2017-07-01T17:52:18Z", "message": "move json_pointer outside of basic_json"}, {"date": "2017-07-01T17:44:05Z", "message": "forward declare basic_json, add two macros\n\nThose macros are used to reduce template argument boilerplate"}]}