[{"url": "https://api.github.com/repos/nlohmann/json/issues/1175", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1175/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1175/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1175/events", "html_url": "https://github.com/nlohmann/json/issues/1175", "id": 344725193, "node_id": "MDU6SXNzdWUzNDQ3MjUxOTM=", "number": 1175, "title": "How can I only parse the first level and get the value as string?", "user": {"login": "kgbook", "id": 23023005, "node_id": "MDQ6VXNlcjIzMDIzMDA1", "avatar_url": "https://avatars3.githubusercontent.com/u/23023005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kgbook", "html_url": "https://github.com/kgbook", "followers_url": "https://api.github.com/users/kgbook/followers", "following_url": "https://api.github.com/users/kgbook/following{/other_user}", "gists_url": "https://api.github.com/users/kgbook/gists{/gist_id}", "starred_url": "https://api.github.com/users/kgbook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kgbook/subscriptions", "organizations_url": "https://api.github.com/users/kgbook/orgs", "repos_url": "https://api.github.com/users/kgbook/repos", "events_url": "https://api.github.com/users/kgbook/events{/privacy}", "received_events_url": "https://api.github.com/users/kgbook/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 31, "created_at": "2018-07-26T07:24:58Z", "updated_at": "2018-07-27T17:25:16Z", "closed_at": null, "author_association": "NONE", "body": "I use the latest release version `3.1.2`.\r\n\r\nI want to parse the JSON data:\r\n```json\r\n\"{\"json\":\"{\"error\":true,\"message\":\"404 not found\",\"code\":0,\"nonce\":\"0.8054632351656703\",\"timestamp\":1532525070907}\", \"signature\":\"Q5s1tDJVXWcNXp\"}\"\r\n```\r\nAnd My code:\r\n### main.cpp\r\n```cpp\r\n#include <iostream>\r\n#include \"main.h\"\r\n\r\nusing json = nlohmann::json;\r\nusing namespace std;\r\nusing namespace tp;\r\n\r\nint main() {\r\n    stCfgStr cfgStr;\r\n    json in = \"{\\\"json\\\":\\\"{\\\"error\\\":true,\\\"message\\\":\\\"404 not found\\\",\\\"code\\\":0,\\\"nonce\\\":\\\"0.8054632351656703\\\",\\\"timestamp\\\":1532525070907}\\\", \\\"signature\\\":\\\"Q5s1tDJVXWcNXp\\\"}\"_json;\r\n\r\n    try {\r\n        decode(in, cfgStr);\r\n        cout <<\"json: \"<<cfgStr.json <<endl;\r\n        cout <<\"signature: \" <<cfgStr.signature <<endl;\r\n    }\r\n    catch (json::parse_error &e){\r\n        cout <<\"msg: \"<<e.what()<<\"\\n\"\r\n              <<\"exception id: \"<<e.id<<\"\\n\"\r\n              <<\"byte position of error: \"<<e.byte<<endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n### main.h\r\n```cpp\r\n#ifndef NLOHMANNJSON_SAMPLE_MAIN_H\r\n#define NLOHMANNJSON_SAMPLE_MAIN_H\r\n\r\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n#include <cstdint>\r\n\r\nusing namespace std;\r\nusing nlohmann::json;\r\n\r\nnamespace tp {\r\n    struct stCfgStr {\r\n        string json;\r\n        string signature;\r\n    };\r\n}\r\n\r\nnamespace tp{\r\n    void encode(const stCfgStr &cfg, nlohmann::json &j){\r\n        j = nlohmann::json{{\"json\", cfg.json}, {\"signature\", cfg.signature}};\r\n    }\r\n\r\n    void decode(const nlohmann::json &j, stCfgStr &cfg){\r\n        cfg.json = j.at(\"json\").get<string>();\r\n        cfg.signature = j.at(\"signature\").get<string>();\r\n    }\r\n}\r\n\r\n#endif //NLOHMANNJSON_SAMPLE_MAIN_H\r\n```\r\n\r\nThen I got a exception named `json.exception.parse_error`, the detail information is \r\n```shell\r\nparse error at 12: syntax error - invalid literal; last read: '\"{\"e'; expected '}'\r\n```\r\n\r\nI just want to `decode` the value of `json` object with `std::string` type, and then decode again.\r\n\r\nNote that:\r\n```json\r\n\"{\"json\":\"{\"error\":true,\"message\":\"404 not found\",\"code\":0,\"nonce\":\"0.8054632351656703\",\"timestamp\":1532525070907}\", \"signature\":\"Q5s1tDJVXWcNXp\"}\"\r\n```\r\n```json\r\n\"{\"json\":{\"error\":true,\"message\":\"404 not found\",\"code\":0,\"nonce\":\"0.8054632351656703\",\"timestamp\":1532525070907}, \"signature\":\"Q5s1tDJVXWcNXp=\"}\"\r\n```\r\nThere are not the same!\r\nAs for the first one, the value of `json` embrace with double quotes `\"`, and the other is not!\r\n\r\nSo I have to decode the value of `json` as a `string`, not `object`.\r\n\r\nI used RapidJson library but failed with the same issue, parseErrorCode:`kParseErrorObjectMissCommaOrCurlyBracket `.\r\n\r\nIs it possible to `decode` those json data  I describe above with the  nlomann JSON library?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1174", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1174/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1174/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1174/events", "html_url": "https://github.com/nlohmann/json/issues/1174", "id": 344717549, "node_id": "MDU6SXNzdWUzNDQ3MTc1NDk=", "number": 1174, "title": "I have a query regarding nlohmann::basic_json::basic_json", "user": {"login": "sonulohani", "id": 2958681, "node_id": "MDQ6VXNlcjI5NTg2ODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2958681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonulohani", "html_url": "https://github.com/sonulohani", "followers_url": "https://api.github.com/users/sonulohani/followers", "following_url": "https://api.github.com/users/sonulohani/following{/other_user}", "gists_url": "https://api.github.com/users/sonulohani/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonulohani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonulohani/subscriptions", "organizations_url": "https://api.github.com/users/sonulohani/orgs", "repos_url": "https://api.github.com/users/sonulohani/repos", "events_url": "https://api.github.com/users/sonulohani/events{/privacy}", "received_events_url": "https://api.github.com/users/sonulohani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-07-26T06:55:24Z", "updated_at": "2018-07-28T15:05:59Z", "closed_at": "2018-07-28T15:05:59Z", "author_association": "CONTRIBUTOR", "body": "Hi @nlohmann ,\r\n\r\nWhile i was understanding the json code, I've got involved into a question. In this link:- https://nlohmann.github.io/json/classnlohmann_1_1basic__json_ab5dfd9a2b2663b219641cb7fe59b6da2.html#ab5dfd9a2b2663b219641cb7fe59b6da2 in the ctor \"basic_json\" I want to pass type_deduction as false. How can i do that. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1173", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1173/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1173/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1173/events", "html_url": "https://github.com/nlohmann/json/issues/1173", "id": 344480253, "node_id": "MDU6SXNzdWUzNDQ0ODAyNTM=", "number": 1173, "title": "unordered_map with vectors won't convert to json?", "user": {"login": "alberto2000", "id": 422124, "node_id": "MDQ6VXNlcjQyMjEyNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/422124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alberto2000", "html_url": "https://github.com/alberto2000", "followers_url": "https://api.github.com/users/alberto2000/followers", "following_url": "https://api.github.com/users/alberto2000/following{/other_user}", "gists_url": "https://api.github.com/users/alberto2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/alberto2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alberto2000/subscriptions", "organizations_url": "https://api.github.com/users/alberto2000/orgs", "repos_url": "https://api.github.com/users/alberto2000/repos", "events_url": "https://api.github.com/users/alberto2000/events{/privacy}", "received_events_url": "https://api.github.com/users/alberto2000/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-25T14:56:12Z", "updated_at": "2018-07-26T08:42:18Z", "closed_at": "2018-07-26T08:42:18Z", "author_association": "NONE", "body": "I have a `std::unordered_map<std::string, vector<float>> *valuesMap` and am trying to `nlohmann::json jstr(valuesMap);` but I do get error \r\n\r\n> error: static assertion failed: could not find to_json() method in T's namespace static_assert(sizeof(BasicJsonType) == 0\r\n\r\nAre vectors not supported?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1172", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1172/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1172/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1172/events", "html_url": "https://github.com/nlohmann/json/issues/1172", "id": 344276913, "node_id": "MDU6SXNzdWUzNDQyNzY5MTM=", "number": 1172, "title": "return json objects from functions", "user": {"login": "itodirel", "id": 15239856, "node_id": "MDQ6VXNlcjE1MjM5ODU2", "avatar_url": "https://avatars2.githubusercontent.com/u/15239856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itodirel", "html_url": "https://github.com/itodirel", "followers_url": "https://api.github.com/users/itodirel/followers", "following_url": "https://api.github.com/users/itodirel/following{/other_user}", "gists_url": "https://api.github.com/users/itodirel/gists{/gist_id}", "starred_url": "https://api.github.com/users/itodirel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itodirel/subscriptions", "organizations_url": "https://api.github.com/users/itodirel/orgs", "repos_url": "https://api.github.com/users/itodirel/repos", "events_url": "https://api.github.com/users/itodirel/events{/privacy}", "received_events_url": "https://api.github.com/users/itodirel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-07-25T03:15:44Z", "updated_at": "2018-07-28T03:20:17Z", "closed_at": null, "author_association": "NONE", "body": "Given a function like json json_add(json& j, std::string name), which given a json object, adds another object to it and returns it,  I expect that if I call:\r\n\r\n```\r\njson j;\r\njson_add(j, \"1\");\r\njson j2 = json_add(j, \"2\");\r\njson_add(j2, \"3\");\r\n```\r\n\r\nThe last call to json_add would add another object on an existing one created before, to create a hierarchy, but instead nothing happens, is there a way achieve this programatically?\r\n\r\n```\r\njson j = \r\n{\r\n    { \"filename\", \"file.cpp\" }\r\n};\r\njson j2;\r\nj2[\"prop\"] = \"1\";\r\n\r\nj[\"j2\"] = j2;\r\n\r\nj2[\"prop2\"] = \"2\"; // after adding j2 to j, their reference is lost, so further updates to j2 does nothing\r\n```\r\n\r\nExpected:\r\n\r\n```\r\n{\r\n  \"filename\": \"file.cpp\",\r\n  \"j2\": {\r\n    \"prop\": \"1\"\r\n    \"prop2\": \"2\"\r\n  }\r\n}\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1171", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1171/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1171/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1171/events", "html_url": "https://github.com/nlohmann/json/issues/1171", "id": 343307708, "node_id": "MDU6SXNzdWUzNDMzMDc3MDg=", "number": 1171, "title": "Problem when exporting to CBOR", "user": {"login": "arnaudbrejeon", "id": 21390, "node_id": "MDQ6VXNlcjIxMzkw", "avatar_url": "https://avatars3.githubusercontent.com/u/21390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnaudbrejeon", "html_url": "https://github.com/arnaudbrejeon", "followers_url": "https://api.github.com/users/arnaudbrejeon/followers", "following_url": "https://api.github.com/users/arnaudbrejeon/following{/other_user}", "gists_url": "https://api.github.com/users/arnaudbrejeon/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnaudbrejeon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnaudbrejeon/subscriptions", "organizations_url": "https://api.github.com/users/arnaudbrejeon/orgs", "repos_url": "https://api.github.com/users/arnaudbrejeon/repos", "events_url": "https://api.github.com/users/arnaudbrejeon/events{/privacy}", "received_events_url": "https://api.github.com/users/arnaudbrejeon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2018-07-21T07:53:58Z", "updated_at": "2018-07-21T12:46:16Z", "closed_at": "2018-07-21T08:27:07Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nWhen exporting to CBOR, in some cases the file is not properly formatted\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n```cpp\r\n    using json = nlohmann::basic_json<std::map, std::vector, std::string, bool, int32_t, uint32_t, float>;\r\n    using json_input_adaper = nlohmann::detail::input_adapter;\r\n    using json_output_adaper = nlohmann::detail::output_adapter<char>;\r\n\r\n    auto jsNew = json();\r\n    \r\n    auto array = json::array();\r\n    for (int i = 0; i < 1099; ++i) {\r\n        array.push_back(0.0f);\r\n    }\r\n    jsNew[\"t\"] = array;\r\n    \r\n    std::ofstream ofs(\"file.cbor\", std::ios_base::binary);\r\n    json::to_cbor(jsNew, json_output_adaper{ofs});\r\n    ofs.close();\r\n    \r\n    std::ifstream ifs(\"file.cbor\", std::ios_base::binary);\r\n    const auto load = json::from_cbor(json_input_adaper{ifs});\r\n```\r\n\r\n- What is the expected behavior?\r\nThe cbor file should load properly\r\n\r\n- And what is the actual behavior instead?\r\nJSON_THROW(parse_error::create(110, chars_read, \"unexpected end of input\"));\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nOSX, Xcode 9.4.1 clang\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nrelease\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n\r\nI think the problem comes from the CBOR export. My floating point type is float, not double.\r\nIn function write_cbor, writing a floating point value forces the type to be 0xFB, even for floats. This works for double, but should be 0xFA for floats.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1170", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1170/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1170/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1170/events", "html_url": "https://github.com/nlohmann/json/issues/1170", "id": 342839424, "node_id": "MDU6SXNzdWUzNDI4Mzk0MjQ=", "number": 1170, "title": "Custom Precision on floating point numbers", "user": {"login": "DarkZeros", "id": 6742754, "node_id": "MDQ6VXNlcjY3NDI3NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6742754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarkZeros", "html_url": "https://github.com/DarkZeros", "followers_url": "https://api.github.com/users/DarkZeros/followers", "following_url": "https://api.github.com/users/DarkZeros/following{/other_user}", "gists_url": "https://api.github.com/users/DarkZeros/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarkZeros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarkZeros/subscriptions", "organizations_url": "https://api.github.com/users/DarkZeros/orgs", "repos_url": "https://api.github.com/users/DarkZeros/repos", "events_url": "https://api.github.com/users/DarkZeros/events{/privacy}", "received_events_url": "https://api.github.com/users/DarkZeros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-19T18:25:51Z", "updated_at": "2018-07-19T18:33:54Z", "closed_at": null, "author_association": "NONE", "body": "When storing floating point values, exact representation is not possible.\r\nie: -0.2 -> -0.019999995827674866\r\n\r\nHowever, when precision is not a big issue this introduces huge about of bloat in the JSON file. So there should be an option to specify how many characters of precision. Like it is possible in std::ostringstream (std::ostreams), and in printf.\r\n\r\nCurrently these 2 methods would be desired:\r\n```\r\njson j;\r\nj[\"float\"] = -0.123;\r\nj.precision(2);\r\ncout << j;\r\n```\r\n```\r\njson j;\r\nj[\"float\"] = -0.123;\r\nj.precision(2);\r\nprintf(\"%s\", j.dump().c_str());\r\n```\r\n> Desired: {\"float\":-0.12}\r\n> Currently: {\"float\":-0.12300000339746475}\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1169", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1169/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1169/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1169/events", "html_url": "https://github.com/nlohmann/json/issues/1169", "id": 342815290, "node_id": "MDU6SXNzdWUzNDI4MTUyOTA=", "number": 1169, "title": "Roundtripping null to nullptr does not work", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2018-07-19T17:10:22Z", "updated_at": "2018-07-21T11:48:58Z", "closed_at": "2018-07-21T11:48:58Z", "author_association": "OWNER", "body": "- What is the issue you have?\r\n\r\nWe use the `nullptr` to denote JSON's `null` value.\r\n\r\n```cpp\r\njson j = nullptr;\r\n```\r\n\r\nBut the reverse does not work:\r\n\r\n```cpp\r\nstd::nullptr_t n = j;\r\n```\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n```cpp\r\n#include <iostream>\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    json j = nullptr;\r\n    std::nullptr_t n = j;\r\n    std::cout << std::boolalpha << (n == nullptr) << std::endl;\r\n}\r\n```\r\n\r\n- What is the expected behavior?\r\n\r\nOutput:\r\n\r\n```\r\ntrue\r\n```\r\n\r\n- And what is the actual behavior instead?\r\n\r\nError `could not find from_json() method in T's namespace`.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nXcode Version 10.0 beta (10L176w).\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n`develop`.\r\n\r\n* * *\r\n\r\nAdding the following code to the library solves the issue:\r\n\r\n```cpp\r\ntemplate<typename BasicJsonType>\r\nvoid from_json(const BasicJsonType& j, typename std::nullptr_t& n)\r\n{\r\n    if (JSON_UNLIKELY(not j.is_null()))\r\n    {\r\n        JSON_THROW(type_error::create(302, \"type must be null, but is \" + std::string(j.type_name())));\r\n    }\r\n    n = nullptr;\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1168", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1168/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1168/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1168/events", "html_url": "https://github.com/nlohmann/json/issues/1168", "id": 342701824, "node_id": "MDU6SXNzdWUzNDI3MDE4MjQ=", "number": 1168, "title": "MSVC fails to compile std::swap specialization for nlohmann::json", "user": {"login": "CodeSheep123", "id": 26485755, "node_id": "MDQ6VXNlcjI2NDg1NzU1", "avatar_url": "https://avatars3.githubusercontent.com/u/26485755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodeSheep123", "html_url": "https://github.com/CodeSheep123", "followers_url": "https://api.github.com/users/CodeSheep123/followers", "following_url": "https://api.github.com/users/CodeSheep123/following{/other_user}", "gists_url": "https://api.github.com/users/CodeSheep123/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodeSheep123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodeSheep123/subscriptions", "organizations_url": "https://api.github.com/users/CodeSheep123/orgs", "repos_url": "https://api.github.com/users/CodeSheep123/repos", "events_url": "https://api.github.com/users/CodeSheep123/events{/privacy}", "received_events_url": "https://api.github.com/users/CodeSheep123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-07-19T12:10:50Z", "updated_at": "2018-07-21T12:26:13Z", "closed_at": "2018-07-21T12:26:13Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nWhen compiling a project using the library, MSVC throws an error:\r\n`no instance of overloaded std::swap matches the specified type.`\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nAny program using the library and compiling with MSVC.\r\n- What is the expected behavior?\r\nIt should compile (as clang and gcc accept it), even though it is nonstandard.\r\n- And what is the actual behavior instead?\r\nIt fails to compile\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nMSVC 15.6 with C++17 enabled on Windows 10\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\ndevelop\r\n\r\nSuggested fix: It should be a specialization, not an overload. This way it compiles on MSVC, and still compiles with clang and gcc:\r\n\r\n```cpp\r\nnamespace std\r\n{\r\n    template<>\r\n    inline void swap<nlohmann::json>(nlohmann::json& first, nlohmann::json& second) noexcept(\r\n\t\tis_nothrow_move_constructible<nlohmann::json>::value &&\r\n\t\tis_nothrow_move_assignable<nlohmann::json>::value\r\n\t\t)\r\n        \r\n    {\r\n        first.swap(second);   \r\n    }\r\n\r\n}\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1167", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1167/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1167/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1167/events", "html_url": "https://github.com/nlohmann/json/issues/1167", "id": 342343644, "node_id": "MDU6SXNzdWUzNDIzNDM2NDQ=", "number": 1167, "title": "Unexpected behaviour of is_null - Part II", "user": {"login": "phyz777", "id": 19569239, "node_id": "MDQ6VXNlcjE5NTY5MjM5", "avatar_url": "https://avatars1.githubusercontent.com/u/19569239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phyz777", "html_url": "https://github.com/phyz777", "followers_url": "https://api.github.com/users/phyz777/followers", "following_url": "https://api.github.com/users/phyz777/following{/other_user}", "gists_url": "https://api.github.com/users/phyz777/gists{/gist_id}", "starred_url": "https://api.github.com/users/phyz777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phyz777/subscriptions", "organizations_url": "https://api.github.com/users/phyz777/orgs", "repos_url": "https://api.github.com/users/phyz777/repos", "events_url": "https://api.github.com/users/phyz777/events{/privacy}", "received_events_url": "https://api.github.com/users/phyz777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-18T14:05:16Z", "updated_at": "2018-07-18T15:12:19Z", "closed_at": "2018-07-18T15:12:19Z", "author_association": "NONE", "body": "The following code produces a core dump with this error message: ``Assertion `m_value.object->find(key) != m_value.object->end()' failed``\r\n\r\n```c++\r\nint main() {\r\n    nlohmann::json j;\r\n    j[\"subobject\"] = {{\"key1\", \"value1\"}, {\"key2\", \"value2\"}};\r\n\r\n    const nlohmann::json &subobject = j[\"subobject\"];\r\n\r\n    if (!subobject[\"key1\"].is_null()) {\r\n        std::cout << \"CHECK\" << std::endl;\r\n    } else {\r\n        std::cout << \"FAIL\" << std::endl;\r\n    }\r\n\r\n    if (!subobject[\"key3\"].is_null()) {\r\n        std::cout << \"CHECK\" << std::endl;\r\n    } else {\r\n        std::cout << \"FAIL\" << std::endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThis is because the check inserts `{\"key3\", null}` into the object. \r\n\r\nI'm not sure whether this behaviour is intentionally, it might at least become a pitfall for some, so I wanted to bring this to your attention. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1166", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1166/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1166/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1166/events", "html_url": "https://github.com/nlohmann/json/issues/1166", "id": 341994602, "node_id": "MDU6SXNzdWUzNDE5OTQ2MDI=", "number": 1166, "title": "Floating point imprecision", "user": {"login": "jmlemetayer", "id": 1167889, "node_id": "MDQ6VXNlcjExNjc4ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1167889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmlemetayer", "html_url": "https://github.com/jmlemetayer", "followers_url": "https://api.github.com/users/jmlemetayer/followers", "following_url": "https://api.github.com/users/jmlemetayer/following{/other_user}", "gists_url": "https://api.github.com/users/jmlemetayer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmlemetayer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmlemetayer/subscriptions", "organizations_url": "https://api.github.com/users/jmlemetayer/orgs", "repos_url": "https://api.github.com/users/jmlemetayer/repos", "events_url": "https://api.github.com/users/jmlemetayer/events{/privacy}", "received_events_url": "https://api.github.com/users/jmlemetayer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-17T16:30:44Z", "updated_at": "2018-07-18T14:23:45Z", "closed_at": "2018-07-17T19:48:34Z", "author_association": "NONE", "body": "Serializing floating point leads to imprecision.\r\n\r\nUsing this source code: \r\n``` cpp\r\n#include <iostream>\r\n\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main(void)\r\n{\r\n\tjson j;\r\n\r\n\tdouble a = 1.234;\r\n\tfloat b = 1.234;\r\n\tdouble c = b;\r\n\tfloat d = b;\r\n\r\n\tj[\"a\"] = a;\r\n\tj[\"b\"] = b;\r\n\tj[\"c\"] = c;\r\n\tj[\"d\"] = d;\r\n\r\n\tstd::cout << std::setw(4) << j << std::endl;\r\n\r\n\tstd::cout << \"a=\" << a <<std::endl;\r\n\tstd::cout << \"b=\" << b <<std::endl;\r\n\tstd::cout << \"c=\" << c <<std::endl;\r\n\tstd::cout << \"d=\" << d <<std::endl;\r\n\r\n\treturn 0;\r\n}\r\n\r\n```\r\n\r\nOuputs:\r\n```json\r\n{\r\n    \"a\": 1.234,\r\n    \"b\": 1.2339999675750732,\r\n    \"c\": 1.2339999675750732,\r\n    \"d\": 1.2339999675750732\r\n}\r\na=1.234\r\nb=1.234\r\nc=1.234\r\nd=1.234\r\n```\r\n\r\nI was excepted every number to be equal to `1.234` as with the `std::cout`.\r\n\r\nI am using g++ on Debian 9:\r\n```\r\ng++ (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1165", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1165/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1165/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1165/events", "html_url": "https://github.com/nlohmann/json/issues/1165", "id": 341894414, "node_id": "MDU6SXNzdWUzNDE4OTQ0MTQ=", "number": 1165, "title": "Combine json objects into one?", "user": {"login": "Merethiel", "id": 41124988, "node_id": "MDQ6VXNlcjQxMTI0OTg4", "avatar_url": "https://avatars2.githubusercontent.com/u/41124988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Merethiel", "html_url": "https://github.com/Merethiel", "followers_url": "https://api.github.com/users/Merethiel/followers", "following_url": "https://api.github.com/users/Merethiel/following{/other_user}", "gists_url": "https://api.github.com/users/Merethiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Merethiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Merethiel/subscriptions", "organizations_url": "https://api.github.com/users/Merethiel/orgs", "repos_url": "https://api.github.com/users/Merethiel/repos", "events_url": "https://api.github.com/users/Merethiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Merethiel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-07-17T12:18:13Z", "updated_at": "2018-07-17T16:45:03Z", "closed_at": "2018-07-17T15:25:32Z", "author_association": "NONE", "body": "The title might not correctly describe what I'm attempting but essentially I have one structure that I can convert to a json string but I want to append a list of objects also to be converted into json strings and send that all together as one packet.\r\n\r\nSomething like this.\r\n`json Packet;\r\n\r\nPacket[\"PacketType\"]  = config::packet::type::TYPE;\r\n\r\nPacket[\"ArrayOfObjects\"] = ArrayOfObjects;`\r\n\r\nOr make two separate json objects and combine them.\r\n\r\nAnother question I have is, does an array of objects have to be set at initialisation? "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1164", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1164/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1164/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1164/events", "html_url": "https://github.com/nlohmann/json/issues/1164", "id": 341390789, "node_id": "MDU6SXNzdWUzNDEzOTA3ODk=", "number": 1164, "title": "Is there any way to know if the object has changed?", "user": {"login": "Quetzalfir", "id": 10555705, "node_id": "MDQ6VXNlcjEwNTU1NzA1", "avatar_url": "https://avatars2.githubusercontent.com/u/10555705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quetzalfir", "html_url": "https://github.com/Quetzalfir", "followers_url": "https://api.github.com/users/Quetzalfir/followers", "following_url": "https://api.github.com/users/Quetzalfir/following{/other_user}", "gists_url": "https://api.github.com/users/Quetzalfir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quetzalfir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quetzalfir/subscriptions", "organizations_url": "https://api.github.com/users/Quetzalfir/orgs", "repos_url": "https://api.github.com/users/Quetzalfir/repos", "events_url": "https://api.github.com/users/Quetzalfir/events{/privacy}", "received_events_url": "https://api.github.com/users/Quetzalfir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-16T04:58:14Z", "updated_at": "2018-07-16T20:07:50Z", "closed_at": "2018-07-16T20:07:50Z", "author_association": "NONE", "body": "I would want to use the library to save the settings of my program, the user can modify this settings, but I don't think user change the configuration all the time, so I would want to know if there is a way to know if the object has changed in order to save work and don't have to save the whole object every time.\r\n\r\nA new field, the value of a field has changed, things like that."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1163", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1163/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1163/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1163/events", "html_url": "https://github.com/nlohmann/json/issues/1163", "id": 341259068, "node_id": "MDU6SXNzdWUzNDEyNTkwNjg=", "number": 1163, "title": "Value throws on null string", "user": {"login": "p-groarke", "id": 156883, "node_id": "MDQ6VXNlcjE1Njg4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/156883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p-groarke", "html_url": "https://github.com/p-groarke", "followers_url": "https://api.github.com/users/p-groarke/followers", "following_url": "https://api.github.com/users/p-groarke/following{/other_user}", "gists_url": "https://api.github.com/users/p-groarke/gists{/gist_id}", "starred_url": "https://api.github.com/users/p-groarke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p-groarke/subscriptions", "organizations_url": "https://api.github.com/users/p-groarke/orgs", "repos_url": "https://api.github.com/users/p-groarke/repos", "events_url": "https://api.github.com/users/p-groarke/events{/privacy}", "received_events_url": "https://api.github.com/users/p-groarke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-07-14T18:57:08Z", "updated_at": "2018-07-19T18:50:55Z", "closed_at": "2018-07-15T18:14:05Z", "author_association": "NONE", "body": "Take for example `{ \"key\" : null }`.\r\n\r\nUsing `value(\"key\", \"\")` on a null string throws `[json.exception.type_error.302] type must be string, but is null`.\r\n\r\nExpected behavior : Use default value."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1162", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1162/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1162/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1162/events", "html_url": "https://github.com/nlohmann/json/issues/1162", "id": 341207973, "node_id": "MDU6SXNzdWUzNDEyMDc5NzM=", "number": 1162, "title": "Weird template issue in large project", "user": {"login": "JasonDictos", "id": 5141450, "node_id": "MDQ6VXNlcjUxNDE0NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5141450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JasonDictos", "html_url": "https://github.com/JasonDictos", "followers_url": "https://api.github.com/users/JasonDictos/followers", "following_url": "https://api.github.com/users/JasonDictos/following{/other_user}", "gists_url": "https://api.github.com/users/JasonDictos/gists{/gist_id}", "starred_url": "https://api.github.com/users/JasonDictos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JasonDictos/subscriptions", "organizations_url": "https://api.github.com/users/JasonDictos/orgs", "repos_url": "https://api.github.com/users/JasonDictos/repos", "events_url": "https://api.github.com/users/JasonDictos/events{/privacy}", "received_events_url": "https://api.github.com/users/JasonDictos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-14T04:28:28Z", "updated_at": "2018-07-14T06:09:05Z", "closed_at": "2018-07-14T06:09:05Z", "author_association": "NONE", "body": "So I've been integrating this amazing json library into a closed source project for some time, recently when I started using std::variant a bit, things started to go south on gcc  8.1.0. The same code compiles and works fine on visual studio 2017 (latest as of this writing). \r\n\r\nThe basic idea is I have a variant with various structures defined in it, each with their own overload for to_json/from_json calls.\r\n\r\nWhen I try to use std::get<structure_name>(variant_member) I get an error:\r\n\r\n```\r\nerror: exception specification of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::basic_json(CompatibleType&&) [with CompatibleType = const signalwire::client::blade::Netcast::RouteRemove&; U = signalwire::client::blade::Netcast::RouteRemove; typename std::enable_if<nlohmann::detail::is_compatible_type<nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>, U>::value, int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer]\u2019 depends on itself\r\n```\r\n\r\nNote other uses with std::variant have worked in the past on same compiler/platform. \r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1161", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1161/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1161/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1161/events", "html_url": "https://github.com/nlohmann/json/issues/1161", "id": 340718826, "node_id": "MDU6SXNzdWUzNDA3MTg4MjY=", "number": 1161, "title": "_json returns a different result vs ::parse", "user": {"login": "stevenimle-honeywell", "id": 32882918, "node_id": "MDQ6VXNlcjMyODgyOTE4", "avatar_url": "https://avatars3.githubusercontent.com/u/32882918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenimle-honeywell", "html_url": "https://github.com/stevenimle-honeywell", "followers_url": "https://api.github.com/users/stevenimle-honeywell/followers", "following_url": "https://api.github.com/users/stevenimle-honeywell/following{/other_user}", "gists_url": "https://api.github.com/users/stevenimle-honeywell/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenimle-honeywell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenimle-honeywell/subscriptions", "organizations_url": "https://api.github.com/users/stevenimle-honeywell/orgs", "repos_url": "https://api.github.com/users/stevenimle-honeywell/repos", "events_url": "https://api.github.com/users/stevenimle-honeywell/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenimle-honeywell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-12T16:52:58Z", "updated_at": "2018-07-15T17:58:36Z", "closed_at": "2018-07-15T17:58:36Z", "author_association": "NONE", "body": "When using `const nlohmann::json j{R\"([...])\"_json};` a different result is returned compared to `const nlohmann::json j = nlohmann::json::parse(R\"([...])\");`\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nThis issue was only reproducible on Ubuntu 18.04 and it did not happen on macOS 10.13.3.\r\n\r\n```c++\r\nconst nlohmann::json body_json{R\"([\r\n    {\r\n        \"AuthMode\": \"\",\r\n        \"Certificate\": \"\",\r\n        \"CertificateType\": \"\",\r\n        \"Credential\": \"\",\r\n        \"CredentialType\": \"\",\r\n        \"Password\": \"password\",\r\n        \"Path\": \"{\\n  \\\"clientId\\\" : \\\"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\\\",\\n  \\\"service\\\" : \\\"rabbitmq\\\",\\n  \\\"enabled\\\" : true,\\n  \\\"protocol\\\" : \\\"amqp\\\",\\n  \\\"created\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"updated\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"connections\\\" : [ {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"exchange\\\",\\n    \\\"value\\\" : \\\"0\\\"\\n  }, {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"queue\\\",\\n    \\\"value\\\" : \\\"device\\\"\\n  } ]\\n}\",\r\n        \"ServerType\": \"RabbitMQ\",\r\n        \"UseExistingConnection\": true,\r\n        \"UserName\": \"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\"\r\n    }\r\n])\"_json};\r\n```\r\n```c++\r\nconst nlohmann::json body_json = nlohmann::json::parse(R\"([\r\n    {\r\n        \"AuthMode\": \"\",\r\n        \"Certificate\": \"\",\r\n        \"CertificateType\": \"\",\r\n        \"Credential\": \"\",\r\n        \"CredentialType\": \"\",\r\n        \"Password\": \"password\",\r\n        \"Path\": \"{\\n  \\\"clientId\\\" : \\\"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\\\",\\n  \\\"service\\\" : \\\"rabbitmq\\\",\\n  \\\"enabled\\\" : true,\\n  \\\"protocol\\\" : \\\"amqp\\\",\\n  \\\"created\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"updated\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"connections\\\" : [ {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"exchange\\\",\\n    \\\"value\\\" : \\\"0\\\"\\n  }, {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"queue\\\",\\n    \\\"value\\\" : \\\"device\\\"\\n  } ]\\n}\",\r\n        \"ServerType\": \"RabbitMQ\",\r\n        \"UseExistingConnection\": true,\r\n        \"UserName\": \"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\"\r\n    }\r\n])\");\r\n```\r\n\r\nBoth of these parse correctly in macOS to the following value:\r\n```json\r\n[\r\n  {\r\n    \"AuthMode\": \"\",\r\n    \"Certificate\": \"\",\r\n    \"CertificateType\": \"\",\r\n    \"Credential\": \"\",\r\n    \"CredentialType\": \"\",\r\n    \"Password\": \"password\",\r\n    \"Path\": \"{\\n  \\\"clientId\\\" : \\\"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\\\",\\n  \\\"service\\\" : \\\"rabbitmq\\\",\\n  \\\"enabled\\\" : true,\\n  \\\"protocol\\\" : \\\"amqp\\\",\\n  \\\"created\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"updated\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"connections\\\" : [ {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"exchange\\\",\\n    \\\"value\\\" : \\\"0\\\"\\n  }, {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"queue\\\",\\n    \\\"value\\\" : \\\"device\\\"\\n  } ]\\n}\",\r\n    \"ServerType\": \"RabbitMQ\",\r\n    \"UseExistingConnection\": true,\r\n    \"UserName\": \"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\"\r\n  }\r\n]\r\n```\r\n\r\nThe example using ::parse correctly parses to the above value in Ubuntu 18.04, however, the _json implementation parses to the following:\r\n```json\r\n[\r\n  [\r\n    {\r\n      \"AuthMode\": \"\",\r\n      \"Certificate\": \"\",\r\n      \"CertificateType\": \"\",\r\n      \"Credential\": \"\",\r\n      \"CredentialType\": \"\",\r\n      \"Password\": \"password\",\r\n      \"Path\": \"{\\n  \\\"clientId\\\" : \\\"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\\\",\\n  \\\"service\\\" : \\\"rabbitmq\\\",\\n  \\\"enabled\\\" : true,\\n  \\\"protocol\\\" : \\\"amqp\\\",\\n  \\\"created\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"updated\\\" : \\\"2018-06-14T17:44:05Z\\\",\\n  \\\"connections\\\" : [ {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"exchange\\\",\\n    \\\"value\\\" : \\\"0\\\"\\n  }, {\\n    \\\"host\\\" : \\\"127.0.0.1\\\",\\n    \\\"port\\\" : 5672,\\n    \\\"virtualHost\\\" : \\\"/\\\",\\n    \\\"type\\\" : \\\"queue\\\",\\n    \\\"value\\\" : \\\"device\\\"\\n  } ]\\n}\",\r\n      \"ServerType\": \"RabbitMQ\",\r\n      \"UseExistingConnection\": true,\r\n      \"UserName\": \"9dfeaea7-7d3f-4ce9-b4ac-e17badddf2ba\"\r\n    }\r\n  ]\r\n]\r\n```\r\n\r\nCompiler Version:\r\ng++ (Ubuntu 7.3.0-16ubuntu3) 7.3.0\r\nCurrently not listed as supported.\r\n\r\nLibrary Version: 3.1.2 (release)\r\n\r\n**Testing**\r\nDockerfile used to run the unit tests:\r\n```Dockerfile\r\nFROM ubuntu:18.04\r\n\r\nENV HOME /root\r\n\r\nENV DEBIAN_FRONTEND noninteractive\r\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\r\n\r\nRUN apt-get update\r\nRUN apt-get install -y software-properties-common cmake git build-essential curl libcurl4-openssl-dev libssl-dev uuid-dev zlib1g-dev librabbitmq-dev\r\n\r\nRUN git clone -b v3.1.2 https://github.com/nlohmann/json.git\r\n\r\nWORKDIR json/build\r\n\r\nRUN cmake ..\r\nRUN cmake --build .\r\n\r\nENTRYPOINT ctest --output-on-failure\r\n```\r\n\r\n```\r\nTest project /json/build\r\n      Start  1: test-algorithms_default\r\n 1/78 Test  #1: test-algorithms_default .............   Passed    0.01 sec\r\n      Start  2: test-algorithms_all\r\n 2/78 Test  #2: test-algorithms_all .................   Passed    0.00 sec\r\n      Start  3: test-allocator_default\r\n 3/78 Test  #3: test-allocator_default ..............   Passed    0.00 sec\r\n      Start  4: test-allocator_all\r\n 4/78 Test  #4: test-allocator_all ..................   Passed    0.00 sec\r\n      Start  5: test-alt-string_default\r\n 5/78 Test  #5: test-alt-string_default .............   Passed    0.00 sec\r\n      Start  6: test-alt-string_all\r\n 6/78 Test  #6: test-alt-string_all .................   Passed    0.00 sec\r\n      Start  7: test-capacity_default\r\n 7/78 Test  #7: test-capacity_default ...............   Passed    0.01 sec\r\n      Start  8: test-capacity_all\r\n 8/78 Test  #8: test-capacity_all ...................   Passed    0.01 sec\r\n      Start  9: test-cbor_default\r\n 9/78 Test  #9: test-cbor_default ...................   Passed    1.61 sec\r\n      Start 10: test-cbor_all\r\n10/78 Test #10: test-cbor_all .......................   Passed   24.93 sec\r\n      Start 11: test-class_const_iterator_default\r\n11/78 Test #11: test-class_const_iterator_default ...   Passed    0.00 sec\r\n      Start 12: test-class_const_iterator_all\r\n12/78 Test #12: test-class_const_iterator_all .......   Passed    0.00 sec\r\n      Start 13: test-class_iterator_default\r\n13/78 Test #13: test-class_iterator_default .........   Passed    0.00 sec\r\n      Start 14: test-class_iterator_all\r\n14/78 Test #14: test-class_iterator_all .............   Passed    0.00 sec\r\n      Start 15: test-class_lexer_default\r\n15/78 Test #15: test-class_lexer_default ............   Passed    0.00 sec\r\n      Start 16: test-class_lexer_all\r\n16/78 Test #16: test-class_lexer_all ................   Passed    0.00 sec\r\n      Start 17: test-class_parser_default\r\n17/78 Test #17: test-class_parser_default ...........   Passed    0.08 sec\r\n      Start 18: test-class_parser_all\r\n18/78 Test #18: test-class_parser_all ...............   Passed    0.08 sec\r\n      Start 19: test-comparison_default\r\n19/78 Test #19: test-comparison_default .............   Passed    0.01 sec\r\n      Start 20: test-comparison_all\r\n20/78 Test #20: test-comparison_all .................   Passed    0.01 sec\r\n      Start 21: test-concepts_default\r\n21/78 Test #21: test-concepts_default ...............   Passed    0.00 sec\r\n      Start 22: test-concepts_all\r\n22/78 Test #22: test-concepts_all ...................   Passed    0.00 sec\r\n      Start 23: test-constructor1_default\r\n23/78 Test #23: test-constructor1_default ...........   Passed    0.04 sec\r\n      Start 24: test-constructor1_all\r\n24/78 Test #24: test-constructor1_all ...............   Passed    0.03 sec\r\n      Start 25: test-constructor2_default\r\n25/78 Test #25: test-constructor2_default ...........   Passed    0.00 sec\r\n      Start 26: test-constructor2_all\r\n26/78 Test #26: test-constructor2_all ...............   Passed    0.00 sec\r\n      Start 27: test-convenience_default\r\n27/78 Test #27: test-convenience_default ............   Passed    0.00 sec\r\n      Start 28: test-convenience_all\r\n28/78 Test #28: test-convenience_all ................   Passed    0.00 sec\r\n      Start 29: test-conversions_default\r\n29/78 Test #29: test-conversions_default ............   Passed    0.03 sec\r\n      Start 30: test-conversions_all\r\n30/78 Test #30: test-conversions_all ................   Passed    0.03 sec\r\n      Start 31: test-deserialization_default\r\n31/78 Test #31: test-deserialization_default ........   Passed    0.01 sec\r\n      Start 32: test-deserialization_all\r\n32/78 Test #32: test-deserialization_all ............   Passed    0.01 sec\r\n      Start 33: test-element_access1_default\r\n33/78 Test #33: test-element_access1_default ........   Passed    0.01 sec\r\n      Start 34: test-element_access1_all\r\n34/78 Test #34: test-element_access1_all ............   Passed    0.01 sec\r\n      Start 35: test-element_access2_default\r\n35/78 Test #35: test-element_access2_default ........   Passed    0.02 sec\r\n      Start 36: test-element_access2_all\r\n36/78 Test #36: test-element_access2_all ............   Passed    0.02 sec\r\n      Start 37: test-inspection_default\r\n37/78 Test #37: test-inspection_default .............   Passed    4.69 sec\r\n      Start 38: test-inspection_all\r\n38/78 Test #38: test-inspection_all .................   Passed    4.65 sec\r\n      Start 39: test-items_default\r\n39/78 Test #39: test-items_default ..................   Passed    0.01 sec\r\n      Start 40: test-items_all\r\n40/78 Test #40: test-items_all ......................   Passed    0.01 sec\r\n      Start 41: test-iterators1_default\r\n41/78 Test #41: test-iterators1_default .............   Passed    0.02 sec\r\n      Start 42: test-iterators1_all\r\n42/78 Test #42: test-iterators1_all .................   Passed    0.02 sec\r\n      Start 43: test-iterators2_default\r\n43/78 Test #43: test-iterators2_default .............   Passed    0.04 sec\r\n      Start 44: test-iterators2_all\r\n44/78 Test #44: test-iterators2_all .................   Passed    0.03 sec\r\n      Start 45: test-json_patch_default\r\n45/78 Test #45: test-json_patch_default .............   Passed    0.02 sec\r\n      Start 46: test-json_patch_all\r\n46/78 Test #46: test-json_patch_all .................   Passed    0.02 sec\r\n      Start 47: test-json_pointer_default\r\n47/78 Test #47: test-json_pointer_default ...........   Passed    0.00 sec\r\n      Start 48: test-json_pointer_all\r\n48/78 Test #48: test-json_pointer_all ...............   Passed    0.00 sec\r\n      Start 49: test-merge_patch_default\r\n49/78 Test #49: test-merge_patch_default ............   Passed    0.00 sec\r\n      Start 50: test-merge_patch_all\r\n50/78 Test #50: test-merge_patch_all ................   Passed    0.00 sec\r\n      Start 51: test-meta_default\r\n51/78 Test #51: test-meta_default ...................   Passed    0.00 sec\r\n      Start 52: test-meta_all\r\n52/78 Test #52: test-meta_all .......................   Passed    0.00 sec\r\n      Start 53: test-modifiers_default\r\n53/78 Test #53: test-modifiers_default ..............   Passed    0.01 sec\r\n      Start 54: test-modifiers_all\r\n54/78 Test #54: test-modifiers_all ..................   Passed    0.01 sec\r\n      Start 55: test-msgpack_default\r\n55/78 Test #55: test-msgpack_default ................   Passed    1.47 sec\r\n      Start 56: test-msgpack_all\r\n56/78 Test #56: test-msgpack_all ....................   Passed   25.01 sec\r\n      Start 57: test-noexcept_default\r\n57/78 Test #57: test-noexcept_default ...............   Passed    0.00 sec\r\n      Start 58: test-noexcept_all\r\n58/78 Test #58: test-noexcept_all ...................   Passed    0.00 sec\r\n      Start 59: test-pointer_access_default\r\n59/78 Test #59: test-pointer_access_default .........   Passed    0.00 sec\r\n      Start 60: test-pointer_access_all\r\n60/78 Test #60: test-pointer_access_all .............   Passed    0.00 sec\r\n      Start 61: test-readme_default\r\n61/78 Test #61: test-readme_default .................   Passed    0.00 sec\r\n      Start 62: test-readme_all\r\n62/78 Test #62: test-readme_all .....................   Passed    0.00 sec\r\n      Start 63: test-reference_access_default\r\n63/78 Test #63: test-reference_access_default .......   Passed    0.00 sec\r\n      Start 64: test-reference_access_all\r\n64/78 Test #64: test-reference_access_all ...........   Passed    0.00 sec\r\n      Start 65: test-regression_default\r\n65/78 Test #65: test-regression_default .............   Passed    4.65 sec\r\n      Start 66: test-regression_all\r\n66/78 Test #66: test-regression_all .................   Passed    4.78 sec\r\n      Start 67: test-serialization_default\r\n67/78 Test #67: test-serialization_default ..........   Passed    0.00 sec\r\n      Start 68: test-serialization_all\r\n68/78 Test #68: test-serialization_all ..............   Passed    0.00 sec\r\n      Start 69: test-testsuites_default\r\n69/78 Test #69: test-testsuites_default .............   Passed    0.10 sec\r\n      Start 70: test-testsuites_all\r\n70/78 Test #70: test-testsuites_all .................   Passed    0.05 sec\r\n      Start 71: test-to_chars_default\r\n71/78 Test #71: test-to_chars_default ...............   Passed    0.00 sec\r\n      Start 72: test-to_chars_all\r\n72/78 Test #72: test-to_chars_all ...................   Passed    0.00 sec\r\n      Start 73: test-ubjson_default\r\n73/78 Test #73: test-ubjson_default .................   Passed    0.80 sec\r\n      Start 74: test-ubjson_all\r\n74/78 Test #74: test-ubjson_all .....................   Passed    9.23 sec\r\n      Start 75: test-udt_default\r\n75/78 Test #75: test-udt_default ....................   Passed    0.00 sec\r\n      Start 76: test-udt_all\r\n76/78 Test #76: test-udt_all ........................   Passed    0.00 sec\r\n      Start 77: test-unicode_default\r\n77/78 Test #77: test-unicode_default ................   Passed    0.01 sec\r\n      Start 78: test-unicode_all\r\n78/78 Test #78: test-unicode_all ....................   Passed  145.24 sec\r\n\r\n100% tests passed, 0 tests failed out of 78\r\n\r\nLabel Time Summary:\r\nall        = 214.25 sec*proc (39 tests)\r\ndefault    =  13.70 sec*proc (39 tests)\r\n\r\nTotal Test time (real) = 227.99 sec\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1160", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1160/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1160/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1160/events", "html_url": "https://github.com/nlohmann/json/issues/1160", "id": 340405463, "node_id": "MDU6SXNzdWUzNDA0MDU0NjM=", "number": 1160, "title": "Showing difference between two json objects", "user": {"login": "arynaq", "id": 2905228, "node_id": "MDQ6VXNlcjI5MDUyMjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2905228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arynaq", "html_url": "https://github.com/arynaq", "followers_url": "https://api.github.com/users/arynaq/followers", "following_url": "https://api.github.com/users/arynaq/following{/other_user}", "gists_url": "https://api.github.com/users/arynaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/arynaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arynaq/subscriptions", "organizations_url": "https://api.github.com/users/arynaq/orgs", "repos_url": "https://api.github.com/users/arynaq/repos", "events_url": "https://api.github.com/users/arynaq/events{/privacy}", "received_events_url": "https://api.github.com/users/arynaq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-11T21:07:40Z", "updated_at": "2018-07-12T19:28:57Z", "closed_at": "2018-07-12T19:28:57Z", "author_association": "NONE", "body": "I cannot figure out how I would go about doing this. \r\n\r\nI looked into the patch function and thought about applying it to a default state of the object but suppose a key is set to boolean true while the default is false but the two objects don't differ in this key then applying the patch to the default and looking at the default would indicate this value has changed to false.\r\n\r\nEssentially I just want a diff with minimal extra tooling. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1159", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1159/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1159/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1159/events", "html_url": "https://github.com/nlohmann/json/issues/1159", "id": 340264973, "node_id": "MDU6SXNzdWUzNDAyNjQ5NzM=", "number": 1159, "title": "no instance of overloaded function \"std::swap\" matches the specified type\t", "user": {"login": "jefferson-1", "id": 6462449, "node_id": "MDQ6VXNlcjY0NjI0NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6462449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jefferson-1", "html_url": "https://github.com/jefferson-1", "followers_url": "https://api.github.com/users/jefferson-1/followers", "following_url": "https://api.github.com/users/jefferson-1/following{/other_user}", "gists_url": "https://api.github.com/users/jefferson-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jefferson-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jefferson-1/subscriptions", "organizations_url": "https://api.github.com/users/jefferson-1/orgs", "repos_url": "https://api.github.com/users/jefferson-1/repos", "events_url": "https://api.github.com/users/jefferson-1/events{/privacy}", "received_events_url": "https://api.github.com/users/jefferson-1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-11T14:22:32Z", "updated_at": "2018-07-11T15:27:22Z", "closed_at": "2018-07-11T14:45:16Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nCannot compile in Visual Studio 2017 after including json.hpp\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nThis line - 18474\tinline void swap(nlohmann::json& j1, generates the following error\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError (active)\tE0493\tno instance of overloaded function \"std::swap\" matches the specified type\t\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nTried 3.01 and 3.12 develop\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nI'm able to cmake the project but unable to compile after including it... I've tried:\r\nISO C++ latest draft and ISO C++ 17. I'm not able to go to any earlier versions due to dependencies. \r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1158", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1158/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1158/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1158/events", "html_url": "https://github.com/nlohmann/json/issues/1158", "id": 339848415, "node_id": "MDU6SXNzdWUzMzk4NDg0MTU=", "number": 1158, "title": "Can we have a json_view class like std::string_view?", "user": {"login": "qduyang", "id": 5174044, "node_id": "MDQ6VXNlcjUxNzQwNDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5174044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qduyang", "html_url": "https://github.com/qduyang", "followers_url": "https://api.github.com/users/qduyang/followers", "following_url": "https://api.github.com/users/qduyang/following{/other_user}", "gists_url": "https://api.github.com/users/qduyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/qduyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qduyang/subscriptions", "organizations_url": "https://api.github.com/users/qduyang/orgs", "repos_url": "https://api.github.com/users/qduyang/repos", "events_url": "https://api.github.com/users/qduyang/events{/privacy}", "received_events_url": "https://api.github.com/users/qduyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-10T13:42:49Z", "updated_at": "2018-07-21T12:22:59Z", "closed_at": null, "author_association": "NONE", "body": "- Describe the feature in as much detail as possible.\r\nAs copy a json would have many allocations, it would nice to have a view class like std::string_view for performance's sake.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1157", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1157/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1157/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1157/events", "html_url": "https://github.com/nlohmann/json/issues/1157", "id": 339439123, "node_id": "MDU6SXNzdWUzMzk0MzkxMjM=", "number": 1157, "title": "resize(...)?", "user": {"login": "phyz777", "id": 19569239, "node_id": "MDQ6VXNlcjE5NTY5MjM5", "avatar_url": "https://avatars1.githubusercontent.com/u/19569239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phyz777", "html_url": "https://github.com/phyz777", "followers_url": "https://api.github.com/users/phyz777/followers", "following_url": "https://api.github.com/users/phyz777/following{/other_user}", "gists_url": "https://api.github.com/users/phyz777/gists{/gist_id}", "starred_url": "https://api.github.com/users/phyz777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phyz777/subscriptions", "organizations_url": "https://api.github.com/users/phyz777/orgs", "repos_url": "https://api.github.com/users/phyz777/repos", "events_url": "https://api.github.com/users/phyz777/events{/privacy}", "received_events_url": "https://api.github.com/users/phyz777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-09T12:59:48Z", "updated_at": "2018-07-13T12:22:19Z", "closed_at": "2018-07-13T12:22:19Z", "author_association": "NONE", "body": "Hello, \r\n\r\nis there a resize() function for arrays, analogous to the resize function of std::vector<T>? "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1155", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1155/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1155/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1155/events", "html_url": "https://github.com/nlohmann/json/issues/1155", "id": 338365027, "node_id": "MDU6SXNzdWUzMzgzNjUwMjc=", "number": 1155, "title": "Issue with struct nested in class' to_json", "user": {"login": "Qbz23", "id": 10473194, "node_id": "MDQ6VXNlcjEwNDczMTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/10473194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qbz23", "html_url": "https://github.com/Qbz23", "followers_url": "https://api.github.com/users/Qbz23/followers", "following_url": "https://api.github.com/users/Qbz23/following{/other_user}", "gists_url": "https://api.github.com/users/Qbz23/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qbz23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qbz23/subscriptions", "organizations_url": "https://api.github.com/users/Qbz23/orgs", "repos_url": "https://api.github.com/users/Qbz23/repos", "events_url": "https://api.github.com/users/Qbz23/events{/privacy}", "received_events_url": "https://api.github.com/users/Qbz23/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-04T19:52:28Z", "updated_at": "2018-07-04T20:07:37Z", "closed_at": "2018-07-04T20:01:40Z", "author_association": "NONE", "body": "I'm getting the \"could not find to_json() in T's namespace\" error when trying to use a struct nested in a class. I figure I'm most likely just missing something...\r\n\r\nThe following does not work...\r\n\r\n\r\n    class Tile : public MouseReactive\r\n    {\r\n    public:\r\n\r\n        struct TileData\r\n        {\r\n          std::string name;\r\n          uint32_t redStart;\r\n          uint32_t blueStart;\r\n          uint32_t redGain;\r\n          uint32_t blueGain;\r\n          uint32_t nutrientMax;\r\n          bool impassable;\r\n          std::string tex;\r\n        };\r\n        static void to_json(json& j, const TileData& td);\r\n    };\r\n\r\n    void Tile::to_json(json& j, const TileData& td)\r\n    {\r\n      j = json{ {\"name\",         td.name},\r\n                {\"redStart\",     td.redStart},\r\n                {\"blueStart\",    td.blueGain},\r\n                {\"redGain\",      td.redGain},\r\n                {\"blueGain\",     td.blueGain},\r\n                {\"nutrientMax\",  td.nutrientMax},\r\n                {\"impassable\",   td.impassable},\r\n                {\"tex\",          td.tex}};\r\n    }\r\n\r\nBut this similar example does. Not sure what I'm missing for classes \r\n\r\n    namespace TestNs\r\n    {\r\n      struct TestType\r\n      {\r\n        std::string name;\r\n        uint32_t redStart;\r\n        uint32_t blueStart;\r\n        uint32_t redGain;\r\n        uint32_t blueGain;\r\n        uint32_t nutrientMax;\r\n        bool impassable;\r\n        std::string tex;\r\n      };\r\n      void to_json(json& j, const TestNs::TestType& tt);\r\n    };\r\n\r\n    namespace TestNs\r\n    {\r\n      void to_json(json& j, const TestNs::TestType& tt)\r\n      {\r\n        j = json{ { \"name\",         tt.name },\r\n                  { \"redStart\",     tt.redStart },\r\n                  { \"blueStart\",    tt.blueGain },\r\n                  { \"redGain\",      tt.redGain },\r\n                  { \"blueGain\",     tt.blueGain },\r\n                  { \"nutrientMax\",  tt.nutrientMax },\r\n                  { \"impassable\",   tt.impassable },\r\n                  { \"tex\",          tt.tex } };\r\n      }\r\n    }\r\n\r\nAnd I'm just testing it with \r\n\r\n      TestNs::TestType tt;\r\n      json j = tt;\r\n      Tile::TileData td;\r\n      json j2 = td;"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1154", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1154/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1154/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1154/events", "html_url": "https://github.com/nlohmann/json/issues/1154", "id": 338327557, "node_id": "MDU6SXNzdWUzMzgzMjc1NTc=", "number": 1154, "title": "Deserialize std::map with std::nan", "user": {"login": "giumas", "id": 2849257, "node_id": "MDQ6VXNlcjI4NDkyNTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2849257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giumas", "html_url": "https://github.com/giumas", "followers_url": "https://api.github.com/users/giumas/followers", "following_url": "https://api.github.com/users/giumas/following{/other_user}", "gists_url": "https://api.github.com/users/giumas/gists{/gist_id}", "starred_url": "https://api.github.com/users/giumas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giumas/subscriptions", "organizations_url": "https://api.github.com/users/giumas/orgs", "repos_url": "https://api.github.com/users/giumas/repos", "events_url": "https://api.github.com/users/giumas/events{/privacy}", "received_events_url": "https://api.github.com/users/giumas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-07-04T16:07:28Z", "updated_at": "2018-07-13T12:22:20Z", "closed_at": "2018-07-13T12:22:19Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nUsing the 'develop' branch, I get: `[json.exception.type_error.302] type must be number, but is null` when I deserialize an `std::map` with `std::nan` as pair value.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n```\r\n#include <iostream>\r\n#include <iomanip>\r\n#include <map>\r\n\r\n#include \"rawdata/ext/json/json.hpp\"\r\n#include <fstream>\r\n\r\nusing namespace std;\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n\t// a map with a nan-value pair\r\n\tmap<int64_t, double> test_map;\r\n\t//test_map[123] = 1.2342;\r\n\ttest_map[434] = std::nan(\"\");\r\n\ttest_map[999] = 243.12;\r\n\r\n\t// storage file\r\n\tstring file_path = \"test.json\";\r\n\r\n\t// serialization\r\n\tjson j;\r\n\tj[\"data\"] = test_map;\r\n\tstring json_str = j.dump(3);\r\n\tcout << \"json str: \" << json_str << endl;\r\n\t// write to disk\r\n\tstd::ofstream ofs( file_path );\r\n\tif(!ofs)\r\n\t{\r\n\t\tcerr << \"issue in opening \" << file_path << endl;\r\n\t\texit( -1 );\r\n\t}\r\n\tofs << json_str;\r\n\tofs.close();\r\n\r\n\t// de-serialization\r\n\tstd::ifstream ifs( file_path );\r\n\tif(!ifs)\r\n\t{\r\n\t\tcerr << \"issue in opening \" << file_path << endl;\r\n\t\texit( -1 );\r\n\t}\r\n\tjson j2;\r\n\tifs >> j2;\r\n\tjson_str = j2.dump();\r\n\tifs.close();\r\n\ttry\r\n\t{\r\n\t\tmap<int64_t, double> reloaded_map = j2[\"data\"].get<std::map<int64_t, double>>();\r\n\t\tfor(const auto& pair: reloaded_map)\r\n\t\t{\r\n\t\t\tcout << \"- \" << pair.first << \": \" << pair.second << endl;\r\n\t\t}\r\n\t}\r\n\tcatch(const std::exception& e)\r\n\t{\r\n\t\tcerr << \"issue in parsing json: \" << e.what() << endl;\r\n\t}\r\n}\r\n```\r\n\r\n- What is the expected behavior?\r\nNo throwing an exception.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nVisual Studio 2015\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n`develop` branch.\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1152", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1152/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1152/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1152/events", "html_url": "https://github.com/nlohmann/json/issues/1152", "id": 337834173, "node_id": "MDU6SXNzdWUzMzc4MzQxNzM=", "number": 1152, "title": "improve error handling", "user": {"login": "maddanio", "id": 366903, "node_id": "MDQ6VXNlcjM2NjkwMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/366903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maddanio", "html_url": "https://github.com/maddanio", "followers_url": "https://api.github.com/users/maddanio/followers", "following_url": "https://api.github.com/users/maddanio/following{/other_user}", "gists_url": "https://api.github.com/users/maddanio/gists{/gist_id}", "starred_url": "https://api.github.com/users/maddanio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maddanio/subscriptions", "organizations_url": "https://api.github.com/users/maddanio/orgs", "repos_url": "https://api.github.com/users/maddanio/repos", "events_url": "https://api.github.com/users/maddanio/events{/privacy}", "received_events_url": "https://api.github.com/users/maddanio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-07-03T10:15:54Z", "updated_at": "2018-07-25T14:24:59Z", "closed_at": null, "author_association": "NONE", "body": "we commonly get quite horrible errors from the parser or when converting to user types. also error handling is not even mentioned in the docs.\r\n\r\nI would propose making error handling a first class citizen, report lines/columns, give more detailed info in conversion to user types, etc.\r\n\r\nI am willing to help, as this library is currently quite integral to our codebase"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1149", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1149/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1149/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1149/events", "html_url": "https://github.com/nlohmann/json/issues/1149", "id": 336195424, "node_id": "MDU6SXNzdWUzMzYxOTU0MjQ=", "number": 1149, "title": "Parse throwing errors", "user": {"login": "AistisT", "id": 14581924, "node_id": "MDQ6VXNlcjE0NTgxOTI0", "avatar_url": "https://avatars3.githubusercontent.com/u/14581924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AistisT", "html_url": "https://github.com/AistisT", "followers_url": "https://api.github.com/users/AistisT/followers", "following_url": "https://api.github.com/users/AistisT/following{/other_user}", "gists_url": "https://api.github.com/users/AistisT/gists{/gist_id}", "starred_url": "https://api.github.com/users/AistisT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AistisT/subscriptions", "organizations_url": "https://api.github.com/users/AistisT/orgs", "repos_url": "https://api.github.com/users/AistisT/repos", "events_url": "https://api.github.com/users/AistisT/events{/privacy}", "received_events_url": "https://api.github.com/users/AistisT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-27T11:49:04Z", "updated_at": "2018-06-28T20:41:21Z", "closed_at": "2018-06-28T20:41:21Z", "author_association": "NONE", "body": "So parse seem to work fine, if I load dll from my tester project, everything works fine, if I load exactly same dll with same data through windows services I get lots of errors  like \"Unhandled exception at 0x75000132 in xxxxxxx.exe: Microsoft C++ exception: nlohmann::detail::parse_error at memory location 0x0293A868. occurred\"\r\n\r\n\r\nThis is triggered by \r\n```\r\nbool parse_error(std::size_t, const std::string&,\r\n\t\t\t\tconst detail::exception& ex) override\r\n\t\t\t{\r\n\t\t\t\terrored = true;\r\n\t\t\t\tif (allow_exceptions)\r\n\t\t\t\t{\r\n\t\t\t\t\t// determine the proper exception type from the id\r\n\t\t\t\t\tswitch ((ex.id / 100) % 100)\r\n\t\t\t\t\t{\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tJSON_THROW(*reinterpret_cast<const detail::parse_error*>(&ex));\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tJSON_THROW(*reinterpret_cast<const detail::invalid_iterator*>(&ex));  // LCOV_EXCL_LINE\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tJSON_THROW(*reinterpret_cast<const detail::type_error*>(&ex));  // LCOV_EXCL_LINE\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tJSON_THROW(*reinterpret_cast<const detail::out_of_range*>(&ex));\r\n\t\t\t\t\tcase 5:\r\n\t\t\t\t\t\tJSON_THROW(*reinterpret_cast<const detail::other_error*>(&ex));  // LCOV_EXCL_LINE\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tassert(false);  // LCOV_EXCL_LINE\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n```\r\n\r\nat line 3624 of json.hpp, I am using hardcoded data defined right in dll at this moment, to rule out any memory issues, but it's not helping. It just dies when it's trying to parse std::wstring.\r\n\r\n```\r\n\tstatic int SendToAgent(std::wstring & data, LPCWSTR LogType)\r\n\t{\r\n\t\t\r\n\t\tif (mqttHandlerGlobal.IsAgentOnline())\r\n\t\t{\t\r\n\t\t\t//_asm {int 3}\r\n\t\t\tauto string = std::wstring(LogType);\r\n\t\t\tauto datatype = nlohmann::json::parse(string);\r\n\t\t\tauto parsedData = nlohmann::json::parse(data);\r\n\t\t\tnlohmann::json messageJson =\r\n\t\t\t{\r\n\t\t\t\t{ \"DataType\", datatype },\r\n\t\t\t\t{ \"Data\", parsedData },\r\n\t\t\t};\r\n\t\t\tprintf(\"Message Sent\\n\");\r\n\t\t\tauto message = messageJson.dump();\r\n\t\t\treturn mqttHandlerGlobal.MqttSend(message, *mqttHandlerGlobal.GetTopic());\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n```\r\n\r\ncalled by \r\n```\r\n\r\nstd::wstring test = L\"Test\";\r\nSendToAgent(test, L\"TestType\");\r\n```\r\nI've really got no clue what's causing it, apart that DLL with parsing code is being loaded by a different project that runs under windows service its exactly the same."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1148", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1148/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1148/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1148/events", "html_url": "https://github.com/nlohmann/json/issues/1148", "id": 336047903, "node_id": "MDU6SXNzdWUzMzYwNDc5MDM=", "number": 1148, "title": "cocoapod integration", "user": {"login": "graph", "id": 1088059, "node_id": "MDQ6VXNlcjEwODgwNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1088059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graph", "html_url": "https://github.com/graph", "followers_url": "https://api.github.com/users/graph/followers", "following_url": "https://api.github.com/users/graph/following{/other_user}", "gists_url": "https://api.github.com/users/graph/gists{/gist_id}", "starred_url": "https://api.github.com/users/graph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graph/subscriptions", "organizations_url": "https://api.github.com/users/graph/orgs", "repos_url": "https://api.github.com/users/graph/repos", "events_url": "https://api.github.com/users/graph/events{/privacy}", "received_events_url": "https://api.github.com/users/graph/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 11, "created_at": "2018-06-27T01:42:34Z", "updated_at": "2018-07-05T19:19:07Z", "closed_at": "2018-07-05T19:19:07Z", "author_association": "NONE", "body": "Is this ok? If I do it can I push to this repo? I want to be able to more easily use this library on ios. Perhaps under the pod `njson`.\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1147", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1147/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1147/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1147/events", "html_url": "https://github.com/nlohmann/json/issues/1147", "id": 335760089, "node_id": "MDU6SXNzdWUzMzU3NjAwODk=", "number": 1147, "title": "wstring parsing", "user": {"login": "AistisT", "id": 14581924, "node_id": "MDQ6VXNlcjE0NTgxOTI0", "avatar_url": "https://avatars3.githubusercontent.com/u/14581924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AistisT", "html_url": "https://github.com/AistisT", "followers_url": "https://api.github.com/users/AistisT/followers", "following_url": "https://api.github.com/users/AistisT/following{/other_user}", "gists_url": "https://api.github.com/users/AistisT/gists{/gist_id}", "starred_url": "https://api.github.com/users/AistisT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AistisT/subscriptions", "organizations_url": "https://api.github.com/users/AistisT/orgs", "repos_url": "https://api.github.com/users/AistisT/repos", "events_url": "https://api.github.com/users/AistisT/events{/privacy}", "received_events_url": "https://api.github.com/users/AistisT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-26T10:43:00Z", "updated_at": "2018-06-26T13:35:18Z", "closed_at": "2018-06-26T13:35:18Z", "author_association": "NONE", "body": "It was mentioned before that latest in dev version supports wstring parsing when creating json.\r\nHow one would go about parsing wstring. Obvious way of\r\n\r\n```\r\n\tstatic int SendToAgent(std::wstring & data, LPCWSTR LogType)\r\n\t{\r\n\t\t\r\n\t\tif (mqttHandlerGlobal.IsAgentOnline())\r\n\t\t{\r\n\t\t\tnlohmann::json messageJson =\r\n\t\t\t{\r\n\t\t\t\t{ \"DataType\", u8\"Test message\" },\r\n\t\t\t\t{ \"Data\", data },\r\n\t\t\t};\r\n\r\n\t\t\tauto message = messageJson.dump();\r\n\t\t\treturn mqttHandlerGlobal.MqttSend(message, *mqttHandlerGlobal.GetTopic());\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n```\r\n\r\nDoesn't work as you end up with gibberish numbers in data field which then doesn't get parsed as json at the other end."}]