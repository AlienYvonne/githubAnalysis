[{"url": "https://api.github.com/repos/nlohmann/json/issues/664", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/664/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/664/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/664/events", "html_url": "https://github.com/nlohmann/json/issues/664", "id": 245085034, "node_id": "MDU6SXNzdWUyNDUwODUwMzQ=", "number": 664, "title": "could this json lib work on windows?", "user": {"login": "PinkGabriel", "id": 9349907, "node_id": "MDQ6VXNlcjkzNDk5MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/9349907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PinkGabriel", "html_url": "https://github.com/PinkGabriel", "followers_url": "https://api.github.com/users/PinkGabriel/followers", "following_url": "https://api.github.com/users/PinkGabriel/following{/other_user}", "gists_url": "https://api.github.com/users/PinkGabriel/gists{/gist_id}", "starred_url": "https://api.github.com/users/PinkGabriel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PinkGabriel/subscriptions", "organizations_url": "https://api.github.com/users/PinkGabriel/orgs", "repos_url": "https://api.github.com/users/PinkGabriel/repos", "events_url": "https://api.github.com/users/PinkGabriel/events{/privacy}", "received_events_url": "https://api.github.com/users/PinkGabriel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-07-24T13:45:09Z", "updated_at": "2017-07-27T08:09:27Z", "closed_at": "2017-07-27T08:09:27Z", "author_association": "NONE", "body": "I download the zip on windows, and use cmake in minGW to generate .sln, then compile in VS2015, but I got more than 100 errors.\r\n\r\nI saw this in readme:\r\nThough it's 2016 already, the support for C++11 is still a bit sparse. Currently, the following compilers are known to work:\r\nGCC 4.9 - 7.1 (and possibly later)\r\nClang 3.4 - 3.9 (and possibly later)\r\nMicrosoft Visual C++ 2015 / Build Tools 14.0.25123.0 (and possibly later)\r\nMicrosoft Visual C++ 2017 / Build Tools 15.1.548.43366 (and possibly later)\r\n\r\nMy VS2015 version is community 14.0.25431\uff0cI'm not sure where the problem is.\r\nThanks~"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/662", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/662/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/662/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/662/events", "html_url": "https://github.com/nlohmann/json/issues/662", "id": 244913078, "node_id": "MDU6SXNzdWUyNDQ5MTMwNzg=", "number": 662, "title": "How does from_json work?", "user": {"login": "itviewer", "id": 1397840, "node_id": "MDQ6VXNlcjEzOTc4NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1397840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itviewer", "html_url": "https://github.com/itviewer", "followers_url": "https://api.github.com/users/itviewer/followers", "following_url": "https://api.github.com/users/itviewer/following{/other_user}", "gists_url": "https://api.github.com/users/itviewer/gists{/gist_id}", "starred_url": "https://api.github.com/users/itviewer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itviewer/subscriptions", "organizations_url": "https://api.github.com/users/itviewer/orgs", "repos_url": "https://api.github.com/users/itviewer/repos", "events_url": "https://api.github.com/users/itviewer/events{/privacy}", "received_events_url": "https://api.github.com/users/itviewer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-23T14:18:47Z", "updated_at": "2017-07-25T08:40:48Z", "closed_at": "2017-07-25T08:40:48Z", "author_association": "NONE", "body": "Sorry, I don't know if the question is right here, but I really needs help.\r\nI need to convert json str to QString, and I defines the from_json function,\r\n```cpp\r\nvoid from_json(const json& j, QString& str)\r\n{\r\n    str = QString::fromStdString(j.get<std::string>());\r\n}\r\n```\r\n`json object = {{\"string\",\"string\"}};`\r\n\r\nthen I code this ,\r\n`QString str = object[\"string\"];`\r\nit works no problem.but when I code this,\r\n```\r\nQString str;\r\nstr = object[\"string\"];\r\n```\r\nthen the compiler do not know how to compile\uff0cerror with\r\n`Error: C2593: \"operator =\" is not clear`\r\n\r\nDo non-built-in variables can not be pre-defined? (I tried _int_ and _double_ type\uff0cit can work\uff0c)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/661", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/661/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/661/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/661/events", "html_url": "https://github.com/nlohmann/json/issues/661", "id": 244638987, "node_id": "MDU6SXNzdWUyNDQ2Mzg5ODc=", "number": 661, "title": "insert(or merge) object should replace same key , not ignore", "user": {"login": "itviewer", "id": 1397840, "node_id": "MDQ6VXNlcjEzOTc4NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1397840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itviewer", "html_url": "https://github.com/itviewer", "followers_url": "https://api.github.com/users/itviewer/followers", "following_url": "https://api.github.com/users/itviewer/following{/other_user}", "gists_url": "https://api.github.com/users/itviewer/gists{/gist_id}", "starred_url": "https://api.github.com/users/itviewer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itviewer/subscriptions", "organizations_url": "https://api.github.com/users/itviewer/orgs", "repos_url": "https://api.github.com/users/itviewer/repos", "events_url": "https://api.github.com/users/itviewer/events{/privacy}", "received_events_url": "https://api.github.com/users/itviewer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 12, "created_at": "2017-07-21T11:12:42Z", "updated_at": "2017-08-16T05:40:11Z", "closed_at": "2017-08-16T05:40:11Z", "author_association": "NONE", "body": "```cpp\r\njson j1 = {{\"one\", 123}, {\"two\", 123}};\r\njson j2 = {{\"one\", 456}};\r\nj1.insert(j2.begin(), j2.end());\r\n```\r\n\r\nAs key \"one\" has exist, now the result j1 is still {{\"one\", 123}, {\"two\", 123}}\r\nwhile I think more commonly used logic is replace the same key\uff0cthat is the result should be {{\"one\", 456}, {\"two\", 123}}\r\n\r\nThanks"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/660", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/660/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/660/events", "html_url": "https://github.com/nlohmann/json/issues/660", "id": 244358560, "node_id": "MDU6SXNzdWUyNDQzNTg1NjA=", "number": 660, "title": "Why is an object ordering values by Alphabetical Order? ", "user": {"login": "gDev95", "id": 14252400, "node_id": "MDQ6VXNlcjE0MjUyNDAw", "avatar_url": "https://avatars1.githubusercontent.com/u/14252400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gDev95", "html_url": "https://github.com/gDev95", "followers_url": "https://api.github.com/users/gDev95/followers", "following_url": "https://api.github.com/users/gDev95/following{/other_user}", "gists_url": "https://api.github.com/users/gDev95/gists{/gist_id}", "starred_url": "https://api.github.com/users/gDev95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gDev95/subscriptions", "organizations_url": "https://api.github.com/users/gDev95/orgs", "repos_url": "https://api.github.com/users/gDev95/repos", "events_url": "https://api.github.com/users/gDev95/events{/privacy}", "received_events_url": "https://api.github.com/users/gDev95/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-20T13:14:59Z", "updated_at": "2017-09-06T15:42:11Z", "closed_at": "2017-07-20T13:38:56Z", "author_association": "NONE", "body": "Hi I am experiencing some weird behaviour I cannot really get behind why it does the following.\r\nImagine you want to have following json object: \r\n```\r\n{\r\n\t\"result_parameters\":{\r\n\t\t\"Category\": 1,\r\n\t\t\"Username\": \"Warrior11\",\r\n\t\t\"First_Name\": \"Max\",\r\n\t\t\"Date_Signed_Up\": [1,1,2017]\r\n\t}\r\n}\r\n```\r\nWhat I did was:\r\n\r\n```\r\nnlohmann::json j;\r\nj[\"result_parameter\"][\"Category\"] = 1;\r\nj[\"result_parameter\"][\"Username\"] =  \"Warrior11\";\r\nj[\"result_parameter\"][\"First_Name\"] = \"Max\";\r\nj[\"result_parameter\"][\"Date_Signed_Up\"] = [1,1,2017];\r\n```\r\nWhen I print this ( `cout << j.dump<< endl;` ) I get following output:\r\n```\r\n{\"result_parameter\":{\"Category\":1,\"Date_Signed_Up\":[1,1,2017],\"First_Name\":\"Max\",\"Username\":\"Warrior11\"}}\r\n```\r\nThe order is messed up, how come? "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/659", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/659/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/659/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/659/events", "html_url": "https://github.com/nlohmann/json/issues/659", "id": 243827417, "node_id": "MDU6SXNzdWUyNDM4Mjc0MTc=", "number": 659, "title": "Parse method doesn't handle newlines.", "user": {"login": "jaslo", "id": 1811564, "node_id": "MDQ6VXNlcjE4MTE1NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1811564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaslo", "html_url": "https://github.com/jaslo", "followers_url": "https://api.github.com/users/jaslo/followers", "following_url": "https://api.github.com/users/jaslo/following{/other_user}", "gists_url": "https://api.github.com/users/jaslo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaslo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaslo/subscriptions", "organizations_url": "https://api.github.com/users/jaslo/orgs", "repos_url": "https://api.github.com/users/jaslo/repos", "events_url": "https://api.github.com/users/jaslo/events{/privacy}", "received_events_url": "https://api.github.com/users/jaslo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-07-18T19:35:50Z", "updated_at": "2017-07-26T05:37:37Z", "closed_at": "2017-07-25T22:37:54Z", "author_association": "NONE", "body": "JSON strings containing newlines don't parse correctly with the ::parse method!\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/658", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/658/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/658/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/658/events", "html_url": "https://github.com/nlohmann/json/issues/658", "id": 243273909, "node_id": "MDU6SXNzdWUyNDMyNzM5MDk=", "number": 658, "title": "Compilation \"note\" on GCC 6 ARM", "user": {"login": "pn1k", "id": 10667472, "node_id": "MDQ6VXNlcjEwNjY3NDcy", "avatar_url": "https://avatars0.githubusercontent.com/u/10667472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pn1k", "html_url": "https://github.com/pn1k", "followers_url": "https://api.github.com/users/pn1k/followers", "following_url": "https://api.github.com/users/pn1k/following{/other_user}", "gists_url": "https://api.github.com/users/pn1k/gists{/gist_id}", "starred_url": "https://api.github.com/users/pn1k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pn1k/subscriptions", "organizations_url": "https://api.github.com/users/pn1k/orgs", "repos_url": "https://api.github.com/users/pn1k/repos", "events_url": "https://api.github.com/users/pn1k/events{/privacy}", "received_events_url": "https://api.github.com/users/pn1k/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 729086061, "node_id": "MDU6TGFiZWw3MjkwODYwNjE=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20arm", "name": "platform: arm", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-16T23:24:31Z", "updated_at": "2017-10-24T06:22:59Z", "closed_at": "2017-07-17T08:29:04Z", "author_association": "NONE", "body": "When compiling this code:\r\n```C++\r\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main(int argc, char *argv[]) {\r\n  json o=json::parse(\"{\\\"foo\\\":\\\"bar\\\",\\\"list\\\":{\\\"100\\\":{\\\"l100\\\":100},\\\"200\\\":{\\\"l200\\\":200}}}\") ;\r\n\r\n  json& l=o[\"list\"];\r\n\r\n  for (json::iterator it = l.begin(); it != l.end(); ++it) {\r\n    std::cout << it.key() << \" : \" << it.value() << \"\\n\";\r\n  }\r\n\r\n}\r\n```\r\n\r\ncompiler report \"note\":\r\n```\r\nIn file included from /usr/include/c++/6/map:60:0,\r\n                 from /usr/local/include/nlohmann/json.hpp:50,\r\n                 from test.cpp:2:\r\n/usr/include/c++/6/bits/stl_tree.h: In member function \u2018std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, nlohmann::basic_json<> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::basic_json<> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::basic_json<> > >]\u2019:\r\n/usr/include/c++/6/bits/stl_tree.h:1928:5: note: parameter passing for argument of type \u2018std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::basic_json<> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::basic_json<> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::basic_json<> > > >::const_iterator {aka std::_Rb_tree_const_iterator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::basic_json<> > >}\u2019 will change in GCC 7.1\r\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\r\n     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/657", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/657/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/657/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/657/events", "html_url": "https://github.com/nlohmann/json/issues/657", "id": 243062146, "node_id": "MDU6SXNzdWUyNDMwNjIxNDY=", "number": 657, "title": "Adding additional push_back/operator+= rvalue overloads for JSON object", "user": {"login": "himikof", "id": 43698, "node_id": "MDQ6VXNlcjQzNjk4", "avatar_url": "https://avatars2.githubusercontent.com/u/43698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/himikof", "html_url": "https://github.com/himikof", "followers_url": "https://api.github.com/users/himikof/followers", "following_url": "https://api.github.com/users/himikof/following{/other_user}", "gists_url": "https://api.github.com/users/himikof/gists{/gist_id}", "starred_url": "https://api.github.com/users/himikof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/himikof/subscriptions", "organizations_url": "https://api.github.com/users/himikof/orgs", "repos_url": "https://api.github.com/users/himikof/repos", "events_url": "https://api.github.com/users/himikof/events{/privacy}", "received_events_url": "https://api.github.com/users/himikof/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-14T17:36:41Z", "updated_at": "2017-07-31T05:14:02Z", "closed_at": "2017-07-30T21:57:07Z", "author_association": "CONTRIBUTOR", "body": "I propose adding the following three overloads to `basic_json`:\r\n\r\n    void push_back(typename object_t::value_type&& val);\r\n    value_type& operator+=(typename object_t::value_type&& val) &;\r\n    value_type&& operator+=(typename object_t::value_type&& val) &&;\r\n\r\nThese are symmetric to existing `const typename object_t::value_type&` overloads, \r\nthey bring the interface more in line with `std::map` (there are both `insert(value_type const&)` and `insert(value_type &&)` methods). The third overload allows rvalue json object to remain a temporary after `operator+=`.\r\n\r\nMost importantly, these should allow for this simple code perform without copying:\r\n\r\n    return json {\r\n       {\"type\", \"Polygon\"},\r\n    } += json::object_t::value_type {\"coordinates\", std::move(coordinates)};\r\n\r\nPlease note that this code is not equivalent to\r\n\r\n    return json {\r\n       {\"type\", \"Polygon\"},\r\n       {\"coordinates\", std::move(coordinates)},\r\n    };\r\n\r\nbecause sadly in C++ `std::initializer_list` breaks perfect forwarding, and (possibly large) subobject is silently copied in this case.\r\n\r\nWithout these overloads, I think that this could only be expressed (without runtime overhead) by\r\n\r\n    json result = {\r\n       {\"type\", \"Polygon\"},\r\n    };\r\n    result.emplace(\"coordinates\", std::move(coordinates));\r\n    return result;\r\n\r\nwhich is not very convenient.\r\n\r\nAnother alternative is to provide an explicit chainable method instead of (ab-)using `operator+=`. This could lead to cleaner code like:\r\n\r\n    return json {\r\n       {\"type\", \"Polygon\"},\r\n    }.method_name(\"coordinates\", std::move(coordinates));\r\n\r\nThis method should return an rvalue reference when called on an rvalue object, too."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/656", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/656/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/656/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/656/events", "html_url": "https://github.com/nlohmann/json/issues/656", "id": 242491901, "node_id": "MDU6SXNzdWUyNDI0OTE5MDE=", "number": 656, "title": "dump's parameter \"ensure_ascii\" creates too long sequences", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 5, "created_at": "2017-07-12T19:39:05Z", "updated_at": "2017-07-18T21:14:37Z", "closed_at": "2017-07-18T21:14:37Z", "author_association": "OWNER", "body": "I detected a problem in the code of PR #654:\r\n\r\nThe code seems to created too long `\\uxxxx` sequences. Take the [`\u20ac` sign](http://www.fileformat.info/info/unicode/char/20ac/index.htm) for instance. It is U+20AC and should be encoded as string `\"\\u20ac\"`. The current code encodes it as `\"\\u00e2\\u0082\\u00ac\"`. This is incorrect, as this does not roundtrip.\r\n\r\nExample:\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <fstream>\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main() {\r\n    json j1 = u8\"\u20ac\";\r\n    std::cout << j1.dump(0, ' ', false) << std::endl;\r\n    std::cout << j1.dump(0, ' ', true) << std::endl;\r\n    \r\n    json j2 = json::parse(\"\\\"\\\\u20ac\\\"\");\r\n    std::cout << j2.dump(0, ' ', false) << std::endl;\r\n    std::cout << j2.dump(0, ' ', true) << std::endl;\r\n    \r\n    json j3 = json::parse(j1.dump(0, ' ', true));\r\n    std::cout << j3.dump(0, ' ', false) << std::endl;\r\n    std::cout << j3.dump(0, ' ', true) << std::endl;\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n\"\u20ac\"\r\n\"\\u00e2\\u0082\\u00ac\"\r\n\"\u20ac\"\r\n\"\\u00e2\\u0082\\u00ac\"\r\n\"\u00e2\u0082\u00ac\"\r\n\"\\u00c3\\u00a2\\u00c2\\u0082\\u00c2\\u00ac\"\r\n```\r\n\r\nExpected output:\r\n\r\n```\r\n\"\u20ac\"\r\n\"\\u20ac\"\r\n\"\u20ac\"\r\n\"\\u20ac\"\r\n\"\u20ac\"\r\n\"\\u20ac\"\r\n```\r\n\r\nSorry for not detecting this earlier. The provided test case was correct as it coped with Emojis which created longer sequences anyway."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/655", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/655/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/655/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/655/events", "html_url": "https://github.com/nlohmann/json/issues/655", "id": 242313306, "node_id": "MDU6SXNzdWUyNDIzMTMzMDY=", "number": 655, "title": "Question: parsing `void *`", "user": {"login": "urban-1", "id": 796204, "node_id": "MDQ6VXNlcjc5NjIwNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/796204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urban-1", "html_url": "https://github.com/urban-1", "followers_url": "https://api.github.com/users/urban-1/followers", "following_url": "https://api.github.com/users/urban-1/following{/other_user}", "gists_url": "https://api.github.com/users/urban-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/urban-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urban-1/subscriptions", "organizations_url": "https://api.github.com/users/urban-1/orgs", "repos_url": "https://api.github.com/users/urban-1/repos", "events_url": "https://api.github.com/users/urban-1/events{/privacy}", "received_events_url": "https://api.github.com/users/urban-1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-07-12T09:21:16Z", "updated_at": "2017-07-13T09:19:03Z", "closed_at": "2017-07-13T09:19:03Z", "author_association": "NONE", "body": "Hi all,\r\n\r\nQuick question: I am using `librdkafka` to receive messages whose payload is JSON string. The library returns the payload in a **non-null** terminated `void*` and provides a `message->len()` to indicate how many characters/bytes are valid. Is it possible to call something like: `json::parse(void*, const size_t&)`?\r\n\r\nI see that the parser supports `char*` type but it overruns the string's length causing an overflow ...\r\n\r\nThe solutions I see are:\r\n\r\n1. Provide a `json::parse(void*, const size_t&)` signature maybe by extending/overloading `parse(T(&) array[N] ...)`\r\n2. Enable the parser to detect the closing `}` character and stop\r\n\r\nAt the moment I am using `strncpy` to populate a pre-allocated buffer and terminate it properly before passing it to `parse`. This is an extra copy operation which could be avoided...\r\n\r\nMany thanks for this awesome library - let me know what you think,\r\n\r\nAndreas\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/653", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/653/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/653/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/653/events", "html_url": "https://github.com/nlohmann/json/issues/653", "id": 242115540, "node_id": "MDU6SXNzdWUyNDIxMTU1NDA=", "number": 653, "title": "how should I check a string is valid JSON string ?", "user": {"login": "zhishupp", "id": 6071453, "node_id": "MDQ6VXNlcjYwNzE0NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6071453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhishupp", "html_url": "https://github.com/zhishupp", "followers_url": "https://api.github.com/users/zhishupp/followers", "following_url": "https://api.github.com/users/zhishupp/following{/other_user}", "gists_url": "https://api.github.com/users/zhishupp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhishupp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhishupp/subscriptions", "organizations_url": "https://api.github.com/users/zhishupp/orgs", "repos_url": "https://api.github.com/users/zhishupp/repos", "events_url": "https://api.github.com/users/zhishupp/events{/privacy}", "received_events_url": "https://api.github.com/users/zhishupp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-11T16:54:43Z", "updated_at": "2017-07-11T18:19:24Z", "closed_at": "2017-07-11T18:19:24Z", "author_association": "NONE", "body": "I read all examples, but I didnt find a way to check a string is valid JSON string.\r\nIs there an API to achieve this ? or I have to use \"try catch\" to check exceptions ?\r\nthanks ^_^"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/651", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/651/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/651/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/651/events", "html_url": "https://github.com/nlohmann/json/issues/651", "id": 241794026, "node_id": "MDU6SXNzdWUyNDE3OTQwMjY=", "number": 651, "title": "Question: thread safety of read only accesses", "user": {"login": "kimwalisch", "id": 4656219, "node_id": "MDQ6VXNlcjQ2NTYyMTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4656219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimwalisch", "html_url": "https://github.com/kimwalisch", "followers_url": "https://api.github.com/users/kimwalisch/followers", "following_url": "https://api.github.com/users/kimwalisch/following{/other_user}", "gists_url": "https://api.github.com/users/kimwalisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimwalisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimwalisch/subscriptions", "organizations_url": "https://api.github.com/users/kimwalisch/orgs", "repos_url": "https://api.github.com/users/kimwalisch/repos", "events_url": "https://api.github.com/users/kimwalisch/events{/privacy}", "received_events_url": "https://api.github.com/users/kimwalisch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-10T17:51:59Z", "updated_at": "2017-07-12T19:35:32Z", "closed_at": "2017-07-10T18:26:54Z", "author_association": "NONE", "body": "Hi,\r\n\r\nAre ```nlohmann::json``` objects thread safe for read only operations? E.g. assuming that the ```json``` object is not modified anymore after ```load_json()```, can I safely query the ```json``` object from multiple threads as in the example below?\r\n\r\n```C++\r\n// single threaded\r\nauto json = load_json();\r\n\r\n#pragma omp parallel for\r\nfor (int i = 0; i < threads; i++)\r\n{\r\n    // multi-threaded read only accesses\r\n    double seconds = json[\"S2_easy\"][\"seconds\"];\r\n    int count = json[\"S2_easy\"].count(\"s2_easy\");\r\n}\r\n```\r\n\r\nThanks!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/649", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/649/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/649/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/649/events", "html_url": "https://github.com/nlohmann/json/issues/649", "id": 241157161, "node_id": "MDU6SXNzdWUyNDExNTcxNjE=", "number": 649, "title": "Eclipse: Method 'size' could not be resolved", "user": {"login": "k22jung", "id": 14689505, "node_id": "MDQ6VXNlcjE0Njg5NTA1", "avatar_url": "https://avatars2.githubusercontent.com/u/14689505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k22jung", "html_url": "https://github.com/k22jung", "followers_url": "https://api.github.com/users/k22jung/followers", "following_url": "https://api.github.com/users/k22jung/following{/other_user}", "gists_url": "https://api.github.com/users/k22jung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k22jung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k22jung/subscriptions", "organizations_url": "https://api.github.com/users/k22jung/orgs", "repos_url": "https://api.github.com/users/k22jung/repos", "events_url": "https://api.github.com/users/k22jung/events{/privacy}", "received_events_url": "https://api.github.com/users/k22jung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-07-07T04:54:07Z", "updated_at": "2017-07-11T05:58:56Z", "closed_at": "2017-07-11T05:58:50Z", "author_association": "NONE", "body": "I'm running Eclipse Oxygen on Linux and I followed all the instructions for Integration into my C++ project. When I try to call any function like `j.size()` or `j.parse()` on my `json j;` object, Eclipse keeps saying \"Method '`function_name`' could not be resolved\" and it shows an error. Creating a `json` object and accessing its contents works perfectly fine, it's just `size()`. However it doesn't seem building with g++ causes any errors to occur. Are there any known issues with Eclipse and json.hpp? I'm using json v2.1.1."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/648", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/648/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/648/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/648/events", "html_url": "https://github.com/nlohmann/json/issues/648", "id": 240884935, "node_id": "MDU6SXNzdWUyNDA4ODQ5MzU=", "number": 648, "title": "Update/Add object fields", "user": {"login": "definename", "id": 9870947, "node_id": "MDQ6VXNlcjk4NzA5NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9870947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/definename", "html_url": "https://github.com/definename", "followers_url": "https://api.github.com/users/definename/followers", "following_url": "https://api.github.com/users/definename/following{/other_user}", "gists_url": "https://api.github.com/users/definename/gists{/gist_id}", "starred_url": "https://api.github.com/users/definename/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/definename/subscriptions", "organizations_url": "https://api.github.com/users/definename/orgs", "repos_url": "https://api.github.com/users/definename/repos", "events_url": "https://api.github.com/users/definename/events{/privacy}", "received_events_url": "https://api.github.com/users/definename/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-06T08:44:05Z", "updated_at": "2017-07-06T12:36:43Z", "closed_at": "2017-07-06T09:21:02Z", "author_association": "NONE", "body": "Hi,\r\nIs it possible to modify array `address` without rewriting existing fields, for example I have this `json`:\r\n`\tnlohmann::json j = {\r\n\t\t{ \"name\", \"oleg\" },\r\n\t\t{ \"address\",\r\n\t\t\t{ \"city\", \"kharkiv\" }\r\n\t\t}\r\n\t};\r\n`\r\n\r\nAnd I need to add several fields to array `address`:\r\n`\tj[\"address\"] = nlohmann::json\r\n\t{\r\n\t\t{ \"country\", \"ukraine\"},\r\n\t\t{ \"street\", \"svobody\"}\r\n\t};\r\n`\r\nThis variant rewrite array `address` and I lose data which were in it before I added new one.\r\n\r\nSo my question is: Is it possible to add data to existing `array` without loss existing one. Thanks."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/647", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/647/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/647/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/647/events", "html_url": "https://github.com/nlohmann/json/issues/647", "id": 240642542, "node_id": "MDU6SXNzdWUyNDA2NDI1NDI=", "number": 647, "title": "No exception raised for Out Of Range input of numbers", "user": {"login": "MichaelHuth", "id": 29093275, "node_id": "MDQ6VXNlcjI5MDkzMjc1", "avatar_url": "https://avatars3.githubusercontent.com/u/29093275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelHuth", "html_url": "https://github.com/MichaelHuth", "followers_url": "https://api.github.com/users/MichaelHuth/followers", "following_url": "https://api.github.com/users/MichaelHuth/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelHuth/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelHuth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelHuth/subscriptions", "organizations_url": "https://api.github.com/users/MichaelHuth/orgs", "repos_url": "https://api.github.com/users/MichaelHuth/repos", "events_url": "https://api.github.com/users/MichaelHuth/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelHuth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-05T12:59:14Z", "updated_at": "2017-12-04T21:18:33Z", "closed_at": "2017-07-18T21:14:48Z", "author_association": "NONE", "body": "Hello,\r\n\r\nif one has values that are beyond the range of the target type no exception is raised.\r\n\r\ne.g. this code with a value of UINT64_MAX+1 and 10000 for the target of a signed char outputs 0 and 16 respectively.\r\n\r\n```cpp\r\n\tjson jtest = json::parse(\"{\\\"value\\\" : 18446744073709551617}\");\r\n\tstd::cout << std::to_string(jtest[\"value\"].get<unsigned long long int>()) << \"\\n\";\r\n\tjtest = json::parse(\"{\\\"value\\\" : 10000}\");\r\n\tstd::cout << std::to_string(jtest[\"value\"].get<signed char>()) << \"\\n\";\r\n```\r\n\r\nBoth cases should throw an exception.\r\n\r\nBest regards."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/646", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/646/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/646/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/646/events", "html_url": "https://github.com/nlohmann/json/issues/646", "id": 240401843, "node_id": "MDU6SXNzdWUyNDA0MDE4NDM=", "number": 646, "title": "Package Name", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-07-04T12:08:37Z", "updated_at": "2017-07-09T12:45:03Z", "closed_at": "2017-07-09T12:45:03Z", "author_association": "NONE", "body": "I am interested in making a package for the conda package manager (on conda-forge).\r\n\r\nWhat would you like the name of the package to be?\r\n\r\nThe conan package name is `jsonformoderncpp`. The cmake project name is `nlohmann_json`."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/645", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/645/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/645/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/645/events", "html_url": "https://github.com/nlohmann/json/issues/645", "id": 240081290, "node_id": "MDU6SXNzdWUyNDAwODEyOTA=", "number": 645, "title": "What is the meaning of operator[](T* key)", "user": {"login": "scinart", "id": 4526363, "node_id": "MDQ6VXNlcjQ1MjYzNjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4526363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scinart", "html_url": "https://github.com/scinart", "followers_url": "https://api.github.com/users/scinart/followers", "following_url": "https://api.github.com/users/scinart/following{/other_user}", "gists_url": "https://api.github.com/users/scinart/gists{/gist_id}", "starred_url": "https://api.github.com/users/scinart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scinart/subscriptions", "organizations_url": "https://api.github.com/users/scinart/orgs", "repos_url": "https://api.github.com/users/scinart/repos", "events_url": "https://api.github.com/users/scinart/events{/privacy}", "received_events_url": "https://api.github.com/users/scinart/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 3, "created_at": "2017-07-03T06:50:15Z", "updated_at": "2017-07-08T14:35:46Z", "closed_at": "2017-07-08T14:35:46Z", "author_association": "NONE", "body": "What's the meaning of the following code?\r\n\r\nabbreviated version from json.hpp:\r\n\r\n```c++\r\ntemplate<typename T, std::size_t n>\r\nreference operator[](T * (&key)[n])\r\n{\r\n    return operator[](static_cast<const T>(key));\r\n}\r\ntemplate<typename T>\r\nreference operator[](T* key)\r\n{\r\n    return m_value.object->operator[](key);\r\n}\r\n```\r\nand const_reference version of them.\r\n\r\nNormally m_value.object is an std::map and key is an std::string. But the code must have been placed for a reason. I just want to know why."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/644", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/644/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/644/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/644/events", "html_url": "https://github.com/nlohmann/json/issues/644", "id": 240035860, "node_id": "MDU6SXNzdWUyNDAwMzU4NjA=", "number": 644, "title": "Which is the correct way to json objects as parameters to functions?", "user": {"login": "pedrozan", "id": 19186959, "node_id": "MDQ6VXNlcjE5MTg2OTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/19186959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pedrozan", "html_url": "https://github.com/pedrozan", "followers_url": "https://api.github.com/users/pedrozan/followers", "following_url": "https://api.github.com/users/pedrozan/following{/other_user}", "gists_url": "https://api.github.com/users/pedrozan/gists{/gist_id}", "starred_url": "https://api.github.com/users/pedrozan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pedrozan/subscriptions", "organizations_url": "https://api.github.com/users/pedrozan/orgs", "repos_url": "https://api.github.com/users/pedrozan/repos", "events_url": "https://api.github.com/users/pedrozan/events{/privacy}", "received_events_url": "https://api.github.com/users/pedrozan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-02T21:31:59Z", "updated_at": "2017-07-09T10:32:37Z", "closed_at": "2017-07-09T10:32:37Z", "author_association": "NONE", "body": "I'm trying to pass a JSON object to a function, but despite all my attempts I always get a segmentation failure. Which is the correct way to do this?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/642", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/642/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/642/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/642/events", "html_url": "https://github.com/nlohmann/json/issues/642", "id": 239409539, "node_id": "MDU6SXNzdWUyMzk0MDk1Mzk=", "number": 642, "title": "Method to get string representations of values", "user": {"login": "skaupper", "id": 1375320, "node_id": "MDQ6VXNlcjEzNzUzMjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1375320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skaupper", "html_url": "https://github.com/skaupper", "followers_url": "https://api.github.com/users/skaupper/followers", "following_url": "https://api.github.com/users/skaupper/following{/other_user}", "gists_url": "https://api.github.com/users/skaupper/gists{/gist_id}", "starred_url": "https://api.github.com/users/skaupper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skaupper/subscriptions", "organizations_url": "https://api.github.com/users/skaupper/orgs", "repos_url": "https://api.github.com/users/skaupper/repos", "events_url": "https://api.github.com/users/skaupper/events{/privacy}", "received_events_url": "https://api.github.com/users/skaupper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-06-29T08:57:11Z", "updated_at": "2017-07-08T06:20:28Z", "closed_at": "2017-07-08T06:20:28Z", "author_association": "NONE", "body": "I've come across occasions where I needed to \"stringify\" a single value. \r\nI know that there is `dump()` to serialize the whole object but it doesn't work as I would expected it (string values are enclosed in double quotes). Actually I know `dump()` is not meant for representing a single value as string that's why I want to suggest to add a method responsible for converting the value to a string.\r\n\r\nMy own implementation that I'm currently using looks like following:\r\n```c++\r\ninline std::string to_string(const json &j)\r\n{\r\n    auto tmp = j.dump();\r\n    \r\n    if (j.type() == json::value_t::string) {\r\n        return tmp.substr(1, tmp.size() - 2);\r\n    } else {\r\n        return tmp;\r\n    }\r\n}\r\n```\r\n\r\nSo, basically I want code like this to work.\r\n```c++\r\n    json j = \"{\\\"field\\\": 1234}\"_json;\r\n    std::string s = j[\"field\"].to_string();\r\n```\r\n\r\nCould you imagine having such a method?\r\nMaybe it is possible to specialize the `get()` method to get such a behaviour?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/641", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/641/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/641/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/641/events", "html_url": "https://github.com/nlohmann/json/issues/641", "id": 239218116, "node_id": "MDU6SXNzdWUyMzkyMTgxMTY=", "number": 641, "title": " CBOR serialization of a given JSON value does not serialize", "user": {"login": "davidalbertonogueira", "id": 5329202, "node_id": "MDQ6VXNlcjUzMjkyMDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5329202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalbertonogueira", "html_url": "https://github.com/davidalbertonogueira", "followers_url": "https://api.github.com/users/davidalbertonogueira/followers", "following_url": "https://api.github.com/users/davidalbertonogueira/following{/other_user}", "gists_url": "https://api.github.com/users/davidalbertonogueira/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalbertonogueira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalbertonogueira/subscriptions", "organizations_url": "https://api.github.com/users/davidalbertonogueira/orgs", "repos_url": "https://api.github.com/users/davidalbertonogueira/repos", "events_url": "https://api.github.com/users/davidalbertonogueira/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalbertonogueira/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-28T16:14:20Z", "updated_at": "2017-06-29T00:49:27Z", "closed_at": "2017-06-29T00:49:27Z", "author_association": "NONE", "body": "Hi, \r\nI was CBOR serializing a JSON object, and noticed that, whereas when dumping a json object to a string, json string values (i.e., case value_t::string )are escaped (a call to escape_string is made), no such call is made when json values are string values in the CBOR approach.  \r\n\r\nI was reading the CBOR CRF 7049 and it seems that strings do not need to be escaped when serializing to CBOR. \r\nFrom your library the behavior is consistent, you don't escape when serializing, nor except to be escaped when de-serializing. \r\nBut it appears that Newtonsoft.Json (C# library), expects that. Is it a valid expectation? Is it possible to have a serialization that behaves in this way, in case some libraries expect that behavior?\r\n\r\nMy use case involves reading the cbor byte string output in c#. \r\nC++ side:\r\n```cpp\r\nnlohmann::json json_doc;\r\njson_doc[\"characters\"] = nlohmann::json::array();\r\n  \r\nfor (int i = 0; i < characters.size(); i++) {\r\n  json_doc[\"characters\"][i][\"name\"] = (characters[i] != nullptr) ? characters[i]->name() : \"\";\r\n}\r\n\r\nstd::vector<uint8_t> cbor = nlohmann::json::to_cbor(json_doc);\r\noutput->assign((char*)&cbor[0], cbor.size());\r\n```\r\n\r\nC# side. cbor_bytes is the  cbor byte string (c++ output vector)\r\n```c#\r\nCBORObject cbor = CBORObject.DecodeFromBytes(cbor_bytes);\r\noutput = cbor.ToString();\r\n```\r\nSuch output string by then, is wrongly formed: \r\n`{\"characters\": [{\"name\": \"Clara Oswald\"}, {\"name\": \"Kensi Blye\"}, {\"name\": \"Temperance \"Bones\" Brennan\"}]}`\r\nand cannot, obviously be parsed:\r\n```c#\r\nJObject output_obj = JObject.Parse(output);\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/640", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/640/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/640/events", "html_url": "https://github.com/nlohmann/json/issues/640", "id": 239035265, "node_id": "MDU6SXNzdWUyMzkwMzUyNjU=", "number": 640, "title": "Are we forced to use \"-fexceptions\" flag in android ndk project", "user": {"login": "CodeMasterYi", "id": 10430162, "node_id": "MDQ6VXNlcjEwNDMwMTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/10430162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodeMasterYi", "html_url": "https://github.com/CodeMasterYi", "followers_url": "https://api.github.com/users/CodeMasterYi/followers", "following_url": "https://api.github.com/users/CodeMasterYi/following{/other_user}", "gists_url": "https://api.github.com/users/CodeMasterYi/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodeMasterYi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodeMasterYi/subscriptions", "organizations_url": "https://api.github.com/users/CodeMasterYi/orgs", "repos_url": "https://api.github.com/users/CodeMasterYi/repos", "events_url": "https://api.github.com/users/CodeMasterYi/events{/privacy}", "received_events_url": "https://api.github.com/users/CodeMasterYi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 382449225, "node_id": "MDU6TGFiZWwzODI0NDkyMjU=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20android", "name": "platform: android", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-06-28T02:24:42Z", "updated_at": "2017-07-08T17:42:25Z", "closed_at": "2017-07-08T17:42:25Z", "author_association": "NONE", "body": "Are we forced to use \"-fexceptions\" flag in android ndk project?\r\n~~~"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/639", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/639/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/639/events", "html_url": "https://github.com/nlohmann/json/issues/639", "id": 238629071, "node_id": "MDU6SXNzdWUyMzg2MjkwNzE=", "number": 639, "title": "Comparison of objects containing floats", "user": {"login": "amrcode", "id": 29713897, "node_id": "MDQ6VXNlcjI5NzEzODk3", "avatar_url": "https://avatars0.githubusercontent.com/u/29713897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amrcode", "html_url": "https://github.com/amrcode", "followers_url": "https://api.github.com/users/amrcode/followers", "following_url": "https://api.github.com/users/amrcode/following{/other_user}", "gists_url": "https://api.github.com/users/amrcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/amrcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amrcode/subscriptions", "organizations_url": "https://api.github.com/users/amrcode/orgs", "repos_url": "https://api.github.com/users/amrcode/repos", "events_url": "https://api.github.com/users/amrcode/events{/privacy}", "received_events_url": "https://api.github.com/users/amrcode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-06-26T18:25:54Z", "updated_at": "2017-07-07T19:17:18Z", "closed_at": "2017-07-07T19:17:18Z", "author_association": "NONE", "body": "The operator==() method for json objects uses '==' on the underlying number_float_t type. This may result in false negatives and is contrary to the function's documentation which states \"Floating-point numbers are compared indirectly: two floating-point numbers `f1` and `f2` are considered equal if neither `f1 > f2` nor `f2 > f1` holds\".  Could this behavior be changed to `abs(f1 - f2) < std::numeric_limits<number_float_t>::epsilon()` ?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/638", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/638/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/638/events", "html_url": "https://github.com/nlohmann/json/issues/638", "id": 238507511, "node_id": "MDU6SXNzdWUyMzg1MDc1MTE=", "number": 638, "title": "'localeconv' is not supported by NDK for SDK  <=20", "user": {"login": "sasmaster", "id": 438400, "node_id": "MDQ6VXNlcjQzODQwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/438400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasmaster", "html_url": "https://github.com/sasmaster", "followers_url": "https://api.github.com/users/sasmaster/followers", "following_url": "https://api.github.com/users/sasmaster/following{/other_user}", "gists_url": "https://api.github.com/users/sasmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasmaster/subscriptions", "organizations_url": "https://api.github.com/users/sasmaster/orgs", "repos_url": "https://api.github.com/users/sasmaster/repos", "events_url": "https://api.github.com/users/sasmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/sasmaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 382449225, "node_id": "MDU6TGFiZWwzODI0NDkyMjU=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20android", "name": "platform: android", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-06-26T10:56:34Z", "updated_at": "2017-07-11T11:00:00Z", "closed_at": "2017-07-11T11:00:00Z", "author_association": "NONE", "body": "The NDK STL for Android 19 seems to be incomplete.The locale.h is incomplete for sure.It does have a declaration of that method but the std llib probably doesn't,which causes linker error.It would be nice if this lib could support also older Android SDKs.Thanks!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/637", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/637/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/637/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/637/events", "html_url": "https://github.com/nlohmann/json/issues/637", "id": 238398828, "node_id": "MDU6SXNzdWUyMzgzOTg4Mjg=", "number": 637, "title": "[Question] cLion integration", "user": {"login": "Dariusz1989", "id": 13185728, "node_id": "MDQ6VXNlcjEzMTg1NzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/13185728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dariusz1989", "html_url": "https://github.com/Dariusz1989", "followers_url": "https://api.github.com/users/Dariusz1989/followers", "following_url": "https://api.github.com/users/Dariusz1989/following{/other_user}", "gists_url": "https://api.github.com/users/Dariusz1989/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dariusz1989/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dariusz1989/subscriptions", "organizations_url": "https://api.github.com/users/Dariusz1989/orgs", "repos_url": "https://api.github.com/users/Dariusz1989/repos", "events_url": "https://api.github.com/users/Dariusz1989/events{/privacy}", "received_events_url": "https://api.github.com/users/Dariusz1989/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-25T18:58:20Z", "updated_at": "2017-07-09T10:32:53Z", "closed_at": "2017-07-09T10:32:53Z", "author_association": "NONE", "body": "Hey\r\n\r\nI'm a bit new to it but how can I load this library in cMake/cLion ?\r\n\r\nRegards\r\nDariusz\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/636", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/636/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/636/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/636/events", "html_url": "https://github.com/nlohmann/json/issues/636", "id": 238331478, "node_id": "MDU6SXNzdWUyMzgzMzE0Nzg=", "number": 636, "title": "How to construct an iteratable usage in nlohmann json?", "user": {"login": "intijk", "id": 740501, "node_id": "MDQ6VXNlcjc0MDUwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/740501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/intijk", "html_url": "https://github.com/intijk", "followers_url": "https://api.github.com/users/intijk/followers", "following_url": "https://api.github.com/users/intijk/following{/other_user}", "gists_url": "https://api.github.com/users/intijk/gists{/gist_id}", "starred_url": "https://api.github.com/users/intijk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/intijk/subscriptions", "organizations_url": "https://api.github.com/users/intijk/orgs", "repos_url": "https://api.github.com/users/intijk/repos", "events_url": "https://api.github.com/users/intijk/events{/privacy}", "received_events_url": "https://api.github.com/users/intijk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2017-06-24T17:45:37Z", "updated_at": "2017-08-15T18:51:10Z", "closed_at": "2017-08-15T18:51:10Z", "author_association": "NONE", "body": "Recently I am thinking to have some thing like this, \r\n\r\nFoo a, b, c;\r\njson j=json(Array());\r\nj.push_back(&a);\r\nj.push_back(&b);\r\nj.push_back(&c);\r\n\r\nfor(auto e: j){\r\n         //e would get a pointer to Foo class. \r\n}\r\n\r\nIs this possible to implement? I tried to_json and from_json , but seems the features are limited.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/635", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/635/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/635/events", "html_url": "https://github.com/nlohmann/json/issues/635", "id": 238139589, "node_id": "MDU6SXNzdWUyMzgxMzk1ODk=", "number": 635, "title": "[Question] copy assign json-container to vector", "user": {"login": "MrJakmer", "id": 12643296, "node_id": "MDQ6VXNlcjEyNjQzMjk2", "avatar_url": "https://avatars3.githubusercontent.com/u/12643296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrJakmer", "html_url": "https://github.com/MrJakmer", "followers_url": "https://api.github.com/users/MrJakmer/followers", "following_url": "https://api.github.com/users/MrJakmer/following{/other_user}", "gists_url": "https://api.github.com/users/MrJakmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrJakmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrJakmer/subscriptions", "organizations_url": "https://api.github.com/users/MrJakmer/orgs", "repos_url": "https://api.github.com/users/MrJakmer/repos", "events_url": "https://api.github.com/users/MrJakmer/events{/privacy}", "received_events_url": "https://api.github.com/users/MrJakmer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-06-23T13:17:19Z", "updated_at": "2017-07-08T19:28:50Z", "closed_at": "2017-07-08T19:28:50Z", "author_association": "NONE", "body": "Hi,\r\n\r\nupon the recommendation of Niels Lohmann via e-mail, I want to refer to a question [I asked on stackoverflow](https://stackoverflow.com/q/44543956).\r\n\r\nLet me share why I am asking that question: I am trying to search for a \"lower bound\" in a json-object. I assume this can't work since comparing with a double (or integer) isn't possible. That is why I need the conversion (via copy-assign) to a vector. If the question I referred to is not needed because you can solve the error with the lower bound (see code below), it would be great. But I think using vectors would still be relevant since it would be more efficient, if you use them multiple times.\r\n\r\nSee the following code:\r\n\r\n\t#include \"json.hpp\"\r\n\r\n\tusing json = nlohmann::json;\r\n\tusing namespace std;\r\n\r\n\r\n\tint main()\r\n\t{\r\n\r\n\t\tconst vector<double> v = { 0 , 10 , 20 ,100 };\r\n\t\tconst json j(v);\r\n\r\n\t\tjson::const_iterator low = lower_bound(j.cbegin(), j.cend(), 11);\r\n\t\tsize_t lowerBoundIndex = low - j.begin();\r\n\t\tcout << lowerBoundIndex << endl;\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\nI am using JSON for Modern C++ Version 2.1.1 with Microsoft Visual Studio 2015 Version 14.0.25431.01 Update 3 (regarding to your README the compiler should be okay). My operating system is Windows 7 SP1.\r\n\r\nThanks in advance!"}]