[{"url": "https://api.github.com/repos/nlohmann/json/issues/364", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/364/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/364/events", "html_url": "https://github.com/nlohmann/json/issues/364", "id": 190801389, "node_id": "MDU6SXNzdWUxOTA4MDEzODk=", "number": 364, "title": "'to_string' is not a member of 'std' ", "user": {"login": "joshuagahan", "id": 901540, "node_id": "MDQ6VXNlcjkwMTU0MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/901540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshuagahan", "html_url": "https://github.com/joshuagahan", "followers_url": "https://api.github.com/users/joshuagahan/followers", "following_url": "https://api.github.com/users/joshuagahan/following{/other_user}", "gists_url": "https://api.github.com/users/joshuagahan/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshuagahan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshuagahan/subscriptions", "organizations_url": "https://api.github.com/users/joshuagahan/orgs", "repos_url": "https://api.github.com/users/joshuagahan/repos", "events_url": "https://api.github.com/users/joshuagahan/events{/privacy}", "received_events_url": "https://api.github.com/users/joshuagahan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 486186748, "node_id": "MDU6TGFiZWw0ODYxODY3NDg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20mingw", "name": "platform: mingw", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-21T18:40:05Z", "updated_at": "2016-12-01T14:13:32Z", "closed_at": "2016-12-01T14:13:32Z", "author_association": "NONE", "body": "added json.hpp to project and imported, set \"g++ follow c++ ISO C++ language standard [-std=c++11] and get compiler errors for to_strong and stoi.  I'm using GNU GCC Compiler, Codeblocks 16.01 IDE, on windows.  \r\n\r\nIf this is something I'm doing wrong, vice an issue, I'm unaware.  I'm a very very new CS major and don't honestly know much about compilers, includes, well pretty much anything.  "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/363", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/363/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/363/events", "html_url": "https://github.com/nlohmann/json/issues/363", "id": 190537604, "node_id": "MDU6SXNzdWUxOTA1Mzc2MDQ=", "number": 363, "title": "Optional comment support.", "user": {"login": "qis", "id": 5030897, "node_id": "MDQ6VXNlcjUwMzA4OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5030897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qis", "html_url": "https://github.com/qis", "followers_url": "https://api.github.com/users/qis/followers", "following_url": "https://api.github.com/users/qis/following{/other_user}", "gists_url": "https://api.github.com/users/qis/gists{/gist_id}", "starred_url": "https://api.github.com/users/qis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qis/subscriptions", "organizations_url": "https://api.github.com/users/qis/orgs", "repos_url": "https://api.github.com/users/qis/repos", "events_url": "https://api.github.com/users/qis/events{/privacy}", "received_events_url": "https://api.github.com/users/qis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-20T03:48:23Z", "updated_at": "2016-11-20T19:47:28Z", "closed_at": "2016-11-20T12:26:38Z", "author_association": "NONE", "body": "Here are two `basic_json` functions that allow parsing JSON input with comments. This implementation is not very efficient and I would love to see this functionality implemented (either this way or properly) in nlohmann/json.\r\n\r\n```cpp\r\n    /*!\r\n    @copydoc parse(std::istream&, parser_callback_t)\r\n    */\r\n    static basic_json parse_relaxed(std::istream& i, parser_callback_t cb = nullptr)\r\n    {\r\n        std::stringstream ss;\r\n        for (std::string line; std::getline(i, line);) {\r\n            enum class state { none, escape, escape_u, escape_0, escape_1, escape_2, string, slash, end };\r\n            state s = state::none;\r\n            std::size_t size = 0;\r\n            for (auto it = line.begin(), end = line.end(); s != state::end && it != end; ++it) {\r\n                switch (s) {\r\n                case state::none:\r\n                    switch (*it) {\r\n                    case '\"': s = state::string; break;\r\n                    case '/': s = state::slash; break;\r\n                    }\r\n                    break;\r\n                case state::string:\r\n                    switch (*it) {\r\n                    case '\"': s = state::none; break;\r\n                    case '\\\\': s = state::escape; break;\r\n                    }\r\n                    break;\r\n                case state::escape:\r\n                    switch (*it) {\r\n                    case 'u': s = state::escape_u; break;\r\n                    default: s = state::string; break;\r\n                    }\r\n                    break;\r\n                case state::escape_u:\r\n                case state::escape_0:\r\n                case state::escape_1:\r\n                case state::escape_2:\r\n                    if (*it < '0' || *it > '9') {\r\n                        throw std::domain_error(\"invalid unicode escape sequence\");\r\n                    }\r\n                    s = static_cast<state>(static_cast<int>(s) + 1);\r\n                    break;\r\n                case state::slash:\r\n                    if (*it != '/') {\r\n                        throw std::domain_error(\"invalid comment syntax\");\r\n                    }\r\n                    size--;\r\n                    s = state::end;\r\n                    continue;\r\n                case state::end:\r\n                    break;\r\n                }\r\n                size++;\r\n            }\r\n            ss.write(line.data(), size);\r\n        }\r\n        return parse(ss, cb);\r\n    }\r\n\r\n    /*!\r\n    @copydoc parse_relaxed(std::istream&, parser_callback_t)\r\n    */\r\n    static basic_json parse_relaxed(const string_t& s, parser_callback_t cb = nullptr)\r\n    {\r\n        return parse_relaxed(std::istringstream(s), cb);\r\n    }\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/362", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/362/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/362/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/362/events", "html_url": "https://github.com/nlohmann/json/issues/362", "id": 190513330, "node_id": "MDU6SXNzdWUxOTA1MTMzMzA=", "number": 362, "title": "Append \".0\" to serialized floating_point values that are digits-only.", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/18", "html_url": "https://github.com/nlohmann/json/milestone/18", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/18/labels", "id": 2298442, "node_id": "MDk6TWlsZXN0b25lMjI5ODQ0Mg==", "number": 18, "title": "Release 2.1.1", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 19, "state": "closed", "created_at": "2017-02-03T17:22:21Z", "updated_at": "2017-02-25T16:10:15Z", "due_on": "2017-02-25T08:00:00Z", "closed_at": "2017-02-25T16:10:15Z"}, "comments": 2, "created_at": "2016-11-19T18:52:54Z", "updated_at": "2017-02-19T19:56:44Z", "closed_at": "2017-01-05T01:35:19Z", "author_association": "NONE", "body": "The code is already smart enough to parse \"123.0\" as floating-point type.\r\nThe problem is that this does not round-trip, as the value serializes as \"123\", so now it is indistinguishable from pure-integer, and the floating-point-ness information is lost.\r\n\r\nProposed implementation for serializing numeric values below.\r\n\r\n```c++\r\n    // Convert floating-point type to string in POSIX locale.\r\n    // If result is composed entirely of digits or minus-sign,\r\n    // append \".0\" to preserve the type information.\r\n    template<typename T>\r\n    static std::string as_str(const T x, /*is_integral=*/std::false_type)\r\n    {\r\n        static thread_local std::unique_ptr<std::stringstream> sstr;\r\n        // reusing sstr per-thread as construction of stringstream\r\n        // and ::imbue are both expensive.\r\n        if(!sstr) {\r\n            sstr.reset(new std::stringstream);\r\n            sstr->imbue(std::locale::classic());\r\n        }\r\n\r\n        sstr->precision(std::numeric_limits<T>::digits10);\r\n\r\n        *sstr << x;\r\n        std::string s = sstr->str();\r\n        sstr->str(std::string()); // clear the data\r\n\r\n        if(s.find_first_not_of(\"0123456789-\") == std::string::npos) {\r\n            s += \".0\";\r\n        }\r\n\r\n        return s;\r\n    };\r\n\r\n    // Convert any integral type to base-10 representation,\r\n    // using POSIX locale (no grouping characters are used).\r\n    //\r\n    // This is simple-enough so we can bypass using\r\n    // the posix-locale-imbued stream and do it \"manually\"\r\n    template<typename T>\r\n    static std::string as_str(T x, /*is_integral=*/std::true_type)\r\n    {\r\n        std::string s;\r\n        const bool is_neg = x < 0;\r\n\r\n        while(x) {\r\n            s.push_back('0' + abs(x % 10));\r\n            x /= 10;\r\n        }\r\n\r\n        if(s.empty()) {\r\n            s.push_back('0');\r\n        }\r\n\r\n        if(is_neg) {\r\n            s.push_back('-');\r\n        }\r\n\r\n        reverse(s.begin(), s.end());\r\n        return s;\r\n    }\r\n\r\n    // Dispatcher to as_str variants dealing with integral vs floating-point types\r\n    template<typename T, typename = typename std::enable_if<std::is_arithmetic<T>::value>::type >\r\n    static std::string as_str(const T x)\r\n    {\r\n        return as_str(x, std::is_integral<T>());\r\n    }\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/361", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/361/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/361/events", "html_url": "https://github.com/nlohmann/json/issues/361", "id": 190367380, "node_id": "MDU6SXNzdWUxOTAzNjczODA=", "number": 361, "title": "Check if library can be used with ETL", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-18T16:51:44Z", "updated_at": "2016-12-22T11:55:53Z", "closed_at": "2016-12-22T11:55:53Z", "author_association": "OWNER", "body": "The Embedded Template Library (http://www.etlcpp.com) seems to be a reasonable idea, and it would be nice to know to what extend the library can be used with the type provided by the ETL."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/360", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/360/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/360/events", "html_url": "https://github.com/nlohmann/json/issues/360", "id": 190084647, "node_id": "MDU6SXNzdWUxOTAwODQ2NDc=", "number": 360, "title": "Loss of precision when serializing <double>", "user": {"login": "matspetter", "id": 703136, "node_id": "MDQ6VXNlcjcwMzEzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/703136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matspetter", "html_url": "https://github.com/matspetter", "followers_url": "https://api.github.com/users/matspetter/followers", "following_url": "https://api.github.com/users/matspetter/following{/other_user}", "gists_url": "https://api.github.com/users/matspetter/gists{/gist_id}", "starred_url": "https://api.github.com/users/matspetter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matspetter/subscriptions", "organizations_url": "https://api.github.com/users/matspetter/orgs", "repos_url": "https://api.github.com/users/matspetter/repos", "events_url": "https://api.github.com/users/matspetter/events{/privacy}", "received_events_url": "https://api.github.com/users/matspetter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 35, "created_at": "2016-11-17T15:50:53Z", "updated_at": "2018-01-27T16:50:37Z", "closed_at": "2018-01-27T16:50:24Z", "author_association": "NONE", "body": "It seems that precision is lost when serializing a double. I cannot say why since\r\nstd::numeric_limits<double>::digits10 should provide enough digits !?\r\nbut if I change that to:\r\nstd::numeric_limits<long double>::digits10 then I'm not loosing anything.\r\nI'm NOT using and \"long double\" types. Only \"double\"."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/359", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/359/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/359/events", "html_url": "https://github.com/nlohmann/json/issues/359", "id": 189706553, "node_id": "MDU6SXNzdWUxODk3MDY1NTM=", "number": 359, "title": "Crash in dump() from a static object", "user": {"login": "palacaze", "id": 1309100, "node_id": "MDQ6VXNlcjEzMDkxMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1309100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palacaze", "html_url": "https://github.com/palacaze", "followers_url": "https://api.github.com/users/palacaze/followers", "following_url": "https://api.github.com/users/palacaze/following{/other_user}", "gists_url": "https://api.github.com/users/palacaze/gists{/gist_id}", "starred_url": "https://api.github.com/users/palacaze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palacaze/subscriptions", "organizations_url": "https://api.github.com/users/palacaze/orgs", "repos_url": "https://api.github.com/users/palacaze/repos", "events_url": "https://api.github.com/users/palacaze/events{/privacy}", "received_events_url": "https://api.github.com/users/palacaze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/13", "html_url": "https://github.com/nlohmann/json/milestone/13", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/13/labels", "id": 2110088, "node_id": "MDk6TWlsZXN0b25lMjExMDA4OA==", "number": 13, "title": "Release 2.0.8", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2016-11-02T16:36:13Z", "updated_at": "2016-12-02T19:10:24Z", "due_on": "2016-12-02T08:00:00Z", "closed_at": "2016-12-02T19:10:24Z"}, "comments": 19, "created_at": "2016-11-16T13:39:52Z", "updated_at": "2016-11-22T06:01:23Z", "closed_at": "2016-11-22T06:01:23Z", "author_association": "NONE", "body": "Change 29c5f32d4287a49f59fcd65b7ffacd7f154b03aa from the performance regression bug #272 introduces a potential crash in dump(). This has to do with deinitialization order of static objects.\r\n\r\nThe following code (not json specific) reproduces the problem (tested on GNU/Linux 64 bits with GCC 5.4):\r\n\r\n```cpp\r\n#include <locale>\r\n#include <sstream>\r\n#include <iostream>\r\n\r\nnamespace {\r\nstruct DecimalSeparator : std::numpunct<char> {\r\n    char do_decimal_point() const { return '.'; }\r\n};\r\n}\r\n\r\nstruct test {\r\n    void dump() {\r\n        std::stringstream ss;\r\n        const static std::locale loc(std::locale(), new DecimalSeparator);\r\n        ss.imbue(loc);\r\n        ss << \"test \" << 1.0;\r\n        std::cout << ss.str() << std::endl;\r\n    }\r\n    ~test() {\r\n        dump();\r\n    }\r\n};\r\n\r\nstatic test t;\r\n\r\nint main() {\r\n    t.dump();\r\n    return 0;\r\n}\r\n```\r\n\r\nWhat happens here it that the static test is initialized first, then the first call to dump() creates the static locale object. When we leave main(), the static locale gets destroyed first (reversed initialization order), then the static test object is destructed, thus calling the destructor, which so happens to call dump() whose static object is no longer valid.\r\n\r\nRemoving the static keyword introduced in commit 29c5f32d4287a49f59fcd65b7ffacd7f154b03aa fixes the crash."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/358", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/358/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/358/events", "html_url": "https://github.com/nlohmann/json/issues/358", "id": 188291472, "node_id": "MDU6SXNzdWUxODgyOTE0NzI=", "number": 358, "title": "Request: binary serialization/deserialization", "user": {"login": "CyberBrainX", "id": 23361938, "node_id": "MDQ6VXNlcjIzMzYxOTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/23361938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CyberBrainX", "html_url": "https://github.com/CyberBrainX", "followers_url": "https://api.github.com/users/CyberBrainX/followers", "following_url": "https://api.github.com/users/CyberBrainX/following{/other_user}", "gists_url": "https://api.github.com/users/CyberBrainX/gists{/gist_id}", "starred_url": "https://api.github.com/users/CyberBrainX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CyberBrainX/subscriptions", "organizations_url": "https://api.github.com/users/CyberBrainX/orgs", "repos_url": "https://api.github.com/users/CyberBrainX/repos", "events_url": "https://api.github.com/users/CyberBrainX/events{/privacy}", "received_events_url": "https://api.github.com/users/CyberBrainX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/14", "html_url": "https://github.com/nlohmann/json/milestone/14", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/14/labels", "id": 2171959, "node_id": "MDk6TWlsZXN0b25lMjE3MTk1OQ==", "number": 14, "title": "Release 2.0.9", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 11, "state": "closed", "created_at": "2016-12-02T19:10:33Z", "updated_at": "2016-12-16T20:36:42Z", "due_on": "2016-12-16T08:00:00Z", "closed_at": "2016-12-16T20:36:42Z"}, "comments": 35, "created_at": "2016-11-09T16:32:17Z", "updated_at": "2017-03-28T21:59:47Z", "closed_at": "2016-12-11T15:14:06Z", "author_association": "NONE", "body": "Wouldn\u2019t it be useful to have the possibility to serialize the json object to a more compact form? \r\nThis would make sense for storing the container or sending it over an internet connection.\r\n\r\nThe  MessagePack (http://msgpack.org/) format or some proprietary format directly derived from your internal representation would be fine. \r\nOr could you probably just provide some generic interface for the binary serialization/deserialization?\r\n\r\nI think this approach could be more useable than just gzipping the whole JSON data.\r\n\r\nAs an example this library did implement some alternative representations of a json container: http://greatpanic.com/progdocs/UniversalContainer.html\r\n(But this library doesn\u2019t work properly and doesn\u2019t use C++ 11)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/357", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/357/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/357/events", "html_url": "https://github.com/nlohmann/json/issues/357", "id": 188249741, "node_id": "MDU6SXNzdWUxODgyNDk3NDE=", "number": 357, "title": "json::parse(...) vs json j; j.parse(...)", "user": {"login": "oneill1979", "id": 4069961, "node_id": "MDQ6VXNlcjQwNjk5NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4069961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oneill1979", "html_url": "https://github.com/oneill1979", "followers_url": "https://api.github.com/users/oneill1979/followers", "following_url": "https://api.github.com/users/oneill1979/following{/other_user}", "gists_url": "https://api.github.com/users/oneill1979/gists{/gist_id}", "starred_url": "https://api.github.com/users/oneill1979/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oneill1979/subscriptions", "organizations_url": "https://api.github.com/users/oneill1979/orgs", "repos_url": "https://api.github.com/users/oneill1979/repos", "events_url": "https://api.github.com/users/oneill1979/events{/privacy}", "received_events_url": "https://api.github.com/users/oneill1979/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-09T13:39:50Z", "updated_at": "2016-11-09T13:49:09Z", "closed_at": "2016-11-09T13:49:09Z", "author_association": "NONE", "body": "I was wondering if there is a reason that a call to parse on a json object just returns a null json object? The same input seems to parse without issue using the jason::parse call.\r\n\r\nFor example the following program:\r\n```cpp\r\n{\r\n    std::string input(\"{\\\"happy\\\":true,\\\"pi\\\":3.141}\");\r\n    json j;\r\n    j.parse(input);\r\n    std::cout << j.dump() << std::endl;\r\n    j=json::parse(input);\r\n    std::cout << j.dump() << std::endl;\r\n}\r\n```\r\nResults in (osx):\r\n```js\r\nnull\r\n{\"happy\":true,\"pi\":3.141}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/356", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/356/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/356/events", "html_url": "https://github.com/nlohmann/json/issues/356", "id": 187895119, "node_id": "MDU6SXNzdWUxODc4OTUxMTk=", "number": 356, "title": "Hi, is there any method to dump  json to string with the insert order rather than alphabets", "user": {"login": "ostack", "id": 16473628, "node_id": "MDQ6VXNlcjE2NDczNjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/16473628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ostack", "html_url": "https://github.com/ostack", "followers_url": "https://api.github.com/users/ostack/followers", "following_url": "https://api.github.com/users/ostack/following{/other_user}", "gists_url": "https://api.github.com/users/ostack/gists{/gist_id}", "starred_url": "https://api.github.com/users/ostack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ostack/subscriptions", "organizations_url": "https://api.github.com/users/ostack/orgs", "repos_url": "https://api.github.com/users/ostack/repos", "events_url": "https://api.github.com/users/ostack/events{/privacy}", "received_events_url": "https://api.github.com/users/ostack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-08T03:48:17Z", "updated_at": "2016-11-11T16:26:53Z", "closed_at": "2016-11-11T16:26:53Z", "author_association": "NONE", "body": "Hi, is there any method to dump  json to string with the insert order rather than alphabets"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/354", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/354/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/354/events", "html_url": "https://github.com/nlohmann/json/issues/354", "id": 187477063, "node_id": "MDU6SXNzdWUxODc0NzcwNjM=", "number": 354, "title": "Provide an example of reading from an json with only a key that has an array of strings.", "user": {"login": "AraHaan", "id": 15173749, "node_id": "MDQ6VXNlcjE1MTczNzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/15173749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AraHaan", "html_url": "https://github.com/AraHaan", "followers_url": "https://api.github.com/users/AraHaan/followers", "following_url": "https://api.github.com/users/AraHaan/following{/other_user}", "gists_url": "https://api.github.com/users/AraHaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AraHaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AraHaan/subscriptions", "organizations_url": "https://api.github.com/users/AraHaan/orgs", "repos_url": "https://api.github.com/users/AraHaan/repos", "events_url": "https://api.github.com/users/AraHaan/events{/privacy}", "received_events_url": "https://api.github.com/users/AraHaan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-05T04:58:29Z", "updated_at": "2016-11-08T08:47:31Z", "closed_at": "2016-11-08T08:47:31Z", "author_association": "NONE", "body": "So, I have a json that is somewhat like this:\r\n\r\n```json\r\n{\r\n\t\"detectlist\": [\r\n\t\t\"Cheat Engine 0.1\",\r\n\t\t\"Cheat Engine 0.2\",\r\n\t\t\"Cheat Engine 0.3\",\r\n\t\t\"Cheat Engine 0.4\",\r\n\t\t\"Cheat Engine 0.5\",\r\n\t\t\"Cheat Engine 0.6\",\r\n\t\t\"Cheat Engine 0.7\",\r\n\t\t\"Cheat Engine 0.8\",\r\n\t\t\"Cheat Engine 0.9\",\r\n\t\t\"Cheat Engine 1.0\",\r\n\t\t\"Cheat Engine 1.1\",\r\n\t\t\"Cheat Engine 1.2\",\r\n\t\t\"Cheat Engine 1.3\",\r\n\t\t\"Cheat Engine 1.4\",\r\n\t\t\"Cheat Engine 1.5\",\r\n\t\t\"Cheat Engine 1.6\",\r\n\t\t\"Cheat Engine 1.7\",\r\n\t\t\"Cheat Engine 1.8\",\r\n\t\t\"Cheat Engine 1.9\",\r\n\t\t\"Cheat Engine 2.0\",\r\n\t\t\"Cheat Engine 2.1\",\r\n\t\t\"Cheat Engine 2.2\",\r\n\t\t\"Cheat Engine 2.3\",\r\n\t\t\"Cheat Engine 2.4\",\r\n\t\t\"Cheat Engine 2.5\",\r\n\t\t\"Cheat Engine 2.6\",\r\n\t\t\"Cheat Engine 2.7\",\r\n\t\t\"Cheat Engine 2.8\",\r\n\t\t\"Cheat Engine 2.9\",\r\n\t\t\"Cheat Engine 3.0\",\r\n\t\t\"Cheat Engine 3.1\",\r\n\t\t\"Cheat Engine 3.2\",\r\n\t\t\"Cheat Engine 3.3\",\r\n\t\t\"Cheat Engine 3.4\",\r\n\t\t\"Cheat Engine 3.5\",\r\n\t\t\"Cheat Engine 3.6\",\r\n\t\t\"Cheat Engine 3.7\",\r\n\t\t\"Cheat Engine 3.8\",\r\n\t\t\"Cheat Engine 3.9\",\r\n\t\t\"Cheat Engine 4.0\",\r\n\t\t\"Cheat Engine 4.1\",\r\n\t\t\"Cheat Engine 4.2\",\r\n\t\t\"Cheat Engine 4.3\",\r\n\t\t\"Cheat Engine 4.4\",\r\n\t\t\"Cheat Engine 4.5\",\r\n\t\t\"Cheat Engine 4.6\",\r\n\t\t\"Cheat Engine 4.7\",\r\n\t\t\"Cheat Engine 4.8\",\r\n\t\t\"Cheat Engine 4.9\",\r\n\t\t\"Cheat Engine 5.0\",\r\n\t\t\"Cheat Engine 5.1\",\r\n\t\t\"Cheat Engine 5.2\",\r\n\t\t\"Cheat Engine 5.3\",\r\n\t\t\"Cheat Engine 5.4\",\r\n\t\t\"Cheat Engine 5.5\",\r\n\t\t\"Cheat Engine 5.6\",\r\n\t\t\"Cheat Engine 5.7\",\r\n\t\t\"Cheat Engine 5.8\",\r\n\t\t\"Cheat Engine 5.9\",\r\n\t\t\"Cheat Engine 6.0\",\r\n\t\t\"Cheat Engine 6.1\",\r\n\t\t\"Cheat Engine 6.2\",\r\n\t\t\"Cheat Engine 6.3\",\r\n\t\t\"Cheat Engine 6.4\",\r\n\t\t\"Cheat Engine 6.5\",\r\n\t\t\"Cheat Engine 6.6\",\r\n\t\t\"Cheat Engine 6.7\",\r\n\t\t\"Cheat Engine 6.8\",\r\n\t\t\"Cheat Engine 6.9\",\r\n\t\t\"Cheat Engine 7.0\",\r\n\t\t\"OllyDBG\",\r\n\t\t\"PEiD v0.95\"\r\n\t]\r\n}\r\n```\r\n\r\nWhat I want to do is iterate through that list and with each string in it I want to use the ``FindWindow`` function from ``kernel32.dll`` to check if a window with a string in the list is open or not.\r\n\r\nHere is how I would like the strings to look like if output to a console (with new lines after each one):\r\n\r\n\tCheat Engine 0.1\r\n\tCheat Engine 0.2\r\n\tCheat Engine 0.3\r\n\tCheat Engine 0.4\r\n\tCheat Engine 0.5\r\n\tCheat Engine 0.6\r\n\tCheat Engine 0.7\r\n\tCheat Engine 0.8\r\n\tCheat Engine 0.9\r\n\tCheat Engine 1.0\r\n\tCheat Engine 1.1\r\n\tCheat Engine 1.2\r\n\tCheat Engine 1.3\r\n\tCheat Engine 1.4\r\n\tCheat Engine 1.5\r\n\tCheat Engine 1.6\r\n\tCheat Engine 1.7\r\n\tCheat Engine 1.8\r\n\tCheat Engine 1.9\r\n\tCheat Engine 2.0\r\n\tCheat Engine 2.1\r\n\tCheat Engine 2.2\r\n\tCheat Engine 2.3\r\n\tCheat Engine 2.4\r\n\tCheat Engine 2.5\r\n\tCheat Engine 2.6\r\n\tCheat Engine 2.7\r\n\tCheat Engine 2.8\r\n\tCheat Engine 2.9\r\n\tCheat Engine 3.0\r\n\tCheat Engine 3.1\r\n\tCheat Engine 3.2\r\n\tCheat Engine 3.3\r\n\tCheat Engine 3.4\r\n\tCheat Engine 3.5\r\n\tCheat Engine 3.6\r\n\tCheat Engine 3.7\r\n\tCheat Engine 3.8\r\n\tCheat Engine 3.9\r\n\tCheat Engine 4.0\r\n\tCheat Engine 4.1\r\n\tCheat Engine 4.2\r\n\tCheat Engine 4.3\r\n\tCheat Engine 4.4\r\n\tCheat Engine 4.5\r\n\tCheat Engine 4.6\r\n\tCheat Engine 4.7\r\n\tCheat Engine 4.8\r\n\tCheat Engine 4.9\r\n\tCheat Engine 5.0\r\n\tCheat Engine 5.1\r\n\tCheat Engine 5.2\r\n\tCheat Engine 5.3\r\n\tCheat Engine 5.4\r\n\tCheat Engine 5.5\r\n\tCheat Engine 5.6\r\n\tCheat Engine 5.7\r\n\tCheat Engine 5.8\r\n\tCheat Engine 5.9\r\n\tCheat Engine 6.0\r\n\tCheat Engine 6.1\r\n\tCheat Engine 6.2\r\n\tCheat Engine 6.3\r\n\tCheat Engine 6.4\r\n\tCheat Engine 6.5\r\n\tCheat Engine 6.6\r\n\tCheat Engine 6.7\r\n\tCheat Engine 6.8\r\n\tCheat Engine 6.9\r\n\tCheat Engine 7.0\r\n\tOllyDBG\r\n\tPEiD v0.95\r\n\r\nAny idea what I can do to anchieve this? I have the following code so far:\r\n\r\n```cpp\r\nnlohmann::json GetJsonData()\r\n{\r\n\tstd::ifstream in(\"VB-Trap\\\\checkwindow.json\");\r\n\t//error when loading Window data.\r\n\tif(!in.is_open())\r\n\t{\r\n\t\treturn nullptr;\r\n\t}\r\n\tnlohmann::json file;\r\n\tfile << in;\r\n\tin.close();\r\n\treturn file;\r\n}\r\n\r\nVBTREXTERN int __cdecl DetectWithJSONDB()\r\n{\r\n\tnlohmann::json jsondb = GetJsonData();\r\n\tif (jsondb != nullptr)\r\n\t{\r\n\t\t//TODO: Iterate through this data somehow.\r\n\t\t//TODO: Within the iteration for each string in the Array invoke the ``Window_Scan`` function to check for if the Window(s) are open.\r\n\t\t/*\r\n\t\t\tNote: If NULL is returned from the iterator list then the function will return NULL.\r\n\t\t\tOtherwise the function Will return -1 when any of the Windows in the list are open.\r\n\t\t\t\r\n\t\t\tIf The File cannot be opened then -3 is returned.\r\n\t\t*/\r\n\t\treturn NULL;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn -3;\r\n\t}\r\n\treturn NULL;\r\n}\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/353", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/353/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/353/events", "html_url": "https://github.com/nlohmann/json/issues/353", "id": 187468212, "node_id": "MDU6SXNzdWUxODc0NjgyMTI=", "number": 353, "title": "Request: access with default value.", "user": {"login": "SmoofBullet", "id": 8692359, "node_id": "MDQ6VXNlcjg2OTIzNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8692359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SmoofBullet", "html_url": "https://github.com/SmoofBullet", "followers_url": "https://api.github.com/users/SmoofBullet/followers", "following_url": "https://api.github.com/users/SmoofBullet/following{/other_user}", "gists_url": "https://api.github.com/users/SmoofBullet/gists{/gist_id}", "starred_url": "https://api.github.com/users/SmoofBullet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SmoofBullet/subscriptions", "organizations_url": "https://api.github.com/users/SmoofBullet/orgs", "repos_url": "https://api.github.com/users/SmoofBullet/repos", "events_url": "https://api.github.com/users/SmoofBullet/events{/privacy}", "received_events_url": "https://api.github.com/users/SmoofBullet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-11-05T01:20:45Z", "updated_at": "2016-11-15T22:38:33Z", "closed_at": "2016-11-15T22:38:33Z", "author_association": "NONE", "body": "Hi everyone!\r\n\r\nI would suggest to provide new member functions\r\n\r\n        template <typename T>\r\n        T operator ()(const typename object_t::key_type& key, const T &fallback) const\r\n        {\r\n            const auto it = find(key);\r\n            if (it == end() || it.value().is_null())\r\n            {\r\n                return fallback;\r\n            }\r\n            else\r\n            {\r\n                return at(key);\r\n            }\r\n        }\r\n\r\n        string_t operator ()(const typename object_t::key_type& key, const string_t &fallback) const \r\n        {\r\n            return operator()<string_t>(key, fallback);\r\n        }\r\n\r\n        template <typename T>\r\n        T operator ()(const typename object_t::key_type& key, const T &fallback)\r\n        {\r\n            const auto it = find(key);\r\n            if (it == end() || it.value().is_null())\r\n            {\r\n                return (*this)[key] = fallback;\r\n            }\r\n            else\r\n            {\r\n                return (*this)[key];\r\n            }\r\n        }\r\n\r\n        string_t operator ()(const typename object_t::key_type& key, const string_t &fallback)\r\n        {\r\n            return operator()<string_t>(key, fallback);\r\n        }\r\n\r\nI use those for convenient accesses to numbers, strings, vectors and maps in a json object with default values.\r\n\r\nFurther, i use\r\n\r\n        reference operator()(const typename object_t::key_type& key)\r\n        {\r\n            return (*this)[key];\r\n        }\r\n\r\n        value_type operator()(const typename object_t::key_type& key) const\r\n        {\r\n            if (find(key) == end())\r\n            {\r\n                return value_type();\r\n            }\r\n            else\r\n            {\r\n                return (*this)[key];\r\n            }\r\n        }\r\n\r\nfor more consistent code look when using the functions above.\r\n\r\nWhat do you think?\r\n\r\nGreetings"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/352", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/352/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/352/events", "html_url": "https://github.com/nlohmann/json/issues/352", "id": 187467209, "node_id": "MDU6SXNzdWUxODc0NjcyMDk=", "number": 352, "title": "{} and [] causes parser error.", "user": {"login": "SmoofBullet", "id": 8692359, "node_id": "MDQ6VXNlcjg2OTIzNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8692359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SmoofBullet", "html_url": "https://github.com/SmoofBullet", "followers_url": "https://api.github.com/users/SmoofBullet/followers", "following_url": "https://api.github.com/users/SmoofBullet/following{/other_user}", "gists_url": "https://api.github.com/users/SmoofBullet/gists{/gist_id}", "starred_url": "https://api.github.com/users/SmoofBullet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SmoofBullet/subscriptions", "organizations_url": "https://api.github.com/users/SmoofBullet/orgs", "repos_url": "https://api.github.com/users/SmoofBullet/repos", "events_url": "https://api.github.com/users/SmoofBullet/events{/privacy}", "received_events_url": "https://api.github.com/users/SmoofBullet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-05T01:03:32Z", "updated_at": "2016-11-14T15:09:00Z", "closed_at": "2016-11-14T15:09:00Z", "author_association": "NONE", "body": "Hey there!\r\n\r\n{} and [] should be a valid empty JSON object/array. Instead, it creates - parse error - unexpected end of input.\r\n\r\nExample:\r\n\r\nnlohmann::json j;\r\n\r\nstd::stringstream ss(\"{}\");\r\n\r\nss >> j;\r\n\r\nGreetings"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/351", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/351/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/351/events", "html_url": "https://github.com/nlohmann/json/issues/351", "id": 186926848, "node_id": "MDU6SXNzdWUxODY5MjY4NDg=", "number": 351, "title": "Reading a JSON file into a JSON object", "user": {"login": "AbdallaGomaa7", "id": 18082173, "node_id": "MDQ6VXNlcjE4MDgyMTcz", "avatar_url": "https://avatars3.githubusercontent.com/u/18082173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdallaGomaa7", "html_url": "https://github.com/AbdallaGomaa7", "followers_url": "https://api.github.com/users/AbdallaGomaa7/followers", "following_url": "https://api.github.com/users/AbdallaGomaa7/following{/other_user}", "gists_url": "https://api.github.com/users/AbdallaGomaa7/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdallaGomaa7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdallaGomaa7/subscriptions", "organizations_url": "https://api.github.com/users/AbdallaGomaa7/orgs", "repos_url": "https://api.github.com/users/AbdallaGomaa7/repos", "events_url": "https://api.github.com/users/AbdallaGomaa7/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdallaGomaa7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-02T21:36:29Z", "updated_at": "2016-11-08T16:10:08Z", "closed_at": "2016-11-08T16:10:08Z", "author_association": "NONE", "body": "Hey, I am trying to read a json file into a json object, what is the best way to do this? "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/350", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/350/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/350/events", "html_url": "https://github.com/nlohmann/json/issues/350", "id": 186924570, "node_id": "MDU6SXNzdWUxODY5MjQ1NzA=", "number": 350, "title": "Request: range-based-for over a json-object to expose .first/.second", "user": {"login": "jaredgrubb", "id": 1256381, "node_id": "MDQ6VXNlcjEyNTYzODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1256381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaredgrubb", "html_url": "https://github.com/jaredgrubb", "followers_url": "https://api.github.com/users/jaredgrubb/followers", "following_url": "https://api.github.com/users/jaredgrubb/following{/other_user}", "gists_url": "https://api.github.com/users/jaredgrubb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaredgrubb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaredgrubb/subscriptions", "organizations_url": "https://api.github.com/users/jaredgrubb/orgs", "repos_url": "https://api.github.com/users/jaredgrubb/repos", "events_url": "https://api.github.com/users/jaredgrubb/events{/privacy}", "received_events_url": "https://api.github.com/users/jaredgrubb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 21, "created_at": "2016-11-02T21:25:51Z", "updated_at": "2017-06-16T17:36:36Z", "closed_at": "2017-06-16T17:36:36Z", "author_association": "CONTRIBUTOR", "body": "I would love to have the ability to iterate over a JSON object type in exactly the same way I would iterate over a std::map:\r\n\r\n`for(auto& i : map) {\r\n    i.first; \r\n    i.second;\r\n}`\r\n\r\nWould it be possible to have a free function (or member) that would allow me to do something like:\r\n`for(auto& i : as_map(jsonObj)) {...}`\r\nsuch that the iterator exposed here works more like map::iterator (.first,.second) than the current iterator type (.key,.value)."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/349", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/349/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/349/events", "html_url": "https://github.com/nlohmann/json/issues/349", "id": 186923444, "node_id": "MDU6SXNzdWUxODY5MjM0NDQ=", "number": 349, "title": "Request: 'emplace_back'", "user": {"login": "jaredgrubb", "id": 1256381, "node_id": "MDQ6VXNlcjEyNTYzODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1256381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaredgrubb", "html_url": "https://github.com/jaredgrubb", "followers_url": "https://api.github.com/users/jaredgrubb/followers", "following_url": "https://api.github.com/users/jaredgrubb/following{/other_user}", "gists_url": "https://api.github.com/users/jaredgrubb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaredgrubb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaredgrubb/subscriptions", "organizations_url": "https://api.github.com/users/jaredgrubb/orgs", "repos_url": "https://api.github.com/users/jaredgrubb/repos", "events_url": "https://api.github.com/users/jaredgrubb/events{/privacy}", "received_events_url": "https://api.github.com/users/jaredgrubb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/13", "html_url": "https://github.com/nlohmann/json/milestone/13", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/13/labels", "id": 2110088, "node_id": "MDk6TWlsZXN0b25lMjExMDA4OA==", "number": 13, "title": "Release 2.0.8", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2016-11-02T16:36:13Z", "updated_at": "2016-12-02T19:10:24Z", "due_on": "2016-12-02T08:00:00Z", "closed_at": "2016-12-02T19:10:24Z"}, "comments": 10, "created_at": "2016-11-02T21:20:54Z", "updated_at": "2016-12-01T20:24:09Z", "closed_at": "2016-12-01T20:24:06Z", "author_association": "CONTRIBUTOR", "body": "Out of habit, I tend to use 'emplace_back' instead of 'push_back' and I was surprised basic_json didn't support this. Can we add it?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/348", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/348/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/348/events", "html_url": "https://github.com/nlohmann/json/issues/348", "id": 186465887, "node_id": "MDU6SXNzdWUxODY0NjU4ODc=", "number": 348, "title": "JSON5", "user": {"login": "zumm", "id": 10081538, "node_id": "MDQ6VXNlcjEwMDgxNTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/10081538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zumm", "html_url": "https://github.com/zumm", "followers_url": "https://api.github.com/users/zumm/followers", "following_url": "https://api.github.com/users/zumm/following{/other_user}", "gists_url": "https://api.github.com/users/zumm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zumm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zumm/subscriptions", "organizations_url": "https://api.github.com/users/zumm/orgs", "repos_url": "https://api.github.com/users/zumm/repos", "events_url": "https://api.github.com/users/zumm/events{/privacy}", "received_events_url": "https://api.github.com/users/zumm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-01T06:07:03Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2016-11-01T06:34:50Z", "author_association": "NONE", "body": "What about support of JSON5? I mean comments, single-quoted objects, trailing commas and other wonderful things."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/347", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/347/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/347/events", "html_url": "https://github.com/nlohmann/json/issues/347", "id": 186164033, "node_id": "MDU6SXNzdWUxODYxNjQwMzM=", "number": 347, "title": "Is it possible to stream data through the json parser without storing everything in memory?", "user": {"login": "anden259", "id": 8613540, "node_id": "MDQ6VXNlcjg2MTM1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8613540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anden259", "html_url": "https://github.com/anden259", "followers_url": "https://api.github.com/users/anden259/followers", "following_url": "https://api.github.com/users/anden259/following{/other_user}", "gists_url": "https://api.github.com/users/anden259/gists{/gist_id}", "starred_url": "https://api.github.com/users/anden259/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anden259/subscriptions", "organizations_url": "https://api.github.com/users/anden259/orgs", "repos_url": "https://api.github.com/users/anden259/repos", "events_url": "https://api.github.com/users/anden259/events{/privacy}", "received_events_url": "https://api.github.com/users/anden259/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-30T21:01:28Z", "updated_at": "2016-11-14T14:07:14Z", "closed_at": "2016-11-14T14:07:14Z", "author_association": "NONE", "body": "Is it possible to stream data through the json parser without storing everything in memory?\n\nLets say I have a json file that is 10 GB, is it possible to stream that through the parser without storing it in memory?\n\nSomething like:\nfile stream >> json deserialze >> data stream\n\nand the reverse:\ndata stream >> json serialize >> json string stream\n\nIs that possible with this library?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/346", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/346/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/346/events", "html_url": "https://github.com/nlohmann/json/issues/346", "id": 186088353, "node_id": "MDU6SXNzdWUxODYwODgzNTM=", "number": 346, "title": "pure virtual conversion operator", "user": {"login": "lzheng5", "id": 6733899, "node_id": "MDQ6VXNlcjY3MzM4OTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6733899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lzheng5", "html_url": "https://github.com/lzheng5", "followers_url": "https://api.github.com/users/lzheng5/followers", "following_url": "https://api.github.com/users/lzheng5/following{/other_user}", "gists_url": "https://api.github.com/users/lzheng5/gists{/gist_id}", "starred_url": "https://api.github.com/users/lzheng5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lzheng5/subscriptions", "organizations_url": "https://api.github.com/users/lzheng5/orgs", "repos_url": "https://api.github.com/users/lzheng5/repos", "events_url": "https://api.github.com/users/lzheng5/events{/privacy}", "received_events_url": "https://api.github.com/users/lzheng5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-29T16:48:56Z", "updated_at": "2016-11-08T07:10:23Z", "closed_at": "2016-11-08T07:10:16Z", "author_association": "NONE", "body": "Consider the following code.\n\n``` cpp\nclass ToJsonBase\n{\nprotected:\n  std::string b;\n\npublic:\n  ToJsonBase(const std::string& ab) : b(ab){}\n\n  virtual operator json() = 0;\n};\n\nclass ToJson : public ToJsonBase\n{\n  std::string d;\n\npublic:\n  ToJson(const std::string& ad)\n    :ToJsonBase(\"Base String\"), d(ad){}\n  operator json()\n  {\n    json j;\n    j[\"base\"] = b;\n    j[\"derived\"] = d;\n    return j;\n  }\n};\n\nint main()\n{\n  ToJsonBase* p = new ToJson(\"derived string\");\n  json j = (json)*p; // error here\n}\n\n```\n\nWhen you have the conversion operator as a pure virtual function, it will give me the following error.\n\n```\nIn file included from /usr/include/c++/6.1.1/bits/uniform_int_dist.h:35:0,\n                 from /usr/include/c++/6.1.1/bits/stl_algo.h:66,\n                 from /usr/include/c++/6.1.1/algorithm:62,\n                 from /home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/./include/net/json.hpp:32,\n                 from /home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/tools/json-test/main.cpp:1:\n/usr/include/c++/6.1.1/limits: In instantiation of \u2018struct std::numeric_limits<ToJsonBase>\u2019:\n/home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/./include/net/json.hpp:1418:94:   required by substitution of \u2018template<class CompatibleNumberIntegerType, typename std::enable_if<((std::is_constructible<long long int, CompatibleNumberIntegerType>::value && std::numeric_limits<_Tp>::is_integer) && std::numeric_limits<_Tp>::is_signed), CompatibleNumberIntegerType>::type <anonymous> > nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::basic_json(CompatibleNumberIntegerType) [with CompatibleNumberIntegerType = ToJsonBase; typename std::enable_if<((std::is_constructible<long long int, CompatibleNumberIntegerType>::value && std::numeric_limits<_Tp>::is_integer) && std::numeric_limits<_Tp>::is_signed), CompatibleNumberIntegerType>::type <anonymous> = <missing>]\u2019\n/home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/tools/json-test/main.cpp:78:16:   required from here\n/usr/include/c++/6.1.1/limits:320:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n       ^~~\n/home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/tools/json-test/main.cpp:11:7: note:   because the following virtual functions are pure within \u2018ToJsonBase\u2019:\n class ToJsonBase\n       ^~~~~~~~~~\n/home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/tools/json-test/main.cpp:19:11: note:  virtual ToJsonBase::operator nlohmann::json()\n   virtual operator json() = 0;\n           ^~~~~~~~\nIn file included from /usr/include/c++/6.1.1/bits/uniform_int_dist.h:35:0,\n                 from /usr/include/c++/6.1.1/bits/stl_algo.h:66,\n                 from /usr/include/c++/6.1.1/algorithm:62,\n                 from /home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/./include/net/json.hpp:32,\n                 from /home/lzheng5/Dropbox/home/ncsu/Spring2016/ECE484/IotFaceRec/tools/json-test/main.cpp:1:\n/usr/include/c++/6.1.1/limits:324:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       max() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n       ^~~\n/usr/include/c++/6.1.1/limits:330:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       lowest() noexcept { return _Tp(); }\n       ^~~~~~\n/usr/include/c++/6.1.1/limits:336:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n       ^~~~~~~\n/usr/include/c++/6.1.1/limits:340:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       round_error() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n       ^~~~~~~~~~~\n/usr/include/c++/6.1.1/limits:344:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       infinity() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n       ^~~~~~~~\n/usr/include/c++/6.1.1/limits:349:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n       ^~~~~~~~~\n/usr/include/c++/6.1.1/limits:354:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n       ^~~~~~~~~~~~~\n/usr/include/c++/6.1.1/limits:360:7: error: invalid abstract return type \u2018ToJsonBase\u2019\n       denorm_min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/345", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/345/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/345/events", "html_url": "https://github.com/nlohmann/json/issues/345", "id": 186049265, "node_id": "MDU6SXNzdWUxODYwNDkyNjU=", "number": 345, "title": "Floating point precision lost", "user": {"login": "nickvkaam", "id": 8651871, "node_id": "MDQ6VXNlcjg2NTE4NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8651871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickvkaam", "html_url": "https://github.com/nickvkaam", "followers_url": "https://api.github.com/users/nickvkaam/followers", "following_url": "https://api.github.com/users/nickvkaam/following{/other_user}", "gists_url": "https://api.github.com/users/nickvkaam/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickvkaam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickvkaam/subscriptions", "organizations_url": "https://api.github.com/users/nickvkaam/orgs", "repos_url": "https://api.github.com/users/nickvkaam/repos", "events_url": "https://api.github.com/users/nickvkaam/events{/privacy}", "received_events_url": "https://api.github.com/users/nickvkaam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-29T00:42:59Z", "updated_at": "2016-11-11T18:39:13Z", "closed_at": "2016-11-11T18:39:13Z", "author_association": "NONE", "body": "Input:\n\n```\njson data;\ndata[\"number\"] = 11.4f;\n```\n\noutput:\n\n`std::string dataString = data.dump();`\n\nresult:\n\n```\n{\n    \"number\": 11.3999996185303\n}\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/344", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/344/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/344/events", "html_url": "https://github.com/nlohmann/json/issues/344", "id": 185444832, "node_id": "MDU6SXNzdWUxODU0NDQ4MzI=", "number": 344, "title": "Check \"Parsing JSON is a Minefield\"", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/12", "html_url": "https://github.com/nlohmann/json/milestone/12", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/12/labels", "id": 2071838, "node_id": "MDk6TWlsZXN0b25lMjA3MTgzOA==", "number": 12, "title": "Release 2.0.7", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.\r\n", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2016-10-15T14:53:41Z", "updated_at": "2016-11-02T19:58:08Z", "due_on": "2016-11-02T07:00:00Z", "closed_at": "2016-11-02T19:58:08Z"}, "comments": 5, "created_at": "2016-10-26T16:28:59Z", "updated_at": "2016-11-02T16:04:15Z", "closed_at": "2016-11-02T16:04:15Z", "author_association": "OWNER", "body": "http://seriot.ch/parsing_json.html describes a lot of potential issues. We should have a look whether the library is affected.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/343", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/343/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/343/events", "html_url": "https://github.com/nlohmann/json/issues/343", "id": 185366143, "node_id": "MDU6SXNzdWUxODUzNjYxNDM=", "number": 343, "title": "feature wish: JSONPath", "user": {"login": "tesch1", "id": 322607, "node_id": "MDQ6VXNlcjMyMjYwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/322607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesch1", "html_url": "https://github.com/tesch1", "followers_url": "https://api.github.com/users/tesch1/followers", "following_url": "https://api.github.com/users/tesch1/following{/other_user}", "gists_url": "https://api.github.com/users/tesch1/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesch1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesch1/subscriptions", "organizations_url": "https://api.github.com/users/tesch1/orgs", "repos_url": "https://api.github.com/users/tesch1/repos", "events_url": "https://api.github.com/users/tesch1/events{/privacy}", "received_events_url": "https://api.github.com/users/tesch1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-10-26T11:24:03Z", "updated_at": "2017-03-28T21:56:34Z", "closed_at": "2017-03-28T21:56:34Z", "author_association": "NONE", "body": "A simple query() function would be a fantastic addition.  Maybe it's totally out of scope for this project, but searching the issues didn't turn up any discussion, so maybe this issue is just a place to say it wont be done :)\n\nSome related refs:\nhttp://goessner.net/articles/JsonPath/\nhttps://chromium.googlesource.com/external/mozc/+/master/src/net/jsonpath.cc\nhttps://www.genivia.com/doc/xml-rpc-json/html/\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/342", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/342/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/342/events", "html_url": "https://github.com/nlohmann/json/issues/342", "id": 184679292, "node_id": "MDU6SXNzdWUxODQ2NzkyOTI=", "number": 342, "title": "Allow hex numbers", "user": {"login": "ianmccul", "id": 8558554, "node_id": "MDQ6VXNlcjg1NTg1NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8558554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianmccul", "html_url": "https://github.com/ianmccul", "followers_url": "https://api.github.com/users/ianmccul/followers", "following_url": "https://api.github.com/users/ianmccul/following{/other_user}", "gists_url": "https://api.github.com/users/ianmccul/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianmccul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianmccul/subscriptions", "organizations_url": "https://api.github.com/users/ianmccul/orgs", "repos_url": "https://api.github.com/users/ianmccul/repos", "events_url": "https://api.github.com/users/ianmccul/events{/privacy}", "received_events_url": "https://api.github.com/users/ianmccul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-23T09:08:26Z", "updated_at": "2016-10-23T12:43:07Z", "closed_at": "2016-10-23T12:43:07Z", "author_association": "NONE", "body": "Allowing hexadecimal numbers for integer constants would be very useful.  This would be a JSON extension, but as far as I can tell it wouldn't change the interpretation of any valid JSON syntax, just allow correctly parsing a format that is currently invalid.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/341", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/341/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/341/events", "html_url": "https://github.com/nlohmann/json/issues/341", "id": 184627626, "node_id": "MDU6SXNzdWUxODQ2Mjc2MjY=", "number": 341, "title": "Convert strings to numbers", "user": {"login": "oysteinmyrmo", "id": 6507833, "node_id": "MDQ6VXNlcjY1MDc4MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6507833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oysteinmyrmo", "html_url": "https://github.com/oysteinmyrmo", "followers_url": "https://api.github.com/users/oysteinmyrmo/followers", "following_url": "https://api.github.com/users/oysteinmyrmo/following{/other_user}", "gists_url": "https://api.github.com/users/oysteinmyrmo/gists{/gist_id}", "starred_url": "https://api.github.com/users/oysteinmyrmo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oysteinmyrmo/subscriptions", "organizations_url": "https://api.github.com/users/oysteinmyrmo/orgs", "repos_url": "https://api.github.com/users/oysteinmyrmo/repos", "events_url": "https://api.github.com/users/oysteinmyrmo/events{/privacy}", "received_events_url": "https://api.github.com/users/oysteinmyrmo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-22T12:26:47Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2016-10-22T16:42:11Z", "author_association": "NONE", "body": "I am using the json library to parse a text file containing json data to insert into an SQLite database. Parsing the file works fine, but everything is stored as strings because the data originates from a Wordpress database on a Wordpress server which gives all the contents as strings because PHP. I can of course read all data  as strings and then convert the data to numbers myself (data types are known), but I just wanted to check if there is some built-in functionality for this in the library.\n\nAs an example, consider the following json file fetched from the Wordpress server:\n\n``` js\n{\n    \"my_table\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"foo\"\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"bar\"\n        }\n    ]\n}\n```\n\nIn C++ I would like to parse like this:\n\n``` cpp\nstd::string fileContents = getFileContents(); // We get the data somehow\njson dbData = json::parse(fileContents);\n\njson tableData = dbData[\"my_table\"];\nfor (json j : tableData)\n{\n    // This will fail because PHP gives quoted numbers and j[\"id\"] is thus a string.\n    // Can the library do this conversion in some way, or must it be done manually?\n    int id = j[\"id\"];\n\n    // This works fine, but it causes some overhead (not really important though).\n    // Besides, it is not pretty and kinda bloated. It will also have to handle possible\n    // null values in some way.\n    std::string sId = j[\"id\"];\n    int nId = std::stoi(sId);\n\n    // This is fine, of course.\n    std::string name = j[\"name\"];\n\n    // Run some SQLite queries with the data.\n}\n```\n\nIt is of course also possible to fix this on the server side, but as far as I have been able to figure out it is rather painful and I would like to stay clear of PHP if possible.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/340", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/340/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/340/events", "html_url": "https://github.com/nlohmann/json/issues/340", "id": 184405803, "node_id": "MDU6SXNzdWUxODQ0MDU4MDM=", "number": 340, "title": "\"\"-operators ignore the length parameter", "user": {"login": "bisqwit", "id": 39278, "node_id": "MDQ6VXNlcjM5Mjc4", "avatar_url": "https://avatars0.githubusercontent.com/u/39278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bisqwit", "html_url": "https://github.com/bisqwit", "followers_url": "https://api.github.com/users/bisqwit/followers", "following_url": "https://api.github.com/users/bisqwit/following{/other_user}", "gists_url": "https://api.github.com/users/bisqwit/gists{/gist_id}", "starred_url": "https://api.github.com/users/bisqwit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bisqwit/subscriptions", "organizations_url": "https://api.github.com/users/bisqwit/orgs", "repos_url": "https://api.github.com/users/bisqwit/repos", "events_url": "https://api.github.com/users/bisqwit/events{/privacy}", "received_events_url": "https://api.github.com/users/bisqwit/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/12", "html_url": "https://github.com/nlohmann/json/milestone/12", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/12/labels", "id": 2071838, "node_id": "MDk6TWlsZXN0b25lMjA3MTgzOA==", "number": 12, "title": "Release 2.0.7", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.\r\n", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2016-10-15T14:53:41Z", "updated_at": "2016-11-02T19:58:08Z", "due_on": "2016-11-02T07:00:00Z", "closed_at": "2016-11-02T19:58:08Z"}, "comments": 1, "created_at": "2016-10-21T06:01:22Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2016-10-22T18:57:03Z", "author_association": "NONE", "body": "The operator\"\"_json() and operator\"\"_json_pointer() seem to be ignoring the length parameter generated by the compiler. While this works, the string constant will be used to construct a std::string at least in json_pointer(), and it would be slightly more efficient to pass the length parameter to the std::string constructor, so it does not need to do a strlen-operation to determine how much space to allocate for the string.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/339", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/339/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/339/events", "html_url": "https://github.com/nlohmann/json/issues/339", "id": 184263130, "node_id": "MDU6SXNzdWUxODQyNjMxMzA=", "number": 339, "title": "JSON into std::tuple", "user": {"login": "ibitton", "id": 5803288, "node_id": "MDQ6VXNlcjU4MDMyODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5803288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibitton", "html_url": "https://github.com/ibitton", "followers_url": "https://api.github.com/users/ibitton/followers", "following_url": "https://api.github.com/users/ibitton/following{/other_user}", "gists_url": "https://api.github.com/users/ibitton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibitton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibitton/subscriptions", "organizations_url": "https://api.github.com/users/ibitton/orgs", "repos_url": "https://api.github.com/users/ibitton/repos", "events_url": "https://api.github.com/users/ibitton/events{/privacy}", "received_events_url": "https://api.github.com/users/ibitton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-20T15:32:01Z", "updated_at": "2016-10-20T20:49:51Z", "closed_at": "2016-10-20T20:49:51Z", "author_association": "NONE", "body": "I've visited previous issues mentioning tuple/user-defined types/etc and I thought it would be awesome if I could do something like this:\n`json myJSON;`\n`myJSON[\"stringKey\"] = \"stringVal\";`\n`myJSON[\"intKey\"] = 5;`\n`myJSON[\"customKey\"] = myCustomObj; //this is not really needed for my use case`\n`auto myTuple = myJSON.get<tuple<string, int, MyType /* again, not super necessary */>();`\nI'm not 100% sure this is the right way about it, but I think my objective is clear: have a way to store/retrieve (serialize/deserialize) a dictionary/map with custom types and then get those types back automagically.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/335", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/335/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/335/events", "html_url": "https://github.com/nlohmann/json/issues/335", "id": 183232447, "node_id": "MDU6SXNzdWUxODMyMzI0NDc=", "number": 335, "title": "JSON into vector", "user": {"login": "Lerian715", "id": 22860803, "node_id": "MDQ6VXNlcjIyODYwODAz", "avatar_url": "https://avatars3.githubusercontent.com/u/22860803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lerian715", "html_url": "https://github.com/Lerian715", "followers_url": "https://api.github.com/users/Lerian715/followers", "following_url": "https://api.github.com/users/Lerian715/following{/other_user}", "gists_url": "https://api.github.com/users/Lerian715/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lerian715/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lerian715/subscriptions", "organizations_url": "https://api.github.com/users/Lerian715/orgs", "repos_url": "https://api.github.com/users/Lerian715/repos", "events_url": "https://api.github.com/users/Lerian715/events{/privacy}", "received_events_url": "https://api.github.com/users/Lerian715/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-15T20:54:00Z", "updated_at": "2016-10-23T21:13:21Z", "closed_at": "2016-10-23T21:13:21Z", "author_association": "NONE", "body": "Hi!\nIs it possible to convert directly stream into vector? For eg.\nload file with JSON >> create vector on this data\n"}]