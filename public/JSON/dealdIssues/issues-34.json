[{"url": "https://api.github.com/repos/nlohmann/json/issues/1085", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1085/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1085/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1085/events", "html_url": "https://github.com/nlohmann/json/issues/1085", "id": 322490989, "node_id": "MDU6SXNzdWUzMjI0OTA5ODk=", "number": 1085, "title": "Serializing vector", "user": {"login": "yuvalyo", "id": 39211494, "node_id": "MDQ6VXNlcjM5MjExNDk0", "avatar_url": "https://avatars2.githubusercontent.com/u/39211494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuvalyo", "html_url": "https://github.com/yuvalyo", "followers_url": "https://api.github.com/users/yuvalyo/followers", "following_url": "https://api.github.com/users/yuvalyo/following{/other_user}", "gists_url": "https://api.github.com/users/yuvalyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuvalyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuvalyo/subscriptions", "organizations_url": "https://api.github.com/users/yuvalyo/orgs", "repos_url": "https://api.github.com/users/yuvalyo/repos", "events_url": "https://api.github.com/users/yuvalyo/events{/privacy}", "received_events_url": "https://api.github.com/users/yuvalyo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-05-12T07:35:48Z", "updated_at": "2018-06-03T19:07:49Z", "closed_at": "2018-06-03T19:07:49Z", "author_association": "NONE", "body": "at this moment i'm working on a little project and i'm trying to serialize a vector\r\n\r\nthe current code is:\r\n\r\n```cpp\r\nstd::string JsonResponsePacketSerializer::serializeResponse(HighscoreResponse response)\r\n{\r\n\tjson j;\r\n\tj[\"status\"] = response.status;\r\n\tj[\"highscores\"] = {};\r\n\tfor (auto iter = response.highscores.begin(); iter != response.highscores.end(); ++iter)\r\n\t{\r\n\t\tj[\"highscores\"].push_back(*iter);\r\n\t}\r\n\r\n\r\n\treturn j.dump();\r\n}\r\n```\r\n\r\nas you can see in the struct the \"highscores\" is a vector\r\nbut i'm gettting all kind of erros such as:\r\n1) could not find to_json() method in T's namespace\r\n2)forcing MSVC stacktrace to show which T we're talking about.\r\n\r\nthanks for your help \ud83d\udc4d "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1084", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1084/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1084/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1084/events", "html_url": "https://github.com/nlohmann/json/issues/1084", "id": 322115645, "node_id": "MDU6SXNzdWUzMjIxMTU2NDU=", "number": 1084, "title": "update nested value in multi hierarchy json object", "user": {"login": "HaseebMazhar1", "id": 36299949, "node_id": "MDQ6VXNlcjM2Mjk5OTQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/36299949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HaseebMazhar1", "html_url": "https://github.com/HaseebMazhar1", "followers_url": "https://api.github.com/users/HaseebMazhar1/followers", "following_url": "https://api.github.com/users/HaseebMazhar1/following{/other_user}", "gists_url": "https://api.github.com/users/HaseebMazhar1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HaseebMazhar1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HaseebMazhar1/subscriptions", "organizations_url": "https://api.github.com/users/HaseebMazhar1/orgs", "repos_url": "https://api.github.com/users/HaseebMazhar1/repos", "events_url": "https://api.github.com/users/HaseebMazhar1/events{/privacy}", "received_events_url": "https://api.github.com/users/HaseebMazhar1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-10T23:04:53Z", "updated_at": "2018-05-15T06:29:54Z", "closed_at": "2018-05-15T06:29:54Z", "author_association": "NONE", "body": "Hi, I was trying to integrate nlohmann json library in our project. I was stuck in an issue and could not find any workaround. The issue is I did not know about the level of JSON data and depending upon the key, I have to update the value and return the whole JSON object. The key and data can be of any level.\r\nMy json data would be like this \r\n` \"logger\": {\r\n    \"channels\": {\r\n      \"log_configure\": \"acquired\"\r\n    }}`\r\nkey would be like this logger.channels.log_configure.\r\nI have to change the value of above key to \"not acquired\".\r\n Is this functionality currently supported?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1083", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1083/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1083/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1083/events", "html_url": "https://github.com/nlohmann/json/issues/1083", "id": 322073545, "node_id": "MDU6SXNzdWUzMjIwNzM1NDU=", "number": 1083, "title": "Overriding default values?", "user": {"login": "simulationcloud", "id": 33330174, "node_id": "MDQ6VXNlcjMzMzMwMTc0", "avatar_url": "https://avatars3.githubusercontent.com/u/33330174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simulationcloud", "html_url": "https://github.com/simulationcloud", "followers_url": "https://api.github.com/users/simulationcloud/followers", "following_url": "https://api.github.com/users/simulationcloud/following{/other_user}", "gists_url": "https://api.github.com/users/simulationcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/simulationcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simulationcloud/subscriptions", "organizations_url": "https://api.github.com/users/simulationcloud/orgs", "repos_url": "https://api.github.com/users/simulationcloud/repos", "events_url": "https://api.github.com/users/simulationcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/simulationcloud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-10T20:30:08Z", "updated_at": "2018-06-07T19:39:30Z", "closed_at": "2018-06-07T19:39:30Z", "author_association": "NONE", "body": "I have a json file that I read in using nlohmann:json. It contains nested dicts/lists that are configurations specified by users.\r\n\r\nOnly when a user specifies a value in this file (read in to a json object) should it override the default value, which is specified by another json object. \r\n\r\nMy question is: what's the easiest way to replace all the items in one json object with that of another json object, if that item exists in the other json object?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1082", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1082/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1082/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1082/events", "html_url": "https://github.com/nlohmann/json/issues/1082", "id": 320985611, "node_id": "MDU6SXNzdWUzMjA5ODU2MTE=", "number": 1082, "title": "detail namespace collision with Cereal?", "user": {"login": "RPGillespie6", "id": 9853156, "node_id": "MDQ6VXNlcjk4NTMxNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9853156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RPGillespie6", "html_url": "https://github.com/RPGillespie6", "followers_url": "https://api.github.com/users/RPGillespie6/followers", "following_url": "https://api.github.com/users/RPGillespie6/following{/other_user}", "gists_url": "https://api.github.com/users/RPGillespie6/gists{/gist_id}", "starred_url": "https://api.github.com/users/RPGillespie6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RPGillespie6/subscriptions", "organizations_url": "https://api.github.com/users/RPGillespie6/orgs", "repos_url": "https://api.github.com/users/RPGillespie6/repos", "events_url": "https://api.github.com/users/RPGillespie6/events{/privacy}", "received_events_url": "https://api.github.com/users/RPGillespie6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-07T22:52:27Z", "updated_at": "2018-05-27T16:54:47Z", "closed_at": "2018-05-27T16:52:48Z", "author_association": "NONE", "body": "I'm seeing a very strange bug when using your library in conjunction with C++ Cereal: https://github.com/USCiLab/cereal\r\n\r\nReproduce with the following:\r\n\r\n```c++\r\n#include <json.hpp>\r\n\r\n#include <cereal/types/polymorphic.hpp>\r\n#include <cereal/archives/binary.hpp>\r\n#include <cereal/access.hpp>       //So we can make serialize private so developers aren't tempted to call it.\r\n#include <cereal/types/string.hpp> //This is needed to serialize std::string. There are similar ones for the other std containers\r\n#include <cereal/types/vector.hpp> //This is needed to serialize std::vector. There are similar ones for the other std containers\r\n\r\nusing namespace std;\r\n\r\n//Pure virtual base class\r\nclass Serializable\r\n{\r\n    public:\r\n        virtual int getType() = 0;\r\n\r\n    protected:\r\n        template<class Archive> void serialize(Archive & ar);\r\n};\r\n\r\nclass Bug: public Serializable\r\n{\r\n    public:\r\n        std::string text;\r\n        int getType() {return 1;};\r\n        void load(const nlohmann::json & s) {};\r\n\r\n    private:\r\n        friend class cereal::access;\r\n        template <class Archive> void serialize(Archive &ar) {ar(text);};\r\n};\r\n\r\n// Register Bug\r\nCEREAL_REGISTER_TYPE(Bug);\r\nCEREAL_REGISTER_POLYMORPHIC_RELATION(Serializable, Bug);\r\n\r\nint main()\r\n{\r\n    auto obj = make_shared<Bug>();\r\n\r\n    std::ostringstream os;\r\n    {\r\n        cereal::BinaryOutputArchive oarchive(os);\r\n        oarchive(dynamic_pointer_cast<Serializable>(obj));\r\n    }\r\n\r\n    shared_ptr<Serializable> obj2;\r\n    std::istringstream is(os.str());\r\n    {\r\n        cereal::BinaryInputArchive iarchive(is);\r\n        iarchive(obj2);\r\n    }\r\n\r\n    auto m = dynamic_pointer_cast<Bug>(obj2);\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThis code, when compiled with the latest `nlohmann::json` throws the following:\r\n\r\n```\r\nTrying to load an unregistered polymorphic type (Bug).\r\nMake sure your type is registered with CEREAL_REGISTER_TYPE and that the archive you are using was included (and registered with CEREAL_REGISTER_ARCHIVE) prior to calling CEREAL_REGISTER_TYPE.\r\nIf your type is already registered and you still see this error, you may need to use CEREAL_REGISTER_DYNAMIC_INIT.\r\n```\r\nCuriously though, compiling against a 2.X version of `nlohmann::json` does not produce this exception. \r\n\r\nI noticed this only happens when the method in the `Bug` class is `load`, which is why I'm opening an issue with cereal as well. \r\n\r\nI noticed one change from `nlohmann::json` 2.X->3.X is the inclusion of the `nlohmann::detail` namespace. Could this be somehow conflicting with `cereal::detail`? I will also open an issue against `cereal` as well.\r\n\r\nStill trying to figure out root cause of this. It may not be your library, just trying to figure out why I can no longer use `nlohmann::json` with Cereal when I upgrade from 2.X to 3.X\r\n\r\nCereal issue: https://github.com/USCiLab/cereal/issues/499"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1081", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1081/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1081/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1081/events", "html_url": "https://github.com/nlohmann/json/issues/1081", "id": 320968076, "node_id": "MDU6SXNzdWUzMjA5NjgwNzY=", "number": 1081, "title": "Error using json.dump();", "user": {"login": "Jerajo", "id": 26252994, "node_id": "MDQ6VXNlcjI2MjUyOTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26252994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jerajo", "html_url": "https://github.com/Jerajo", "followers_url": "https://api.github.com/users/Jerajo/followers", "following_url": "https://api.github.com/users/Jerajo/following{/other_user}", "gists_url": "https://api.github.com/users/Jerajo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jerajo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jerajo/subscriptions", "organizations_url": "https://api.github.com/users/Jerajo/orgs", "repos_url": "https://api.github.com/users/Jerajo/repos", "events_url": "https://api.github.com/users/Jerajo/events{/privacy}", "received_events_url": "https://api.github.com/users/Jerajo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-07T21:41:35Z", "updated_at": "2018-05-07T22:07:00Z", "closed_at": "2018-05-07T22:07:00Z", "author_association": "NONE", "body": "I'm using visual studio and I got this error. on the `xutility file`\r\n\r\n```console\r\nException thrown: write access violation.\r\nthis was 0xAFE3D714.\r\n```\r\n\r\n I'm doing a \"C\" compatible DLL in C++. Here is the code:\r\n\r\n```C++\r\n#define gmx extern \"C\" __declspec(dllexport)\r\nusing json = nlohmann::json;\r\n\r\nstatic json jsonDoc;\r\n\r\ngmx double read(char* path) {\r\n\ttry\r\n\t{\r\n\t\tifstream jsonFile(path);\r\n\t\tjsonFile >> jsonDoc;\r\n\t}\r\n\tcatch (const std::exception& error)\r\n\t{\r\n\t\tcout << error.what() << endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\ngmx string getJsonFile() {\r\n\treturn jsonDoc.dump();\r\n}\r\n```\r\nThen I implement it like this.\r\n\r\n```C++\r\n_read(file);\r\nstring output = _getJsonFile();\r\ncout << output.c_str();\r\n```\r\nI don't know what I doing wrong. I hope someone can help me.\r\n---\r\nwindows 10 x86 Visual Studio 2017 (v141):\r\nprint screen:\r\n![image](https://user-images.githubusercontent.com/26252994/39726609-9740ba46-521d-11e8-8c0a-fa493f726d7d.png)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1080", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1080/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1080/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1080/events", "html_url": "https://github.com/nlohmann/json/issues/1080", "id": 320873400, "node_id": "MDU6SXNzdWUzMjA4NzM0MDA=", "number": 1080, "title": "Consuming TCP Stream", "user": {"login": "DogFive", "id": 1100426, "node_id": "MDQ6VXNlcjExMDA0MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DogFive", "html_url": "https://github.com/DogFive", "followers_url": "https://api.github.com/users/DogFive/followers", "following_url": "https://api.github.com/users/DogFive/following{/other_user}", "gists_url": "https://api.github.com/users/DogFive/gists{/gist_id}", "starred_url": "https://api.github.com/users/DogFive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DogFive/subscriptions", "organizations_url": "https://api.github.com/users/DogFive/orgs", "repos_url": "https://api.github.com/users/DogFive/repos", "events_url": "https://api.github.com/users/DogFive/events{/privacy}", "received_events_url": "https://api.github.com/users/DogFive/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-07T16:41:28Z", "updated_at": "2018-05-08T20:26:11Z", "closed_at": "2018-05-08T20:26:11Z", "author_association": "NONE", "body": "This is a question not an issue. I saw various issues back from this time last year about streams. Would the stream parser be able to parse/consume a TCP stream's buffer?\r\n\r\nFor example, it parses to the end of the buffer and the completing JSON isn't queued yet so it can rewind on buffer when new data has been queued. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1079", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1079/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1079/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1079/events", "html_url": "https://github.com/nlohmann/json/issues/1079", "id": 320715888, "node_id": "MDU6SXNzdWUzMjA3MTU4ODg=", "number": 1079, "title": "Compilation error with strong typed enums in map in combination with namespaces", "user": {"login": "an-ky", "id": 6542281, "node_id": "MDQ6VXNlcjY1NDIyODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6542281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/an-ky", "html_url": "https://github.com/an-ky", "followers_url": "https://api.github.com/users/an-ky/followers", "following_url": "https://api.github.com/users/an-ky/following{/other_user}", "gists_url": "https://api.github.com/users/an-ky/gists{/gist_id}", "starred_url": "https://api.github.com/users/an-ky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/an-ky/subscriptions", "organizations_url": "https://api.github.com/users/an-ky/orgs", "repos_url": "https://api.github.com/users/an-ky/repos", "events_url": "https://api.github.com/users/an-ky/events{/privacy}", "received_events_url": "https://api.github.com/users/an-ky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-07T08:20:43Z", "updated_at": "2018-05-28T12:53:24Z", "closed_at": "2018-05-28T12:53:24Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nCompilation error.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nCompiling the small program below results in C2166: l-value specifies const object (see full compiler output below). When putting the map and the to/from_json in the same namespace it compiles. It boilds down to an assignment/construction of the map's value type.\r\n```\r\n#include <json/json.hpp>\r\n#include <map>\r\n#include <string>\r\n\r\nnamespace bla\r\n{\r\nenum class foo : uint16_t\r\n{\r\n\tbar, baz\r\n};\r\n} // comment this out and the lines above main in and it will compile\r\nusing foo_map = std::map<foo, std::string>;\r\n\r\nvoid to_json(nlohmann::json& j, const foo_map& m)\r\n{\r\n\r\n}\r\n\r\nvoid from_json(const nlohmann::json& j, foo_map& m)\r\n{\r\n\r\n}\r\n//}\r\n//using bla::foo_map;\r\nint main(int, char**)\r\n{\r\n\tnlohmann::json j;\r\n\tfoo_map m = j;\r\n}\r\n```\r\n\r\n- What is the expected behavior?\r\nIt should compile without errors \r\n\r\n- And what is the actual behavior instead?\r\nCompilation errors\r\n```\r\ncompiling main.cpp\r\nC:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.13.26128/bin/HostX64/x64/cl.exe /nologo /c /EHsc /Od /Zi /MDd \"/IC:\\Program Files (x86)\\IntelSWTools\\compilers_and_libraries\\windows\\ipp\\include\" /IC:\\Qt\\Qt5.9.5\\5.9.5\\msvc2017_64\\include /IC:\\Qt\\Qt5.9.5\\5.9.5\\msvc2017_64\\include\\QtCore /IC:\\Qt\\Qt5.9.5\\5.9.5\\msvc2017_64\\mkspecs\\win32-msvc /IC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\build-scratchpad-VC17ohneQt-Debug\\qtc_VC17_91031919-debug\\scratchpad.a434f584\\qt.headers /IC:\\Projekte\\thirdparty\\boost /IC:\\Projekte\\thirdparty\\fmt /IC:\\Projekte\\thirdparty\\json /IC:\\Projekte\\thirdparty\\nonius\\nonius /IC:\\Projekte\\thirdparty\\range-v3\\range-v3-vs2015\\include /DUNICODE /D_UNICODE /DWIN32 /DQT_CORE_LIB /DBOOST_LIB_DIAGNOSTIC /DBOOST_AUTO_LINK_TAGGED /DBOOST_RESULT_OF_USE_DECLTYPE /DBOOST_QT_PUSHBACK_WORKAROUND \"/DBOOST_QT_LISTOF_WORKAROUND=1\" \"/DWINVER=0x0502\" \"/D_WIN32_WINNT=0x0502\" \"/D_WIN32_WINDOWS=0x0502\" /FoC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\build-scratchpad-VC17ohneQt-Debug\\qtc_VC17_91031919-debug\\scratchpad.a434f584\\3a52ce780950d4d9\\main.cpp.obj C:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\scratchpad\\main.cpp /TP /FS /permissive- /std:c++latest /Zm200\r\n:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\utility(268): error C2166: l-value specifies const object\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\utility(267): note: while compiling class template member function 'std::pair<const _Kty,_Ty> &std::pair<const _Kty,_Ty>::operator =(std::pair<const _Kty,_Ty> &&) noexcept(false)'\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\nC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\monalysis-porsche\\thirdparty\\json\\json/json.hpp(1172): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty> &std::pair<const _Kty,_Ty>::operator =(std::pair<const _Kty,_Ty> &&) noexcept(false)' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(443): note: see reference to class template instantiation 'std::pair<const _Kty,_Ty>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(739): note: see reference to class template instantiation 'std::_Tree_node<std::pair<const _Kty,_Ty>,std::_Default_allocator_traits<_Alloc>::void_pointer>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(738): note: while compiling class template member function 'void std::_Tree_comp_alloc<_Traits>::_Freeheadnode(std::_Tree_node<std::pair<const _Kty,_Ty>,std::_Default_allocator_traits<_Alloc>::void_pointer> *)'\r\n        with\r\n        [\r\n            _Traits=std::_Tmap_traits<bla::foo,std::string,std::less<bla::foo>,std::allocator<std::pair<const bla::foo,std::string>>,false>,\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(631): note: see reference to function template instantiation 'void std::_Tree_comp_alloc<_Traits>::_Freeheadnode(std::_Tree_node<std::pair<const _Kty,_Ty>,std::_Default_allocator_traits<_Alloc>::void_pointer> *)' being compiled\r\n        with\r\n        [\r\n            _Traits=std::_Tmap_traits<bla::foo,std::string,std::less<bla::foo>,std::allocator<std::pair<const bla::foo,std::string>>,false>,\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(842): note: see reference to class template instantiation 'std::_Tree_comp_alloc<_Traits>' being compiled\r\n        with\r\n        [\r\n            _Traits=std::_Tmap_traits<bla::foo,std::string,std::less<bla::foo>,std::allocator<std::pair<const bla::foo,std::string>>,false>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\map(81): note: see reference to class template instantiation 'std::_Tree<std::_Tmap_traits<_Kty,_Ty,_Pr,_Alloc,false>>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Pr=std::less<bla::foo>,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\scratchpad\\main.cpp(212): note: see reference to class template instantiation 'std::map<bla::foo,std::string,std::less<_Kty>,std::allocator<std::pair<const _Kty,_Ty>>>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\n```\r\n\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nMSVC 2017 (15.6.6); MSVC 19.0.24215.1 (CMake output)\r\nNot directly supported.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nRelease 3.1.2\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\nTried but ctest gives error `Test not available without configuration.  (Missing \"-C <config>\"?)` for every test case. If told how to fix this I'll happily execute the tests."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1076", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1076/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1076/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1076/events", "html_url": "https://github.com/nlohmann/json/issues/1076", "id": 319772333, "node_id": "MDU6SXNzdWUzMTk3NzIzMzM=", "number": 1076, "title": "cassert error", "user": {"login": "sburnwal", "id": 18064711, "node_id": "MDQ6VXNlcjE4MDY0NzEx", "avatar_url": "https://avatars1.githubusercontent.com/u/18064711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sburnwal", "html_url": "https://github.com/sburnwal", "followers_url": "https://api.github.com/users/sburnwal/followers", "following_url": "https://api.github.com/users/sburnwal/following{/other_user}", "gists_url": "https://api.github.com/users/sburnwal/gists{/gist_id}", "starred_url": "https://api.github.com/users/sburnwal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sburnwal/subscriptions", "organizations_url": "https://api.github.com/users/sburnwal/orgs", "repos_url": "https://api.github.com/users/sburnwal/repos", "events_url": "https://api.github.com/users/sburnwal/events{/privacy}", "received_events_url": "https://api.github.com/users/sburnwal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-03T02:44:15Z", "updated_at": "2018-05-27T16:19:32Z", "closed_at": "2018-05-27T16:19:32Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nI know you have mentioned that this json lib works great with gcc 4.9. However, my project is big and it uses gcc 4.8 which is not easy to migrate to 4.9. When I write a small program, it works great. I can test json sample programs as you have mentioned in documentation. However, I want to use it in my project that is gcc 4.8.2 based. I took off the gcc 9 check from json.hpp and compiled fine and ran some tests that was all fine. But once in my poroject, my build does not go through. It gives this error:\r\n\r\n```\r\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\r\n from ../security/src/libjwt/include/jwt/json.hpp:34,\r\n\r\nAt line 34 in json.hpp: \r\n   32 #include <algorithm> // all_of, copy, fill, find, for_each, none_of, remove, reverse, transform\r\n   33 #include <array>   // array\r\n   34 #include <cassert> // assert\r\n   35 #include <cctype>  // isdigit\r\n\r\n../security/src/libjwt/include/jwt/json.hpp:6055:31:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::parse(IteratorType, IteratorType, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::parser_callback_t) [with IteratorType = const char*; typename std::enable_if<std::is_base_of<std::random_access_iterator_tag, typename std::iterator_traits<_II1>::iterator_category>::value, int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\r\n\r\n../security/src/libjwt/include/jwt/json.hpp:11764:40:   required from here\r\n../security/src/libjwt/include/jwt/json.hpp:1579:19: error: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second: [-Werror]\r\n     assert(object != nullptr);\r\n\r\n```\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nSorry, I cannot myself repro it but want to know if anyone has faced it and what is the likely way to get out of it ? Any hint would be helpful.\r\n\r\n- What is the expected behavior?\r\nCompilation should succeed.\r\n\r\n- And what is the actual behavior instead?\r\nCompilation error.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1075", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1075/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1075/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1075/events", "html_url": "https://github.com/nlohmann/json/issues/1075", "id": 319758831, "node_id": "MDU6SXNzdWUzMTk3NTg4MzE=", "number": 1075, "title": "Valid json data not being parsed", "user": {"login": "moshe-rabaev", "id": 12215501, "node_id": "MDQ6VXNlcjEyMjE1NTAx", "avatar_url": "https://avatars3.githubusercontent.com/u/12215501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moshe-rabaev", "html_url": "https://github.com/moshe-rabaev", "followers_url": "https://api.github.com/users/moshe-rabaev/followers", "following_url": "https://api.github.com/users/moshe-rabaev/following{/other_user}", "gists_url": "https://api.github.com/users/moshe-rabaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/moshe-rabaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moshe-rabaev/subscriptions", "organizations_url": "https://api.github.com/users/moshe-rabaev/orgs", "repos_url": "https://api.github.com/users/moshe-rabaev/repos", "events_url": "https://api.github.com/users/moshe-rabaev/events{/privacy}", "received_events_url": "https://api.github.com/users/moshe-rabaev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-03T00:56:46Z", "updated_at": "2018-05-23T17:38:07Z", "closed_at": "2018-05-23T17:38:07Z", "author_association": "NONE", "body": "libc++abi.dylib: terminating with uncaught exception of type nlohmann::detail::parse_error: [json.exception.parse_error.101] parse error at 1: syntax error - unexpected end of input; expected '[', '{', or a literal\r\nAbort trap: 6\r\n\r\nI'm parsing sport json data from a website and I get the text and parse it but it throws me the error\r\nabove. I validated the data using a tool online, it shows there are no errors so it must be nlohmann::json.\r\n\r\nThis is the data:\r\n{\"fullgameschedule\":{\"lastUpdatedOn\":\"2018-04-13 2:44:29 AM\",\"gameentry\":[{\"id\":\"33943\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-25\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"101\",\"City\":\"Golden State\",\"Name\":\"Warriors\",\"Abbreviation\":\"GSW\"},\"location\":\"Oracle Arena\"},{\"id\":\"33956\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-27\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"location\":\"Sleep Train Arena\"},{\"id\":\"33972\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-29\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"33977\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-30\",\"time\":\"6:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"92\",\"City\":\"Miami\",\"Name\":\"Heat\",\"Abbreviation\":\"MIA\"},\"location\":\"American Airlines Arena\"},{\"id\":\"33993\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-01\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34017\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-04\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"location\":\"Vivint Smart Home Arena\"},{\"id\":\"34026\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-05\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34054\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-09\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34067\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-11\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"88\",\"City\":\"Detroit\",\"Name\":\"Pistons\",\"Abbreviation\":\"DET\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34074\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-12\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"location\":\"Toyota Center\"},{\"id\":\"34090\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-14\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"92\",\"City\":\"Miami\",\"Name\":\"Heat\",\"Abbreviation\":\"MIA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34108\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-16\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"location\":\"Sleep Train Arena\"},{\"id\":\"34122\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-18\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"location\":\"Staples Center\"},{\"id\":\"34146\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-21\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34153\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-23\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"93\",\"City\":\"Charlotte\",\"Name\":\"Hornets\",\"Abbreviation\":\"CHA\"},\"location\":\"Spectrum Center\"},{\"id\":\"34165\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-25\",\"time\":\"1:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"82\",\"City\":\"Boston\",\"Name\":\"Celtics\",\"Abbreviation\":\"BOS\"},\"location\":\"TD Garden\"},{\"id\":\"34180\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-26\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"94\",\"City\":\"Washington\",\"Name\":\"Wizards\",\"Abbreviation\":\"WAS\"},\"location\":\"Verizon Center\"},{\"id\":\"34204\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-29\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"95\",\"City\":\"Orlando\",\"Name\":\"Magic\",\"Abbreviation\":\"ORL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34212\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-30\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"location\":\"American Airlines Center\"},{\"id\":\"34229\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-02\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"94\",\"City\":\"Washington\",\"Name\":\"Wizards\",\"Abbreviation\":\"WAS\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34249\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-05\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"90\",\"City\":\"Milwaukee\",\"Name\":\"Bucks\",\"Abbreviation\":\"MIL\"},\"location\":\"BMO Bradley Harris Center\"},{\"id\":\"34259\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-06\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"location\":\"Target Center\"},{\"id\":\"34276\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-08\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"89\",\"City\":\"Chicago\",\"Name\":\"Bulls\",\"Abbreviation\":\"CHI\"},\"location\":\"KeyBank Center\"},{\"id\":\"34293\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-10\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"84\",\"City\":\"Brooklyn\",\"Name\":\"Nets\",\"Abbreviation\":\"BRO\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34323\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-14\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"82\",\"City\":\"Boston\",\"Name\":\"Celtics\",\"Abbreviation\":\"BOS\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"40235\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-15\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"104\",\"City\":\"Phoenix\",\"Name\":\"Suns\",\"Abbreviation\":\"PHX\"},\"location\":\"Talking Stick Resort Arena\"},{\"id\":\"34352\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-18\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34365\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-20\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"location\":\"Toyota Center\"},{\"id\":\"34381\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-22\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"location\":\"Staples Center\"},{\"id\":\"34394\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-23\",\"time\":\"10:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"location\":\"Moda Center\"},{\"id\":\"34398\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-25\",\"time\":\"5:00PM\",\"awayTeam\":{\"ID\":\"89\",\"City\":\"Chicago\",\"Name\":\"Bulls\",\"Abbreviation\":\"CHI\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34422\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-28\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"104\",\"City\":\"Phoenix\",\"Name\":\"Suns\",\"Abbreviation\":\"PHX\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34439\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-30\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34448\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-01\",\"time\":\"6:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"91\",\"City\":\"Atlanta\",\"Name\":\"Hawks\",\"Abbreviation\":\"ATL\"},\"location\":\"Philips Arena\"},{\"id\":\"34465\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-03\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"81\",\"City\":\"Toronto\",\"Name\":\"Raptors\",\"Abbreviation\":\"TOR\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34483\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-05\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"99\",\"City\":\"Denver\",\"Name\":\"Nuggets\",\"Abbreviation\":\"DEN\"},\"location\":\"Pepsi Center\"},{\"id\":\"34498\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-07\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"93\",\"City\":\"Charlotte\",\"Name\":\"Hornets\",\"Abbreviation\":\"CHA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34515\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-10\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"90\",\"City\":\"Milwaukee\",\"Name\":\"Bucks\",\"Abbreviation\":\"MIL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34529\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-12\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34543\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-14\",\"time\":\"6:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"104\",\"City\":\"Phoenix\",\"Name\":\"Suns\",\"Abbreviation\":\"PHX\"},\"location\":\"Talking Stick Resort Arena\"},{\"id\":\"34565\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-17\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34579\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-19\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"99\",\"City\":\"Denver\",\"Name\":\"Nuggets\",\"Abbreviation\":\"DEN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34597\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-21\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"86\",\"City\":\"Cleveland\",\"Name\":\"Cavaliers\",\"Abbreviation\":\"CLE\"},\"location\":\"Quicken Loans Arena\"},{\"id\":\"34606\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-23\",\"time\":\"7:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"84\",\"City\":\"Brooklyn\",\"Name\":\"Nets\",\"Abbreviation\":\"BRO\"},\"location\":\"Barclays Center\"},{\"id\":\"34614\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-24\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"81\",\"City\":\"Toronto\",\"Name\":\"Raptors\",\"Abbreviation\":\"TOR\"},\"location\":\"Air Canada Center\"},{\"id\":\"34641\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-27\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"location\":\"Smoothie King Center\"},{\"id\":\"34657\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-29\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34667\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-31\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"96\",\"City\":\"Oklahoma City\",\"Name\":\"Thunder\",\"Abbreviation\":\"OKL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34684\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-02\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"85\",\"City\":\"Philadelphia\",\"Name\":\"76ers\",\"Abbreviation\":\"PHI\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34702\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-04\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"99\",\"City\":\"Denver\",\"Name\":\"Nuggets\",\"Abbreviation\":\"DEN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34717\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-06\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"location\":\"FedEx Forum\"},{\"id\":\"34722\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-08\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"85\",\"City\":\"Philadelphia\",\"Name\":\"76ers\",\"Abbreviation\":\"PHI\"},\"location\":\"Wells Fargo Center\"},{\"id\":\"34741\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-10\",\"time\":\"7:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"88\",\"City\":\"Detroit\",\"Name\":\"Pistons\",\"Abbreviation\":\"DET\"},\"location\":\"The Palace of Auburn Hills\"},{\"id\":\"34757\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-12\",\"time\":\"3:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"83\",\"City\":\"New York\",\"Name\":\"Knicks\",\"Abbreviation\":\"NYK\"},\"location\":\"Madison Square Garden\"},{\"id\":\"34765\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-13\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"87\",\"City\":\"Indiana\",\"Name\":\"Pacers\",\"Abbreviation\":\"IND\"},\"location\":\"Bankers Life Fieldhouse\"},{\"id\":\"34774\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-15\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"95\",\"City\":\"Orlando\",\"Name\":\"Magic\",\"Abbreviation\":\"ORL\"},\"location\":\"Amway Center\"},{\"id\":\"34805\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-24\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"location\":\"Staples Center\"},{\"id\":\"34814\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-26\",\"time\":\"3:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"location\":\"Staples Center\"},{\"id\":\"34842\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-01\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"87\",\"City\":\"Indiana\",\"Name\":\"Pacers\",\"Abbreviation\":\"IND\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34857\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-03\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"location\":\"Smoothie King Center\"},{\"id\":\"34865\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-04\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34882\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-06\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34897\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-08\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34902\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-09\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"96\",\"City\":\"Oklahoma City\",\"Name\":\"Thunder\",\"Abbreviation\":\"OKL\"},\"location\":\"Chesapeake Energy Arena\"},{\"id\":\"34920\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-11\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"101\",\"City\":\"Golden State\",\"Name\":\"Warriors\",\"Abbreviation\":\"GSW\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34934\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-13\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"91\",\"City\":\"Atlanta\",\"Name\":\"Hawks\",\"Abbreviation\":\"ATL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34951\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-15\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34973\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-18\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"location\":\"FedEx Forum\"},{\"id\":\"34982\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-19\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34996\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-21\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"location\":\"Target Center\"},{\"id\":\"35010\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-23\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35025\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-25\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"83\",\"City\":\"New York\",\"Name\":\"Knicks\",\"Abbreviation\":\"NYK\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35039\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-27\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"86\",\"City\":\"Cleveland\",\"Name\":\"Cavaliers\",\"Abbreviation\":\"CLE\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35058\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-29\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"101\",\"City\":\"Golden State\",\"Name\":\"Warriors\",\"Abbreviation\":\"GSW\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35075\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-31\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"96\",\"City\":\"Oklahoma City\",\"Name\":\"Thunder\",\"Abbreviation\":\"OKL\"},\"location\":\"Chesapeake Energy Arena\"},{\"id\":\"35086\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-02\",\"time\":\"3:30PM\",\"awayTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35101\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-04\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35110\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-05\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35123\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-07\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"location\":\"American Airlines Center\"},{\"id\":\"35133\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-08\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35149\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-10\",\"time\":\"10:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"location\":\"Moda Center\"},{\"id\":\"35167\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-12\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"location\":\"Vivint Smart Home Arena\"}]}}\r\n\r\nStore the above in a std::string and parse it using:\r\njson::parse(str.begin(), str.end())\r\n\r\n- What is the expected behavior?\r\nTo parse the data with no errors\r\n\r\n- And what is the actual behavior instead?\r\nIt throws an exception\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nIt's not a runtime error so this question isn't applicable.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nThe develop version."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1074", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1074/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1074/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1074/events", "html_url": "https://github.com/nlohmann/json/issues/1074", "id": 319728329, "node_id": "MDU6SXNzdWUzMTk3MjgzMjk=", "number": 1074, "title": "Feature request :: Better testing for key existance without try/catch", "user": {"login": "mlfarrell", "id": 7664370, "node_id": "MDQ6VXNlcjc2NjQzNzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7664370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlfarrell", "html_url": "https://github.com/mlfarrell", "followers_url": "https://api.github.com/users/mlfarrell/followers", "following_url": "https://api.github.com/users/mlfarrell/following{/other_user}", "gists_url": "https://api.github.com/users/mlfarrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlfarrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlfarrell/subscriptions", "organizations_url": "https://api.github.com/users/mlfarrell/orgs", "repos_url": "https://api.github.com/users/mlfarrell/repos", "events_url": "https://api.github.com/users/mlfarrell/events{/privacy}", "received_events_url": "https://api.github.com/users/mlfarrell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-02T22:04:41Z", "updated_at": "2018-05-04T17:03:20Z", "closed_at": "2018-05-04T17:03:20Z", "author_association": "NONE", "body": "Correct me if I'm wrong, but using a const json obj + .at() + try/catch is the only way safe to test for object key exists.  This seems REALLY brutal compared to the ease of use using the rest of the library\r\n\r\nPerhaps there'd be some way to return a bool operator comparable for object gets along the lines of\r\n```\r\nif(auto possibleVal = json[\"maybeExists\"])\r\n{\r\n  //possibleVal exists\r\n}\r\n```\r\n\r\nor.. at the very least, a .exists(const std::string &) method would be helpful.."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1073", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1073/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1073/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1073/events", "html_url": "https://github.com/nlohmann/json/issues/1073", "id": 319285271, "node_id": "MDU6SXNzdWUzMTkyODUyNzE=", "number": 1073, "title": "Hi, I have input like a.b.c and want to convert it to \\\"a\\\"{\\\"b\\\": \\\"c\\\"} form. Any suggestions how do I do this? Thanks.", "user": {"login": "dmg10", "id": 14875270, "node_id": "MDQ6VXNlcjE0ODc1Mjcw", "avatar_url": "https://avatars1.githubusercontent.com/u/14875270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmg10", "html_url": "https://github.com/dmg10", "followers_url": "https://api.github.com/users/dmg10/followers", "following_url": "https://api.github.com/users/dmg10/following{/other_user}", "gists_url": "https://api.github.com/users/dmg10/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmg10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmg10/subscriptions", "organizations_url": "https://api.github.com/users/dmg10/orgs", "repos_url": "https://api.github.com/users/dmg10/repos", "events_url": "https://api.github.com/users/dmg10/events{/privacy}", "received_events_url": "https://api.github.com/users/dmg10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-01T18:38:19Z", "updated_at": "2018-05-01T21:44:06Z", "closed_at": "2018-05-01T21:44:06Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\n\r\n- And what is the actual behavior instead?\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1072", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1072/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1072/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1072/events", "html_url": "https://github.com/nlohmann/json/issues/1072", "id": 319276708, "node_id": "MDU6SXNzdWUzMTkyNzY3MDg=", "number": 1072, "title": "ADL deserializer not picked up for non default-constructible type", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-01T18:08:45Z", "updated_at": "2018-05-01T18:24:35Z", "closed_at": "2018-05-01T18:24:35Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\nI am seeing a situation where\r\n\r\n```cpp\r\nv = j;\r\n```\r\npicks up the default deserializer, which yields in my case\r\n\r\n```\r\nStandard Exception: [json.exception.type_error.302] type must be number, but is array\r\n```\r\n\r\nwhile an unqualified call to `from_Json` like\r\n\r\n```\r\nfrom_json(j, v);\r\n```\r\n\r\nresults in the right overload being picked up through ADL.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nThis came up in the xtensor PR https://github.com/QuantStack/xtensor/pull/830 in which I joined an example notebook:\r\n\r\nhttps://github.com/SylvainCorlay/xtensor/blob/d4a67ac488fc10a99b7238d9314a9970f5562c34/notebooks/json.ipynb\r\n\r\n<img width=\"742\" alt=\"screen shot 2018-05-01 at 8 18 39 pm\" src=\"https://user-images.githubusercontent.com/2397974/39486566-ea6ed0e0-4d7c-11e8-8e59-5b03052a6aa1.png\">\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nClang (through cling) for the example, but I see the same thing in gcc.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nno\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nno compilation error"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1071", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1071/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1071/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1071/events", "html_url": "https://github.com/nlohmann/json/issues/1071", "id": 319027651, "node_id": "MDU6SXNzdWUzMTkwMjc2NTE=", "number": 1071, "title": "Deserializing std::array doesn't compiler (no insert())", "user": {"login": "Yitzi2", "id": 24446322, "node_id": "MDQ6VXNlcjI0NDQ2MzIy", "avatar_url": "https://avatars2.githubusercontent.com/u/24446322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yitzi2", "html_url": "https://github.com/Yitzi2", "followers_url": "https://api.github.com/users/Yitzi2/followers", "following_url": "https://api.github.com/users/Yitzi2/following{/other_user}", "gists_url": "https://api.github.com/users/Yitzi2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yitzi2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yitzi2/subscriptions", "organizations_url": "https://api.github.com/users/Yitzi2/orgs", "repos_url": "https://api.github.com/users/Yitzi2/repos", "events_url": "https://api.github.com/users/Yitzi2/events{/privacy}", "received_events_url": "https://api.github.com/users/Yitzi2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-30T20:39:33Z", "updated_at": "2018-05-02T14:40:07Z", "closed_at": "2018-05-02T14:40:07Z", "author_association": "NONE", "body": "I've found that, at least in Visual Studio (but I suspect everywhere), attempting to convert a JSON into a std::array fails to compile, since std::array has a value type (and therefore uses the container deserializer), but no insert() method (which is used by the container deserializer).  While not all that hard to work around, it'd be nice to have it fixed."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1070", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1070/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1070/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1070/events", "html_url": "https://github.com/nlohmann/json/issues/1070", "id": 318957460, "node_id": "MDU6SXNzdWUzMTg5NTc0NjA=", "number": 1070, "title": "Serializing OpenCV Mat problem", "user": {"login": "ArkadiuszRaj", "id": 16072469, "node_id": "MDQ6VXNlcjE2MDcyNDY5", "avatar_url": "https://avatars3.githubusercontent.com/u/16072469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArkadiuszRaj", "html_url": "https://github.com/ArkadiuszRaj", "followers_url": "https://api.github.com/users/ArkadiuszRaj/followers", "following_url": "https://api.github.com/users/ArkadiuszRaj/following{/other_user}", "gists_url": "https://api.github.com/users/ArkadiuszRaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArkadiuszRaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArkadiuszRaj/subscriptions", "organizations_url": "https://api.github.com/users/ArkadiuszRaj/orgs", "repos_url": "https://api.github.com/users/ArkadiuszRaj/repos", "events_url": "https://api.github.com/users/ArkadiuszRaj/events{/privacy}", "received_events_url": "https://api.github.com/users/ArkadiuszRaj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-30T16:45:55Z", "updated_at": "2018-05-25T05:45:39Z", "closed_at": "2018-05-24T20:20:00Z", "author_association": "NONE", "body": "Hello,\r\n\r\nTrying to serialise Mat object taken from camera\r\n\r\n```cpp\r\n        json j;\t\r\n        Mat image;\r\n\tj[\"PREVIEW\"] = {\r\n\t\t{\"GAIN\", gain()},\r\n\t\t{\"EXPOSURE\", exposure()},\r\n\t\t{\"IMAGE\", image},\r\n\t};\r\n```\r\nOf course specialised serializer is prepared, for the sake of clarity only one Mat depth is shown:\r\n```cpp\r\nvoid to_json(json& j, const Mat& m)  \r\n{\r\n\tjson array = json::array();\r\n\r\n\tint cols = m.cols;\r\n\tint rows = m.rows;\r\n\tint depth = m.depth();\r\n\t\r\n\tif( m.isContinuous() ) {\r\n\t\tcols *= rows,\r\n\t\trows = 1;\r\n\t}\r\n\tswitch(depth) {\r\n\t\tcase CV_8U:\r\n\t\t\tfor(int row = 0; row < rows; row++) {\r\n\t\t\t\tauto vp = m.ptr<uchar>(row);\r\n\t\t\t\tfor(int col=0; col < cols; col++, vp++)\r\n\t\t\t\t\tarray.push_back(*vp); \r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\tj = json{\r\n\t\t{\"COLS\", cols},\r\n\t\t{\"ROWS\", rows},\r\n\t\t{\"TYPE\", depth},\r\n\t\t{\"DATA\", array}\r\n\t};\r\n}\r\n\r\n```\r\nBut code throws:\r\n```\r\nOpenCV(4.0.0-pre) /usr/local/include/opencv2/core/mat.inl.hpp:183: error: (-210:Unsupported format or combination of formats) in function '_OutputArray'\r\n> std::vector<bool> cannot be an output array\r\n```\r\nIt seems that somewhere under the hood the Mat type is changed while calling serializer.\r\n\r\nBut code works when I am explicitly calling serializer by myself:\r\n```cpp\r\n\tj[\"PREVIEW\"] = {\r\n\t\t{\"GAIN\", gain()},\r\n\t\t{\"EXPOSURE\", exposure()}\r\n\t};\r\n       to_json(j[\"PREVIEW\"][\"IMAGE\"], image) ;\r\n```\r\nWhy first version does not?\r\nAdditionally, while pushing to array, json dump() (or serializing to stream in general) puts single value per line, making file unreadable. Is there possibility to set  number of values per line?\r\nAnd can I serialize in such a way 3Mpx image? yes, finally I will put some base64 encoding yet still I need to serialize full image from time to time\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1068", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1068/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1068/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1068/events", "html_url": "https://github.com/nlohmann/json/issues/1068", "id": 317732626, "node_id": "MDU6SXNzdWUzMTc3MzI2MjY=", "number": 1068, "title": "Compilation error with ICPC compiler", "user": {"login": "stefashkaa", "id": 17688105, "node_id": "MDQ6VXNlcjE3Njg4MTA1", "avatar_url": "https://avatars2.githubusercontent.com/u/17688105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefashkaa", "html_url": "https://github.com/stefashkaa", "followers_url": "https://api.github.com/users/stefashkaa/followers", "following_url": "https://api.github.com/users/stefashkaa/following{/other_user}", "gists_url": "https://api.github.com/users/stefashkaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefashkaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefashkaa/subscriptions", "organizations_url": "https://api.github.com/users/stefashkaa/orgs", "repos_url": "https://api.github.com/users/stefashkaa/repos", "events_url": "https://api.github.com/users/stefashkaa/events{/privacy}", "received_events_url": "https://api.github.com/users/stefashkaa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 706237888, "node_id": "MDU6TGFiZWw3MDYyMzc4ODg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20icc", "name": "platform: icc", "color": "eb6420", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-25T17:56:49Z", "updated_at": "2018-07-05T19:28:01Z", "closed_at": "2018-06-01T19:51:07Z", "author_association": "NONE", "body": "Hello!\r\n\r\nWhat could you say about **https://github.com/nlohmann/json/issues/994** issue?\r\n\r\nI have a similar problem using the **ICPC** compiler.\r\n\r\n...\\json.hpp(904): error : type name is not allowed\r\ndetect(std::declval<typename BasicJsonType::template json_serializer<T, void>>()))>::value;\r\n...\\json.hpp(920): error : type name is not allowed\r\nstd::declval<typename BasicJsonType::template json_serializer<T, void>>()))>::value;\r\n...\\json.hpp(935): error : type name is not allowed\r\nstd::declval<typename BasicJsonType::template json_serializer<T, void>>()))>::value;\r\n\r\nI use the following flags:\r\n`icpc -qopenmp -Wall -otarget/main-uname -m main.cpp\r\n`\r\nCould you help me?\r\n\r\nBest regards!\r\nStefan"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1066", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1066/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1066/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1066/events", "html_url": "https://github.com/nlohmann/json/issues/1066", "id": 316852881, "node_id": "MDU6SXNzdWUzMTY4NTI4ODE=", "number": 1066, "title": "Minimal branch?", "user": {"login": "rpav", "id": 1011983, "node_id": "MDQ6VXNlcjEwMTE5ODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1011983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpav", "html_url": "https://github.com/rpav", "followers_url": "https://api.github.com/users/rpav/followers", "following_url": "https://api.github.com/users/rpav/following{/other_user}", "gists_url": "https://api.github.com/users/rpav/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpav/subscriptions", "organizations_url": "https://api.github.com/users/rpav/orgs", "repos_url": "https://api.github.com/users/rpav/repos", "events_url": "https://api.github.com/users/rpav/events{/privacy}", "received_events_url": "https://api.github.com/users/rpav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-23T15:02:21Z", "updated_at": "2018-04-23T15:24:08Z", "closed_at": "2018-04-23T15:24:08Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nCould we get a \"minimal\" or \"release\" branch which contains essentially `README` / `LICENSE` and `single_include/nlohmann/json.hpp` (and perhaps also `include/...`)?  This would allow a tiny shallow or single-branch checkout to track releases, rather than a (relatively slow) hundred-megabyte checkout or submodule."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1065", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1065/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1065/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1065/events", "html_url": "https://github.com/nlohmann/json/issues/1065", "id": 316838664, "node_id": "MDU6SXNzdWUzMTY4Mzg2NjQ=", "number": 1065, "title": "Not existing value, crash", "user": {"login": "Dardanboy", "id": 2006937, "node_id": "MDQ6VXNlcjIwMDY5Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2006937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dardanboy", "html_url": "https://github.com/Dardanboy", "followers_url": "https://api.github.com/users/Dardanboy/followers", "following_url": "https://api.github.com/users/Dardanboy/following{/other_user}", "gists_url": "https://api.github.com/users/Dardanboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dardanboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dardanboy/subscriptions", "organizations_url": "https://api.github.com/users/Dardanboy/orgs", "repos_url": "https://api.github.com/users/Dardanboy/repos", "events_url": "https://api.github.com/users/Dardanboy/events{/privacy}", "received_events_url": "https://api.github.com/users/Dardanboy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-23T14:30:44Z", "updated_at": "2018-05-22T08:46:25Z", "closed_at": "2018-04-23T14:34:15Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- When I get a json list (from server) and that a value I try to reach doesn't exist, the application crash\r\n\r\n**Feature Request**\r\n\r\n- I think that this kind of things shouldn't happen (maybe an error, or maybe something returning nothing would be better)\r\n\r\n\r\n***What is the best solution in this cases ? (Check before trying to get value ?..)***\r\n\r\n\r\n*Edit*\r\n\r\nI didn't notice that:\r\n\r\n> note operator[] implements unchecked access for const objects: If the given key is not present, the behavior is **undefined** (think of a dereferenced null pointer) and yields an assertion failure if assertions are switched on. If you are not sure whether an element in an object exists, **use checked access with the at() function.**\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1064", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1064/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1064/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1064/events", "html_url": "https://github.com/nlohmann/json/issues/1064", "id": 316610954, "node_id": "MDU6SXNzdWUzMTY2MTA5NTQ=", "number": 1064, "title": "cyryllic symbols", "user": {"login": "eksponvt", "id": 37670650, "node_id": "MDQ6VXNlcjM3NjcwNjUw", "avatar_url": "https://avatars0.githubusercontent.com/u/37670650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eksponvt", "html_url": "https://github.com/eksponvt", "followers_url": "https://api.github.com/users/eksponvt/followers", "following_url": "https://api.github.com/users/eksponvt/following{/other_user}", "gists_url": "https://api.github.com/users/eksponvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/eksponvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eksponvt/subscriptions", "organizations_url": "https://api.github.com/users/eksponvt/orgs", "repos_url": "https://api.github.com/users/eksponvt/repos", "events_url": "https://api.github.com/users/eksponvt/events{/privacy}", "received_events_url": "https://api.github.com/users/eksponvt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-04-22T20:34:34Z", "updated_at": "2018-04-26T09:31:17Z", "closed_at": "2018-04-26T09:31:17Z", "author_association": "NONE", "body": "```cpp\r\nauto main( ) -> int\r\n{\r\n\tsetlocale(0, \"ru\");\r\n\tstd::cout << nlohmann::json::parse(std::string(\"{ \\\"happy\\\": \u0442\u0435\u0441\u0442, \\\"pi\\\": 3.141 }\")) << std::endl;\r\n\tSleep(INT_MAX);\r\n}\r\n```\r\n\r\nif I replace \"\u0442\u0435\u0441\u0442\" with English symbols, program doesnt throw an exception\r\n\r\nscreenshot:\r\n![dc782d02-2958-4559-8a59-bb5365342e33](https://user-images.githubusercontent.com/37670650/39099640-e3622600-469f-11e8-8d71-2aeec482c251.jpeg)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1063", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1063/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1063/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1063/events", "html_url": "https://github.com/nlohmann/json/issues/1063", "id": 316596530, "node_id": "MDU6SXNzdWUzMTY1OTY1MzA=", "number": 1063, "title": "newbie usage question", "user": {"login": "lonnieOST", "id": 24719646, "node_id": "MDQ6VXNlcjI0NzE5NjQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/24719646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lonnieOST", "html_url": "https://github.com/lonnieOST", "followers_url": "https://api.github.com/users/lonnieOST/followers", "following_url": "https://api.github.com/users/lonnieOST/following{/other_user}", "gists_url": "https://api.github.com/users/lonnieOST/gists{/gist_id}", "starred_url": "https://api.github.com/users/lonnieOST/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lonnieOST/subscriptions", "organizations_url": "https://api.github.com/users/lonnieOST/orgs", "repos_url": "https://api.github.com/users/lonnieOST/repos", "events_url": "https://api.github.com/users/lonnieOST/events{/privacy}", "received_events_url": "https://api.github.com/users/lonnieOST/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-22T17:18:28Z", "updated_at": "2018-04-26T06:16:21Z", "closed_at": "2018-04-26T06:16:21Z", "author_association": "NONE", "body": "Hello,\r\n\r\nI was looking over your json framework and think that it is exactly what I need for my project, but in your documentation I did not see how to iterate over a json set of attributes.\r\n\r\nFor example if I have a json file that looks like this:\r\n\r\n```js\r\n{\r\n    \"answers\": [],\r\n    \"corrections\": [],\r\n    \"infoboxes\": [\r\n        {\r\n            \"content\": \"...\",\r\n            \"engine\": \"...\",\r\n            \"id\": \"...\",\r\n            \"img_src\": \"...\",\r\n            \"infobox\": \"...\",\r\n            \"urls\": [\r\n                {\r\n                    \"title\": \"...\",\r\n                    \"url\": \"...\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"number_of_results\": ...,\r\n    \"query\": \"...\",\r\n    \"results\": [\r\n        {\r\n            \"category\": \"....\",\r\n            \"content\": \"...\",\r\n        },\r\n        {\r\n            \"category\": \"....\",\r\n            \"content\": \"...\",\r\n        },\r\n        {\r\n            \"category\": \"....\",\r\n            \"content\": \"...\",\r\n        },\r\n        {\r\n            \"category\": \"....\",\r\n            \"content\": \"...\",\r\n        },\r\n        {\r\n            \"category\": \"....\",\r\n            \"content\": \"...\",\r\n        }\r\n    ],\r\n    \"suggestions\": [],\r\n    \"somehting\": [\r\n        [\r\n            \"one\",\r\n            \"two\"\r\n        ]\r\n    ]\r\n}\r\n```\r\n\r\nThen I have to 2 possible needs.\r\n\r\n1. I would read it in a string variable and want to iterate over the \"category\" and \"content\" attributes to collect all of the different information.\r\n\r\n2. I would like to be able to create the above json using your reference method.\r\n\r\nIn your example I would like to create:\r\n\r\n```js\r\n{\r\n  \"pi\": 3.141,\r\n  \"happy\": true,\r\n  \"name\": \"Niels\",\r\n  \"nothing\": null,\r\n  \"answer\": {\r\n    \"everything\": 42\r\n  },\r\n  \"list\": [1, 0, 2],\r\n  \"object\": {\r\n    \"currency\": \"USD\",\r\n    \"value\": 42.99\r\n  },\r\n  \"object\": {\r\n    \"currency\": \"USD\",\r\n    \"value\": 2.99\r\n  },\r\n  \"object\": {\r\n    \"currency\": \"USD\",\r\n    \"value\": 4.99\r\n  }\r\n}\r\n```\r\n\r\nYou show:\r\n\r\n```cpp\r\n// add another object (using an initializer list of pairs)\r\nj[\"object\"] = { {\"currency\", \"USD\"}, {\"value\", 42.99} };\r\n```\r\n\r\nbut can it also be done something like:\r\n\r\n```cpp\r\n// add another object (using an initializer list of pairs)\r\nj[\"object\"] [\"currency\"]=  \"USD\"\r\nj[\"object\"][\"value\"]= 42.99;\r\n```\r\n\r\nbut that would only be for 1 object and I need to be able to add many \"object\" items to a structure.\r\n\r\nI also need to be able to reference nested items in a similar way if possible.\r\n\r\nThanks,\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1062", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1062/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1062/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1062/events", "html_url": "https://github.com/nlohmann/json/issues/1062", "id": 316481347, "node_id": "MDU6SXNzdWUzMTY0ODEzNDc=", "number": 1062, "title": "Trying j[\"strTest\"] = \"%A\" produces \"strTest\": \"-0X1.CCCCCCCCCCCCCP+205\"", "user": {"login": "scherbatuk", "id": 38583884, "node_id": "MDQ6VXNlcjM4NTgzODg0", "avatar_url": "https://avatars0.githubusercontent.com/u/38583884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scherbatuk", "html_url": "https://github.com/scherbatuk", "followers_url": "https://api.github.com/users/scherbatuk/followers", "following_url": "https://api.github.com/users/scherbatuk/following{/other_user}", "gists_url": "https://api.github.com/users/scherbatuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/scherbatuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scherbatuk/subscriptions", "organizations_url": "https://api.github.com/users/scherbatuk/orgs", "repos_url": "https://api.github.com/users/scherbatuk/repos", "events_url": "https://api.github.com/users/scherbatuk/events{/privacy}", "received_events_url": "https://api.github.com/users/scherbatuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-21T10:43:58Z", "updated_at": "2018-04-21T16:38:08Z", "closed_at": "2018-04-21T10:59:08Z", "author_association": "NONE", "body": "Trying j[\"strTest\"] = \"%A\" \r\n\r\nproduces:\r\n\r\n\"strTest\": \"-0X1.CCCCCCCCCCCCCP+205\"\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1061", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1061/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1061/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1061/events", "html_url": "https://github.com/nlohmann/json/issues/1061", "id": 315830806, "node_id": "MDU6SXNzdWUzMTU4MzA4MDY=", "number": 1061, "title": "convert json value to std::string???", "user": {"login": "Mamlesh", "id": 37332116, "node_id": "MDQ6VXNlcjM3MzMyMTE2", "avatar_url": "https://avatars1.githubusercontent.com/u/37332116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mamlesh", "html_url": "https://github.com/Mamlesh", "followers_url": "https://api.github.com/users/Mamlesh/followers", "following_url": "https://api.github.com/users/Mamlesh/following{/other_user}", "gists_url": "https://api.github.com/users/Mamlesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mamlesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mamlesh/subscriptions", "organizations_url": "https://api.github.com/users/Mamlesh/orgs", "repos_url": "https://api.github.com/users/Mamlesh/repos", "events_url": "https://api.github.com/users/Mamlesh/events{/privacy}", "received_events_url": "https://api.github.com/users/Mamlesh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-04-19T11:09:31Z", "updated_at": "2018-05-11T16:12:10Z", "closed_at": "2018-05-11T16:12:10Z", "author_association": "NONE", "body": "how to convert json value to string ..\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1060", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1060/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1060/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1060/events", "html_url": "https://github.com/nlohmann/json/issues/1060", "id": 315767806, "node_id": "MDU6SXNzdWUzMTU3Njc4MDY=", "number": 1060, "title": "Commented out test cases, should they be removed?", "user": {"login": "whackashoe", "id": 855581, "node_id": "MDQ6VXNlcjg1NTU4MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/855581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whackashoe", "html_url": "https://github.com/whackashoe", "followers_url": "https://api.github.com/users/whackashoe/followers", "following_url": "https://api.github.com/users/whackashoe/following{/other_user}", "gists_url": "https://api.github.com/users/whackashoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/whackashoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whackashoe/subscriptions", "organizations_url": "https://api.github.com/users/whackashoe/orgs", "repos_url": "https://api.github.com/users/whackashoe/repos", "events_url": "https://api.github.com/users/whackashoe/events{/privacy}", "received_events_url": "https://api.github.com/users/whackashoe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2018-04-19T08:02:54Z", "updated_at": "2018-04-23T17:42:14Z", "closed_at": "2018-04-23T17:42:14Z", "author_association": "CONTRIBUTOR", "body": "I found a few files with commented out test cases, wondering if they should be kept or banished to git history\r\n\r\n---\r\n\r\ntest/src/unit-allocator.cpp\r\n\r\ntest/src/unit-cbor.cpp\r\n\r\ntest/src/unit-regression.cpp\r\n\r\ntest/src/unit-ubjson.cpp\r\n\r\ntest/src/unit-class_lexer.cpp\r\n\r\ntest/src/unit-regression.cpp\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1059", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1059/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1059/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1059/events", "html_url": "https://github.com/nlohmann/json/issues/1059", "id": 315054930, "node_id": "MDU6SXNzdWUzMTUwNTQ5MzA=", "number": 1059, "title": "different behaviour between clang and gcc with braced initialization", "user": {"login": "scontini76", "id": 2496830, "node_id": "MDQ6VXNlcjI0OTY4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2496830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scontini76", "html_url": "https://github.com/scontini76", "followers_url": "https://api.github.com/users/scontini76/followers", "following_url": "https://api.github.com/users/scontini76/following{/other_user}", "gists_url": "https://api.github.com/users/scontini76/gists{/gist_id}", "starred_url": "https://api.github.com/users/scontini76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scontini76/subscriptions", "organizations_url": "https://api.github.com/users/scontini76/orgs", "repos_url": "https://api.github.com/users/scontini76/repos", "events_url": "https://api.github.com/users/scontini76/events{/privacy}", "received_events_url": "https://api.github.com/users/scontini76/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-17T13:16:06Z", "updated_at": "2018-05-26T11:27:32Z", "closed_at": "2018-05-26T11:27:32Z", "author_association": "NONE", "body": "```c++\r\n#include \"json.hpp\"\r\n#include <iostream>\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    auto j{json::parse(R\"({ \"result\": [1, 2, 3] })\")};\r\n\r\n    std::cout << j[\"result\"];\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\ncompiled with g++5, g++6, gcc+7 bring to the following result:\r\n\r\nterminate called after throwing an instance of 'nlohmann::detail::type_error'\r\n  what():  [json.exception.type_error.305] cannot use operator[] with array\r\n\r\n\r\nwith clang++ the output is the excepted:\r\n\r\n[1, 2, 3]\r\n\r\nI'm using json 3.1.2, is there an error in my code? what compiler is wrong? can we obtain the same behaviour on both the family complier? \r\n\r\nThe code works in the on either g++ and clang++ if I use the assignment instead of braced initialisation.\r\n\r\nso:\r\n\r\n```c++\r\nauto j{json::parse(R\"({ \"result\": [1, 2, 3] })\")};\r\nstd::cout << j[\"result\"];\r\n```\r\n\r\nworks on clang\r\n\r\n```\r\nauto j = json::parse(R\"({ \"result\": [1, 2, 3] })\");\r\nstd::cout << j[\"result\"];\r\n```\r\nworks on both family compilers\r\n\r\n```c++\r\nauto j{json::parse(R\"({ \"result\": [1, 2, 3] })\")};\r\nstd::cout << j[0][\"result\"];\r\n```\r\n works on g++\r\n\r\nthank you for the support!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1057", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1057/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1057/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1057/events", "html_url": "https://github.com/nlohmann/json/issues/1057", "id": 314969189, "node_id": "MDU6SXNzdWUzMTQ5NjkxODk=", "number": 1057, "title": "json array:  initialize with prescribed size and `resize` method.", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-17T09:05:44Z", "updated_at": "2018-04-19T06:59:50Z", "closed_at": "2018-04-19T06:59:50Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nI would like the ability to initialize a JSON array with a prescribed size.\r\n\r\nMy use case if that I know that I will be setting all items of a JSON arrays on known length but out of order.\r\n\r\nI could do this with an intermediate STL container but I would prefer to avoid the temporary.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1056", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1056/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1056/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1056/events", "html_url": "https://github.com/nlohmann/json/issues/1056", "id": 314705846, "node_id": "MDU6SXNzdWUzMTQ3MDU4NDY=", "number": 1056, "title": "Is it possible to use exceptions istead of assertions?", "user": {"login": "zaycakitayca", "id": 2539038, "node_id": "MDQ6VXNlcjI1MzkwMzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2539038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zaycakitayca", "html_url": "https://github.com/zaycakitayca", "followers_url": "https://api.github.com/users/zaycakitayca/followers", "following_url": "https://api.github.com/users/zaycakitayca/following{/other_user}", "gists_url": "https://api.github.com/users/zaycakitayca/gists{/gist_id}", "starred_url": "https://api.github.com/users/zaycakitayca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zaycakitayca/subscriptions", "organizations_url": "https://api.github.com/users/zaycakitayca/orgs", "repos_url": "https://api.github.com/users/zaycakitayca/repos", "events_url": "https://api.github.com/users/zaycakitayca/events{/privacy}", "received_events_url": "https://api.github.com/users/zaycakitayca/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-16T15:26:21Z", "updated_at": "2018-04-17T04:23:26Z", "closed_at": "2018-04-17T04:23:26Z", "author_association": "NONE", "body": "Let's consider the following code\r\n\r\n```\r\n#include \"json.hpp\"\r\n#include <iostream>\r\n\r\nint main()\r\n{\r\n\tconst auto data = R\"({\"foo\":42})\"_json;\r\n\t\r\n\ttry {\r\n\t\tstd::cout << data[\"bar\"] << std::endl;\r\n\t} catch(...) {\r\n\t\tstd::cerr << \"json error\" << std::endl;\r\n\t}\r\n}\r\n```\r\n\r\nI expect this code to output `json error`, but instead it shuts down with the following error:\r\n\r\n```\r\njson.hpp:12936: const value_type& nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::operator[](T*) const [with T = const char; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::const_reference = const nlohmann::basic_json<>&; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::value_type = nlohmann::basic_json<>]: Assertion `m_value.object->find(key) != m_value.object->end()' failed.\r\n```\r\n\r\nI know I can disable assertion by `NDEBUG` flag, but then it prints out `null` in my example (and I'm almost sure this is an UB) instead of expected exception.\r\n\r\nI've checked out `json.hpp` code and found 98 calls to `assert`, so I don't think above is the only example leading to application shutdown which can't be handled. In my real app I deal with user provided data, so it's quite bad for me. Is it possible to just replace those assertions with exception throws? Or, if assertions are necessary for some cases, is it possible to have something like template parameter specifying assertion handler, which would be defaulted to `assert`?\r\n\r\nI can create a PR by myself, but first I want to know which option is preferred."}]