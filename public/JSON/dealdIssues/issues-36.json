[{"url": "https://api.github.com/repos/nlohmann/json/issues/1055", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1055/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1055/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1055/events", "html_url": "https://github.com/nlohmann/json/issues/1055", "id": 314651715, "node_id": "MDU6SXNzdWUzMTQ2NTE3MTU=", "number": 1055, "title": "when using assign operator in with json object a static assertion fails..", "user": {"login": "jipr311", "id": 4445270, "node_id": "MDQ6VXNlcjQ0NDUyNzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4445270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jipr311", "html_url": "https://github.com/jipr311", "followers_url": "https://api.github.com/users/jipr311/followers", "following_url": "https://api.github.com/users/jipr311/following{/other_user}", "gists_url": "https://api.github.com/users/jipr311/gists{/gist_id}", "starred_url": "https://api.github.com/users/jipr311/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jipr311/subscriptions", "organizations_url": "https://api.github.com/users/jipr311/orgs", "repos_url": "https://api.github.com/users/jipr311/repos", "events_url": "https://api.github.com/users/jipr311/events{/privacy}", "received_events_url": "https://api.github.com/users/jipr311/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-16T13:30:05Z", "updated_at": "2018-04-28T09:31:42Z", "closed_at": "2018-04-28T09:31:42Z", "author_association": "NONE", "body": "**Bug Report**\r\nsuppose you have the following class:\r\n\r\n```cpp\r\nclass Point{\r\npublic:\r\nPoint();\r\nprivate:\r\nint x;\r\nint y;\r\n}\r\n```\r\n\r\nthen if you create a point:\r\n\r\n```cpp\r\nPoint p { 100, 100 };\r\n```\r\n\r\nand do\r\n\r\n```cpp\r\njson j = p;\r\n```\r\n\r\nthen you get the error: \r\n\r\n```\r\nstatic assertion failed: could not find to_json() method in T's namespace\r\n         static_assert(sizeof(BasicJsonType) == 0,\r\n         ^\r\n````\r\n\r\nthat is pretty st.forward, what is the reason of the failure?\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1054", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1054/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1054/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1054/events", "html_url": "https://github.com/nlohmann/json/issues/1054", "id": 314466554, "node_id": "MDU6SXNzdWUzMTQ0NjY1NTQ=", "number": 1054, "title": "Iterate over leafs of a JSON data structure: enrich the JSON pointer API", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-04-16T00:20:34Z", "updated_at": "2018-04-17T06:52:36Z", "closed_at": "2018-04-17T06:49:03Z", "author_association": "NONE", "body": "**Enriching the  `json_pointer` API**\r\n\r\nI noticed that the `json_pointer` class stored a `std::vector<std::string>` internally.\r\n\r\nWith private inheritance instead of composition, and a bunch of `using` statements to forward the API, you would enable a JSON pointer with a richer API, such as\r\n\r\n - initialize with initializer lists.\r\n - push / pop -pack for new values in the paths.\r\n\r\n**The use case**\r\n\r\nMy use-case is that I would like to iterate over all the leafs (number, boolean, null, strings) of a nested JSON data structure..\r\n\r\nIn order to do so, I would keep a vector of strings for the current position to which new elements are pushed back when meeting an array or object, and popped when leaving a level.\r\n\r\nIf this \"key\" is a JSON pointer, it could be used for access later, while right now, I would need to compose a string from it and pass it to the constructor of `json_pointer`, which is not very efficient."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1053", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1053/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1053/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1053/events", "html_url": "https://github.com/nlohmann/json/issues/1053", "id": 314079097, "node_id": "MDU6SXNzdWUzMTQwNzkwOTc=", "number": 1053, "title": "[Feature request] Access by path", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-13T11:57:58Z", "updated_at": "2018-04-15T12:28:16Z", "closed_at": "2018-04-15T12:28:16Z", "author_association": "NONE", "body": "It would be great if there was accessors by path in a JSON object:\r\n\r\nfor example, if we have a JSON object `x` containing\r\n\r\n```JSON\r\n{\r\n    \"foo\": {\r\n        \"bar\": {\r\n            \"value\": 1   \r\n        },\r\n        \"baz\": {\r\n            \"value\": 3\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`x[{\"foo\", \"baz\"}]` would return a JSON object containing\r\n\r\n```JSON\r\n{\r\n    \"value\": 3\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1052", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1052/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1052/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1052/events", "html_url": "https://github.com/nlohmann/json/issues/1052", "id": 313697819, "node_id": "MDU6SXNzdWUzMTM2OTc4MTk=", "number": 1052, "title": "document that implicit js -> primitive conversion does not work for std::string::value_type and why", "user": {"login": "weber-martin", "id": 33350165, "node_id": "MDQ6VXNlcjMzMzUwMTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/33350165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weber-martin", "html_url": "https://github.com/weber-martin", "followers_url": "https://api.github.com/users/weber-martin/followers", "following_url": "https://api.github.com/users/weber-martin/following{/other_user}", "gists_url": "https://api.github.com/users/weber-martin/gists{/gist_id}", "starred_url": "https://api.github.com/users/weber-martin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weber-martin/subscriptions", "organizations_url": "https://api.github.com/users/weber-martin/orgs", "repos_url": "https://api.github.com/users/weber-martin/repos", "events_url": "https://api.github.com/users/weber-martin/events{/privacy}", "received_events_url": "https://api.github.com/users/weber-martin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2018-04-12T12:05:43Z", "updated_at": "2018-06-22T20:36:05Z", "closed_at": "2018-06-22T20:36:05Z", "author_association": "NONE", "body": "I expect to be able to convert from and to any C++ primitive type.\r\n\r\nI can convert from and to json from basically any type but a plain \"char\". If trying to do so, I'm getting a compile error:\r\n\r\n```\r\n error: cannot convert \u2018nlohmann::json {aka nlohmann::basic_json<>}\u2019 to \u2018char\u2019 in initialization\r\n  C c2 = js;\r\n```\r\n\r\nConversion from and to similarly sized `signed char` and `unsigned char` do work as expected, as do conversions from and to `int8_t` and `uint8_t`.\r\n\r\nSee the following file:\r\n```// minimal.cpp\r\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nusing nlohmann::json;\r\n\r\ntemplate <typename C>\r\nvoid char_test() {\r\n\tC c1 = '?';\r\n\tjson js = c1;\r\n\tC c2 = js;\r\n\r\n\tstd::cout << \" c1: \" << c1 << \" js: \" << js << \" c2: \" << c2 << std::endl;\r\n}\r\n\r\nint main(int, char **) {\r\n\tchar_test<int8_t>();\r\n\tchar_test<uint8_t>();\r\n\tchar_test<signed char>();\r\n\tchar_test<unsigned char>();\r\n\t//char_test<char>();\r\n\treturn 0;\r\n}\r\n```\r\n\r\nuncomment the second to last line in `main()` to get the compile error.\r\n\r\nCompiled with `g++ (Debian 6.3.0-18+deb9u1) 6.3.0 20170516` on `Linux 4.12.0-0.bpo.2-amd64 x86_64` invoked as ` g++ -Wextra -Wall -Werror -std=c++11 -I $NLOHMANN_JSON_SINGLE_INCLUDE_DIR -o minimal minimal.cpp`\r\n\r\nThis is with `nlohmann-json commit 46ec2fddf8774af2f9368bf563dd6e32fa91d77e`\r\n\r\n>- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nNope, I don't have a cmake 3.8 handy."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1051", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1051/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1051/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1051/events", "html_url": "https://github.com/nlohmann/json/issues/1051", "id": 313370256, "node_id": "MDU6SXNzdWUzMTMzNzAyNTY=", "number": 1051, "title": "error: \u2018BasicJsonType\u2019 in namespace \u2018::\u2019 does not name a type", "user": {"login": "simulationcloud", "id": 33330174, "node_id": "MDQ6VXNlcjMzMzMwMTc0", "avatar_url": "https://avatars3.githubusercontent.com/u/33330174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simulationcloud", "html_url": "https://github.com/simulationcloud", "followers_url": "https://api.github.com/users/simulationcloud/followers", "following_url": "https://api.github.com/users/simulationcloud/following{/other_user}", "gists_url": "https://api.github.com/users/simulationcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/simulationcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simulationcloud/subscriptions", "organizations_url": "https://api.github.com/users/simulationcloud/orgs", "repos_url": "https://api.github.com/users/simulationcloud/repos", "events_url": "https://api.github.com/users/simulationcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/simulationcloud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-11T15:16:55Z", "updated_at": "2018-04-15T12:28:43Z", "closed_at": "2018-04-15T12:28:43Z", "author_association": "NONE", "body": "I get this error when compiling with nvcc, which is using g++6.4.1. I am specifying the --std=c++11 flag.\r\n\r\nThe version of nlohmann/json is 3.1.2. \r\n\r\nAny help would be greatly appreciated! "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1050", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1050/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1050/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1050/events", "html_url": "https://github.com/nlohmann/json/issues/1050", "id": 313137935, "node_id": "MDU6SXNzdWUzMTMxMzc5MzU=", "number": 1050, "title": "Destructor is called when filling object through assignement", "user": {"login": "vindex10", "id": 1962652, "node_id": "MDQ6VXNlcjE5NjI2NTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1962652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vindex10", "html_url": "https://github.com/vindex10", "followers_url": "https://api.github.com/users/vindex10/followers", "following_url": "https://api.github.com/users/vindex10/following{/other_user}", "gists_url": "https://api.github.com/users/vindex10/gists{/gist_id}", "starred_url": "https://api.github.com/users/vindex10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vindex10/subscriptions", "organizations_url": "https://api.github.com/users/vindex10/orgs", "repos_url": "https://api.github.com/users/vindex10/repos", "events_url": "https://api.github.com/users/vindex10/events{/privacy}", "received_events_url": "https://api.github.com/users/vindex10/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-11T00:57:08Z", "updated_at": "2018-04-11T12:13:28Z", "closed_at": "2018-04-11T12:13:27Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nDestructor being called in an unexpected place.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n```c++\r\n#include <iostream>\r\n#include \"nlohmann/json.hpp\"\r\n\r\nusing namespace std;\r\nusing json = nlohmann::json;\r\n\r\nclass State {\r\npublic:\r\n    double x;\r\n    ~State() {\r\n        cout << \"destroyed\" << endl;\r\n    }\r\n};\r\n\r\nvoid from_json(const json& j, State& p) {\r\n    try {\r\n        p.x = j.at(\"x\").get<double>();\r\n    } catch(json::type_error& e) {\r\n        std::cerr << e.what() << std::endl;\r\n    } catch(json::out_of_range& e) {\r\n        std::cerr << e.what() << std::endl;\r\n    }\r\n}\r\n\r\nint main() {\r\n    json data;\r\n    State s;\r\n    data[\"x\"] = 10.;\r\n    s = data;\r\n    cout << s.x << endl;\r\n    return 0;\r\n}\r\n```\r\n\r\nOutput is:\r\n```bash\r\ndestroyed\r\n10\r\ndestroyed\r\n```\r\n\r\n- What is the expected behavior?\r\ndo not call destructor during assignment\r\n\r\n- And what is the actual behavior instead?\r\ndestructor is called\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n```bash\r\ng++ (Gentoo 6.4.0-r1 p1.3) 6.4.0\r\nCopyright (C) 2017 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nchecked for both: master and develop branch.\r\n\r\nCould you please describe, whether it is a feature or a bug :) By default assignment operator doesn't call destructor, that is why the behavior seems to me unexpected.\r\n\r\nThank you!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1049", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1049/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1049/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1049/events", "html_url": "https://github.com/nlohmann/json/issues/1049", "id": 313028933, "node_id": "MDU6SXNzdWUzMTMwMjg5MzM=", "number": 1049, "title": "Is this thing thread safe for reads?", "user": {"login": "mlfarrell", "id": 7664370, "node_id": "MDQ6VXNlcjc2NjQzNzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7664370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlfarrell", "html_url": "https://github.com/mlfarrell", "followers_url": "https://api.github.com/users/mlfarrell/followers", "following_url": "https://api.github.com/users/mlfarrell/following{/other_user}", "gists_url": "https://api.github.com/users/mlfarrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlfarrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlfarrell/subscriptions", "organizations_url": "https://api.github.com/users/mlfarrell/orgs", "repos_url": "https://api.github.com/users/mlfarrell/repos", "events_url": "https://api.github.com/users/mlfarrell/events{/privacy}", "received_events_url": "https://api.github.com/users/mlfarrell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-10T17:57:12Z", "updated_at": "2018-04-10T18:36:20Z", "closed_at": "2018-04-10T18:35:48Z", "author_association": "NONE", "body": "Wondering about thread safety.\r\n\r\nDidn't see anything in the docs.  "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1046", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1046/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1046/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1046/events", "html_url": "https://github.com/nlohmann/json/issues/1046", "id": 312570539, "node_id": "MDU6SXNzdWUzMTI1NzA1Mzk=", "number": 1046, "title": "clang-tidy: Call to virtual function during construction ", "user": {"login": "SimonEbner", "id": 570249, "node_id": "MDQ6VXNlcjU3MDI0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/570249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonEbner", "html_url": "https://github.com/SimonEbner", "followers_url": "https://api.github.com/users/SimonEbner/followers", "following_url": "https://api.github.com/users/SimonEbner/following{/other_user}", "gists_url": "https://api.github.com/users/SimonEbner/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonEbner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonEbner/subscriptions", "organizations_url": "https://api.github.com/users/SimonEbner/orgs", "repos_url": "https://api.github.com/users/SimonEbner/repos", "events_url": "https://api.github.com/users/SimonEbner/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonEbner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2018-04-09T15:10:06Z", "updated_at": "2018-05-27T16:14:07Z", "closed_at": "2018-05-17T06:31:11Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nWhen running clang-tidy on a minimal example I get the warning `Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]`\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n1. Clone the repo with tag `v3.1.2`\r\n2. Create a cpp file: \r\n```#include <fstream>\r\n#include <nlohmann/json.hpp>\r\n\r\nint main()\r\n{\r\n    std::ifstream in(\"a.json\");\r\n    nlohmann::json j;\r\n    in >> j;\r\n}\r\n```\r\n3. Run clang-tidy on it: `clang-tidy b.cc -- -I.`\r\n\r\n- What is the expected behavior?\r\nNo warnings emitted\r\n\r\n- And what is the actual behavior instead?\r\nOne warning emitted by the parsing of the ifstream (full output at the end)\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n```\r\n % lsb_release -a \r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 16.04.3 LTS\r\nRelease:\t16.04\r\nCodename:\txenial\r\n```\r\n\r\n```\r\n% clang --version\r\nclang version 7.0.0 (https://git.llvm.org/git/clang 7f273fa6df66a8dfbfa2170d5bd307d9f426fd1a) (https://git.llvm.org/git/llvm 0a9e4fe67e24fe921d2ed544471bbb53d579f790)\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/local/bin\r\n```\r\n\r\n```\r\n% clang-tidy --version\r\nLLVM (http://llvm.org/):\r\n  LLVM version 7.0.0svn\r\n  Optimized build with assertions.\r\n  Default target: x86_64-unknown-linux-gnu\r\n  Host CPU: broadwell\r\n```\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nI used tag `v3.1.2`\r\n\r\n\r\nThis is the full output:\r\n```\r\n./nlohmann/detail/input/input_adapters.hpp:74:18: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]\r\n        if ((c = get_character()) == 0xEF)\r\n                 ^\r\n/home/simon/test/b.cc:8:5: note: Calling 'operator>>'\r\n    in >> j;\r\n    ^\r\n./nlohmann/json.hpp:6135:16: note: Calling constructor for 'input_adapter'\r\n        parser(detail::input_adapter(i)).parse(false, j);\r\n               ^\r\n./nlohmann/detail/input/input_adapters.hpp:175:14: note: Calling 'make_shared'\r\n        : ia(std::make_shared<input_stream_adapter>(i)) {}\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:635:14: note: Calling 'allocate_shared'\r\n      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:619:14: note: Calling constructor for 'shared_ptr'\r\n      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:319:4: note: Calling constructor for '__shared_ptr'\r\n        : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:1096:14: note: Calling constructor for '__shared_count'\r\n        : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,\r\n                    ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:617:18: note: Calling constructor for '_Sp_counted_ptr_inplace'\r\n          ::new (__mem) _Sp_cp_type(std::move(__a),\r\n                        ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:522:4: note: Calling 'allocator_traits::construct'\r\n          allocator_traits<_Alloc>::construct(__a, _M_ptr(),\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h:530:4: note: Calling 'new_allocator::construct'\r\n        { __a.construct(__p, std::forward<_Args>(__args)...); }\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h:120:23: note: Calling constructor for 'input_stream_adapter'\r\n        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n                             ^\r\n./nlohmann/detail/input/input_adapters.hpp:74:18: note: This constructor of an object of type 'input_stream_adapter' has not returned when the virtual method was called\r\n        if ((c = get_character()) == 0xEF)\r\n                 ^\r\n./nlohmann/detail/input/input_adapters.hpp:74:18: note: Call to virtual function during construction\r\n./nlohmann/detail/input/input_adapters.hpp:76:22: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]\r\n            if ((c = get_character()) == 0xBB)\r\n                     ^\r\n/home/simon/test/b.cc:8:5: note: Calling 'operator>>'\r\n    in >> j;\r\n    ^\r\n./nlohmann/json.hpp:6135:16: note: Calling constructor for 'input_adapter'\r\n        parser(detail::input_adapter(i)).parse(false, j);\r\n               ^\r\n./nlohmann/detail/input/input_adapters.hpp:175:14: note: Calling 'make_shared'\r\n        : ia(std::make_shared<input_stream_adapter>(i)) {}\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:635:14: note: Calling 'allocate_shared'\r\n      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:619:14: note: Calling constructor for 'shared_ptr'\r\n      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:319:4: note: Calling constructor for '__shared_ptr'\r\n        : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:1096:14: note: Calling constructor for '__shared_count'\r\n        : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,\r\n                    ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:617:18: note: Calling constructor for '_Sp_counted_ptr_inplace'\r\n          ::new (__mem) _Sp_cp_type(std::move(__a),\r\n                        ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:522:4: note: Calling 'allocator_traits::construct'\r\n          allocator_traits<_Alloc>::construct(__a, _M_ptr(),\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h:530:4: note: Calling 'new_allocator::construct'\r\n        { __a.construct(__p, std::forward<_Args>(__args)...); }\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h:120:23: note: Calling constructor for 'input_stream_adapter'\r\n        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n                             ^\r\n./nlohmann/detail/input/input_adapters.hpp:74:13: note: Assuming the condition is true\r\n        if ((c = get_character()) == 0xEF)\r\n            ^\r\n./nlohmann/detail/input/input_adapters.hpp:74:9: note: Taking true branch\r\n        if ((c = get_character()) == 0xEF)\r\n        ^\r\n./nlohmann/detail/input/input_adapters.hpp:76:22: note: This constructor of an object of type 'input_stream_adapter' has not returned when the virtual method was called\r\n            if ((c = get_character()) == 0xBB)\r\n                     ^\r\n./nlohmann/detail/input/input_adapters.hpp:76:22: note: Call to virtual function during construction\r\n./nlohmann/detail/input/input_adapters.hpp:78:26: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]\r\n                if ((c = get_character()) == 0xBF)\r\n                         ^\r\n/home/simon/test/b.cc:8:5: note: Calling 'operator>>'\r\n    in >> j;\r\n    ^\r\n./nlohmann/json.hpp:6135:16: note: Calling constructor for 'input_adapter'\r\n        parser(detail::input_adapter(i)).parse(false, j);\r\n               ^\r\n./nlohmann/detail/input/input_adapters.hpp:175:14: note: Calling 'make_shared'\r\n        : ia(std::make_shared<input_stream_adapter>(i)) {}\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:635:14: note: Calling 'allocate_shared'\r\n      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:619:14: note: Calling constructor for 'shared_ptr'\r\n      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,\r\n             ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr.h:319:4: note: Calling constructor for '__shared_ptr'\r\n        : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:1096:14: note: Calling constructor for '__shared_count'\r\n        : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,\r\n                    ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:617:18: note: Calling constructor for '_Sp_counted_ptr_inplace'\r\n          ::new (__mem) _Sp_cp_type(std::move(__a),\r\n                        ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/shared_ptr_base.h:522:4: note: Calling 'allocator_traits::construct'\r\n          allocator_traits<_Alloc>::construct(__a, _M_ptr(),\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/alloc_traits.h:530:4: note: Calling 'new_allocator::construct'\r\n        { __a.construct(__p, std::forward<_Args>(__args)...); }\r\n          ^\r\n/usr/lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/ext/new_allocator.h:120:23: note: Calling constructor for 'input_stream_adapter'\r\n        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n                             ^\r\n./nlohmann/detail/input/input_adapters.hpp:74:13: note: Assuming the condition is true\r\n        if ((c = get_character()) == 0xEF)\r\n            ^\r\n./nlohmann/detail/input/input_adapters.hpp:74:9: note: Taking true branch\r\n        if ((c = get_character()) == 0xEF)\r\n        ^\r\n./nlohmann/detail/input/input_adapters.hpp:76:17: note: Assuming the condition is true\r\n            if ((c = get_character()) == 0xBB)\r\n                ^\r\n./nlohmann/detail/input/input_adapters.hpp:76:13: note: Taking true branch\r\n            if ((c = get_character()) == 0xBB)\r\n            ^\r\n./nlohmann/detail/input/input_adapters.hpp:78:26: note: This constructor of an object of type 'input_stream_adapter' has not returned when the virtual method was called\r\n                if ((c = get_character()) == 0xBF)\r\n                         ^\r\n./nlohmann/detail/input/input_adapters.hpp:78:26: note: Call to virtual function during construction\r\n```\r\n\r\nMaybe related to https://github.com/nlohmann/json/issues/94 ?\r\n\r\nP.s. the warning is not triggered if I use the `json::parse` explicitely like so:\r\n```\r\nint main()\r\n{\r\n    std::ifstream t(\"file.txt\");\r\n    std::stringstream buffer;\r\n    buffer << t.rdbuf();\r\n    auto j = nlohmann::json::parse(buffer.str());\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1045", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1045/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1045/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1045/events", "html_url": "https://github.com/nlohmann/json/issues/1045", "id": 312506415, "node_id": "MDU6SXNzdWUzMTI1MDY0MTU=", "number": 1045, "title": "Using STL algorithms with JSON containers with expected results?", "user": {"login": "bandzaw", "id": 24864195, "node_id": "MDQ6VXNlcjI0ODY0MTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/24864195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bandzaw", "html_url": "https://github.com/bandzaw", "followers_url": "https://api.github.com/users/bandzaw/followers", "following_url": "https://api.github.com/users/bandzaw/following{/other_user}", "gists_url": "https://api.github.com/users/bandzaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/bandzaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bandzaw/subscriptions", "organizations_url": "https://api.github.com/users/bandzaw/orgs", "repos_url": "https://api.github.com/users/bandzaw/repos", "events_url": "https://api.github.com/users/bandzaw/events{/privacy}", "received_events_url": "https://api.github.com/users/bandzaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 11, "created_at": "2018-04-09T12:14:35Z", "updated_at": "2018-06-28T19:33:39Z", "closed_at": "2018-06-28T19:33:39Z", "author_association": "NONE", "body": "I'd like to use JSON as any other STL container with the same expected results. For example, given this code snippet:\r\n```cpp\r\n#include <iostream>\r\n#include <map>\r\n#include <algorithm>\r\n#include \"json.hpp\"\r\n\r\n\r\nint main()\r\n{\r\n    {\r\n        std::map<std::string,int> diffs;\r\n        std::map<std::string,int> m1{{\"key1\",42}};\r\n        std::map<std::string,int> m2{{\"key2\",42}};\r\n        std::set_difference(\r\n            m1.begin(), m1.end(),\r\n            m2.begin(), m2.end(),\r\n        std::inserter(diffs, diffs.end()));\r\n        std::cout << \"map diffs: \" << diffs.size() << std::endl;\r\n    }\r\n    {\r\n        nlohmann::json diffs = nlohmann::json::array();\r\n        nlohmann::json m1{{\"key1\",42}};\r\n        nlohmann::json m2{{\"key2\",42}};\r\n        std::set_difference(\r\n            m1.begin(), m1.end(),\r\n            m2.begin(), m2.end(),\r\n        std::inserter(diffs, diffs.end()));\r\n        std::cout << \"json diffs: \" << diffs.size() << std::endl;\r\n    }\r\n}\r\n```\r\nthe output is:\r\n```\r\nmap diffs: 1\r\njson diffs: 0\r\n```\r\nwhich is not what I expected. I'd really want to be able to compare JSON containers, including their keys.\r\n\r\nThe reason is that JSON iterators, when dereferenced, only return a reference to the value pointed to by the iterator (compare with std::map returning a std::pair of its key&value).\r\nBut then I thought I could use the proxy iterator: iteration_proxy and its key and value methods to work around my problem by writing a custom comparator and use it with std::set_difference:\r\n```cpp\r\n    {\r\n        nlohmann::json diffs = nlohmann::json::array();\r\n        nlohmann::json m1{{\"key1\",42}};\r\n        nlohmann::json m2{{\"key2\",42}};\r\n        auto p1 = m1.items();\r\n        auto p2 = m2.items();\r\n        std::set_difference(\r\n            p1.begin(), p1.end(),\r\n            p2.begin(), p2.end(),\r\n        std::inserter(diffs, diffs.end()),\r\n        [&](const auto& e1, const auto& e2) -> bool {\r\n            return (e1.key() < e2.key()) && (e1.value() < e2.value());\r\n        });\r\n        std::cout << \"json diffs: \" << diffs.size() << std::endl;\r\n    }\r\n```\r\nThis however, fails to compile. The compiler (g++ 7.2 (on Ubuntu 16.04)) complains that there is no iterator_category or value_type in iteration_proxy_internal. Hmm. From its name, and from the compiler message, I guess the iterator proxy is not an iterator. But, could it easily be extended to support my use case? Or can I solve my problem in another way? Or do I have to resort to writing my own algorithms for the JSON containers?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1044", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1044/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1044/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1044/events", "html_url": "https://github.com/nlohmann/json/issues/1044", "id": 312336014, "node_id": "MDU6SXNzdWUzMTIzMzYwMTQ=", "number": 1044, "title": "Usage with gtest/gmock not working as expected", "user": {"login": "deblauwetom", "id": 2629599, "node_id": "MDQ6VXNlcjI2Mjk1OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2629599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deblauwetom", "html_url": "https://github.com/deblauwetom", "followers_url": "https://api.github.com/users/deblauwetom/followers", "following_url": "https://api.github.com/users/deblauwetom/following{/other_user}", "gists_url": "https://api.github.com/users/deblauwetom/gists{/gist_id}", "starred_url": "https://api.github.com/users/deblauwetom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deblauwetom/subscriptions", "organizations_url": "https://api.github.com/users/deblauwetom/orgs", "repos_url": "https://api.github.com/users/deblauwetom/repos", "events_url": "https://api.github.com/users/deblauwetom/events{/privacy}", "received_events_url": "https://api.github.com/users/deblauwetom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-08T20:05:29Z", "updated_at": "2018-07-27T09:58:14Z", "closed_at": "2018-04-09T13:50:27Z", "author_association": "NONE", "body": "I am trying to use the library with google test/google mock. It seems gtest is not able to print the json value out with its universal printer.\r\n\r\nExample that fails:\r\n```cpp\r\n#include <gtest/gtest.h>\r\n#include <nlohmann/json.hpp>\r\n\r\nusing json = nlohmann::json;\r\nusing namespace testing;\r\n\r\nTEST(EnsureJsonComparesCorrectly)\r\n{\r\n   auto test1 = R\"BLA(\r\n{\r\n    \"event\" : \"test\",\r\n    \"description\" : \"Test description\"\r\n}\r\n)BLA\"_json;\r\n\r\n   auto test2 = R\"BLA(\r\n{\r\n    \"description\" : \"Test description\",\r\n    \"event\" : \"test\"\r\n}\r\n)BLA\"_json;\r\n    EXPECT_THAT(test1, Eq(test2));\r\n}\r\n\r\n```\r\n\r\nI am using 3.1.2 of nlohmann and 1.8.0 of google test/mock. I am compiling and running on macOS.\r\n\r\nI also tried to use it with gmock, but it also fails. The myCall function is defined as:\r\n```cpp\r\nvoid myCall(std::string url, nlohmann::json message);\r\n```\r\nSo this is in gmock:\r\n```cpp\r\nMOCK_METHOD2(myCall, void(std::string url, nlohmann::json message));\r\n```\r\nAnd then in the test I set an expectation, like this:\r\n```cpp\r\n EXPECT_CALL(*myMock, myCall(_, test1));\r\n```\r\n\r\nbut every time gtest tries to print, in this case the \"test1\" object, then it crashes.\r\n\r\nSo what could causing this? Gtest is normally able to use a custom PrintTo function but I could not get that to work. Any pointers on how to solve it?\r\n\r\nI have a \"workaround\" but it goes against the \"json as first-class citizen\" philosophy :)\r\nWorkaround for EXPECT_THAT:\r\n```cpp\r\nEXPECT_THAT(test1.dump(), Eq(test2.dump()));\r\n```\r\nThat is more or less acceptable, but not really.\r\nAnd then for gmock it is really too much :) see:\r\n```cpp\r\njson tmp;\r\njson test;\r\nEXPECT_CALL(*myMock, myCall(_, _)).WillOnce(SaveArg<1>(&tmp));\r\nEXPECT_THAT(tmp.dump(), Eq(test.dump()));\r\n```\r\nBut of course it should be as easy as:\r\n```cpp\r\nEXPECT_CALL(*myMock, myCall(_, test));\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1042", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1042/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1042/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1042/events", "html_url": "https://github.com/nlohmann/json/issues/1042", "id": 312270882, "node_id": "MDU6SXNzdWUzMTIyNzA4ODI=", "number": 1042, "title": "Consequences of from_json / to_json being in namespace of data struct.", "user": {"login": "Anketell", "id": 14371698, "node_id": "MDQ6VXNlcjE0MzcxNjk4", "avatar_url": "https://avatars2.githubusercontent.com/u/14371698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anketell", "html_url": "https://github.com/Anketell", "followers_url": "https://api.github.com/users/Anketell/followers", "following_url": "https://api.github.com/users/Anketell/following{/other_user}", "gists_url": "https://api.github.com/users/Anketell/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anketell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anketell/subscriptions", "organizations_url": "https://api.github.com/users/Anketell/orgs", "repos_url": "https://api.github.com/users/Anketell/repos", "events_url": "https://api.github.com/users/Anketell/events{/privacy}", "received_events_url": "https://api.github.com/users/Anketell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-08T04:14:48Z", "updated_at": "2018-04-15T00:41:31Z", "closed_at": "2018-04-10T06:31:49Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI was recently shown nlohmann::json and have found it to be very nice.\r\n\r\nI have a query surrounding the necessity of _from_json_ / _to_json_ converters to be in a data structure's namespace. Primarily I was wondering what the benefit was of this decision? Below I've illustrated the consequences in an example that cannot easily be addressed with this constraint.\r\n\r\n**Example**\r\n\r\nPulling share trading data from two web portals that publish in JSON. There is a common struct used in more agnostic code:\r\n\r\n<pre>\r\nnamespace shares\r\n{\r\n   struct price_t\r\n   {\r\n      uint64_t time;\r\n      double   open;\r\n      double   high;\r\n      double   low;\r\n      double   close;\r\n      uint64_t volume;\r\n   };\r\n}\r\n</pre>\r\n\r\nOne site published this data in JSON as an object:\r\n<pre>\r\n{\r\n   \"time\": xxxx,\r\n   \"open\": xxxx,\r\n   \"high\": xxxx,\r\n   \"low\": xxxx,\r\n   \"close\": xxxx,\r\n   \"volume\": xxxx\r\n}\r\n</pre>\r\nThe second as an array:\r\n<pre>\r\n[ xxxx, xxxx, xxxx, xxxx, xxxx, xxxx ]\r\n</pre>\r\n\r\nGiven that I must define _from_json_ in namespace _shares_, I cannot conveniently define multiple _from_json_ converters, one for each schema.\r\n\r\nIdeally I'd like to define the following:\r\n\r\n<pre>\r\nnamespace schema_1\r\n{\r\n   void from_json( const nlohmann::json & value, shares::price_t & price )\r\n   {\r\n      price.time = value[ \"time\" ];\r\n      price.open = value[ \"open\" ];\r\n      price.high = value[ \"high\" ];\r\n      price.low = value[ \"low\" ];\r\n      price.close = value[ \"close\" ];\r\n      price.volume = value[ \"volume\" ];\r\n   }\r\n}\r\n</pre>\r\n\r\nAnd:\r\n\r\n<pre>\r\nnamespace schema_2\r\n{\r\n   void from_json( const nlohmann::json & value, shares::price_t & price )\r\n   {\r\n      price.time = value[ 0 ];\r\n      price.open = value[ 1 ];\r\n      price.high = value[ 2 ];\r\n      price.low = value[ 3 ];\r\n      price.close = value[ 4 ];\r\n      price.volume = value[ 5 ];\r\n   }\r\n}\r\n</pre>\r\n\r\nThen use them like this:\r\n\r\n<pre>\r\nshares::price_t read_schema_1( const std::string & url )\r\n{\r\n   using schema_1::from_json;\r\n\r\n   return curl.read_json( url );\r\n}\r\n</pre>\r\n\r\nAnd:\r\n\r\n<pre>\r\nshares::price_t read_schema_2( const std::string & url )\r\n{\r\n   using schema_2::from_json;\r\n\r\n   return curl.read_json( url );\r\n}\r\n\r\n</pre>\r\n\r\nIn general the necessity to place _from_json_ and _to_json_ in the the namespace of the data structure couples that data structure too tightly to an externally defined JSON schema. This results in negatively limiting its flexibility.\r\n\r\nUnless there is some compelling reason for binding these conversion routines in this way, I'd suggest that this limitation be removed."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1039", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1039/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1039/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1039/events", "html_url": "https://github.com/nlohmann/json/issues/1039", "id": 311682631, "node_id": "MDU6SXNzdWUzMTE2ODI2MzE=", "number": 1039, "title": "const_reference operator[](const typename object_t::key_type& key) const throw instead of assert", "user": {"login": "smonasco", "id": 25205020, "node_id": "MDQ6VXNlcjI1MjA1MDIw", "avatar_url": "https://avatars3.githubusercontent.com/u/25205020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smonasco", "html_url": "https://github.com/smonasco", "followers_url": "https://api.github.com/users/smonasco/followers", "following_url": "https://api.github.com/users/smonasco/following{/other_user}", "gists_url": "https://api.github.com/users/smonasco/gists{/gist_id}", "starred_url": "https://api.github.com/users/smonasco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smonasco/subscriptions", "organizations_url": "https://api.github.com/users/smonasco/orgs", "repos_url": "https://api.github.com/users/smonasco/repos", "events_url": "https://api.github.com/users/smonasco/events{/privacy}", "received_events_url": "https://api.github.com/users/smonasco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-05T16:30:31Z", "updated_at": "2018-04-05T19:08:09Z", "closed_at": "2018-04-05T19:08:09Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nI'd rather have an out_of_range exception thrown than undefined behavior that kills my app (VS2015).\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1038", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1038/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1038/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1038/events", "html_url": "https://github.com/nlohmann/json/issues/1038", "id": 311464289, "node_id": "MDU6SXNzdWUzMTE0NjQyODk=", "number": 1038, "title": "Trying to retrieve data from nested objects", "user": {"login": "EtienneBerube", "id": 18299036, "node_id": "MDQ6VXNlcjE4Mjk5MDM2", "avatar_url": "https://avatars1.githubusercontent.com/u/18299036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EtienneBerube", "html_url": "https://github.com/EtienneBerube", "followers_url": "https://api.github.com/users/EtienneBerube/followers", "following_url": "https://api.github.com/users/EtienneBerube/following{/other_user}", "gists_url": "https://api.github.com/users/EtienneBerube/gists{/gist_id}", "starred_url": "https://api.github.com/users/EtienneBerube/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EtienneBerube/subscriptions", "organizations_url": "https://api.github.com/users/EtienneBerube/orgs", "repos_url": "https://api.github.com/users/EtienneBerube/repos", "events_url": "https://api.github.com/users/EtienneBerube/events{/privacy}", "received_events_url": "https://api.github.com/users/EtienneBerube/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-05T03:53:39Z", "updated_at": "2018-04-08T07:29:52Z", "closed_at": "2018-04-07T23:21:37Z", "author_association": "NONE", "body": "Hi, I'm trying to map data from a Json file to individual objects in order to sort them and perform other operations on them. However, the data structure required is quite complex and makes it hard to navigate. \r\nHere is a snippet of the Json file:\r\n```js\r\n{\r\n  \"items\":\r\n  {\r\n    \"item\":\r\n    [\r\n      {\r\n        \"id\": \"0001\",\r\n        \"type\": \"donut\",\r\n        \"name\": \"Cake\",\r\n        \"ppu\": 0.55,\r\n        \"batters\":\r\n        {\r\n          \"batter\":\r\n          [\r\n            { \"id\": \"1001\", \"type\": \"Regular\" },\r\n            { \"id\": \"1002\", \"type\": \"Chocolate\" },\r\n            { \"id\": \"1003\", \"type\": \"Blueberry\" },\r\n            { \"id\": \"1004\", \"type\": \"Devil's Food\" }\r\n          ]\r\n        },\r\n        \"topping\":\r\n        [\r\n          { \"id\": \"5001\", \"type\": \"None\" },\r\n          { \"id\": \"5002\", \"type\": \"Glazed\" },\r\n          { \"id\": \"5005\", \"type\": \"Sugar\" },\r\n          { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\r\n          { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\r\n          { \"id\": \"5003\", \"type\": \"Chocolate\" },\r\n          { \"id\": \"5004\", \"type\": \"Maple\" }\r\n        ]\r\n      },\r\n      [...] Other items could be there\r\n    ]\r\n  }\r\n}\r\n```\r\nI cannot change the way it is organised. However, I cannot figure out how to properly get every element and extract it.\r\n\r\nMy current code:\r\n\r\n```cpp\r\nifstream input(\"sample.json\");\r\n\r\n    json json1;\r\n\r\n    input >> json1;\r\n\r\n    json json2 = json1[\"items\"][\"item\"];\r\n\r\n    for ( auto& item : json2.get<json::object_t>() ){\r\n        Item *tempItem = new Item();\r\n\r\n        tempItem->setId(item.at(\"id\"));\r\n        tempItem->setName(item.at(\"name\"));\r\n        tempItem->setType(item.at(\"type\"));\r\n        tempItem->setId(item.at(\"ppu\"));\r\n        //Trying to go in the array batters\r\n        object_t temp_obj = item.at(\"batters\");\r\n\r\n        items.push_back(new Item());\r\n    }\r\n```\r\n\r\nNote: Even then I get an error because `json2.get<json::object_t>() ` returns a pair<>. \r\n\r\nThanks in advance!\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1037", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1037/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1037/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1037/events", "html_url": "https://github.com/nlohmann/json/issues/1037", "id": 311267360, "node_id": "MDU6SXNzdWUzMTEyNjczNjA=", "number": 1037, "title": "Direct download link for json_fwd.hpp?", "user": {"login": "wolframroesler", "id": 25565229, "node_id": "MDQ6VXNlcjI1NTY1MjI5", "avatar_url": "https://avatars0.githubusercontent.com/u/25565229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wolframroesler", "html_url": "https://github.com/wolframroesler", "followers_url": "https://api.github.com/users/wolframroesler/followers", "following_url": "https://api.github.com/users/wolframroesler/following{/other_user}", "gists_url": "https://api.github.com/users/wolframroesler/gists{/gist_id}", "starred_url": "https://api.github.com/users/wolframroesler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wolframroesler/subscriptions", "organizations_url": "https://api.github.com/users/wolframroesler/orgs", "repos_url": "https://api.github.com/users/wolframroesler/repos", "events_url": "https://api.github.com/users/wolframroesler/events{/privacy}", "received_events_url": "https://api.github.com/users/wolframroesler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-04T14:59:27Z", "updated_at": "2018-04-23T18:04:29Z", "closed_at": "2018-04-23T18:04:29Z", "author_association": "NONE", "body": "On the release page (https://github.com/nlohmann/json/releases) there's a hyperlink to download the single header version of the library (currently, https://github.com/nlohmann/json/releases/download/v3.1.2/json.hpp). How about adding a similar link for the forward header file, json_fwd.hpp?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1036", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1036/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1036/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1036/events", "html_url": "https://github.com/nlohmann/json/issues/1036", "id": 310807361, "node_id": "MDU6SXNzdWUzMTA4MDczNjE=", "number": 1036, "title": "I know the library supports UTF-8, but failed to dump the value", "user": {"login": "htonus", "id": 805160, "node_id": "MDQ6VXNlcjgwNTE2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/805160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/htonus", "html_url": "https://github.com/htonus", "followers_url": "https://api.github.com/users/htonus/followers", "following_url": "https://api.github.com/users/htonus/following{/other_user}", "gists_url": "https://api.github.com/users/htonus/gists{/gist_id}", "starred_url": "https://api.github.com/users/htonus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/htonus/subscriptions", "organizations_url": "https://api.github.com/users/htonus/orgs", "repos_url": "https://api.github.com/users/htonus/repos", "events_url": "https://api.github.com/users/htonus/events{/privacy}", "received_events_url": "https://api.github.com/users/htonus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-03T12:01:36Z", "updated_at": "2018-04-03T13:24:08Z", "closed_at": "2018-04-03T13:24:08Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nFailed to dump object with UTF8 value;\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\njsonObject[\"name\"] = \"Telef\u00f3nica\";\r\njsonObject.dump()\r\n\r\n- What is the expected behavior?\r\nstringified json\r\n- And what is the actual behavior instead?\r\nthrown an exeption. Is it possible to avoid exceptions?\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nVS 2017 Community edition\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nFrom dev branch\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1035", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1035/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1035/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1035/events", "html_url": "https://github.com/nlohmann/json/issues/1035", "id": 310707103, "node_id": "MDU6SXNzdWUzMTA3MDcxMDM=", "number": 1035, "title": "Putting a Vec3-like vector into a json object", "user": {"login": "PopThis", "id": 35315308, "node_id": "MDQ6VXNlcjM1MzE1MzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/35315308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PopThis", "html_url": "https://github.com/PopThis", "followers_url": "https://api.github.com/users/PopThis/followers", "following_url": "https://api.github.com/users/PopThis/following{/other_user}", "gists_url": "https://api.github.com/users/PopThis/gists{/gist_id}", "starred_url": "https://api.github.com/users/PopThis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PopThis/subscriptions", "organizations_url": "https://api.github.com/users/PopThis/orgs", "repos_url": "https://api.github.com/users/PopThis/repos", "events_url": "https://api.github.com/users/PopThis/events{/privacy}", "received_events_url": "https://api.github.com/users/PopThis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-04-03T06:15:43Z", "updated_at": "2018-04-08T12:39:07Z", "closed_at": "2018-04-08T12:39:07Z", "author_association": "NONE", "body": "I have a struct like this\r\n\r\n```cpp\r\nstruct Vertexes\r\n{\r\npublic:\r\n\t// Construction\r\n\tfloat x_;\r\n\tfloat y_;\r\n\tfloat z_;\r\n\r\n\tVertexes(float x, float y, float z) : x_(x), y_(y), z_(z) {}\r\n\r\n\t// Getters\r\n\tfloat getX() const { return x_; }\r\n\tfloat getY() const { return y_; }\r\n\tfloat getZ() const { return z_; }\r\n\r\n\t// Setters\r\n\tvoid setX(float val) { x_ = val; }\r\n\tvoid setY(float val) { y_ = val; }\r\n\tvoid setZ(float val) { z_ = val; }\r\n\r\n\tstd::string getString() {\r\n\t\treturn std::to_string(x_) + \", \" + std::to_string(z_) + \", \" + std::to_string(y_);\r\n\t}\r\n\r\n\tVertexes flip() const { return Vertexes{ x_ , z_ , y_ }; }\r\n\tVertexes smaller() const { return Vertexes{ x_ / 100, y_ / 100, z_ / 100 }; }\r\n\tVertexes smallerflip() const { return Vertexes{ x_ / 100, z_ / 100, y_ / 100 }; }\r\n\r\n};\r\n\r\n```\r\n\r\nSure, I could even flatten this down to just a \r\n```cpp\r\nstruct Vec3\r\n{\r\n   float x, y, z;\r\n}\r\n```\r\n\r\nBut \r\n\r\n```cpp\r\nstd::vector<Vertexes> SavedPoints = { {10, 1, 5}, {7,2,2} };\r\njson v(SavedPoints);\r\nstd::ofstream o(\"file.json\");\r\no << std::setw(4) << v << std::endl;\r\n```\r\n\r\nWould not work with to_json template (line 312 at to_json.hpp)\r\n\r\nIs there a way to store this vector of vertexes as a json output? such as\r\nv[\"list\"] = SavedPoints and results in\r\n\r\n```js\r\n{\"0\":[\r\n     [10, 1, 5]\r\n     ],\r\n \"1\":[[7,2 ,2]\r\n     ]\r\n }\r\n```\r\n\r\nThank you very much!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1034", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1034/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1034/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1034/events", "html_url": "https://github.com/nlohmann/json/issues/1034", "id": 310489448, "node_id": "MDU6SXNzdWUzMTA0ODk0NDg=", "number": 1034, "title": "Ternary operator crash", "user": {"login": "parfenuk", "id": 4920456, "node_id": "MDQ6VXNlcjQ5MjA0NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4920456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parfenuk", "html_url": "https://github.com/parfenuk", "followers_url": "https://api.github.com/users/parfenuk/followers", "following_url": "https://api.github.com/users/parfenuk/following{/other_user}", "gists_url": "https://api.github.com/users/parfenuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/parfenuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parfenuk/subscriptions", "organizations_url": "https://api.github.com/users/parfenuk/orgs", "repos_url": "https://api.github.com/users/parfenuk/repos", "events_url": "https://api.github.com/users/parfenuk/events{/privacy}", "received_events_url": "https://api.github.com/users/parfenuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-02T13:48:15Z", "updated_at": "2018-04-02T15:56:18Z", "closed_at": "2018-04-02T15:56:18Z", "author_association": "NONE", "body": "This simple code crashes:\r\n`string someStr;`\r\n`json j = json::object();`\r\n`// the next line crashes`\r\n`j[\"someKey\"] = someStr.empty() ? nullptr : someStr;`\r\n\r\nHowever, if I use standard if-else condition, everything is fine:\r\n`string someStr;`\r\n`json j = json::object();`\r\n`// the code below works ok`\r\n`if (someStr.empty()) j[\"someKey\"] = nullptr;`\r\n`else j[\"someKey\"] = someStr;`\r\n\r\nAlso if S is not empty - both versions work. \r\nIs it a bug or feature? :)\r\n\r\nI'm using GNU C++ 14 compiler, IDE Xcode 9.3"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1033", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1033/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1033/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1033/events", "html_url": "https://github.com/nlohmann/json/issues/1033", "id": 310329219, "node_id": "MDU6SXNzdWUzMTAzMjkyMTk=", "number": 1033, "title": "Issued with Clion Inspection Resolution since 2018.1", "user": {"login": "trivigy", "id": 3146062, "node_id": "MDQ6VXNlcjMxNDYwNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3146062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trivigy", "html_url": "https://github.com/trivigy", "followers_url": "https://api.github.com/users/trivigy/followers", "following_url": "https://api.github.com/users/trivigy/following{/other_user}", "gists_url": "https://api.github.com/users/trivigy/gists{/gist_id}", "starred_url": "https://api.github.com/users/trivigy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trivigy/subscriptions", "organizations_url": "https://api.github.com/users/trivigy/orgs", "repos_url": "https://api.github.com/users/trivigy/repos", "events_url": "https://api.github.com/users/trivigy/events{/privacy}", "received_events_url": "https://api.github.com/users/trivigy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-01T14:52:27Z", "updated_at": "2018-04-03T17:18:10Z", "closed_at": "2018-04-03T16:11:10Z", "author_association": "NONE", "body": "Really not sure how to touch base with clion nor do I feel like they will do anything to fix this. Figured I will post it here and see if anyone else has the same issue.\r\n\r\nIn both cases I am getting: \"no matching function\" and \"no matching constructor\".\r\n\r\nHowever the code compiles and works fine.\r\n![screenshot from 2018-04-01 10-48-56](https://user-images.githubusercontent.com/3146062/38174413-ba910dd8-359a-11e8-9e91-1a6f8feb9d1d.png)\r\n![screenshot from 2018-04-01 10-48-45](https://user-images.githubusercontent.com/3146062/38174414-baa2e364-359a-11e8-8f37-9ca07263c493.png)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1032", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1032/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1032/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1032/events", "html_url": "https://github.com/nlohmann/json/issues/1032", "id": 310270110, "node_id": "MDU6SXNzdWUzMTAyNzAxMTA=", "number": 1032, "title": "Some testcases fail and one never finishes", "user": {"login": "yurivict", "id": 271906, "node_id": "MDQ6VXNlcjI3MTkwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/271906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurivict", "html_url": "https://github.com/yurivict", "followers_url": "https://api.github.com/users/yurivict/followers", "following_url": "https://api.github.com/users/yurivict/following{/other_user}", "gists_url": "https://api.github.com/users/yurivict/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurivict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurivict/subscriptions", "organizations_url": "https://api.github.com/users/yurivict/orgs", "repos_url": "https://api.github.com/users/yurivict/repos", "events_url": "https://api.github.com/users/yurivict/events{/privacy}", "received_events_url": "https://api.github.com/users/yurivict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-03-31T20:34:04Z", "updated_at": "2018-07-29T08:52:27Z", "closed_at": "2018-04-05T15:50:25Z", "author_association": "NONE", "body": "```\r\n      Start 10: test-cbor_all\r\n10/78 Test #10: test-cbor_all .......................***Exception: Child aborted  9.98 sec\r\n      Start 56: test-msgpack_all\r\n56/78 Test #56: test-msgpack_all ....................***Exception: Child aborted  9.99 sec\r\n      Start 74: test-ubjson_all\r\n74/78 Test #74: test-ubjson_all .....................***Exception: Child aborted  2.96 sec\r\n      Start 78: test-unicode_all\r\n/// {never finishes}\r\n```\r\n\r\nOS: FreeBSD-11.1 amd64\r\nVersion 3.1.2 built from port, while trying to update it."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1031", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1031/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1031/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1031/events", "html_url": "https://github.com/nlohmann/json/issues/1031", "id": 309827558, "node_id": "MDU6SXNzdWUzMDk4Mjc1NTg=", "number": 1031, "title": "Can this class work with wchar_t / std::wstring?", "user": {"login": "htonus", "id": 805160, "node_id": "MDQ6VXNlcjgwNTE2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/805160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/htonus", "html_url": "https://github.com/htonus", "followers_url": "https://api.github.com/users/htonus/followers", "following_url": "https://api.github.com/users/htonus/following{/other_user}", "gists_url": "https://api.github.com/users/htonus/gists{/gist_id}", "starred_url": "https://api.github.com/users/htonus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/htonus/subscriptions", "organizations_url": "https://api.github.com/users/htonus/orgs", "repos_url": "https://api.github.com/users/htonus/repos", "events_url": "https://api.github.com/users/htonus/events{/privacy}", "received_events_url": "https://api.github.com/users/htonus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 17, "created_at": "2018-03-29T16:47:58Z", "updated_at": "2018-04-29T15:30:31Z", "closed_at": "2018-04-29T15:30:30Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nFailed to parse wchar_t string\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\njson::parse(wstring) failed\r\n- What is the expected behavior?\r\nthe string was parsed\r\n- And what is the actual behavior instead?\r\nerror\r\n- Which compiler and operating system are you using? Is it a [supported compiler]\r\nVS 2017 Community edition\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nTook from developer branch\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1030", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1030/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1030/events", "html_url": "https://github.com/nlohmann/json/issues/1030", "id": 309765443, "node_id": "MDU6SXNzdWUzMDk3NjU0NDM=", "number": 1030, "title": "Makefile: Valgrind flags have no effect", "user": {"login": "tsemaylo", "id": 6775363, "node_id": "MDQ6VXNlcjY3NzUzNjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6775363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsemaylo", "html_url": "https://github.com/tsemaylo", "followers_url": "https://api.github.com/users/tsemaylo/followers", "following_url": "https://api.github.com/users/tsemaylo/following{/other_user}", "gists_url": "https://api.github.com/users/tsemaylo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsemaylo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsemaylo/subscriptions", "organizations_url": "https://api.github.com/users/tsemaylo/orgs", "repos_url": "https://api.github.com/users/tsemaylo/repos", "events_url": "https://api.github.com/users/tsemaylo/events{/privacy}", "received_events_url": "https://api.github.com/users/tsemaylo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-03-29T13:58:10Z", "updated_at": "2018-03-29T16:45:11Z", "closed_at": "2018-03-29T16:45:10Z", "author_association": "NONE", "body": "There is the following Valgrind configuration in CMake file from test subdirectory (test/CMakeLists.txt).\r\nAnd it looks like there is a typo.\r\n\r\n```cmake\r\nif(JSON_Valgrind)\r\n    find_program(CMAKE_MEMORYCHECK_COMMAND valgrind)\r\n    message(STATUS \"Executing test suite with Valgrind (${CMAKE_MEMORYCHECK_COMMAND})\")\r\n    set(MEMORYCHECK_COMMAND_OPTIONS \"--error-exitcode=1 --leak-check=full\")\r\n    set(memcheck_command \"${CMAKE_MEMORYCHECK_COMMAND} ${CMAKE_MEMORYCHECK_COMMAND_OPTIONS}\")\r\n    separate_arguments(memcheck_command)\r\nendif()\r\n```\r\n\r\nVariable `CMAKE_MEMORYCHECK_COMMAND_OPTIONS` is not initialized instead of that we have `set(MEMORYCHECK_COMMAND_OPTIONS, ...)`. Therefore automated execution of tests will not report any memory check problem. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1029", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1029/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1029/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1029/events", "html_url": "https://github.com/nlohmann/json/issues/1029", "id": 309633320, "node_id": "MDU6SXNzdWUzMDk2MzMzMjA=", "number": 1029, "title": "\u300c==\u300d Should be \u300c>\u300d", "user": {"login": "tnie", "id": 5952845, "node_id": "MDQ6VXNlcjU5NTI4NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5952845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnie", "html_url": "https://github.com/tnie", "followers_url": "https://api.github.com/users/tnie/followers", "following_url": "https://api.github.com/users/tnie/following{/other_user}", "gists_url": "https://api.github.com/users/tnie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnie/subscriptions", "organizations_url": "https://api.github.com/users/tnie/orgs", "repos_url": "https://api.github.com/users/tnie/repos", "events_url": "https://api.github.com/users/tnie/events{/privacy}", "received_events_url": "https://api.github.com/users/tnie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-03-29T06:23:43Z", "updated_at": "2018-03-29T16:41:00Z", "closed_at": "2018-03-29T16:41:00Z", "author_association": "NONE", "body": "https://github.com/nlohmann/json/blob/develop/doc/examples/operator__greater.cpp\r\n\r\n```cpp\r\n    std::cout << array_1 << \" == \" << array_2 << \" \" << (array_1 > array_2) << '\\n';\r\n    std::cout << object_1 << \" == \" << object_2 << \" \" << (object_1 > object_2) << '\\n';\r\n    std::cout << number_1 << \" == \" << number_2 << \" \" << (number_1 > number_2) << '\\n';\r\n    std::cout << string_1 << \" == \" << string_2 << \" \" << (string_1 > string_2) << '\\n';\r\n\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1027", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1027/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1027/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1027/events", "html_url": "https://github.com/nlohmann/json/issues/1027", "id": 309074382, "node_id": "MDU6SXNzdWUzMDkwNzQzODI=", "number": 1027, "title": "HOCON reader?", "user": {"login": "abrownsword", "id": 9805159, "node_id": "MDQ6VXNlcjk4MDUxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9805159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abrownsword", "html_url": "https://github.com/abrownsword", "followers_url": "https://api.github.com/users/abrownsword/followers", "following_url": "https://api.github.com/users/abrownsword/following{/other_user}", "gists_url": "https://api.github.com/users/abrownsword/gists{/gist_id}", "starred_url": "https://api.github.com/users/abrownsword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abrownsword/subscriptions", "organizations_url": "https://api.github.com/users/abrownsword/orgs", "repos_url": "https://api.github.com/users/abrownsword/repos", "events_url": "https://api.github.com/users/abrownsword/events{/privacy}", "received_events_url": "https://api.github.com/users/abrownsword/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-03-27T18:02:58Z", "updated_at": "2018-04-02T19:55:48Z", "closed_at": "2018-04-02T19:55:48Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nSince your JSON C++ API is mature and so much nicer than cpp-hocon's (not to mention WAY fewer dependencies), it would be really nice if this project were able to read HOCON files.  I would imagine the include mechanism would be the trickiest part, whereas having the parser skip comments and cope with the format's extensions shouldn't be a big deal.  Writing would be substantially more complex (due to the need to support adding includes, comments, etc) and is substantially less interesting since HOCON's primary goal seems to be to make config files more *human* writeable.\r\n"}]