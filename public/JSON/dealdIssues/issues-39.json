[{"url": "https://api.github.com/repos/nlohmann/json/issues/965", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/965/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/965/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/965/events", "html_url": "https://github.com/nlohmann/json/issues/965", "id": 295691691, "node_id": "MDU6SXNzdWUyOTU2OTE2OTE=", "number": 965, "title": "fast number parsing", "user": {"login": "gabyx", "id": 647437, "node_id": "MDQ6VXNlcjY0NzQzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/647437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabyx", "html_url": "https://github.com/gabyx", "followers_url": "https://api.github.com/users/gabyx/followers", "following_url": "https://api.github.com/users/gabyx/following{/other_user}", "gists_url": "https://api.github.com/users/gabyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabyx/subscriptions", "organizations_url": "https://api.github.com/users/gabyx/orgs", "repos_url": "https://api.github.com/users/gabyx/repos", "events_url": "https://api.github.com/users/gabyx/events{/privacy}", "received_events_url": "https://api.github.com/users/gabyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-08T22:41:16Z", "updated_at": "2018-02-13T18:57:55Z", "closed_at": "2018-02-09T06:30:03Z", "author_association": "NONE", "body": "I once optimized a string conversion from string2double/float and integral type:\r\nIt turned out to beat anything I've seen so far (except probably some geeky-assembler optimized code):\r\n\r\nHere the GIST:\r\nhttps://gist.github.com/gabyx/cd8ea9e727f5683a1fc654020edb6951\r\n\r\ntaken from here:\r\nhttps://github.com/gabyx/GRSFramework/blob/5f1e8dca647d45d2f3b85e4a440b0f1195470b45/common/include/GRSF/common/FastStringConversion.hpp#L28\r\n\r\nmaybe it is of any help here, if it is faster ;-). It could serve as a drop-in replacement. This is tested, and was used years ago. It should be safe =)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/964", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/964/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/964/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/964/events", "html_url": "https://github.com/nlohmann/json/issues/964", "id": 295562617, "node_id": "MDU6SXNzdWUyOTU1NjI2MTc=", "number": 964, "title": "Json and fmt::lib's format_arg()", "user": {"login": "AlexandreBossard", "id": 482261, "node_id": "MDQ6VXNlcjQ4MjI2MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/482261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexandreBossard", "html_url": "https://github.com/AlexandreBossard", "followers_url": "https://api.github.com/users/AlexandreBossard/followers", "following_url": "https://api.github.com/users/AlexandreBossard/following{/other_user}", "gists_url": "https://api.github.com/users/AlexandreBossard/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexandreBossard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexandreBossard/subscriptions", "organizations_url": "https://api.github.com/users/AlexandreBossard/orgs", "repos_url": "https://api.github.com/users/AlexandreBossard/repos", "events_url": "https://api.github.com/users/AlexandreBossard/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexandreBossard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}, {"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-02-08T15:49:37Z", "updated_at": "2018-02-25T21:37:42Z", "closed_at": "2018-02-25T21:37:41Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n[jsonbug.zip](https://github.com/nlohmann/json/files/1707716/jsonbug.zip)\r\n\r\n\r\n\r\nI use the glorious [fmt::lib](https://github.com/fmtlib/fmt) for my project. Since i got bored of typing code\r\nlike ```fmt::print(\"my json {}\", jsonvar.dump(2));```, i set myself to use the fmt customization point for user-defined type.\r\n\r\nNormally, fmtlib trigger static_assert when unrecognized type are passed as arguments, asking you to defined ``format_arg()`` or an ``ostream<<`` overload.\r\n\r\nNot with nhlomann::json. I get some horrible error messages with gcc (7.2.0) with an ambiguous call to a constructor of some fmtlib internals.\r\n\r\nBy digging fmt code, i found a macro which disabled implicit int conversion. Shooting in the dark, copy paste the macro, and passing nhlomann::json to it. Fixed!\r\n\r\nI am not sure if this is a the fmtlib or json fault (both?). But looking for related issues in both project, i found this one #958, which kind of help me.\r\n\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/963", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/963/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/963/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/963/events", "html_url": "https://github.com/nlohmann/json/issues/963", "id": 295295547, "node_id": "MDU6SXNzdWUyOTUyOTU1NDc=", "number": 963, "title": "With non-unique keys, later stored entries are not taken into account anymore", "user": {"login": "jeremysingy", "id": 468717, "node_id": "MDQ6VXNlcjQ2ODcxNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/468717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremysingy", "html_url": "https://github.com/jeremysingy", "followers_url": "https://api.github.com/users/jeremysingy/followers", "following_url": "https://api.github.com/users/jeremysingy/following{/other_user}", "gists_url": "https://api.github.com/users/jeremysingy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremysingy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremysingy/subscriptions", "organizations_url": "https://api.github.com/users/jeremysingy/orgs", "repos_url": "https://api.github.com/users/jeremysingy/repos", "events_url": "https://api.github.com/users/jeremysingy/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremysingy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/21", "html_url": "https://github.com/nlohmann/json/milestone/21", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/21/labels", "id": 3003937, "node_id": "MDk6TWlsZXN0b25lMzAwMzkzNw==", "number": 21, "title": "Release 3.1.1", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2017-12-29T19:16:13Z", "updated_at": "2018-02-13T18:42:47Z", "due_on": "2018-02-13T08:00:00Z", "closed_at": "2018-02-13T18:42:47Z"}, "comments": 2, "created_at": "2018-02-07T21:16:21Z", "updated_at": "2018-02-09T22:37:36Z", "closed_at": "2018-02-09T22:37:36Z", "author_association": "NONE", "body": "While updating to 3.1.0, I noticed that the behavior of the library is not consistent with the [documentation](http://nlohmann.github.io/json/classnlohmann_1_1basic__json_a5e48a7893520e1314bf0c9723e26ea2a.html#a5e48a7893520e1314bf0c9723e26ea2a) anymore for objects with non-unique names (also discussed in issue #375).\r\n\r\n> When the names within an object are not unique, **later stored name/value pairs overwrite previously stored name/value pairs**, leaving the used names unique. For instance, {\"key\": 1} and {\"key\": 2, \"key\": 1} will be treated as equal and both stored as {\"key\": 1}.\r\n\r\nWhereas  it will now be treated equally as `{\"key\": 2}` instead.\r\n\r\nI bissected to the commit 85c76808 replacing `operator[]` with `emplace` to insert an object, which will not update an already existing object in the `map`.\r\n\r\nI actually don't need this \"feature\" anymore, so not sure if it's best to fix the code for consistency or update the corresponding documentation."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/962", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/962/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/962/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/962/events", "html_url": "https://github.com/nlohmann/json/issues/962", "id": 294894974, "node_id": "MDU6SXNzdWUyOTQ4OTQ5NzQ=", "number": 962, "title": "Timeout (OSS-Fuzz 6034)", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/21", "html_url": "https://github.com/nlohmann/json/milestone/21", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/21/labels", "id": 3003937, "node_id": "MDk6TWlsZXN0b25lMzAwMzkzNw==", "number": 21, "title": "Release 3.1.1", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2017-12-29T19:16:13Z", "updated_at": "2018-02-13T18:42:47Z", "due_on": "2018-02-13T08:00:00Z", "closed_at": "2018-02-13T18:42:47Z"}, "comments": 3, "created_at": "2018-02-06T20:03:52Z", "updated_at": "2018-02-09T19:29:29Z", "closed_at": "2018-02-09T19:29:29Z", "author_association": "OWNER", "body": "```\r\nDetailed report: https://oss-fuzz.com/testcase?key=5146728694022144\r\n\r\nProject: json\r\nFuzzer: libFuzzer_json_parse_ubjson_fuzzer\r\nFuzz target binary: parse_ubjson_fuzzer\r\nJob Type: libfuzzer_ubsan_json\r\nPlatform Id: linux\r\n\r\nCrash Type: Timeout (exceeds 10 secs)\r\nCrash Address: \r\nCrash State:\r\nNULL\r\nSanitizer: undefined (UBSAN)\r\n\r\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=5146728694022144\r\n\r\nIssue filed automatically.\r\n\r\nSee https://github.com/google/oss-fuzz/blob/master/docs/reproducing.md for more information.\r\n\r\nNote: This crash might not be reproducible with the provided testcase. That said, for the past 14 days we've been seeing this crash frequently. If you are unable to reproduce this, please try a speculative fix based on the crash stacktrace in the report. The fix can be verified by looking at the crash statistics in the report, a day after the fix is deployed. We will auto-close the bug if the crash is not seen for 14 days.\r\n\r\nThis bug is subject to a 90 day disclosure deadline. If 90 days elapse\r\nwithout an upstream patch, then the bug report will automatically\r\nbecome visible to the public.\r\n\r\nWhen you fix this bug, please\r\n* mention the fix revision(s).\r\n* state whether the bug was a short-lived regression or an old bug in any stable releases.\r\n* add any other useful information.\r\nThis information can help downstream consumers.\r\n```\r\n\r\n[clusterfuzz-testcase-minimized-5146728694022144.dms.zip](https://github.com/nlohmann/json/files/1700626/clusterfuzz-testcase-minimized-5146728694022144.dms.zip)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/961", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/961/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/961/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/961/events", "html_url": "https://github.com/nlohmann/json/issues/961", "id": 294874159, "node_id": "MDU6SXNzdWUyOTQ4NzQxNTk=", "number": 961, "title": "Incorrect parsing of indefinite length CBOR strings.", "user": {"login": "johnfb", "id": 2014627, "node_id": "MDQ6VXNlcjIwMTQ2Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2014627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnfb", "html_url": "https://github.com/johnfb", "followers_url": "https://api.github.com/users/johnfb/followers", "following_url": "https://api.github.com/users/johnfb/following{/other_user}", "gists_url": "https://api.github.com/users/johnfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnfb/subscriptions", "organizations_url": "https://api.github.com/users/johnfb/orgs", "repos_url": "https://api.github.com/users/johnfb/repos", "events_url": "https://api.github.com/users/johnfb/events{/privacy}", "received_events_url": "https://api.github.com/users/johnfb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/21", "html_url": "https://github.com/nlohmann/json/milestone/21", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/21/labels", "id": 3003937, "node_id": "MDk6TWlsZXN0b25lMzAwMzkzNw==", "number": 21, "title": "Release 3.1.1", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2017-12-29T19:16:13Z", "updated_at": "2018-02-13T18:42:47Z", "due_on": "2018-02-13T08:00:00Z", "closed_at": "2018-02-13T18:42:47Z"}, "comments": 7, "created_at": "2018-02-06T18:57:12Z", "updated_at": "2018-02-06T21:53:36Z", "closed_at": "2018-02-06T21:53:36Z", "author_association": "NONE", "body": "I found this library and thought it was very interesting and like a lot about it and decided to brows the source code a little bit. I am thinking I will try using this in my next project. In my browsing I found the following problem:\r\n\r\nhttps://github.com/nlohmann/json/blob/737cffe0cbec165cee343edde494fec281860efb/include/nlohmann/detail/input/binary_reader.hpp#L946\r\n\r\nAccording to [section 2.2.2 of the CBOR RFC 7049](https://tools.ietf.org/html/rfc7049#section-2.2.2) an indefinite length string is a list of definite length strings terminated by the terminal byte 0xFF. As such the following code snippet should print the same string twice.\r\n\r\n```C++\r\n    using json = nlohmann::json;\r\n    std::vector<uint8_t> v_cbor = {\r\n        0x7F,\r\n            0x64,\r\n                'a', 'b', 'c', 'd',\r\n            0x63,\r\n                '1', '2', '3',\r\n            0xFF\r\n    };\r\n    json j = json::from_cbor(v_cbor);\r\n    std::cout << \"\\\"abcd123\\\"\\n\";\r\n    std::cout <<  j << std::endl;\r\n```\r\nBut as of version 3.1.0 it prints:\r\n```\r\n\"abcd123\"\r\n\"dabcdc123\"\r\n```\r\n\r\nChanging that case to something like:\r\n```C++\r\n            case 0x7F: // UTF-8 string (indefinite length)\r\n            {\r\n                std::vector<string_t> result_list;\r\n                std::size_t size = 0;\r\n                while (get() != 0xFF)\r\n                {\r\n                    unexpect_eof();\r\n                    result_list.push_back(get_cbor_string());\r\n                    size += result_list.back().size();\r\n                }\r\n                string_t result;\r\n                result.reserve(size);\r\n                for (auto r: result_list) { result.append(r); }\r\n                return result;\r\n            }\r\n```\r\nFixes it. I'm not sure if this is the way you want to do it though."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/960", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/960/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/960/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/960/events", "html_url": "https://github.com/nlohmann/json/issues/960", "id": 294794351, "node_id": "MDU6SXNzdWUyOTQ3OTQzNTE=", "number": 960, "title": "We should remove static_asserts", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 959018031, "node_id": "MDU6TGFiZWw5NTkwMTgwMzE=", "url": "https://api.github.com/repos/nlohmann/json/labels/pinned", "name": "pinned", "color": "FFFFFF", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-02-06T15:11:15Z", "updated_at": "2018-06-08T17:06:08Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "Sorry for the click-bait title, but I'd like to have some feedbacks about this :)\r\n\r\nI'll try to be very clear, since it's related to the heart of the `from/to_json` conversion system.\r\n\r\n**DISCLAIMER: This post is long. Really.**\r\n\r\n## Reminder of the initial problem\r\nSince version 2.1.0 and the support of user-defined types,\r\nwe have a non-explicit templated constructor for `basic_json`.\r\n\r\nThis can be very dangerous:\r\n\r\n```cpp\r\nstruct Innocent {};\r\nstruct Evil {\r\n  // Don't try this at home\r\n  template <typename T>\r\n  Evil(T) {}\r\n};\r\n\r\nbool operator==(Evil const&, Evil const&) { return true; }\r\n\r\nint main() {\r\n  Innocent a, b;\r\n\r\n  // Should never compile, right?\r\n  // But it does, thanks to the Evil non-explicit templated constructor\r\n  a == b;\r\n}\r\n```\r\n\r\nI'll call it `Implicit Conversion Mania` (ICM).\r\n\r\nWe could not make the constructor `explicit`, it would have ruined the great syntax that one can use to construct `json` objects from other types.\r\n\r\nSo we had to add constraints to that constructor.\r\n\r\n### The fix(?)\r\n\r\nIdeally the constraint should be:\r\n\r\n  * `void basic_json::JSONSerializer::to_json(basic_json&, T&&)` is valid\r\n\r\nNote: `JSONSerializer` is the latest of `basic_json`'s template arguments, and defaults to `adl_serializer`.\r\n\r\n### The workaround(?)\r\nBut there were more to add to prevent clashes with other constructors (e.g. the old `basic_json(std::istream&)`).\r\nSo we added those, and everything was looking good... Until compiling `unit-iterators1.cpp`.\r\n\r\nThere was a test on `primitive_iterator_t` which triggered the ICM.\r\nAfter a rude fight with the error message, I found that Catch was doing some SFINAE checks to know if some type was printable.\r\n\r\nI'll explain why that triggered the ICM on a later section.\r\nAt that point, I just wanted to make stuff work.\r\n\r\n### The hack\r\n\r\nAfter a bit of digging, I discovered that the only classes that were triggering the ICM were `basic_json` nested classes... (I couldn't find exactly why, I have to open a SO question about that).\r\n\r\nSo the ugly fix (which is still in the code today) was to add another constraint on the template constructor,\r\nchecking `T` against every `basic_json`'s nested class.\r\n\r\nIt's ugly, but it works well. So no problem right? Why should anyone care?\r\n\r\n## The return of the ICM\r\n\r\nA few days ago, one of my colleagues had a huge compiler error while writing some tests with `trompeloeil`.\r\n\r\nThat library was doing the same SFINAE checks that Catch is doing, which caused the compiler error that I've described ahead.\r\n\r\nSo I sighed.\r\n\r\nAnd this time, the type that was in cause was: `boost::function<void (nlohmann::json const&)>`.\r\n\r\n## WAT\r\n\r\n![wat](https://user-images.githubusercontent.com/15652306/35866600-edb77af2-0b57-11e8-8c70-5fc3b33de7d5.jpeg)\r\n\r\nWhat the hell? How could that be?\r\n\r\nMy theory is that ICM happens when a type T has a template somewhere, and when `basic_json` is a part of it:\r\n\r\n```cpp\r\n// nested type\r\nnlohmann::basic_json<...>::primitive_iterator_t;\r\n\r\n// basic_json is part of the template arguments\r\n// (Signature form: <Return (Args...)>)\r\nboost::function<void (nlohmann::json const&)>;\r\n```\r\n\r\nI really need to open that SO question, a language lawyer is required in this case.\r\n\r\n## The huge hack\r\n\r\nBut heh, there's a workaround!\r\n\r\nBy specializing the `adl_serializer<boost::function<void (nlohmann::json const&)>>`\r\nand by not defining any functions in it, it works!\r\n\r\nThat's very brittle to say the least...\r\n\r\n## Why does it happen?\r\n\r\nThat's the trickiest part.\r\n\r\n### TL;DR\r\n\r\nSFINAE problems, you cannot have static_asserts and 100% correct constraints.\r\n\r\n### Long version\r\n\r\nAt the very bottom of the User-Defined Type (UDT) conversion mechanism is the `detail::to_json_fn::call` functions.\r\n\r\nThe first overload is enabled if there is a `to_json` function that can be called.\r\nThe second is called if not, and there are **static_asserts** in there.\r\n\r\nBut there are no constraints whatsoever (no `enable_if`) on the second overload.\r\nWhich means that during overload resolution, the compiler will **ALWAYS** choose the latter, which can **NEVER** compile, since the `static_assert` will always fail.\r\nThat's great when you're calling `to_json` on a type that has no conversion function of course. That's what you want!\r\n\r\nBut when libraries are doing SFINAE checks to determine if they can know if your type has a specific requirement or not\r\n(e.g. is your type printable?), that's a huge problem.\r\nEspecially because you want to know if a piece of code is valid or not (i.e. does compile or not). You do not want to trigger the compiler error at all!\r\n\r\n#### So why are there no constraints then?\r\n\r\nWell...\r\n\r\nYou simply cannot have `static_assert` and `enable_if` together.\r\n\r\nIf you want the former, it means the function has to be called (not just tested with non-evaluated things like traits, SFINAE checks if you will).\r\nIf you want the latter, the function will not be called, the code will be 100% correct but you will not have `static_assert`.\r\n\r\nNote that compilation will fail in the exact same cases as before, but with undecipherable errors.\r\n\r\nAnd if you really want both, it's easy: Wait C++20's Concepts and use them inside your fork!\r\n\r\nYou get the idea...\r\n\r\n### What can we do?\r\n\r\nTwo possibilities:\r\n\r\n1. Leave everything as-is.\r\n2. Add proper constraints and remove `static_assert`s in the UDT conversion mechanism.\r\n\r\nI know that 1 is better for debugging, it can be hard to know what is happening when the compiler yells at you.\r\n(It yells at you with `static_assert` too, but you can understand it in a few seconds).\r\n\r\n2 is my preferred option (as you might expect from the issue title).\r\n\r\nOption 1 can lead to incorrect and incomprehensible things, as I showed with the `boost::function` example.\r\nHaving a \"correct\" workaround requires a very good understanding of template meta-programming and of the library.\r\n\r\nAnd in the previous examples, there was a compiler error!\r\nIt could be a runtime or silent error at worst (if the incorrect SFINAE results in a different branch at runtime).\r\n\r\nI understand that those cases does not happen to most users. But when you'll become one of those users, you'll cry :).\r\n\r\nApart from the loss of `static_assert`, the change will not break anything.\r\n\r\n## The hope\r\n\r\nThere is a way to help users though.\r\n\r\nWe can add a separate function (e.g. `nlohmann::find_what_happens()`), that will do the same thing, trigger a static_assert.\r\n\r\nI need to hack in the code to see how far we could go, meanwhile I'll stop writing this monologue!\r\n\r\nEDIT: Small mistake, was showing `from_json` instead fo `to_json` in the beginning."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/959", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/959/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/959/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/959/events", "html_url": "https://github.com/nlohmann/json/issues/959", "id": 294352625, "node_id": "MDU6SXNzdWUyOTQzNTI2MjU=", "number": 959, "title": "Reload a json file at runtime without emptying my std::ifstream", "user": {"login": "benjaminaudet", "id": 9674694, "node_id": "MDQ6VXNlcjk2NzQ2OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9674694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benjaminaudet", "html_url": "https://github.com/benjaminaudet", "followers_url": "https://api.github.com/users/benjaminaudet/followers", "following_url": "https://api.github.com/users/benjaminaudet/following{/other_user}", "gists_url": "https://api.github.com/users/benjaminaudet/gists{/gist_id}", "starred_url": "https://api.github.com/users/benjaminaudet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benjaminaudet/subscriptions", "organizations_url": "https://api.github.com/users/benjaminaudet/orgs", "repos_url": "https://api.github.com/users/benjaminaudet/repos", "events_url": "https://api.github.com/users/benjaminaudet/events{/privacy}", "received_events_url": "https://api.github.com/users/benjaminaudet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-05T11:01:22Z", "updated_at": "2018-02-05T11:24:22Z", "closed_at": "2018-02-05T11:24:08Z", "author_association": "NONE", "body": "Hi !\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\nI have to reload a JSON file at runtime. I actually use std::ifstream to open my json file and I fill the json object with the >> operator. I don't want to re-open my file with my ifstream but just set the stream position to 0 using std::ifstream::seekg.\r\nThe problem is : When I pass it to json object, my ifstream is empty. Is there a way to build a json object via an ifstream without emptying it ?\r\n\r\nThanks in advance.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/958", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/958/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/958/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/958/events", "html_url": "https://github.com/nlohmann/json/issues/958", "id": 294207306, "node_id": "MDU6SXNzdWUyOTQyMDczMDY=", "number": 958, "title": "operator T() considered harmful", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-02-04T15:55:15Z", "updated_at": "2018-07-04T21:55:55Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "# `operator T()` considered harmful\r\n\r\nThere's two subjects of importance that I'd like to tackle.\r\nThis is the first one, I'll open another issue quickly (hopefully).\r\n\r\n## The problem\r\n\r\nThere's been several issues in the past related to the implicit conversion operator that the library provides.\r\nThe current Readme demonstrates the following use-case:\r\n\r\n```cpp\r\n// conversion: json -> person\r\nns::person p2 = j;\r\n```\r\n\r\nThis will call `json::operator T()` with `T = ns::person`, so no problems here.\r\n\r\nYou'd expect the following code to always work too:\r\n\r\n```cpp\r\nns::person p2;\r\np2 = j;\r\n```\r\n\r\nAnd it works! Sometimes.\r\n\r\nIf `ns::person` has a user-defined `operator=`, it will break with the following message:\r\n\r\n```shell\r\nt.cpp: In function \u2018int main(int, const char**)\u2019:\r\nt.cpp:14:7: error: ambiguous overload for \u2018operator=\u2019 (operand types are \u2018ns::person\u2019 and \u2018nlohmann::json {aka nlohmann::basic_json<>}\u2019)\r\n   p2 = j;\r\n       ^\r\nt.cpp:6:6: note: candidate: ns::person& ns::person::operator=(int)\r\n   ns::person& operator=(int) { return *this; }\r\n      ^~~~~~~~\r\nt.cpp:3:8: note: candidate: constexpr ns::person& ns::person::operator=(const ns::person&)\r\n struct ns::person\r\n        ^\r\nt.cpp:3:8: note: candidate: constexpr ns::person& ns::person::operator=(ns::person&&)\r\n```\r\n\r\nHard to understand that error, and it's not something that can be fixed by the library.\r\nIt's triggered by the compiler before any template machinery on our side.\r\n\r\nNow with such code:\r\n\r\n```cpp\r\nvoid need_precise_measurement(Milliseconds);\r\n\r\n// later on\r\njson j = json::parse(config);\r\nneed_precise_measurement(j);\r\n```\r\n\r\nIt can fail in two cases:\r\n\r\n1. Someone adds an overload for `need_precise_measurement`. Compiler error.\r\n2. Someone changes the type of the argument to `Nanoseconds`. Runtime error at best.\r\n\r\n## Implicit conversions\r\n\r\nImplicit conversions make the library pleasant to use. Especially when implicitely converting **to** JSON.\r\nThat's because we have a templated non-explicit constructor with lots of constraints to correctly handle user types.\r\nThere's also a single type to convert to: `nlohmann::json`, so everything works.\r\n\r\nHowever, when converting implicitely **from** json, it's the complete opposite. If the compiler cannot decide which type it should implicit convert the `nlohmann::json` value to, you get a compiler error.\r\n\r\nAnd it could happen in a codebase months after writing the code, (e.g. when adding an `operator=` to a type).\r\n\r\nIn the end the only consistent way to convert from a json value is to call `json.get<T>`.\r\n\r\n\r\n## Proposed change\r\n\r\nI propose to simply and completely remove `operator T()`.\r\n\r\nIt will obviously break code, so it can only be done in a major version.\r\n\r\nOf course this change cannot be adopted right away, so I propose to add a deprecation warning inside `operator T()`, as we did for `basic_json::basic_json(std::istream&)` overloads.\r\n\r\nThen it would be reasonable to remove it in a future major version.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/956", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/956/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/956/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/956/events", "html_url": "https://github.com/nlohmann/json/issues/956", "id": 294186192, "node_id": "MDU6SXNzdWUyOTQxODYxOTI=", "number": 956, "title": "Split headers should be part of the release", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-02-04T10:17:57Z", "updated_at": "2018-02-04T14:31:34Z", "closed_at": "2018-02-04T12:28:31Z", "author_association": "CONTRIBUTOR", "body": "Currently, only the amalgamated `json.hpp` file and the entire repository source code (over 100MB) are available in the Releases tab.\r\n\r\nIt would help a lot to add a zip archive containing the `include` directory as well, especially for package managers which have to fully clone the repository if not installing the amalgamated version."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/953", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/953/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/953/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/953/events", "html_url": "https://github.com/nlohmann/json/issues/953", "id": 293812576, "node_id": "MDU6SXNzdWUyOTM4MTI1NzY=", "number": 953, "title": "Coveralls shows no coverage data", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/21", "html_url": "https://github.com/nlohmann/json/milestone/21", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/21/labels", "id": 3003937, "node_id": "MDk6TWlsZXN0b25lMzAwMzkzNw==", "number": 21, "title": "Release 3.1.1", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2017-12-29T19:16:13Z", "updated_at": "2018-02-13T18:42:47Z", "due_on": "2018-02-13T08:00:00Z", "closed_at": "2018-02-13T18:42:47Z"}, "comments": 6, "created_at": "2018-02-02T08:43:32Z", "updated_at": "2018-02-10T12:43:16Z", "closed_at": "2018-02-10T12:43:16Z", "author_association": "OWNER", "body": "Since the split into the new subdirectories, Coveralls displays no coverage data, see https://coveralls.io/github/nlohmann/json. I tried to fix the `.travis.yml` file, but probably overlooked something."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/952", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/952/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/952/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/952/events", "html_url": "https://github.com/nlohmann/json/issues/952", "id": 293643706, "node_id": "MDU6SXNzdWUyOTM2NDM3MDY=", "number": 952, "title": "Order of the elements in JSON object", "user": {"login": "amirhosseindavoody", "id": 8355965, "node_id": "MDQ6VXNlcjgzNTU5NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/8355965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirhosseindavoody", "html_url": "https://github.com/amirhosseindavoody", "followers_url": "https://api.github.com/users/amirhosseindavoody/followers", "following_url": "https://api.github.com/users/amirhosseindavoody/following{/other_user}", "gists_url": "https://api.github.com/users/amirhosseindavoody/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirhosseindavoody/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirhosseindavoody/subscriptions", "organizations_url": "https://api.github.com/users/amirhosseindavoody/orgs", "repos_url": "https://api.github.com/users/amirhosseindavoody/repos", "events_url": "https://api.github.com/users/amirhosseindavoody/events{/privacy}", "received_events_url": "https://api.github.com/users/amirhosseindavoody/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-01T18:53:38Z", "updated_at": "2018-02-01T21:04:24Z", "closed_at": "2018-02-01T21:04:24Z", "author_association": "NONE", "body": "This is not an issue or the bug, but something that I noticed while using your library and I think it should be included in the documentation just for the sake of completeness.\r\n\r\nI have noticed that when a JSON structure is created the order in which the elements are printed is in alphabetical order of name of properties. It would be nice to include this somewhere in the documentation of the library."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/951", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/951/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/951/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/951/events", "html_url": "https://github.com/nlohmann/json/issues/951", "id": 293439486, "node_id": "MDU6SXNzdWUyOTM0Mzk0ODY=", "number": 951, "title": "Feature request: Implicit conversion to bool", "user": {"login": "wolframroesler", "id": 25565229, "node_id": "MDQ6VXNlcjI1NTY1MjI5", "avatar_url": "https://avatars0.githubusercontent.com/u/25565229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wolframroesler", "html_url": "https://github.com/wolframroesler", "followers_url": "https://api.github.com/users/wolframroesler/followers", "following_url": "https://api.github.com/users/wolframroesler/following{/other_user}", "gists_url": "https://api.github.com/users/wolframroesler/gists{/gist_id}", "starred_url": "https://api.github.com/users/wolframroesler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wolframroesler/subscriptions", "organizations_url": "https://api.github.com/users/wolframroesler/orgs", "repos_url": "https://api.github.com/users/wolframroesler/repos", "events_url": "https://api.github.com/users/wolframroesler/events{/privacy}", "received_events_url": "https://api.github.com/users/wolframroesler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-01T08:14:44Z", "updated_at": "2018-02-06T15:51:35Z", "closed_at": "2018-02-06T15:51:35Z", "author_association": "NONE", "body": "What's the general opinion about allowing `json` objects in a boolean context? For example:\r\n\r\n```cpp\r\njson j = nullptr;\r\nif (!j) {\r\n    std::cout << \"The object is null\\n\";\r\n}\r\n```\r\n\r\n`if (j)` should be the same as `if (!j.is_null())`, and `if (!j)` should be the same as `if (j.is_null())`.\r\n\r\nIn the present version, the code above throws an exception (\"[json.exception.type_error.302] type must be boolean, but is object\")."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/949", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/949/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/949/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/949/events", "html_url": "https://github.com/nlohmann/json/issues/949", "id": 293390198, "node_id": "MDU6SXNzdWUyOTMzOTAxOTg=", "number": 949, "title": "I have a proposal", "user": {"login": "daoqiang", "id": 16305190, "node_id": "MDQ6VXNlcjE2MzA1MTkw", "avatar_url": "https://avatars3.githubusercontent.com/u/16305190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daoqiang", "html_url": "https://github.com/daoqiang", "followers_url": "https://api.github.com/users/daoqiang/followers", "following_url": "https://api.github.com/users/daoqiang/following{/other_user}", "gists_url": "https://api.github.com/users/daoqiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/daoqiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daoqiang/subscriptions", "organizations_url": "https://api.github.com/users/daoqiang/orgs", "repos_url": "https://api.github.com/users/daoqiang/repos", "events_url": "https://api.github.com/users/daoqiang/events{/privacy}", "received_events_url": "https://api.github.com/users/daoqiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-01T03:18:36Z", "updated_at": "2018-02-01T05:36:24Z", "closed_at": "2018-02-01T05:36:24Z", "author_association": "NONE", "body": "The serialization part of this library should be dependent on boost:: serialization. I'm using boost and your JSON library at the same time. Are there any interests to be compatible?\r\n\r\nBecause if my custom type needs to be serialized to JSON and others at the same time. I need to write three additional functions, to_json from_json, serialize., to_json and from_json, which should be similar to serialize's load and save. They belong to the custom type attribute registration.\r\n\r\nSo I mean, this library depends on boost:: serialization, why don't do a compatible property registration method\r\nOr to do a serialize wrapper, just write this wrapper function to realize the serialization on the boost\r\n\r\nthank you"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/948", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/948/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/948/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/948/events", "html_url": "https://github.com/nlohmann/json/issues/948", "id": 293296314, "node_id": "MDU6SXNzdWUyOTMyOTYzMTQ=", "number": 948, "title": "VERSION define(s)", "user": {"login": "mark-99", "id": 14183064, "node_id": "MDQ6VXNlcjE0MTgzMDY0", "avatar_url": "https://avatars1.githubusercontent.com/u/14183064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-99", "html_url": "https://github.com/mark-99", "followers_url": "https://api.github.com/users/mark-99/followers", "following_url": "https://api.github.com/users/mark-99/following{/other_user}", "gists_url": "https://api.github.com/users/mark-99/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-99/subscriptions", "organizations_url": "https://api.github.com/users/mark-99/orgs", "repos_url": "https://api.github.com/users/mark-99/repos", "events_url": "https://api.github.com/users/mark-99/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-99/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 6, "created_at": "2018-01-31T20:14:36Z", "updated_at": "2018-01-31T22:17:05Z", "closed_at": "2018-01-31T22:17:05Z", "author_association": "NONE", "body": "It would be useful if there was a #define for the version of the package. This would make it easier to transition client code across breaking changes, e.g. the 3.x changes to operator<< and exception types.\r\n\r\nJust something like\r\n`#define NLOHMANN_JSON_VERSION   30102   // v3.1.2`\r\n\r\nSome people prefer to use hex, and some split into separate VERSION_MAJOR/MINOR/PATCH, whatever you want."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/947", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/947/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/947/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/947/events", "html_url": "https://github.com/nlohmann/json/issues/947", "id": 293282976, "node_id": "MDU6SXNzdWUyOTMyODI5NzY=", "number": 947, "title": "v3.0.1 compile error in icc 16.0.4", "user": {"login": "mark-99", "id": 14183064, "node_id": "MDQ6VXNlcjE0MTgzMDY0", "avatar_url": "https://avatars1.githubusercontent.com/u/14183064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-99", "html_url": "https://github.com/mark-99", "followers_url": "https://api.github.com/users/mark-99/followers", "following_url": "https://api.github.com/users/mark-99/following{/other_user}", "gists_url": "https://api.github.com/users/mark-99/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-99/subscriptions", "organizations_url": "https://api.github.com/users/mark-99/orgs", "repos_url": "https://api.github.com/users/mark-99/repos", "events_url": "https://api.github.com/users/mark-99/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-99/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 706237888, "node_id": "MDU6TGFiZWw3MDYyMzc4ODg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20icc", "name": "platform: icc", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 12, "created_at": "2018-01-31T19:30:37Z", "updated_at": "2018-01-31T20:03:51Z", "closed_at": "2018-01-31T20:03:51Z", "author_association": "NONE", "body": "While this is maybe a compiler defect in icc 16 (icc 17.0.5 worked ok), perhaps there's an easy fix. Note than json v2.x did not have this error.\r\n\r\nSource line is GTEST macro:\r\n`    EXPECT_EQ(j[\"name\"], \"Name\");`\r\n\r\n```\r\njson/3.0.1/include/nlohmann/json.hpp(4177): error: the generated default constructor for \"nlohmann::detail::internal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>>\" cannot be used in an initializer for its own data member\r\n      internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it = {};\r\n                                                                                 ^\r\n          detected during:\r\n            instantiation of class \"nlohmann::detail::iter_impl<BasicJsonType> [with BasicJsonType=const nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 376 of \"googletest/1.7.0.1/include/gtest/gtest-printers.h\"\r\n            instantiation of \"void testing::internal::DefaultPrintTo(testing::internal::IsContainer={int}, testing::internal::false_type, const C &, std::ostream *) [with C=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 477 of \"googletest/1.7.0.1/include/gtest/gtest-printers.h\"\r\n            instantiation of \"void testing::internal::PrintTo(const T &, std::ostream *) [with T=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 707 of \"googletest/1.7.0.1/include/gtest/gtest-printers.h\"\r\n            instantiation of \"void testing::internal::UniversalPrinter<T>::Print(const T &, std::ostream *) [with T=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 856 of \"googletest/1.7.0.1/include/gtest/gtest-printers.h\"\r\n            instantiation of \"void testing::internal::UniversalPrint(const T &, std::ostream *) [with T=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 784 of \"googletest/1.7.0.1/include/gtest/gtest-printers.h\"\r\n            [ 2 instantiation contexts not shown ]\r\n            instantiation of \"std::string testing::internal::FormatForComparison<ToPrint, OtherOperand>::Format(const ToPrint &) [with ToPrint=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, OtherOperand=char [5]]\" at line 351 of \"googletest/1.7.0.1/include/gtest/gtest-printers.h\"\r\n            instantiation of \"std::string testing::internal::FormatForComparisonFailureMessage(const T1 &, const T2 &) [with T1=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, T2=char [5]]\" at line 1385 of \"googletest/1.7.0.1/include/gtest/gtest.h\"\r\n            instantiation of \"testing::AssertionResult testing::internal::CmpHelperEQFailure(const char *, const char *, const T1 &, const T2 &) [with T1=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, T2=char [5]]\" at line 1403 of \"googletest/1.7.0.1/include/gtest/gtest.h\"\r\n            instantiation of \"testing::AssertionResult testing::internal::CmpHelperEQ(const char *, const char *, const T1 &, const T2 &) [with T1=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, T2=char [5]]\" at line 1428 of \"googletest/1.7.0.1/include/gtest/gtest.h\"\r\n            instantiation of \"testing::AssertionResult testing::internal::EqHelper<lhs_is_null_literal>::Compare(const char *, const char *, const T1 &, const T2 &) [with lhs_is_null_literal=false, T1=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, T2=char [5]]\" at line 74 of \"hmd_lib/hmd_lib/utils/FusionToJson.t.cpp\"\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/946", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/946/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/946/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/946/events", "html_url": "https://github.com/nlohmann/json/issues/946", "id": 293090461, "node_id": "MDU6SXNzdWUyOTMwOTA0NjE=", "number": 946, "title": "Use in VS2017 15.5.5", "user": {"login": "daoqiang", "id": 16305190, "node_id": "MDQ6VXNlcjE2MzA1MTkw", "avatar_url": "https://avatars3.githubusercontent.com/u/16305190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daoqiang", "html_url": "https://github.com/daoqiang", "followers_url": "https://api.github.com/users/daoqiang/followers", "following_url": "https://api.github.com/users/daoqiang/following{/other_user}", "gists_url": "https://api.github.com/users/daoqiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/daoqiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daoqiang/subscriptions", "organizations_url": "https://api.github.com/users/daoqiang/orgs", "repos_url": "https://api.github.com/users/daoqiang/repos", "events_url": "https://api.github.com/users/daoqiang/events{/privacy}", "received_events_url": "https://api.github.com/users/daoqiang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-01-31T09:40:14Z", "updated_at": "2018-01-31T10:01:59Z", "closed_at": "2018-01-31T10:01:59Z", "author_association": "NONE", "body": "error C2338: each element in the iterator range must have the size of 1 byte\uff0c\r\nThe compilation triggered an assertion that I don't know what to do and what should I do\uff1f\r\nthank you"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/945", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/945/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/945/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/945/events", "html_url": "https://github.com/nlohmann/json/issues/945", "id": 292498795, "node_id": "MDU6SXNzdWUyOTI0OTg3OTU=", "number": 945, "title": "Process for reporting Security Bugs?", "user": {"login": "Google-Autofuzz", "id": 27442508, "node_id": "MDQ6VXNlcjI3NDQyNTA4", "avatar_url": "https://avatars1.githubusercontent.com/u/27442508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Google-Autofuzz", "html_url": "https://github.com/Google-Autofuzz", "followers_url": "https://api.github.com/users/Google-Autofuzz/followers", "following_url": "https://api.github.com/users/Google-Autofuzz/following{/other_user}", "gists_url": "https://api.github.com/users/Google-Autofuzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Google-Autofuzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Google-Autofuzz/subscriptions", "organizations_url": "https://api.github.com/users/Google-Autofuzz/orgs", "repos_url": "https://api.github.com/users/Google-Autofuzz/repos", "events_url": "https://api.github.com/users/Google-Autofuzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Google-Autofuzz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-29T17:44:58Z", "updated_at": "2018-01-29T17:52:07Z", "closed_at": "2018-01-29T17:52:07Z", "author_association": "NONE", "body": "Hi Json team,\r\n\r\nAs part of our fuzzing efforts at Google, we are interested in understanding the process for reporting potential security issues to your project in a private manner. Could you please advise us if there is a private tracker for these kinds of bugs, or if you prefer them filed in a publicly visible way?\r\n\r\nThanks!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/943", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/943/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/943/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/943/events", "html_url": "https://github.com/nlohmann/json/issues/943", "id": 292268121, "node_id": "MDU6SXNzdWUyOTIyNjgxMjE=", "number": 943, "title": "Please expose a NLOHMANN_JSON_VERSION macro", "user": {"login": "ringerc", "id": 274337, "node_id": "MDQ6VXNlcjI3NDMzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/274337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ringerc", "html_url": "https://github.com/ringerc", "followers_url": "https://api.github.com/users/ringerc/followers", "following_url": "https://api.github.com/users/ringerc/following{/other_user}", "gists_url": "https://api.github.com/users/ringerc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ringerc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ringerc/subscriptions", "organizations_url": "https://api.github.com/users/ringerc/orgs", "repos_url": "https://api.github.com/users/ringerc/repos", "events_url": "https://api.github.com/users/ringerc/events{/privacy}", "received_events_url": "https://api.github.com/users/ringerc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 4, "created_at": "2018-01-29T02:40:10Z", "updated_at": "2018-02-01T03:05:52Z", "closed_at": "2018-01-31T04:07:18Z", "author_association": "NONE", "body": "Hi folks\r\n\r\nIt'd be very handy if the library exposed a NLOHMANN_JSON_VERSION macro for easy version detection in configure scripts, cmake files, etc. Especially since the fancy formatting in the comment header makes text extraction harder."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/942", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/942/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/942/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/942/events", "html_url": "https://github.com/nlohmann/json/issues/942", "id": 292254698, "node_id": "MDU6SXNzdWUyOTIyNTQ2OTg=", "number": 942, "title": "Change header include directory to nlohmann/json", "user": {"login": "patrikhuber", "id": 4967343, "node_id": "MDQ6VXNlcjQ5NjczNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4967343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrikhuber", "html_url": "https://github.com/patrikhuber", "followers_url": "https://api.github.com/users/patrikhuber/followers", "following_url": "https://api.github.com/users/patrikhuber/following{/other_user}", "gists_url": "https://api.github.com/users/patrikhuber/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrikhuber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrikhuber/subscriptions", "organizations_url": "https://api.github.com/users/patrikhuber/orgs", "repos_url": "https://api.github.com/users/patrikhuber/repos", "events_url": "https://api.github.com/users/patrikhuber/events{/privacy}", "received_events_url": "https://api.github.com/users/patrikhuber/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 4, "created_at": "2018-01-29T00:29:45Z", "updated_at": "2018-02-01T17:39:35Z", "closed_at": "2018-02-01T17:39:27Z", "author_association": "CONTRIBUTOR", "body": "Hi!\r\n\r\nThe [readme](https://github.com/nlohmann/json#integration) advises to include the header with `#include \"json.hpp\"`. If we add this repo as a git submodule, we would add the `src/` directory of this repo to the include path, and also do `#include \"json.hpp\"`. However, if one runs the CMake INSTALL target of this repo, or uses it via e.g. [vcpkg](https://github.com/Microsoft/vcpkg/blob/master/ports/nlohmann-json/portfile.cmake), the header gets copied to the location `nlohmann/json.hpp` and should now be included as `#include \"nlohmann/json.hpp\"`.\r\nI think it would be better (and best practice) to put the header in the repo into a directory `include/nlohmann/`. Most header-only libraries that I know of do this. This would unify the `#include`: We could just use `#include \"nlohmann/json.hpp`, no matter whether we're including via git submodule, CMake INSTALL target, vcpkg, etc. Another plus is that it sort-of \"namespaces\" the header, i.e. a clash with a potential other `json.hpp` file in any of the compiler's include directories is avoided (not unlikely, as `json.hpp` is quite a generic name)."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/941", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/941/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/941/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/941/events", "html_url": "https://github.com/nlohmann/json/issues/941", "id": 292236425, "node_id": "MDU6SXNzdWUyOTIyMzY0MjU=", "number": 941, "title": "string_type in binary_reader", "user": {"login": "kaidokert", "id": 2791653, "node_id": "MDQ6VXNlcjI3OTE2NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2791653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaidokert", "html_url": "https://github.com/kaidokert", "followers_url": "https://api.github.com/users/kaidokert/followers", "following_url": "https://api.github.com/users/kaidokert/following{/other_user}", "gists_url": "https://api.github.com/users/kaidokert/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaidokert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaidokert/subscriptions", "organizations_url": "https://api.github.com/users/kaidokert/orgs", "repos_url": "https://api.github.com/users/kaidokert/repos", "events_url": "https://api.github.com/users/kaidokert/events{/privacy}", "received_events_url": "https://api.github.com/users/kaidokert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 3, "created_at": "2018-01-28T20:41:14Z", "updated_at": "2018-02-01T08:30:41Z", "closed_at": "2018-02-01T08:30:36Z", "author_association": "CONTRIBUTOR", "body": "**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\nCurrently binary_reader requires using std::string, which is cumbersome when trying to work with custom non-standard string classes. In my specific usecase, embedded system and cbor parsing.\r\n\r\n- Include sample usage where appropriate.\r\nThe rest of the header currently compiles with a custom string type stand-in with a very minimal standard interface part:\r\n```\r\nstruct awfully_poor_str {\r\n    static const size_t npos = static_cast<size_t>(-1);\r\n    using value_type = char;\r\n    void push_back(char);\r\n    awfully_poor_str();\r\n    awfully_poor_str(const char *);\r\n};\r\n```\r\n\r\nChanging binary_reader to \r\n```\r\nusing string_t = typename BasicJsonType::string_t;\r\n```\r\nmakes it compile as well. Or is there a definite reason why it should use std::string there ? \r\n\r\nBTW, on a cortex-m0 compile with custom vector and string types, exceptions/rtti off, and std::streams stubbed out i get about 3kB for the library code size right now. Intel's C tinycbor is about 2.5kB, and a smaller custom c++ cbor-only limited-features parser is <1kB\r\n\r\n[binary_stringtype.diff.txt](https://github.com/nlohmann/json/files/1671551/binary_stringtype.diff.txt)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/939", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/939/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/939/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/939/events", "html_url": "https://github.com/nlohmann/json/issues/939", "id": 292212130, "node_id": "MDU6SXNzdWUyOTIyMTIxMzA=", "number": 939, "title": "compile error with clang 5.0 -std=c++1z and no string_view", "user": {"login": "phlptp", "id": 20667153, "node_id": "MDQ6VXNlcjIwNjY3MTUz", "avatar_url": "https://avatars0.githubusercontent.com/u/20667153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phlptp", "html_url": "https://github.com/phlptp", "followers_url": "https://api.github.com/users/phlptp/followers", "following_url": "https://api.github.com/users/phlptp/following{/other_user}", "gists_url": "https://api.github.com/users/phlptp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phlptp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phlptp/subscriptions", "organizations_url": "https://api.github.com/users/phlptp/orgs", "repos_url": "https://api.github.com/users/phlptp/repos", "events_url": "https://api.github.com/users/phlptp/events{/privacy}", "received_events_url": "https://api.github.com/users/phlptp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-01-28T15:16:17Z", "updated_at": "2018-01-28T16:09:16Z", "closed_at": "2018-01-28T16:09:07Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\nCompile error on clang 5.0 with -std=c++1z\r\n```\r\nIn file included from XXXX.cpp:32:\r\nXXXX/json.hpp:9913:66: error: no type named\r\n      'string_view' in namespace 'std'\r\n  ...and not std::is_same<ValueType, typename std::string_view>::value\r\n                                     ~~~~~~~~~~~~~~^~~~~~~~~~~\r\n```\r\nAll other compilers tested thus far work fine.  \r\n\r\nmy fix was to simply comment out that line since I wasn't using std::string_view, but but I am guessing there is a reason for including string_view in the  enable_if statement so I don't think my fix is a valid solution and I am not familiar enough with the structures used to integrate a check for the existence of string_view before using it in an is_same template.  \r\n\r\nThe other options was to include <string_view> if JSON_HAS_CPP_17 is enabled but that didn't seem proper either.  \r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/938", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/938/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/938/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/938/events", "html_url": "https://github.com/nlohmann/json/issues/938", "id": 292089263, "node_id": "MDU6SXNzdWUyOTIwODkyNjM=", "number": 938, "title": "Allow overriding JSON_THROW to something else than abort()", "user": {"login": "kaidokert", "id": 2791653, "node_id": "MDQ6VXNlcjI3OTE2NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2791653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaidokert", "html_url": "https://github.com/kaidokert", "followers_url": "https://api.github.com/users/kaidokert/followers", "following_url": "https://api.github.com/users/kaidokert/following{/other_user}", "gists_url": "https://api.github.com/users/kaidokert/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaidokert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaidokert/subscriptions", "organizations_url": "https://api.github.com/users/kaidokert/orgs", "repos_url": "https://api.github.com/users/kaidokert/repos", "events_url": "https://api.github.com/users/kaidokert/events{/privacy}", "received_events_url": "https://api.github.com/users/kaidokert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 3, "created_at": "2018-01-27T04:32:52Z", "updated_at": "2018-01-29T21:05:16Z", "closed_at": "2018-01-29T21:05:10Z", "author_association": "CONTRIBUTOR", "body": "**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\nOn an embedded/rtos system, the stack is compiled without rtti/exceptions, and I'm running http workers in a separate thread. I can deal with failures by basically tearing the thread down and restarting it, however, i don't want to call abort() specifically and unconditionally. Also it's nice to still be able to obtain the error code from the exception\r\n\r\n- Include sample usage where appropriate.\r\n\r\npassing a -DJSON_THROW=my_deal_with_json_error(x) at compile time would allow easy customization of how the error handling gets dealt with\r\n\r\nThe addition is as simple as\r\n```\r\n#if !defined(JSON_THROW)\r\n#define JSON_THROW abort\r\n#endif\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/937", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/937/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/937/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/937/events", "html_url": "https://github.com/nlohmann/json/issues/937", "id": 291591624, "node_id": "MDU6SXNzdWUyOTE1OTE2MjQ=", "number": 937, "title": "Handle invalid string in Json file", "user": {"login": "arunpkqt", "id": 4667704, "node_id": "MDQ6VXNlcjQ2Njc3MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4667704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arunpkqt", "html_url": "https://github.com/arunpkqt", "followers_url": "https://api.github.com/users/arunpkqt/followers", "following_url": "https://api.github.com/users/arunpkqt/following{/other_user}", "gists_url": "https://api.github.com/users/arunpkqt/gists{/gist_id}", "starred_url": "https://api.github.com/users/arunpkqt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arunpkqt/subscriptions", "organizations_url": "https://api.github.com/users/arunpkqt/orgs", "repos_url": "https://api.github.com/users/arunpkqt/repos", "events_url": "https://api.github.com/users/arunpkqt/events{/privacy}", "received_events_url": "https://api.github.com/users/arunpkqt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-25T14:38:01Z", "updated_at": "2018-01-25T17:21:39Z", "closed_at": "2018-01-25T17:21:39Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- I am using the following code load a JSON file. I want to handle the error cases if the JSON is wrong or corrupted. How do I handle or get to know if the JSON I am trying to load is with correct syntax or not.\r\n`  std::ifstream presetfile(presetName);\r\n    json jsobject;\r\n    jsobject << presetfile;`\r\n\r\n- Use a simple JSON file and add any character at the beginning of the JSON like \"test\" in the first line. Then try to load the file using the above code we can see a crash.\r\n\r\n- I would like to see the information that the JSON that I am trying to load is corrupted/not in the expected format with a line where the issue is[optionally].\r\n\r\n- Is simply crashes.\r\n\r\n- I use Clang\r\n\r\n- released\r\n\r\n- No compile error\r\n\r\n"}]