[{"url": "https://api.github.com/repos/nlohmann/json/issues/814", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/814/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/814/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/814/events", "html_url": "https://github.com/nlohmann/json/issues/814", "id": 270721950, "node_id": "MDU6SXNzdWUyNzA3MjE5NTA=", "number": 814, "title": "Link error when using find() on the latest commit", "user": {"login": "dianambb", "id": 20344299, "node_id": "MDQ6VXNlcjIwMzQ0Mjk5", "avatar_url": "https://avatars2.githubusercontent.com/u/20344299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dianambb", "html_url": "https://github.com/dianambb", "followers_url": "https://api.github.com/users/dianambb/followers", "following_url": "https://api.github.com/users/dianambb/following{/other_user}", "gists_url": "https://api.github.com/users/dianambb/gists{/gist_id}", "starred_url": "https://api.github.com/users/dianambb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dianambb/subscriptions", "organizations_url": "https://api.github.com/users/dianambb/orgs", "repos_url": "https://api.github.com/users/dianambb/repos", "events_url": "https://api.github.com/users/dianambb/events{/privacy}", "received_events_url": "https://api.github.com/users/dianambb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-02T16:34:27Z", "updated_at": "2017-12-09T21:06:54Z", "closed_at": "2017-12-09T21:06:54Z", "author_association": "NONE", "body": "I am working on the develop branch. \r\n\r\nI have a class defining the Json field constants. \r\n\r\n```c++\r\n// Class defining Json Fields\r\nclass JsonFields {\r\n    public:\r\n        static constexpr const char* ID = \"id\";\r\n};\r\n```\r\n\r\nI pass in the constant value into find which throws the link error.\r\n```c++\r\nvoid MyClass::check_fields(json::basic_json j) {\r\n        // Throws link error\r\n        if (j.find(JsonFields::ID) != json_parsed.end()) {\r\n        ....\r\n        }\r\n }\r\n```\r\n\r\nHowever it works if I wrap the name in std::forward eg\r\n`j.find(std::forward<std::string>(JsonFields::ID))`\r\n\r\nThis worked in commit 1b1bd0e3e63ab66720fef5d30b7c16177c0d6e17 but is broken in later commits. The change that introduced this issue is commit 6c9a401ebc680199cdcacfbe60d5dd8f51724a48 .\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/813", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/813/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/813/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/813/events", "html_url": "https://github.com/nlohmann/json/issues/813", "id": 270586489, "node_id": "MDU6SXNzdWUyNzA1ODY0ODk=", "number": 813, "title": "ABI issue with json object between 2 shared libraries", "user": {"login": "ayounes-nviso", "id": 28561380, "node_id": "MDQ6VXNlcjI4NTYxMzgw", "avatar_url": "https://avatars2.githubusercontent.com/u/28561380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayounes-nviso", "html_url": "https://github.com/ayounes-nviso", "followers_url": "https://api.github.com/users/ayounes-nviso/followers", "following_url": "https://api.github.com/users/ayounes-nviso/following{/other_user}", "gists_url": "https://api.github.com/users/ayounes-nviso/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayounes-nviso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayounes-nviso/subscriptions", "organizations_url": "https://api.github.com/users/ayounes-nviso/orgs", "repos_url": "https://api.github.com/users/ayounes-nviso/repos", "events_url": "https://api.github.com/users/ayounes-nviso/events{/privacy}", "received_events_url": "https://api.github.com/users/ayounes-nviso/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-02T09:33:21Z", "updated_at": "2017-12-09T11:46:03Z", "closed_at": "2017-12-09T11:46:03Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\nCrash somtimes, not always\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n1) main application uses 1 shared libraries a.so that uses another library b.so.\r\n2) \"json\" object J is instanciated by a.so\r\n3) J is passed by const reference to b.so\r\n\r\n- What is the expected behavior?\r\n\r\npassed json object J can be used throughout b.so\r\n\r\n- And what is the actual behavior instead?\r\n\r\nSometimes it works, sometimes it crashes, ex:\r\n\r\n0x00007ffff7b3bd24 in nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::basic_json(nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) ()\r\n\r\n\r\nI tried to pass the json object by copy instead but eventually it will crash elsewhere down the road.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\ngcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) \r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n`develop` branch\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\nRight now the only way to work around the issue is to remove json from the shared library interface and just serialize/deserialize with string.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/812", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/812/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/812/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/812/events", "html_url": "https://github.com/nlohmann/json/issues/812", "id": 270235887, "node_id": "MDU6SXNzdWUyNzAyMzU4ODc=", "number": 812, "title": "scan_string() return token_type::parse_error; when parse ansi file", "user": {"login": "sdhongjun", "id": 4033209, "node_id": "MDQ6VXNlcjQwMzMyMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4033209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdhongjun", "html_url": "https://github.com/sdhongjun", "followers_url": "https://api.github.com/users/sdhongjun/followers", "following_url": "https://api.github.com/users/sdhongjun/following{/other_user}", "gists_url": "https://api.github.com/users/sdhongjun/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdhongjun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdhongjun/subscriptions", "organizations_url": "https://api.github.com/users/sdhongjun/orgs", "repos_url": "https://api.github.com/users/sdhongjun/repos", "events_url": "https://api.github.com/users/sdhongjun/events{/privacy}", "received_events_url": "https://api.github.com/users/sdhongjun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-11-01T08:45:14Z", "updated_at": "2017-12-06T20:47:54Z", "closed_at": "2017-12-06T20:47:54Z", "author_association": "NONE", "body": "With VS2015 IDE  when I run below demo code to read json file, scan_string function return `token_type::parse_error` at line 2186.\r\n{\r\n        ofstream out_json(\"C:\\\\test.json\");\r\n\r\n        json jsDefault = json();\r\n        jsDefault[\"name\"] = \"\u9ed8\u8ba4\";\r\n        jsDefault[\"param\"] = json();\r\n        json jsArray = json::array({ jsDefault });\r\n\r\n        json jsObj = json();\r\n        jsObj[\"select\"] = \"\u9ed8\u8ba4\";\r\n        jsObj[\"items\"] = jsArray;\r\n\r\n        out_json << std::setw(4) << jsObj;\r\n\r\n        out_json.close();\r\n\r\n        ifstream in_json(\"C:\\\\test.json\");\r\n        json jsNewObj = json();\r\n        in_json >> jsNewObj;\r\n    }\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/810", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/810/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/810/events", "html_url": "https://github.com/nlohmann/json/issues/810", "id": 269988596, "node_id": "MDU6SXNzdWUyNjk5ODg1OTY=", "number": 810, "title": "segfault when using fifo_map with json", "user": {"login": "jllansford", "id": 33156649, "node_id": "MDQ6VXNlcjMzMTU2NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/33156649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jllansford", "html_url": "https://github.com/jllansford", "followers_url": "https://api.github.com/users/jllansford/followers", "following_url": "https://api.github.com/users/jllansford/following{/other_user}", "gists_url": "https://api.github.com/users/jllansford/gists{/gist_id}", "starred_url": "https://api.github.com/users/jllansford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jllansford/subscriptions", "organizations_url": "https://api.github.com/users/jllansford/orgs", "repos_url": "https://api.github.com/users/jllansford/repos", "events_url": "https://api.github.com/users/jllansford/events{/privacy}", "received_events_url": "https://api.github.com/users/jllansford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-31T14:52:00Z", "updated_at": "2017-11-03T12:04:36Z", "closed_at": "2017-11-02T20:37:48Z", "author_association": "NONE", "body": "This bug was discovered by a coworker, I cleaned up the test program a bit and am posting it here.\r\n\r\nI wasn't sure if I should post this under the fifo_map project or here, ultimately because the fifo_map integration workaround posted on the documentation was used I decided to post here.  If you'd rather I post it under fifo_map instead I can.\r\n\r\nPlease note that without the fifo_map this code does not segfault and works fine.\r\n\r\n```cpp\r\n#include <iostream>\r\n#include \"fifo_map.hpp\"\r\n#include \"json.hpp\"\r\n\r\n// A workaround to give to use fifo_map as map, we are just ignoring the 'less' compare\r\ntemplate<class K, class V, class dummy_compare, class A>\r\nusing my_workaround_fifo_map = nlohmann::fifo_map<K, V, nlohmann::fifo_map_compare<K>, A>;\r\nusing my_json = nlohmann::basic_json<my_workaround_fifo_map>;\r\n\r\nint main(int argc, char* argv[]) {\r\n\tusing namespace std;\r\n\r\n\tmy_json a {\r\n\t\t{\"obj\", {\r\n\t\t\t{\"one\", 1},\r\n\t\t\t{\"two\", 2}\r\n\t\t}}\t\r\n\t};  \r\n\r\n\tcout << a << endl;\r\n\r\n\t//won't segfault until 2nd time through the loop\r\n\tfor(int i = 0; i < 3; i++) {\r\n\t\tmy_json d = a;\r\n       \t\tmy_json c = d[\"obj\"];\r\n       \t\ta = d;\r\n\t\tcout << i << \" - \" << a << endl;\r\n        }\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nHere is the stack trace I'm getting from gdb:\r\n\r\n```\r\n#0  0x000000000040f21e in std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const ()\r\n#1  0x000000000040dfc2 in std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const ()\r\n#2  0x000000000040c876 in std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Defau---Type <return> to continue, or q <return> to quit---\r\nlt_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > > const&, std::integral_constant<bool, true>) ()\r\n#3  0x000000000040af06 in std::__detail::_Insert_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&) ()\r\n#4  0x0000000000408ff5 in std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&) ()\r\n#5  0x0000000000406ca8 in nlohmann::fifo_map_compare<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::add_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\r\n#6  0x0000000000406355 in nlohmann::fifo_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::fifo_map_compare<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) ()\r\n#7  0x000000000040440a in nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>& nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::operator[]<char const>(char const*) ()\r\n#8  0x0000000000402baf in main ()\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/809", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/809/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/809/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/809/events", "html_url": "https://github.com/nlohmann/json/issues/809", "id": 269382149, "node_id": "MDU6SXNzdWUyNjkzODIxNDk=", "number": 809, "title": "This shit is shit ", "user": {"login": "reijpower", "id": 19877049, "node_id": "MDQ6VXNlcjE5ODc3MDQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/19877049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reijpower", "html_url": "https://github.com/reijpower", "followers_url": "https://api.github.com/users/reijpower/followers", "following_url": "https://api.github.com/users/reijpower/following{/other_user}", "gists_url": "https://api.github.com/users/reijpower/gists{/gist_id}", "starred_url": "https://api.github.com/users/reijpower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reijpower/subscriptions", "organizations_url": "https://api.github.com/users/reijpower/orgs", "repos_url": "https://api.github.com/users/reijpower/repos", "events_url": "https://api.github.com/users/reijpower/events{/privacy}", "received_events_url": "https://api.github.com/users/reijpower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-29T08:53:11Z", "updated_at": "2017-10-29T19:46:19Z", "closed_at": "2017-10-29T08:53:40Z", "author_association": "NONE", "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/808", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/808/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/808/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/808/events", "html_url": "https://github.com/nlohmann/json/issues/808", "id": 269332832, "node_id": "MDU6SXNzdWUyNjkzMzI4MzI=", "number": 808, "title": "_finite and _isnan are no members of \"std\"", "user": {"login": "SimonNitzsche", "id": 6717311, "node_id": "MDQ6VXNlcjY3MTczMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6717311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonNitzsche", "html_url": "https://github.com/SimonNitzsche", "followers_url": "https://api.github.com/users/SimonNitzsche/followers", "following_url": "https://api.github.com/users/SimonNitzsche/following{/other_user}", "gists_url": "https://api.github.com/users/SimonNitzsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonNitzsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonNitzsche/subscriptions", "organizations_url": "https://api.github.com/users/SimonNitzsche/orgs", "repos_url": "https://api.github.com/users/SimonNitzsche/repos", "events_url": "https://api.github.com/users/SimonNitzsche/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonNitzsche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-10-28T17:00:12Z", "updated_at": "2017-10-31T14:27:40Z", "closed_at": "2017-10-31T14:27:40Z", "author_association": "NONE", "body": "![image](https://user-images.githubusercontent.com/6717311/32136669-0df2b9b6-bc12-11e7-8f34-06cd875aa217.png)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/806", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/806/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/806/events", "html_url": "https://github.com/nlohmann/json/issues/806", "id": 269274048, "node_id": "MDU6SXNzdWUyNjkyNzQwNDg=", "number": 806, "title": "how to print out the line which causing exception?", "user": {"login": "todatamining", "id": 4322386, "node_id": "MDQ6VXNlcjQzMjIzODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4322386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/todatamining", "html_url": "https://github.com/todatamining", "followers_url": "https://api.github.com/users/todatamining/followers", "following_url": "https://api.github.com/users/todatamining/following{/other_user}", "gists_url": "https://api.github.com/users/todatamining/gists{/gist_id}", "starred_url": "https://api.github.com/users/todatamining/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/todatamining/subscriptions", "organizations_url": "https://api.github.com/users/todatamining/orgs", "repos_url": "https://api.github.com/users/todatamining/repos", "events_url": "https://api.github.com/users/todatamining/events{/privacy}", "received_events_url": "https://api.github.com/users/todatamining/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-28T01:35:14Z", "updated_at": "2017-10-28T11:17:31Z", "closed_at": "2017-10-28T11:17:31Z", "author_association": "NONE", "body": "Something wrong with my json, but it just print out:\r\n\r\n[json.exception.type_error.302] type must be array, but is null\r\n\r\nFrom the error, it is hard to tell which line is wrong in the json file or my code, is there a way to print out the line causing exception?\r\n\r\n\r\n\r\n\r\nupdate:\r\nI check the json, the error is causing by the following line:\r\n\r\n{\r\n       \"email\": [....]\r\n}\r\n\r\nin the code, there is a typo\r\n\r\nvector<string> emails =  info[\"emails\"]; //should be \"email\"\r\n\r\nis it possible to print out the line#?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/805", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/805/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/805/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/805/events", "html_url": "https://github.com/nlohmann/json/issues/805", "id": 269125804, "node_id": "MDU6SXNzdWUyNjkxMjU4MDQ=", "number": 805, "title": "{} uses copy constructor, while = does not", "user": {"login": "jllansford", "id": 33156649, "node_id": "MDQ6VXNlcjMzMTU2NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/33156649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jllansford", "html_url": "https://github.com/jllansford", "followers_url": "https://api.github.com/users/jllansford/followers", "following_url": "https://api.github.com/users/jllansford/following{/other_user}", "gists_url": "https://api.github.com/users/jllansford/gists{/gist_id}", "starred_url": "https://api.github.com/users/jllansford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jllansford/subscriptions", "organizations_url": "https://api.github.com/users/jllansford/orgs", "repos_url": "https://api.github.com/users/jllansford/repos", "events_url": "https://api.github.com/users/jllansford/events{/privacy}", "received_events_url": "https://api.github.com/users/jllansford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-27T14:26:36Z", "updated_at": "2017-10-31T13:45:10Z", "closed_at": "2017-10-28T13:33:23Z", "author_association": "NONE", "body": "Just a little annoyance I encountered while writing to_json functions for a large number of in house classes.  Ideally I'd like it if the {} operator behaved the same as the = operator.\r\n\r\nGiven the following code:\r\n```cpp\r\nusing json = nlohmann::json;\r\n\r\nclass A {\r\nprivate:\r\n\tstd::string          _val;\r\n\r\n\t// by including the mutex we've implicitly deleted our copy constructor \r\n\tstd::recursive_mutex _mutex;\r\n\r\npublic:\r\n\tA() : _val(\"Hello World\") {};\r\n\r\n\tfriend void to_json(json &j, const A &a) {\r\n\t\tj = {\r\n\t\t\t{\"val\", a._val}\r\n\t\t};\r\n\t}\r\n};\r\n\r\n\r\n\r\nint main(int argc, char* argv[]) {\r\n\r\n\tjson j = {};\r\n\tA a;\r\n\r\n        // This line compiles and runs completely fine.\r\n        j[\"data\"][\"A\"] =  a;\r\n\r\n        //this line will fail to compile, due to the implicitly deleted A::A(const A&)\r\n\tj[\"data\"] = {{\"A\", a}};\r\n\t\r\n        std::cout << j.dump() << std::endl;\r\n\treturn 0;\r\n}\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/804", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/804/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/804/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/804/events", "html_url": "https://github.com/nlohmann/json/issues/804", "id": 269065821, "node_id": "MDU6SXNzdWUyNjkwNjU4MjE=", "number": 804, "title": "json.hpp:8955: multiple definition of function that is not defined twice or more.", "user": {"login": "NeverMine17", "id": 23419131, "node_id": "MDQ6VXNlcjIzNDE5MTMx", "avatar_url": "https://avatars2.githubusercontent.com/u/23419131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeverMine17", "html_url": "https://github.com/NeverMine17", "followers_url": "https://api.github.com/users/NeverMine17/followers", "following_url": "https://api.github.com/users/NeverMine17/following{/other_user}", "gists_url": "https://api.github.com/users/NeverMine17/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeverMine17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeverMine17/subscriptions", "organizations_url": "https://api.github.com/users/NeverMine17/orgs", "repos_url": "https://api.github.com/users/NeverMine17/repos", "events_url": "https://api.github.com/users/NeverMine17/events{/privacy}", "received_events_url": "https://api.github.com/users/NeverMine17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-10-27T10:49:49Z", "updated_at": "2017-10-27T12:08:26Z", "closed_at": "2017-10-27T12:08:26Z", "author_association": "NONE", "body": "## Json version 2.1.1\r\nAny code in this form:\r\n```cpp\r\n// This file called \"lib.hpp\"\r\nusing json = nlohmann::json;\r\n\r\nnamespace someNS {\r\n    someType someFunction(json file) {\r\n        // ...\r\n    }\r\n}\r\n```\r\n...Returns this error:\r\n```\r\nlib.hpp.o: In function `std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)':\r\njson.hpp:8955: multiple definition of `someNS::someFunction(nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>)'\r\nmain.cpp.o:lib.hpp:7: first defined here\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/803", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/803/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/803/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/803/events", "html_url": "https://github.com/nlohmann/json/issues/803", "id": 269060713, "node_id": "MDU6SXNzdWUyNjkwNjA3MTM=", "number": 803, "title": "[question] to_json for base and derived class", "user": {"login": "bluehazzard", "id": 5720389, "node_id": "MDQ6VXNlcjU3MjAzODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5720389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluehazzard", "html_url": "https://github.com/bluehazzard", "followers_url": "https://api.github.com/users/bluehazzard/followers", "following_url": "https://api.github.com/users/bluehazzard/following{/other_user}", "gists_url": "https://api.github.com/users/bluehazzard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluehazzard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluehazzard/subscriptions", "organizations_url": "https://api.github.com/users/bluehazzard/orgs", "repos_url": "https://api.github.com/users/bluehazzard/repos", "events_url": "https://api.github.com/users/bluehazzard/events{/privacy}", "received_events_url": "https://api.github.com/users/bluehazzard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-27T10:29:24Z", "updated_at": "2017-10-27T13:00:21Z", "closed_at": "2017-10-27T12:59:36Z", "author_association": "NONE", "body": "Hi,\r\nthis is not a bug report but a question. I have a base class and a derived class, both with some members. Now i would like to store them in a json object:\r\n```c++\r\nclass A\r\n{\r\n   private:\r\n    std::string m_base;\r\n}\r\n\r\nclass B : public A\r\n{\r\n   private:\r\n     std::string m_derived;\r\n}\r\n\r\nvoid to_json(nlohmann::json& j,const A el)\r\n{\r\n   j = nlohmann::json{\r\n      {\"base\", el.m_base},\r\n   }\r\n}\r\n\r\nvoid to_json(nlohmann::json& j,const B el)\r\n{\r\n   j = nlohmann::json{\r\n     static_cast<A>(el),   // insert the \"base\" element\r\n     {\"derived\", el.m_derived}\r\n   }\r\n}\r\n```\r\ni would like to have a resulting json element like this\r\n```json\r\n{\r\n  \"base\" : \"content base\",\r\n  \"derived\" : \"content derived\"\r\n}\r\n```\r\n\r\nwith the provided code this does not work... Any idea?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/802", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/802/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/802/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/802/events", "html_url": "https://github.com/nlohmann/json/issues/802", "id": 269029886, "node_id": "MDU6SXNzdWUyNjkwMjk4ODY=", "number": 802, "title": "Misleading error message - unexpected '\"' - on incorrect utf-8 symbol", "user": {"login": "stgrzeszczak", "id": 12528958, "node_id": "MDQ6VXNlcjEyNTI4OTU4", "avatar_url": "https://avatars0.githubusercontent.com/u/12528958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stgrzeszczak", "html_url": "https://github.com/stgrzeszczak", "followers_url": "https://api.github.com/users/stgrzeszczak/followers", "following_url": "https://api.github.com/users/stgrzeszczak/following{/other_user}", "gists_url": "https://api.github.com/users/stgrzeszczak/gists{/gist_id}", "starred_url": "https://api.github.com/users/stgrzeszczak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stgrzeszczak/subscriptions", "organizations_url": "https://api.github.com/users/stgrzeszczak/orgs", "repos_url": "https://api.github.com/users/stgrzeszczak/repos", "events_url": "https://api.github.com/users/stgrzeszczak/events{/privacy}", "received_events_url": "https://api.github.com/users/stgrzeszczak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-27T08:41:52Z", "updated_at": "2017-10-27T13:18:19Z", "closed_at": "2017-10-27T13:17:27Z", "author_association": "NONE", "body": "Hi,\r\nI was recently confounded by this error and spent quite a while looking for unmached quotation marks, only to find out that my JSON had incorrect utf-8 data. Please take a look at the code sample below. I have a wrapper file for your library that looks like this:\r\n\r\n```cpp\r\nnamespace json {\r\nusing uint_t = std::uint64_t;\r\nusing int_t = std::int64_t;\r\nusing string_t = std::string;\r\ntemplate <typename T, typename... Args> using array_t = std::vector<T>;\r\ntemplate <typename K, typename T, typename... Args> using object_t = std::map<K, T>;\r\nusing bool_t = bool;\r\nusing float_t = double;\r\n\r\nusing Json = nlohmann::basic_json<object_t, array_t, string_t, bool_t, int_t, uint_t, float_t>;\r\n}\r\n```\r\n\r\nand here's an example program showing the issue:\r\n\r\n```cpp\r\n#include \"json-wrapper/json-wrapper.hpp\"\r\n\r\nint main(void) {\r\n    std::string data{};\r\n    data += char(0xff);   // 'data' string is not UTF-8 compliant\r\n\r\n    json::Json message{};\r\n    message[\"data\"] = data;\r\n\r\n    std::string raw_message = message.dump();\r\n\r\n    try {\r\n        json::Json parsed = json::Json::parse(raw_message);\r\n    }\r\n    catch (const std::exception& e) {\r\n        std::cout << e.what() << '\\n';\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThe output is `parse error - unexpected '\"'`. It should say that there was a problem parsing unicode characters."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/801", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/801/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/801/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/801/events", "html_url": "https://github.com/nlohmann/json/issues/801", "id": 268984768, "node_id": "MDU6SXNzdWUyNjg5ODQ3Njg=", "number": 801, "title": "json data = std::string_view(\"hi\"); doesn't work?", "user": {"login": "lethe555", "id": 8001254, "node_id": "MDQ6VXNlcjgwMDEyNTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8001254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lethe555", "html_url": "https://github.com/lethe555", "followers_url": "https://api.github.com/users/lethe555/followers", "following_url": "https://api.github.com/users/lethe555/following{/other_user}", "gists_url": "https://api.github.com/users/lethe555/gists{/gist_id}", "starred_url": "https://api.github.com/users/lethe555/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lethe555/subscriptions", "organizations_url": "https://api.github.com/users/lethe555/orgs", "repos_url": "https://api.github.com/users/lethe555/repos", "events_url": "https://api.github.com/users/lethe555/events{/privacy}", "received_events_url": "https://api.github.com/users/lethe555/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-27T04:26:46Z", "updated_at": "2018-06-23T15:11:25Z", "closed_at": "2017-10-31T13:30:00Z", "author_association": "NONE", "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/800", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/800/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/800/events", "html_url": "https://github.com/nlohmann/json/issues/800", "id": 268817503, "node_id": "MDU6SXNzdWUyNjg4MTc1MDM=", "number": 800, "title": "Thread safety of parse()", "user": {"login": "tanaynv", "id": 33129354, "node_id": "MDQ6VXNlcjMzMTI5MzU0", "avatar_url": "https://avatars0.githubusercontent.com/u/33129354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanaynv", "html_url": "https://github.com/tanaynv", "followers_url": "https://api.github.com/users/tanaynv/followers", "following_url": "https://api.github.com/users/tanaynv/following{/other_user}", "gists_url": "https://api.github.com/users/tanaynv/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanaynv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanaynv/subscriptions", "organizations_url": "https://api.github.com/users/tanaynv/orgs", "repos_url": "https://api.github.com/users/tanaynv/repos", "events_url": "https://api.github.com/users/tanaynv/events{/privacy}", "received_events_url": "https://api.github.com/users/tanaynv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-26T15:57:41Z", "updated_at": "2017-10-31T16:10:14Z", "closed_at": "2017-10-31T16:10:14Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI plan to use this library to parse JSON files in a multithreaded environment. Specifically I am concerned about thread safety with respect to the behaviour of parse() when called simultaneously from different threads. I would appreciate any help or input on this matter. \r\n\r\nThanks, \r\nTanay"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/799", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/799/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/799/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/799/events", "html_url": "https://github.com/nlohmann/json/issues/799", "id": 268321574, "node_id": "MDU6SXNzdWUyNjgzMjE1NzQ=", "number": 799, "title": "Numbers as strings", "user": {"login": "tomba", "id": 51776, "node_id": "MDQ6VXNlcjUxNzc2", "avatar_url": "https://avatars1.githubusercontent.com/u/51776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomba", "html_url": "https://github.com/tomba", "followers_url": "https://api.github.com/users/tomba/followers", "following_url": "https://api.github.com/users/tomba/following{/other_user}", "gists_url": "https://api.github.com/users/tomba/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomba/subscriptions", "organizations_url": "https://api.github.com/users/tomba/orgs", "repos_url": "https://api.github.com/users/tomba/repos", "events_url": "https://api.github.com/users/tomba/events{/privacy}", "received_events_url": "https://api.github.com/users/tomba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-25T09:10:49Z", "updated_at": "2017-10-28T13:34:41Z", "closed_at": "2017-10-28T13:34:41Z", "author_association": "NONE", "body": "Hi,\r\n\r\nIs there a way to get the json data in its original string format? The problem is that the following code:\r\n\r\n```\r\n\tauto j = json::parse(\"[ 0.1 ]\");\r\n\r\n\tauto& v = j.at(0);\r\n\r\n\tstringstream ss;\r\n\tss << fixed << setprecision(50) << v.get<double>();\r\n\tstring str = ss.str();\r\n```\r\nproduces:\r\n\r\n`\"0.10000000000000000555111512312578270211815834045410\"`\r\n\r\nBeing able to get the original string data would fix the floating point problems and also allow handling of integer numbers larger than 64 bit.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/797", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/797/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/797/events", "html_url": "https://github.com/nlohmann/json/issues/797", "id": 267900948, "node_id": "MDU6SXNzdWUyNjc5MDA5NDg=", "number": 797, "title": "Tests failing on arm", "user": {"login": "abliss", "id": 215283, "node_id": "MDQ6VXNlcjIxNTI4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/215283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abliss", "html_url": "https://github.com/abliss", "followers_url": "https://api.github.com/users/abliss/followers", "following_url": "https://api.github.com/users/abliss/following{/other_user}", "gists_url": "https://api.github.com/users/abliss/gists{/gist_id}", "starred_url": "https://api.github.com/users/abliss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abliss/subscriptions", "organizations_url": "https://api.github.com/users/abliss/orgs", "repos_url": "https://api.github.com/users/abliss/repos", "events_url": "https://api.github.com/users/abliss/events{/privacy}", "received_events_url": "https://api.github.com/users/abliss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 729086061, "node_id": "MDU6TGFiZWw3MjkwODYwNjE=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20arm", "name": "platform: arm", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-24T05:19:50Z", "updated_at": "2017-10-26T14:06:48Z", "closed_at": "2017-10-25T21:32:07Z", "author_association": "NONE", "body": "Hi, I see many tests currently failing after building on armv7hf with gcc5.4 on the \"devel\" branch. Is that expected?\r\n```\r\nTest  #7: test-cbor_default ...................***Failed   16.56 sec                                                                                            \r\nTest  #8: test-cbor_all .......................***Failed  146.45 sec                                                                                            \r\nTest #15: test-class_parser_default ...........***Failed    0.78 sec                                                                                            \r\nTest #16: test-class_parser_all ...............***Failed    0.76 sec                                                                                            \r\nTest #21: test-constructor1_default ...........***Failed    0.13 sec                                                                                            \r\nTest #22: test-constructor1_all ...............***Failed    0.11 sec                                                                                            \r\nTest #61: test-regression_default .............***Failed   20.09 sec                                                                                            \r\nTest #62: test-regression_all .................***Failed   28.13 sec                                                                                            \r\nTest #65: test-testsuites_default .............***Failed    4.16 sec                                                                                            \r\nTest #66: test-testsuites_all .................***Failed    0.28 sec\r\n```\r\n\r\ne.g.:\r\n```\r\ntest-algorithms            test-concepts              test-iterators1            test-pointer_access\r\nabliss@localhost:~/json-develop/test$ ./test-cbor\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntest-cbor is a Catch v1.9.7 host application.\r\nRun with -? for options\r\n\r\n-------------------------------------------------------------------------------\r\nCBOR\r\n  individual values\r\n  number\r\n  half-precision float (edge cases)\r\n  exp = 0b11111\r\n  infinity (0 11111 0000000000)\r\n-------------------------------------------------------------------------------\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:780\r\n...............................................................................\r\n\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:785: FAILED:\r\n  CHECK( j.dump() == \"null\" )\r\nwith expansion:\r\n  \"inf.0\" == \"null\"\r\n\r\n-------------------------------------------------------------------------------\r\nCBOR\r\n  individual values\r\n  number\r\n  half-precision float (edge cases)\r\n  exp = 0b11111\r\n  -infinity (1 11111 0000000000)\r\n-------------------------------------------------------------------------------\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:788\r\n...............................................................................\r\n\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:793: FAILED:\r\n  CHECK( j.dump() == \"null\" )\r\nwith expansion:\r\n  \"-inf.0\" == \"null\"\r\n\r\n-------------------------------------------------------------------------------\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/796", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/796/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/796/events", "html_url": "https://github.com/nlohmann/json/issues/796", "id": 267495956, "node_id": "MDU6SXNzdWUyNjc0OTU5NTY=", "number": 796, "title": "Using your library (without modification) in another library", "user": {"login": "chetmurthy", "id": 1755771, "node_id": "MDQ6VXNlcjE3NTU3NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1755771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetmurthy", "html_url": "https://github.com/chetmurthy", "followers_url": "https://api.github.com/users/chetmurthy/followers", "following_url": "https://api.github.com/users/chetmurthy/following{/other_user}", "gists_url": "https://api.github.com/users/chetmurthy/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetmurthy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetmurthy/subscriptions", "organizations_url": "https://api.github.com/users/chetmurthy/orgs", "repos_url": "https://api.github.com/users/chetmurthy/repos", "events_url": "https://api.github.com/users/chetmurthy/events{/privacy}", "received_events_url": "https://api.github.com/users/chetmurthy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-22T20:26:09Z", "updated_at": "2017-10-23T15:29:35Z", "closed_at": "2017-10-23T15:29:34Z", "author_association": "NONE", "body": "Hi,\r\n\r\nFirst, this is wonderful.  Thank you so much!\r\n\r\nSecond, I'd like to use your library in some code I'm writing to provide a JSON wire-format for Apache Thrift.  I'll be distributing this code on github in source, under the Apache license, and would -like- to be able to include a copy of your json.hpp (with your license) in my source-tree.  Only b/c it'll be convenient that people who clone this repo won't have to go clone other repos also.  Of course, I'd make sure to credit you and point at your git repo.\r\n\r\nIs this something you'd find agreeable?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/794", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/794/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/794/events", "html_url": "https://github.com/nlohmann/json/issues/794", "id": 267412377, "node_id": "MDU6SXNzdWUyNjc0MTIzNzc=", "number": 794, "title": "Iterating over sub-object", "user": {"login": "fwsGonzo", "id": 3758947, "node_id": "MDQ6VXNlcjM3NTg5NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3758947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fwsGonzo", "html_url": "https://github.com/fwsGonzo", "followers_url": "https://api.github.com/users/fwsGonzo/followers", "following_url": "https://api.github.com/users/fwsGonzo/following{/other_user}", "gists_url": "https://api.github.com/users/fwsGonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fwsGonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fwsGonzo/subscriptions", "organizations_url": "https://api.github.com/users/fwsGonzo/orgs", "repos_url": "https://api.github.com/users/fwsGonzo/repos", "events_url": "https://api.github.com/users/fwsGonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fwsGonzo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-21T20:38:12Z", "updated_at": "2017-10-22T09:03:11Z", "closed_at": "2017-10-22T09:03:11Z", "author_association": "NONE", "body": "I'm sorry but I'm completely lost\r\nI just want to iterate over a value:\r\n\r\n```\r\n    auto tiles = j.find(\"tiles\");\r\n    if (tiles != j.end())\r\n    {\r\n      for (auto tile : *tiles)\r\n      {\r\n        std::cout << tile.key() << std::endl;\r\n        //printf(\"Name: %s\\n\", tile.key().c_str());\r\n      }\r\n    }\r\n```\r\nI even used std::cout just like the examples.\r\n```\r\n{\r\n  \"tiles\":\r\n  {\r\n    \"a\": [2, 5],\r\n    \"b\": [3, 0],\r\n```\r\n\r\n\r\nWhat am I doing wrong? It says `error: no member named 'key' in tile` but that makes no sense because im *iterator so I should already be ranged-for-ing over each tile.\r\nThe examples also don't really provide any insight into iterating over things like these.\r\n\r\nIterating over the sub-object and then `std::cout << tile << std::endl;` works like expected, however that is just magic. I want to print the key and the value separately, one as a string and the other as an array using indexing operator."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/792", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/792/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/792/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/792/events", "html_url": "https://github.com/nlohmann/json/issues/792", "id": 266416184, "node_id": "MDU6SXNzdWUyNjY0MTYxODQ=", "number": 792, "title": "how to get the json object again from which printed by the method of dump()", "user": {"login": "CoderOverflow", "id": 29338660, "node_id": "MDQ6VXNlcjI5MzM4NjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/29338660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CoderOverflow", "html_url": "https://github.com/CoderOverflow", "followers_url": "https://api.github.com/users/CoderOverflow/followers", "following_url": "https://api.github.com/users/CoderOverflow/following{/other_user}", "gists_url": "https://api.github.com/users/CoderOverflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/CoderOverflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CoderOverflow/subscriptions", "organizations_url": "https://api.github.com/users/CoderOverflow/orgs", "repos_url": "https://api.github.com/users/CoderOverflow/repos", "events_url": "https://api.github.com/users/CoderOverflow/events{/privacy}", "received_events_url": "https://api.github.com/users/CoderOverflow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-10-18T09:08:58Z", "updated_at": "2017-10-18T13:48:00Z", "closed_at": "2017-10-18T12:29:21Z", "author_association": "NONE", "body": "string wormhole;\r\nwormhole = jsonPayload.dump();\r\n\r\nHow can I convert std::string to json object again?\r\nWhen I use 'auto x = json::parse(wormhole.c_str()) ', the exception was occurred. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/791", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/791/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/791/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/791/events", "html_url": "https://github.com/nlohmann/json/issues/791", "id": 266343395, "node_id": "MDU6SXNzdWUyNjYzNDMzOTU=", "number": 791, "title": "ppa to include source", "user": {"login": "jgsuess", "id": 782737, "node_id": "MDQ6VXNlcjc4MjczNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/782737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgsuess", "html_url": "https://github.com/jgsuess", "followers_url": "https://api.github.com/users/jgsuess/followers", "following_url": "https://api.github.com/users/jgsuess/following{/other_user}", "gists_url": "https://api.github.com/users/jgsuess/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgsuess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgsuess/subscriptions", "organizations_url": "https://api.github.com/users/jgsuess/orgs", "repos_url": "https://api.github.com/users/jgsuess/repos", "events_url": "https://api.github.com/users/jgsuess/events{/privacy}", "received_events_url": "https://api.github.com/users/jgsuess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-18T02:51:21Z", "updated_at": "2017-10-21T08:05:46Z", "closed_at": "2017-10-21T08:05:46Z", "author_association": "NONE", "body": "Hi!\r\nWe are using cmake and Ubuntu in our build. Would you be willing to make a PPA so json can be shipped in the ubuntu sphere.\r\nAnd _Yes_ - I am aware that:\r\n- it is just a single source file\r\n- I can use wget to simply grab it of the repository for each release.\r\nConsideration would be welcome though!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/790", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/790/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/790/events", "html_url": "https://github.com/nlohmann/json/issues/790", "id": 266296842, "node_id": "MDU6SXNzdWUyNjYyOTY4NDI=", "number": 790, "title": "Different include paths in macOS and Ubuntu", "user": {"login": "C0DEF52", "id": 7161820, "node_id": "MDQ6VXNlcjcxNjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7161820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C0DEF52", "html_url": "https://github.com/C0DEF52", "followers_url": "https://api.github.com/users/C0DEF52/followers", "following_url": "https://api.github.com/users/C0DEF52/following{/other_user}", "gists_url": "https://api.github.com/users/C0DEF52/gists{/gist_id}", "starred_url": "https://api.github.com/users/C0DEF52/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C0DEF52/subscriptions", "organizations_url": "https://api.github.com/users/C0DEF52/orgs", "repos_url": "https://api.github.com/users/C0DEF52/repos", "events_url": "https://api.github.com/users/C0DEF52/events{/privacy}", "received_events_url": "https://api.github.com/users/C0DEF52/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-17T22:13:30Z", "updated_at": "2017-10-27T16:34:49Z", "closed_at": "2017-10-18T17:44:25Z", "author_association": "NONE", "body": "I want to use json.hpp in my project and it must be compiled for the latest macOS and for Ubuntu 16.04 LTS. I use CMake for the project. For macOS I followed the guide and installed json via homebrew, so I have /usr/local/include/json.hpp. But Ubuntu 16.04 does not have nlohmann-json-dev in apt repository (only 16.10 and newer have). So, I decided to clone json and generate makefiles via CMake to install it. And I noticed that it is installed into /usr/local/include/nlohmann/json.hpp. So, now I have to solve the problem with different include paths using platform dependent conditions in CMake file that is not so convenient.\r\nMaybe it would be better to change installation path in homebrew version and make it /usr/local/include/nlohmann/json.hpp too? As I see it is good practice to put includes in some subfolder. So, users may include it like this:\r\n#include <nlohmann/json.hpp>"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/789", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/789/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/789/events", "html_url": "https://github.com/nlohmann/json/issues/789", "id": 266251693, "node_id": "MDU6SXNzdWUyNjYyNTE2OTM=", "number": 789, "title": "Missing break after line 12886 in switch/case", "user": {"login": "jamespharvey20", "id": 13026414, "node_id": "MDQ6VXNlcjEzMDI2NDE0", "avatar_url": "https://avatars1.githubusercontent.com/u/13026414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamespharvey20", "html_url": "https://github.com/jamespharvey20", "followers_url": "https://api.github.com/users/jamespharvey20/followers", "following_url": "https://api.github.com/users/jamespharvey20/following{/other_user}", "gists_url": "https://api.github.com/users/jamespharvey20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamespharvey20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamespharvey20/subscriptions", "organizations_url": "https://api.github.com/users/jamespharvey20/orgs", "repos_url": "https://api.github.com/users/jamespharvey20/repos", "events_url": "https://api.github.com/users/jamespharvey20/events{/privacy}", "received_events_url": "https://api.github.com/users/jamespharvey20/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-17T19:35:57Z", "updated_at": "2017-10-21T20:50:18Z", "closed_at": "2017-10-21T20:50:18Z", "author_association": "NONE", "body": "```\r\ncase lexer::token_type::parse_error:\r\n{\r\n   // using \"uninitialized\" to avoid \"expected\" message\r\n   expect(lexer::token_type::uninitialized); // line 12886\r\n}\r\n```\r\n\r\nOn gcc 7.2.0, with `-Werror`, this causes:\r\n\r\n```\r\njson.hpp:12886:27: error: this statement may fall through [-Werror=implicit-fallthrough=]\r\n                     expect(lexer::token_type::uninitialized);\r\n                     ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\njson.hpp:12889:17: note: here\r\n                 default:\r\n                 ^~~~~~~\r\ncc1plus: all warnings being treated as errors\r\n```\r\n\r\nThis is of course worked around by including the json directory as a system directory.\r\n\r\nAnd, it's sort of a non-issue because if `expect()` throws, it never falls through, and if it doesn't throw the first time, it won't throw the second time."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/787", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/787/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/787/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/787/events", "html_url": "https://github.com/nlohmann/json/issues/787", "id": 265850468, "node_id": "MDU6SXNzdWUyNjU4NTA0Njg=", "number": 787, "title": "All unit tests fail?", "user": {"login": "QuantumDonDoerner", "id": 16194526, "node_id": "MDQ6VXNlcjE2MTk0NTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/16194526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuantumDonDoerner", "html_url": "https://github.com/QuantumDonDoerner", "followers_url": "https://api.github.com/users/QuantumDonDoerner/followers", "following_url": "https://api.github.com/users/QuantumDonDoerner/following{/other_user}", "gists_url": "https://api.github.com/users/QuantumDonDoerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuantumDonDoerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuantumDonDoerner/subscriptions", "organizations_url": "https://api.github.com/users/QuantumDonDoerner/orgs", "repos_url": "https://api.github.com/users/QuantumDonDoerner/repos", "events_url": "https://api.github.com/users/QuantumDonDoerner/events{/privacy}", "received_events_url": "https://api.github.com/users/QuantumDonDoerner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-16T17:28:41Z", "updated_at": "2017-10-16T19:58:45Z", "closed_at": "2017-10-16T19:58:45Z", "author_association": "NONE", "body": "Using up-level cmake:\r\n%cmake3 --version\r\ncmake3 version 3.6.3\r\n\r\nUsing up-level compiler (6.3.0, on the list)\r\n%c++ --version\r\nc++ (GCC) 6.3.0\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\nTests built with a couple of innocuous warnings like this:\r\n.../json/test/src/unit-serialization.cpp:71:18: warning: \u2018std::ostream& nlohmann::operator>>(const\r\nnlohmann::basic_json<>&, std::ostream&)\u2019 is deprecated [-Wdeprecated-declarations]\r\n\r\nBut all tests fail: \"0% tests passed, 70 tests failed out of 70\"\r\n\r\nAny idea what may be happening?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/786", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/786/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/786/events", "html_url": "https://github.com/nlohmann/json/issues/786", "id": 265761851, "node_id": "MDU6SXNzdWUyNjU3NjE4NTE=", "number": 786, "title": "More use of move semantics in deserialization", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-16T13:02:00Z", "updated_at": "2017-10-16T14:17:41Z", "closed_at": "2017-10-16T14:17:41Z", "author_association": "NONE", "body": "## Short version\r\n\r\nFor certain cases, where copying things is an issue (as the one described below), I would like to favor examples similar to `move_only_type` over the creation of a `from_json` function, but specializations of `adl_serializer` does not seem to work with containers of types for which the specialization exist.\r\n\r\nIdeally, I would like to have a \"return by value\" version of `from_json`. The STL container of those types would be built by *emplacing* the values returned by `from_json` into the container.\r\n\r\n## Long version / context\r\n\r\nWe currently use your library (vendoring the json header for now) in xeus, a native C++ implementation of the Jupyter protocol.\r\n\r\nIn this work, some of the classes that we deserialize from json have a value semantics and implement the RAII pattern. Basically, constructor and destructors amount to acquiring and freeing the resources. Any non-move copy acquires a new version of the resource (with a different id). Move constructor and assignment transfers the resource to the moved-to object.\r\n\r\nThis is a context in which being able to move things to a container would make a lot of sense..."}]