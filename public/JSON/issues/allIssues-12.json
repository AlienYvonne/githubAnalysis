[{"url": "https://api.github.com/repos/nlohmann/json/issues/844", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/844/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/844/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/844/events", "html_url": "https://github.com/nlohmann/json/pull/844", "id": 276813006, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU0NjcyMjAx", "number": 844, "title": "Add .natvis for MSVC debug view", "user": {"login": "TinyTinni", "id": 18199235, "node_id": "MDQ6VXNlcjE4MTk5MjM1", "avatar_url": "https://avatars3.githubusercontent.com/u/18199235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TinyTinni", "html_url": "https://github.com/TinyTinni", "followers_url": "https://api.github.com/users/TinyTinni/followers", "following_url": "https://api.github.com/users/TinyTinni/following{/other_user}", "gists_url": "https://api.github.com/users/TinyTinni/gists{/gist_id}", "starred_url": "https://api.github.com/users/TinyTinni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TinyTinni/subscriptions", "organizations_url": "https://api.github.com/users/TinyTinni/orgs", "repos_url": "https://api.github.com/users/TinyTinni/repos", "events_url": "https://api.github.com/users/TinyTinni/events{/privacy}", "received_events_url": "https://api.github.com/users/TinyTinni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 10, "created_at": "2017-11-26T10:01:22Z", "updated_at": "2017-12-04T20:43:28Z", "closed_at": "2017-12-04T20:43:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/844", "html_url": "https://github.com/nlohmann/json/pull/844", "diff_url": "https://github.com/nlohmann/json/pull/844.diff", "patch_url": "https://github.com/nlohmann/json/pull/844.patch"}, "body": "This PR adds a .natvis improving the debug view of `nlohmann::basic_json` in the MSVC GUI.\r\nAlso, included the ..natvis file into CMake install process.\r\n\r\nThe supported container types for the template arguments `object `and `array` are generic and the container's .natvis will be shown (if declared).\r\n\r\nHere is an example view from the readme test (MSVC2017): [![example_view.png](https://s18.postimg.org/woqxdlihl/example_view.png)](https://postimg.org/image/a01qe113p/)\r\n\r\nThere is also a name bug in the CMakeLists for tests. I did not created a second issue, since it's just the name-prefix which is missing.\r\n I can create a new pull request if you want or you can fix it on your own. (its the first commit).\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/843", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/843/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/843/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/843/events", "html_url": "https://github.com/nlohmann/json/issues/843", "id": 276726133, "node_id": "MDU6SXNzdWUyNzY3MjYxMzM=", "number": 843, "title": "Converting to array not working", "user": {"login": "hsdk123", "id": 4100142, "node_id": "MDQ6VXNlcjQxMDAxNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4100142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsdk123", "html_url": "https://github.com/hsdk123", "followers_url": "https://api.github.com/users/hsdk123/followers", "following_url": "https://api.github.com/users/hsdk123/following{/other_user}", "gists_url": "https://api.github.com/users/hsdk123/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsdk123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsdk123/subscriptions", "organizations_url": "https://api.github.com/users/hsdk123/orgs", "repos_url": "https://api.github.com/users/hsdk123/repos", "events_url": "https://api.github.com/users/hsdk123/events{/privacy}", "received_events_url": "https://api.github.com/users/hsdk123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-25T04:58:18Z", "updated_at": "2017-11-28T21:00:30Z", "closed_at": "2017-11-28T21:00:30Z", "author_association": "NONE", "body": "Converting from an std array to json works fine.\r\nHowever, the other way round gives errors.\r\n\r\n```\r\njson j;\r\nstd::array<int, 4> ar = {1, 1, 1, 1};\r\nj = ar; // works fine\r\nar = j; // breaks\r\n```\r\n\r\nI'm given the error that 'insert' doesn't exist for array.\r\nConsidering we're given j.size(), I believe this shouldn't be something that should be breaking. \r\n(since I can already work around this by creating a loop that adds individual elements)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/842", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/842/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/842/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/842/events", "html_url": "https://github.com/nlohmann/json/issues/842", "id": 276435802, "node_id": "MDU6SXNzdWUyNzY0MzU4MDI=", "number": 842, "title": "Iteration weirdness", "user": {"login": "Exaeta", "id": 2097010, "node_id": "MDQ6VXNlcjIwOTcwMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2097010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Exaeta", "html_url": "https://github.com/Exaeta", "followers_url": "https://api.github.com/users/Exaeta/followers", "following_url": "https://api.github.com/users/Exaeta/following{/other_user}", "gists_url": "https://api.github.com/users/Exaeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/Exaeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Exaeta/subscriptions", "organizations_url": "https://api.github.com/users/Exaeta/orgs", "repos_url": "https://api.github.com/users/Exaeta/repos", "events_url": "https://api.github.com/users/Exaeta/events{/privacy}", "received_events_url": "https://api.github.com/users/Exaeta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-11-23T16:56:03Z", "updated_at": "2017-12-14T19:08:36Z", "closed_at": "2017-12-14T19:08:36Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nIt seems that right now iterating over a `json` object iterates over it as though it was an array, which is counter intuitive from the C++ perspective, which you would expect to be iterated like a `std::map`.\r\n\r\nI suggest `json::as_map()` and `json::as_array()` so that one can do:\r\n\r\n```C++\r\nvoid foobar (nlohmann::json js1, nlohmann::json js2)\r\n{\r\n  for (auto & x : js2.as_map())\r\n  {\r\n    foo(x.first, x.second);\r\n  }\r\n\r\n  for (auto & x : js2.as_array())\r\n  {\r\n    bar(x);\r\n  }\r\n}\r\n```\r\n\r\nBoth would return proxy objects (objects that contain a reference to the original, and different `begin()` and `end()` functions.)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/841", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/841/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/841/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/841/events", "html_url": "https://github.com/nlohmann/json/issues/841", "id": 275775025, "node_id": "MDU6SXNzdWUyNzU3NzUwMjU=", "number": 841, "title": "Use reference or pointer as Object value", "user": {"login": "go2sh", "id": 150886, "node_id": "MDQ6VXNlcjE1MDg4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/150886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/go2sh", "html_url": "https://github.com/go2sh", "followers_url": "https://api.github.com/users/go2sh/followers", "following_url": "https://api.github.com/users/go2sh/following{/other_user}", "gists_url": "https://api.github.com/users/go2sh/gists{/gist_id}", "starred_url": "https://api.github.com/users/go2sh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/go2sh/subscriptions", "organizations_url": "https://api.github.com/users/go2sh/orgs", "repos_url": "https://api.github.com/users/go2sh/repos", "events_url": "https://api.github.com/users/go2sh/events{/privacy}", "received_events_url": "https://api.github.com/users/go2sh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-21T16:25:11Z", "updated_at": "2017-11-27T07:45:05Z", "closed_at": "2017-11-27T07:45:05Z", "author_association": "NONE", "body": "Hi there,\r\n\r\nI have a small question. Is it possible to set the value of an object element to a reference or point without copying it?\r\nWhat I like to achieve is the following\r\n```\r\njson data, result, response;\r\nbool hasError = calcResult(data, result);\r\nif (hasError) {\r\nresponse[\"error\"] = result; // no copy\r\n} else {\r\nresponse[\"result\"] = result; // nocopy\r\n}\r\n```\r\nThanks for your help. :)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/840", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/840/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/840/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/840/events", "html_url": "https://github.com/nlohmann/json/issues/840", "id": 275577029, "node_id": "MDU6SXNzdWUyNzU1NzcwMjk=", "number": 840, "title": "Ambiguity in parsing nested maps", "user": {"login": "quicknir", "id": 10457096, "node_id": "MDQ6VXNlcjEwNDU3MDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quicknir", "html_url": "https://github.com/quicknir", "followers_url": "https://api.github.com/users/quicknir/followers", "following_url": "https://api.github.com/users/quicknir/following{/other_user}", "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}", "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions", "organizations_url": "https://api.github.com/users/quicknir/orgs", "repos_url": "https://api.github.com/users/quicknir/repos", "events_url": "https://api.github.com/users/quicknir/events{/privacy}", "received_events_url": "https://api.github.com/users/quicknir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-11-21T03:51:32Z", "updated_at": "2017-11-26T09:14:31Z", "closed_at": "2017-11-25T21:34:03Z", "author_association": "NONE", "body": "This is considered ambiguous and a compile time error:\r\n\r\n```cpp\r\n#include \"json.hpp\"\r\n\r\n#include <iostream>\r\n#include <unordered_map>\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    std::cerr << \"foo\";\r\n    try {\r\n        auto j = json::parse(R\"(\r\n                         { \"m\": {\"one\": int}}\r\n                         )\");\r\n\r\n        using T = std::unordered_map<std::string, std::unordered_map<std::string, int>>;\r\n\r\n         auto m = j.at(\"m\").get<T>();\r\n    }\r\n    catch (...) {}\r\n    return 0;\r\n}\r\n```\r\n\r\nThe error is a bit long but I can paste it here if desired. I don't see why this is ambiguous, seems like given the input and the types I specified there is only one possible output. Is this considered a bug? Either way, is there a workaround?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/839", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/839/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/839/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/839/events", "html_url": "https://github.com/nlohmann/json/issues/839", "id": 275545891, "node_id": "MDU6SXNzdWUyNzU1NDU4OTE=", "number": 839, "title": "could not find from_json() method in T's namespace", "user": {"login": "BrunoLogan", "id": 5592955, "node_id": "MDQ6VXNlcjU1OTI5NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5592955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrunoLogan", "html_url": "https://github.com/BrunoLogan", "followers_url": "https://api.github.com/users/BrunoLogan/followers", "following_url": "https://api.github.com/users/BrunoLogan/following{/other_user}", "gists_url": "https://api.github.com/users/BrunoLogan/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrunoLogan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrunoLogan/subscriptions", "organizations_url": "https://api.github.com/users/BrunoLogan/orgs", "repos_url": "https://api.github.com/users/BrunoLogan/repos", "events_url": "https://api.github.com/users/BrunoLogan/events{/privacy}", "received_events_url": "https://api.github.com/users/BrunoLogan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-21T00:33:23Z", "updated_at": "2017-11-21T01:51:59Z", "closed_at": "2017-11-21T01:51:59Z", "author_association": "NONE", "body": "Using the code from the develop branch. I get the error \"could not find from_json() method in T's namespace\" even when the functions are declared and implemented.\r\n\r\nHere's an example:\r\nthe error occurs on this line:\r\n\r\n`vector<Serial::serial_chunk> chunks = curr[\"serialChunks\"].get<vector<Serial::serial_chunk>>();`\r\n\r\nthe struct is:\r\n\r\n```\r\nstruct serial_chunk {\r\n\r\n        int start;\r\n        int length;\r\n        MeaningType meaning;\r\n\r\n        void to_json(json& j, const serial_chunk& sc) {\r\n            j = json{{\"start\", sc.start}, {\"length\", sc.length}, {\"meaning\", sc.meaning}};\r\n        }\r\n        \r\n        void from_json(const json& j, serial_chunk& sc) {\r\n            sc.start = j.at(\"start\").get<int>();\r\n            sc.length = j.at(\"length\").get<int>();\r\n            sc.meaning = j.at(\"meaning\").get<MeaningType>();\r\n        }\r\n    };\r\n```\r\nMeaningType is an enum.\r\nThis struct declaration occurs inside the header file of a class as a public member.\r\nI tried define the methods in a class as well and I get the same error. I'm using Xcode 9.1.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/838", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/838/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/838/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/838/events", "html_url": "https://github.com/nlohmann/json/issues/838", "id": 275422047, "node_id": "MDU6SXNzdWUyNzU0MjIwNDc=", "number": 838, "title": "Incorrect parse error with binary data in keys?", "user": {"login": "charlie-ht", "id": 14251608, "node_id": "MDQ6VXNlcjE0MjUxNjA4", "avatar_url": "https://avatars2.githubusercontent.com/u/14251608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlie-ht", "html_url": "https://github.com/charlie-ht", "followers_url": "https://api.github.com/users/charlie-ht/followers", "following_url": "https://api.github.com/users/charlie-ht/following{/other_user}", "gists_url": "https://api.github.com/users/charlie-ht/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlie-ht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlie-ht/subscriptions", "organizations_url": "https://api.github.com/users/charlie-ht/orgs", "repos_url": "https://api.github.com/users/charlie-ht/repos", "events_url": "https://api.github.com/users/charlie-ht/events{/privacy}", "received_events_url": "https://api.github.com/users/charlie-ht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 10, "created_at": "2017-11-20T16:44:29Z", "updated_at": "2017-12-13T05:35:29Z", "closed_at": "2017-12-13T05:35:29Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nI get a parse error after deserializing a map<string, string>, the serialised message was created by same version of library. The key is binary data. The error message is not helpful to find what went wrong.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nm_message below contains the data to parse, the library seems to have done some escaping of my data but a quick inspection of the data suggests it's valid.\r\n```\r\nm_message is {\"g\\u0007\\r\\\"(G&\u07c6\":\"KeyUsable\",\"{\\u0013(T[\\u001e>\":\"KeyUsable\",\"x R\\u0000W}UF\":\"KeyUsable\",\"u000e\\u0012]=_\":\"KeyUsable\"}\r\n00000000 7b 22 67 5c 75 30 30 30 37 5c 72 d7 7e d6 5f 5c |{\"g\\u0007\\r.~._\\|\r\n00000010 22 ae 28 47 26 df 86 f7 7f 22 3a 22 4b 65 79 55 |\".(G&....\":\"KeyU|\r\n00000020 73 61 62 6c 65 22 2c 22 7b 5c 75 30 30 31 33 28 |sable\",\"{\\u0013(|\r\n00000030 eb 61 b5 54 e2 93 f7 5b 5c 75 30 30 31 65 3e 94 |.a.T...[\\u001e>.|\r\n00000040 cc 3b 22 3a 22 4b 65 79 55 73 61 62 6c 65 22 2c |.;\":\"KeyUsable\",|\r\n00000050 22 93 78 99 20 e8 d6 52 5c 75 30 30 30 30 98 57 |\".x....R\\u0000.W|\r\n00000060 7d f8 f2 dd 55 46 22 3a 22 4b 65 79 55 73 61 62 |}...UF\":\"KeyUsab|\r\n00000070 6c 65 22 2c 22 f0 92 9b 5c 75 30 30 30 65 5c 75 |le\",\"...\\u000e\\u|\r\n00000080 30 30 31 32 c8 5e 5d 95 fe 3d 5f da e6 fb a8 22 |0012.^]..=_....\"|\r\n00000090 3a 22 4b 65 79 55 73 61 62 6c 65 22 7d          |:\"KeyUsable\"}   |\r\nterminate called after throwing an instance of 'std::invalid_argument'\r\n  what():  parse error - unexpected '\"'; expected string literal\r\n```\r\nI provide hexdump of message above the given error. That error isn't enough for me to understand what went wrong.\r\n- What is the expected behavior?\r\n```\r\n-{\r\n\"g\\u0007\\r\\\"(G&\u07c6\" : KeyUsable,\r\n\"{\\u0013(T[\\u001e>\" : KeyUsable,\r\n\"x R\\u0000W}UF\" : KeyUsable,\r\n\"u000e\\u0012]=_\" : KeyUsable\r\n}\r\n```\r\n- And what is the actual behavior instead?\r\nA crash, please see above\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\narm-buildroot-linux-gnueabihf-g++.br_real (Buildroot 2017.05-git-13055-g71f35cff8-dirty) 5.4.0\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nersion 2.1.1\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\nNo compilation error\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/837", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/837/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/837/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/837/events", "html_url": "https://github.com/nlohmann/json/issues/837", "id": 275329351, "node_id": "MDU6SXNzdWUyNzUzMjkzNTE=", "number": 837, "title": "json_pointer public push_back, pop_back", "user": {"login": "HugoLopata", "id": 33831327, "node_id": "MDQ6VXNlcjMzODMxMzI3", "avatar_url": "https://avatars0.githubusercontent.com/u/33831327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HugoLopata", "html_url": "https://github.com/HugoLopata", "followers_url": "https://api.github.com/users/HugoLopata/followers", "following_url": "https://api.github.com/users/HugoLopata/following{/other_user}", "gists_url": "https://api.github.com/users/HugoLopata/gists{/gist_id}", "starred_url": "https://api.github.com/users/HugoLopata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HugoLopata/subscriptions", "organizations_url": "https://api.github.com/users/HugoLopata/orgs", "repos_url": "https://api.github.com/users/HugoLopata/repos", "events_url": "https://api.github.com/users/HugoLopata/events{/privacy}", "received_events_url": "https://api.github.com/users/HugoLopata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-11-20T11:52:27Z", "updated_at": "2018-06-06T09:58:46Z", "closed_at": "2018-06-06T09:58:46Z", "author_association": "NONE", "body": "**Feature Request**\r\nI am generating some json pointers. It would be handy using push_back instead of composing string with slashes, which is subsequently broken to vector of strings by json_pointer.\r\n\r\nAccess to internal data may be handy too:\r\n`const vector<string>& json_pointer::impl() const;`"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/836", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/836/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/836/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/836/events", "html_url": "https://github.com/nlohmann/json/issues/836", "id": 275303953, "node_id": "MDU6SXNzdWUyNzUzMDM5NTM=", "number": 836, "title": "using dump() when std::wstring is StringType with VS2017", "user": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars3.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-20T10:23:47Z", "updated_at": "2017-11-22T06:26:27Z", "closed_at": "2017-11-22T06:26:17Z", "author_association": "NONE", "body": "I may be doing something stupid, but I'm trying to use std::wstring as my string type. If I call json::dump on my wstring'ed json object, it seems to not be able to convert from char to wchar_t if I correctly understand an error message that is too verbose to not be opaque.  I quote the errors at the bottom.  This is with VisualStudio 2017. I cloned the git repo a few weeks ago, and haven't tried with the latest version, but I didn't see any pertinent checkins in the meantime. I may have missed them of course.  Likewise for examples that use a different string type, I also didn't find any closed issues referring to wchar_t or std::wstring.\r\n\r\nMy declarations look like:\r\n```\r\n        namespace utility { typedef string_t std::wstring; }\r\n        nlohmann::basic_json<std::map, std::vector, utility::string_t> j = njson::parse(wbody); // here wbody is of type std::wstring\r\n```\r\nand the call to dump is\r\n      `       utility::string_t dump = j.dump(0); // again utility::string_t is std::wstring.`\r\n\r\nIs this expected?\r\n\r\nThank you for your good work. The library has really made my life a lot easier.\r\n\r\n(The first warning always appears when including the header, and is unrelated.)\r\n```\r\n1>C:\\tobi\\Source\\json/json.hpp(5961): warning C4819: The file contains a character that cannot be represented in the current code page (932). Save the file in Unicode format to prevent data loss\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): error C2440: '<function-style-cast>': cannot convert from 'std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>' to 'nlohmann::detail::output_adapter<char>'\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): note: No constructor could take the source type, or constructor overload resolution was ambiguous\r\n1>C:\\tobi\\Source\\json/json.hpp(8997): note: while compiling class template member function 'std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::dump(const int,const char,const bool) const'\r\n1>C:\\tobi\\Source\\source.cpp(57): note: see reference to function template instantiation 'std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::dump(const int,const char,const bool) const' being compiled\r\n1>C:\\tobi\\Source\\source.cpp(34): note: see reference to class template instantiation 'nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>' being compiled\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): error C2664: 'nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>>::serializer(const nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>> &)': cannot convert argument 1 from 'const char' to 'const nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>> &'\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): note: Reason: cannot convert from 'const char' to 'const nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>>'\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): note: No constructor could take the source type, or constructor overload resolution was ambiguous\r\n\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/835", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/835/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/835/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/835/events", "html_url": "https://github.com/nlohmann/json/issues/835", "id": 275289408, "node_id": "MDU6SXNzdWUyNzUyODk0MDg=", "number": 835, "title": "Show the path of the currently parsed value when an error occurs", "user": {"login": "santilin", "id": 6593992, "node_id": "MDQ6VXNlcjY1OTM5OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6593992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santilin", "html_url": "https://github.com/santilin", "followers_url": "https://api.github.com/users/santilin/followers", "following_url": "https://api.github.com/users/santilin/following{/other_user}", "gists_url": "https://api.github.com/users/santilin/gists{/gist_id}", "starred_url": "https://api.github.com/users/santilin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santilin/subscriptions", "organizations_url": "https://api.github.com/users/santilin/orgs", "repos_url": "https://api.github.com/users/santilin/repos", "events_url": "https://api.github.com/users/santilin/events{/privacy}", "received_events_url": "https://api.github.com/users/santilin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-20T09:35:32Z", "updated_at": "2017-11-25T08:35:00Z", "closed_at": "2017-11-25T08:35:00Z", "author_association": "NONE", "body": "**Feature Request**\r\nIt would be nice to get the path of the json file when an error occurs. Currently, only the type of the error is printed, with no way to know where in the json tree it happend, so it is very difficult to find the error.\r\n\r\nFor parse errors, I have implemented a way to show the place of the error:\r\n\r\n```cpp\r\n\ttry {\r\n\t\treturn json::parse(f);\r\n\t} catch( nlohmann::detail::parse_error &e ) {\r\n\t\tXtring err = e.what();\r\n\t\tstd::cout << err << std::endl;\r\n\t\tif (e.byte > 1 )\r\n\t\t\tf.seekg(e.byte - 2);\r\n\t\telse \r\n\t\t\tf.seekg(0);\r\n\t\tchar text[121];\r\n\t\tf.read(text, 120);\r\n\t\tstd::cout << text << std::endl;\r\n\t\texit(1);\r\n\t}\r\n    }\r\n```\r\n\r\nAnd for type errors, I have tweaked the code for every JSON_THROW so that I get a dump of the value being parsed. But as I can not get the parent nor the name, only the value, I don't know where the error in the parse tree es:\r\n\r\n```cpp\r\n        JSON_THROW(type_error::create(302, \"type must be string, but is \" + std::string(j.type_name()) + j.dump() ));\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/834", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/834/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/834/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/834/events", "html_url": "https://github.com/nlohmann/json/issues/834", "id": 275237697, "node_id": "MDU6SXNzdWUyNzUyMzc2OTc=", "number": 834, "title": "Using input_adapter in a slightly unexpected way", "user": {"login": "chetmurthy", "id": 1755771, "node_id": "MDQ6VXNlcjE3NTU3NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1755771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetmurthy", "html_url": "https://github.com/chetmurthy", "followers_url": "https://api.github.com/users/chetmurthy/followers", "following_url": "https://api.github.com/users/chetmurthy/following{/other_user}", "gists_url": "https://api.github.com/users/chetmurthy/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetmurthy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetmurthy/subscriptions", "organizations_url": "https://api.github.com/users/chetmurthy/orgs", "repos_url": "https://api.github.com/users/chetmurthy/repos", "events_url": "https://api.github.com/users/chetmurthy/events{/privacy}", "received_events_url": "https://api.github.com/users/chetmurthy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 30, "created_at": "2017-11-20T04:58:45Z", "updated_at": "2018-04-27T21:25:09Z", "closed_at": "2018-04-27T21:25:09Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nI'm trying to use input_adapter to wrap an Apache Thrift Transport (the details aren't really relevant).  To that end, I need to provide the json::parse() function my own subclass of input_adapter_protocol, instead of an input_adapter.  I'm happy to send a PR, but figured I should at least first check that this isn't something foolish, or something that can be achieved in another way?  It was *extremely* straightforward to make my own subclass of input_adapter_protocol, btw.\r\n```diff\r\nmodified   src/lib/cpp/json.hpp\r\n@@ -1562,6 +1562,8 @@ class input_adapter\r\n   public:\r\n     // native support\r\n \r\n+  explicit input_adapter(input_adapter_t arg_ia) : ia(arg_ia) { }\r\n+\r\n     /// input adapter for input stream\r\n     input_adapter(std::istream& i)\r\n         : ia(std::make_shared<cached_input_stream_adapter<16384>>(i)) {}\r\n\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/833", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/833/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/833/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/833/events", "html_url": "https://github.com/nlohmann/json/issues/833", "id": 275212366, "node_id": "MDU6SXNzdWUyNzUyMTIzNjY=", "number": 833, "title": "Repetitive data type while reading", "user": {"login": "pompex", "id": 4152201, "node_id": "MDQ6VXNlcjQxNTIyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4152201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pompex", "html_url": "https://github.com/pompex", "followers_url": "https://api.github.com/users/pompex/followers", "following_url": "https://api.github.com/users/pompex/following{/other_user}", "gists_url": "https://api.github.com/users/pompex/gists{/gist_id}", "starred_url": "https://api.github.com/users/pompex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pompex/subscriptions", "organizations_url": "https://api.github.com/users/pompex/orgs", "repos_url": "https://api.github.com/users/pompex/repos", "events_url": "https://api.github.com/users/pompex/events{/privacy}", "received_events_url": "https://api.github.com/users/pompex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-20T01:21:01Z", "updated_at": "2017-11-21T09:02:53Z", "closed_at": "2017-11-21T09:02:53Z", "author_association": "NONE", "body": "Is this possible to get a value with auto data type detection?\r\n\r\nConsider following:\r\n\r\n```\r\nstruct Test {\r\n       std::string value;\r\n       int32_t index;\r\n       std::vector<int32_t> acro;\r\n}\r\n```\r\n\r\nTo parse these, we need to do the following:\r\n\r\n```\r\nvoid from_json(const json& j, Files::Chapters::Test& p) {\r\n    p.value = j.at(\"value\").get<std::string>();\r\n    p.index = j.at(\"index\").get<int32_t>();\r\n    p.acro = j.at(\"acro\").get<std::vector<int32_t>>();\r\n}\r\n```\r\nThats quite a boilerplate.\r\n\r\nWe can also do this:\r\n\r\n```\r\nvoid from_json(const json& j, Files::Chapters::Test& p) {\r\n    p.value = j.at(\"value\").get<typeof(p.value)>();\r\n    p.index = j.at(\"index\").get<typeof(p.index)>();\r\n    p.acro = j.at(\"acro\").get<typeof(p.acro)>();\r\n}\r\n```\r\n\r\nAs you can see, this is repetitive thus redudant. Can't we simply get value with the data type of a object we assign to?\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/832", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/832/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/832/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/832/events", "html_url": "https://github.com/nlohmann/json/issues/832", "id": 274605103, "node_id": "MDU6SXNzdWUyNzQ2MDUxMDM=", "number": 832, "title": "Stack-overflow (OSS-Fuzz 4234)", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2017-11-16T17:47:17Z", "updated_at": "2018-06-26T14:28:40Z", "closed_at": "2018-06-26T14:28:39Z", "author_association": "OWNER", "body": "```\r\nDetailed report: https://oss-fuzz.com/testcase?key=5854339613589504\r\n\r\nProject: json\r\nFuzzer: libFuzzer_json_parse_cbor_fuzzer\r\nJob Type: libfuzzer_asan_json\r\nPlatform Id: linux\r\n\r\nCrash Type: Stack-overflow\r\nCrash Address: 0x7ffc55e22ce8\r\nCrash State:\r\nnlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<cha\r\nnlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::ve\r\nnlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<cha\r\n\r\nSanitizer: address (ASAN)\r\n\r\nRegressed: https://oss-fuzz.com/revisions?job=libfuzzer_asan_json&range=201701031958:201701032147\r\n\r\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=5854339613589504\r\n\r\nIssue filed automatically.\r\n\r\nSee https://github.com/google/oss-fuzz/blob/master/docs/reproducing.md for more information.\r\n\r\nThis bug is subject to a 90 day disclosure deadline. If 90 days elapse\r\nwithout an upstream patch, then the bug report will automatically\r\nbecome visible to the public.\r\n```\r\n\r\n[clusterfuzz-testcase-minimized-5854339613589504.dms.zip](https://github.com/nlohmann/json/files/1479599/clusterfuzz-testcase-minimized-5854339613589504.dms.zip)\r\n\r\nStack trace:\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n--\r\n\u00a0 | =================================================================\r\n\u00a0 | ==1==ERROR: AddressSanitizer: stack-overflow on address 0x7ffc55e22ce8 (pc 0x000000515f22 bp 0x7ffc55e23530 sp 0x7ffc55e22cd0 T0)\r\n\u00a0 | SCARINESS: 10 (stack-overflow)\r\n\u00a0 | #0 0x515f21 in operator new(unsigned long) _asan_rtl_\r\n\u00a0 | #1 0x5a6470 in __allocate /usr/local/include/c++/v1/new:226:10\r\n\u00a0 | #2 0x5a6470 in allocate /usr/local/include/c++/v1/memory:1747\r\n\u00a0 | #3 0x5a6470 in std::__1::vector<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> > >* nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>::create<std::__1::vector<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> > >>() json/src/json.hpp:7939\r\n\u00a0 | #4 0x5a5fcf in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>::json_value::json_value(nlohmann::detail::value_t) json/src/json.hpp:8013:29\r\n\u00a0 | #5 0x5a0061 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>::basic_json(nlohmann::detail::value_t) json/src/json.hpp:8249:22\r\n\u00a0 | #6 0x59ed6a in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5374:32\r\n\u00a0 | #7 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n\u00a0 | #8 0x5a4bd0 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int)::{lambda()#1}::operator()() const json/src/json.hpp:5377:20\r\n\u00a0 | #9 0x59ee2e in generate_n<std::__1::back_insert_iterator<std::__1::vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >, int, (lambda at ../src/json.hpp:5375:73)> /usr/local/include/c++/v1/algorithm:2186:20\r\n\u00a0 | #10 0x59ee2e in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5375\r\n\u00a0 | #11 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n\u00a0 | #12 0x5a4bd0 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int)::{lambda()#1}::operator()() const json/src/json.hpp:5377:20\r\n\u00a0 | #13 0x59ee2e in generate_n<std::__1::back_insert_iterator<std::__1::vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >, int, (lambda at ../src/json.hpp:5375:73)> /usr/local/include/c++/v1/algorithm:2186:20\r\n\u00a0 | #14 0x59ee2e in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5375\r\n\u00a0 | #15 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n\u00a0 | #16 0x5a4bd0 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int)::{lambda()#1}::operator()() const json/src/json.hpp:5377:20\r\n\u00a0 | #17 0x59ee2e in generate_n<std::__1::back_insert_iterator<std::__1::vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >, int, (lambda at ../src/json.hpp:5375:73)> /usr/local/include/c++/v1/algorithm:2186:20\r\n\u00a0 | #18 0x59ee2e in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5375\r\n\u00a0 | #19 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/831", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/831/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/831/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/831/events", "html_url": "https://github.com/nlohmann/json/issues/831", "id": 274474099, "node_id": "MDU6SXNzdWUyNzQ0NzQwOTk=", "number": 831, "title": "Storing multiple types inside map", "user": {"login": "pompex", "id": 4152201, "node_id": "MDQ6VXNlcjQxNTIyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4152201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pompex", "html_url": "https://github.com/pompex", "followers_url": "https://api.github.com/users/pompex/followers", "following_url": "https://api.github.com/users/pompex/following{/other_user}", "gists_url": "https://api.github.com/users/pompex/gists{/gist_id}", "starred_url": "https://api.github.com/users/pompex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pompex/subscriptions", "organizations_url": "https://api.github.com/users/pompex/orgs", "repos_url": "https://api.github.com/users/pompex/repos", "events_url": "https://api.github.com/users/pompex/events{/privacy}", "received_events_url": "https://api.github.com/users/pompex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-11-16T10:56:38Z", "updated_at": "2017-11-26T10:26:04Z", "closed_at": "2017-11-25T21:43:31Z", "author_association": "NONE", "body": "Hello. Recently I have discovered this library and decided to give it a try. It looks really promising.\r\n\r\nI have faced my first issue however. While performing JSON file loading I would like to parse and store some values by id in a map.\r\n\r\nLike this:\r\n```\r\nm_loadedFile = json::parse(rdbuf);\r\n\r\n// My map\r\nenum jsonVar_t {\r\n    UNIQUE_NUMBER,\r\n    MESSAGE,\r\n    INTERVAL,\r\n};\r\n\r\nstd::map<jsonVar_t, json> test;\r\n\r\ntest.insert(std::make_pair(UNIQUE_NUMBER, m_loadedFile.at(\"uniqueNumber\").get<int32_t>()));\r\ntest.insert(std::make_pair(MESSAGE, m_loadedFile.at(\"message\").get<std::string>()));\r\ntest.insert(std::make_pair(INTERVAL, m_loadedFile.at(\"interval\").get<float>()));\r\n\r\n// Then I would like to access it like:\r\n\r\ntest[MESSAGE];\r\n```\r\n\r\nBasically it's working. However, when I'm printing `test[MESSAGE]` I get the message being quoted: \"My Message\". Similar issue for integers, which are not even integers (need to cast them in order).\r\n\r\n**How can I properly parse and store my data and then retrieve it with correct data type?**"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/830", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/830/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/830/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/830/events", "html_url": "https://github.com/nlohmann/json/issues/830", "id": 274226237, "node_id": "MDU6SXNzdWUyNzQyMjYyMzc=", "number": 830, "title": "Application terminating", "user": {"login": "pompex", "id": 4152201, "node_id": "MDQ6VXNlcjQxNTIyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4152201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pompex", "html_url": "https://github.com/pompex", "followers_url": "https://api.github.com/users/pompex/followers", "following_url": "https://api.github.com/users/pompex/following{/other_user}", "gists_url": "https://api.github.com/users/pompex/gists{/gist_id}", "starred_url": "https://api.github.com/users/pompex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pompex/subscriptions", "organizations_url": "https://api.github.com/users/pompex/orgs", "repos_url": "https://api.github.com/users/pompex/repos", "events_url": "https://api.github.com/users/pompex/events{/privacy}", "received_events_url": "https://api.github.com/users/pompex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-15T16:46:28Z", "updated_at": "2017-11-15T22:09:54Z", "closed_at": "2017-11-15T22:09:35Z", "author_association": "NONE", "body": "When I'm trying to run compiled application with simple parse code it fails with an exception:\r\n\r\n> [json.exception.parse_error.101] parse error at 73: syntax error - unexpected '}'; expected string literal\r\n\r\nCode:\r\n\r\n```\r\nint main() {\r\n    std::ifstream     file(\"test.json\");\r\n    std::stringstream buffer;\r\n    buffer << file.rdbuf();\r\n\r\n    json config;\r\n\r\n    try {\r\n        config = json::parse(buffer);\r\n    } catch (const json::exception& e) {\r\n        std::cout << \"Loading error: \" << e.what() << \"\\n\";\r\n        exit(-1);\r\n    }\r\n\r\n    try {\r\n        std::cout << \"Name: \" << config[\"name\"] << \"\\n\";\r\n    } catch (const json::exception& e) {\r\n        std::cout << \"Couldnt parse: \" << e.what() << \"\\n\";\r\n        exit(-1);\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\nJSON file is indeed valid:\r\n\r\n```\r\n{\r\n  \"pi\": 3.141,\r\n  \"happy\": true,\r\n  \"name\": \"Niels\",\r\n  \"nothing\": null,\r\n}\r\n```\r\n\r\nCompiler:\r\n\r\nThread model: win32\r\ngcc version 6.3.0 (MinGW.org GCC-6.3.0-1)\r\n\r\nBug or something I'm doing wrong?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/829", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/829/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/829/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/829/events", "html_url": "https://github.com/nlohmann/json/pull/829", "id": 274063619, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUyNzA1NTUy", "number": 829, "title": "Updated hunter package links", "user": {"login": "jowr", "id": 769593, "node_id": "MDQ6VXNlcjc2OTU5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/769593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jowr", "html_url": "https://github.com/jowr", "followers_url": "https://api.github.com/users/jowr/followers", "following_url": "https://api.github.com/users/jowr/following{/other_user}", "gists_url": "https://api.github.com/users/jowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jowr/subscriptions", "organizations_url": "https://api.github.com/users/jowr/orgs", "repos_url": "https://api.github.com/users/jowr/repos", "events_url": "https://api.github.com/users/jowr/events{/privacy}", "received_events_url": "https://api.github.com/users/jowr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 4, "created_at": "2017-11-15T07:49:32Z", "updated_at": "2017-11-19T12:27:19Z", "closed_at": "2017-11-18T12:35:22Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/829", "html_url": "https://github.com/nlohmann/json/pull/829", "diff_url": "https://github.com/nlohmann/json/pull/829.diff", "patch_url": "https://github.com/nlohmann/json/pull/829.patch"}, "body": "The broken links to the hunter package confused me, but I found the package now. This fixes #828. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/828", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/828/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/828/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/828/events", "html_url": "https://github.com/nlohmann/json/issues/828", "id": 273906714, "node_id": "MDU6SXNzdWUyNzM5MDY3MTQ=", "number": 828, "title": "Missing CMake hunter package?", "user": {"login": "jowr", "id": 769593, "node_id": "MDQ6VXNlcjc2OTU5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/769593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jowr", "html_url": "https://github.com/jowr", "followers_url": "https://api.github.com/users/jowr/followers", "following_url": "https://api.github.com/users/jowr/following{/other_user}", "gists_url": "https://api.github.com/users/jowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jowr/subscriptions", "organizations_url": "https://api.github.com/users/jowr/orgs", "repos_url": "https://api.github.com/users/jowr/repos", "events_url": "https://api.github.com/users/jowr/events{/privacy}", "received_events_url": "https://api.github.com/users/jowr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-14T19:05:16Z", "updated_at": "2017-11-18T12:35:22Z", "closed_at": "2017-11-18T12:35:22Z", "author_association": "CONTRIBUTOR", "body": "Hi, I am looking for the hunter package mentioned in the README.md, but I cannot find it. Was the package removed from hunter? Would you be interested in having it added again? "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/827", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/827/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/827/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/827/events", "html_url": "https://github.com/nlohmann/json/issues/827", "id": 273435782, "node_id": "MDU6SXNzdWUyNzM0MzU3ODI=", "number": 827, "title": "std::map<std::string, std::string> from json object yields C2665: 'std::pair<const _Kty,_Ty>::pair': none of the 2 overloads could convert all the argument types", "user": {"login": "na-n", "id": 15941240, "node_id": "MDQ6VXNlcjE1OTQxMjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/15941240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/na-n", "html_url": "https://github.com/na-n", "followers_url": "https://api.github.com/users/na-n/followers", "following_url": "https://api.github.com/users/na-n/following{/other_user}", "gists_url": "https://api.github.com/users/na-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/na-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/na-n/subscriptions", "organizations_url": "https://api.github.com/users/na-n/orgs", "repos_url": "https://api.github.com/users/na-n/repos", "events_url": "https://api.github.com/users/na-n/events{/privacy}", "received_events_url": "https://api.github.com/users/na-n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-13T13:50:11Z", "updated_at": "2017-11-14T06:12:55Z", "closed_at": "2017-11-14T06:12:55Z", "author_association": "NONE", "body": "please close me, I am a duplicate of #734."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/826", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/826/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/826/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/826/events", "html_url": "https://github.com/nlohmann/json/issues/826", "id": 272956787, "node_id": "MDU6SXNzdWUyNzI5NTY3ODc=", "number": 826, "title": "object.dump gives quoted string, want to use .dump() to generate javascripts.", "user": {"login": "na-n", "id": 15941240, "node_id": "MDQ6VXNlcjE1OTQxMjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/15941240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/na-n", "html_url": "https://github.com/na-n", "followers_url": "https://api.github.com/users/na-n/followers", "following_url": "https://api.github.com/users/na-n/following{/other_user}", "gists_url": "https://api.github.com/users/na-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/na-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/na-n/subscriptions", "organizations_url": "https://api.github.com/users/na-n/orgs", "repos_url": "https://api.github.com/users/na-n/repos", "events_url": "https://api.github.com/users/na-n/events{/privacy}", "received_events_url": "https://api.github.com/users/na-n/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-11-10T14:52:36Z", "updated_at": "2017-12-06T20:47:33Z", "closed_at": "2017-12-06T20:47:33Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nFirst up, amazing library. Love it. Definitely going to play well with V8 and V8PP, so well done.\r\n\r\n- What is the issue you have?\r\nMy issue is that j.dump() returns a string in quotes for objects, and I have no way to disable this. I'd like to .dump() something I can build strings with using boost::format without having to write my own dequoting method and suddenly thinking about complexity of string ops. That's your job! ;P\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nSimplifying to Pseudo-esque code:\r\n\r\n```cpp\r\nstatic auto matic= boost::format(\"var fn = function() { return %s };\");\r\n\r\nauto j = R\"({ \"some_object\": {\"happy\": true, \"pi\": 3.141 } })\"_json;\r\nauto dumped_j = j.at(\"some_object\").dump();\r\nauto formatted = boost::str(matic % dumped_j ); \r\n// formatted == \"var fn = function() { return \\\"<some_object_here>\\\"; }\".\r\n// ^^^^ formatted[0] and formatted[len-1] are '\\\"'\r\n```\r\n\r\n- What is the expected behavior?\r\nI don't want the quotes on my string-dumped object (others probably do).. I'd like dump to be extended with default parameter bool bQuoted=true so I can set it false.\r\nauto formatted = boost::str(matic% j.at(\"some_object\").dump(false)); //formatted == \"var fn = function() { return <some_object_here>; }\".\r\n// no quotes\r\n\r\n- And what is the actual behavior instead?\r\nI get the quotes, see above. see line 8505 in the header of 2.11\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nMSVC 2015 on Win10 Pro\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\nI'm using 2.11 from the releases page\r\n\r\n- Describe the feature in as much detail as possible.\r\n make quotes surrounding dumped objects an option\r\n\r\n- Include sample usage where appropriate.\r\nauto str =  j.dump(-1, false);\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/825", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/825/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/825/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/825/events", "html_url": "https://github.com/nlohmann/json/issues/825", "id": 272309142, "node_id": "MDU6SXNzdWUyNzIzMDkxNDI=", "number": 825, "title": "Assertion failed on [\"NoExistKey\"] of an not existing key of const json&", "user": {"login": "dcube9", "id": 10657031, "node_id": "MDQ6VXNlcjEwNjU3MDMx", "avatar_url": "https://avatars0.githubusercontent.com/u/10657031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcube9", "html_url": "https://github.com/dcube9", "followers_url": "https://api.github.com/users/dcube9/followers", "following_url": "https://api.github.com/users/dcube9/following{/other_user}", "gists_url": "https://api.github.com/users/dcube9/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcube9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcube9/subscriptions", "organizations_url": "https://api.github.com/users/dcube9/orgs", "repos_url": "https://api.github.com/users/dcube9/repos", "events_url": "https://api.github.com/users/dcube9/events{/privacy}", "received_events_url": "https://api.github.com/users/dcube9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-08T18:53:02Z", "updated_at": "2017-11-09T07:13:35Z", "closed_at": "2017-11-09T07:13:35Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nIf you try to assign a key (that dosnt exist) from a const json& to const json& or json an assert is fire :\r\n\"Assertion `m_value.object->find(key) != m_value.object->end()' failed\"\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n``\r\n\r\n    #include <iostream>\r\n    #include <string>\r\n    #include <sstream>\r\n    #include <json.hpp>\r\n\r\n    using json = nlohmann::json;\r\n\r\n    int main(){\r\n    \r\n    json dummy = R\"({\r\n      \"OggetoUno\": {\r\n        \"Numero\": 1510161606\r\n      },\r\n      \"OggettoDue\": {\r\n      }\r\n    })\"_json;\r\n    \r\n    const json& dummyRef = dummy;\r\n\r\n    const json& a = dummyRef[\"OggetoUno\"][\"Numero\"];\r\n    std::cout << std::setw(4) << a.is_null() << '\\n';\r\n    std::cout << std::setw(4) << a.empty() << '\\n';\r\n    \r\n    const json& b = dummyRef[\"OggettoDue\"][\"Numero\"];\r\n    std::cout << std::setw(4) << b.is_null() << '\\n';\r\n    std::cout << std::setw(4) << b.empty() << '\\n';\r\n    \r\n    return 99;\r\n    }\r\n``\r\n- What is the expected behavior?\r\nIf 'b' is const json& a reference to.\r\nIf 'b' is json a copy of x, in that case a null json.\r\n\r\n- And what is the actual behavior instead?\r\n\"Assertion `m_value.object->find(key) != m_value.object->end()' failed\"\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n- VS2015 on W10\r\n- https://wandbox.org/\r\n\r\n\r\nBest regards\r\nPaolo\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/824", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/824/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/824/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/824/events", "html_url": "https://github.com/nlohmann/json/issues/824", "id": 272150859, "node_id": "MDU6SXNzdWUyNzIxNTA4NTk=", "number": 824, "title": "vs2015 error : static member will remain uninitialized at runtime but use in constant-expressions is supported", "user": {"login": "xtythansky", "id": 16535256, "node_id": "MDQ6VXNlcjE2NTM1MjU2", "avatar_url": "https://avatars3.githubusercontent.com/u/16535256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xtythansky", "html_url": "https://github.com/xtythansky", "followers_url": "https://api.github.com/users/xtythansky/followers", "following_url": "https://api.github.com/users/xtythansky/following{/other_user}", "gists_url": "https://api.github.com/users/xtythansky/gists{/gist_id}", "starred_url": "https://api.github.com/users/xtythansky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xtythansky/subscriptions", "organizations_url": "https://api.github.com/users/xtythansky/orgs", "repos_url": "https://api.github.com/users/xtythansky/repos", "events_url": "https://api.github.com/users/xtythansky/events{/privacy}", "received_events_url": "https://api.github.com/users/xtythansky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-08T10:38:49Z", "updated_at": "2017-11-13T06:57:42Z", "closed_at": "2017-11-13T06:57:42Z", "author_association": "NONE", "body": "on some vs2015 occurs \r\n`json.hpp(887): error C4579: 'nlohmann::detail::static_const<nlohmann::detail::to_json_fn>::value': in-class initialization for type 'const T' is not yet implemented; static member will remain uninitialized at runtime but use in constant-expressions is supported\r\n with\r\n        [\r\n            T=nlohmann::detail::to_json_fn\r\n        ]\r\n\r\n`"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/823", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/823/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/823/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/823/events", "html_url": "https://github.com/nlohmann/json/pull/823", "id": 271822277, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUxMTA2NDMw", "number": 823, "title": "Added forward declaration header json_forward.hpp. Minimise build times.", "user": {"login": "zerodefect", "id": 26778249, "node_id": "MDQ6VXNlcjI2Nzc4MjQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/26778249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zerodefect", "html_url": "https://github.com/zerodefect", "followers_url": "https://api.github.com/users/zerodefect/followers", "following_url": "https://api.github.com/users/zerodefect/following{/other_user}", "gists_url": "https://api.github.com/users/zerodefect/gists{/gist_id}", "starred_url": "https://api.github.com/users/zerodefect/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zerodefect/subscriptions", "organizations_url": "https://api.github.com/users/zerodefect/orgs", "repos_url": "https://api.github.com/users/zerodefect/repos", "events_url": "https://api.github.com/users/zerodefect/events{/privacy}", "received_events_url": "https://api.github.com/users/zerodefect/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-07T12:57:30Z", "updated_at": "2017-12-14T17:17:58Z", "closed_at": "2017-12-14T17:17:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/823", "html_url": "https://github.com/nlohmann/json/pull/823", "diff_url": "https://github.com/nlohmann/json/pull/823.diff", "patch_url": "https://github.com/nlohmann/json/pull/823.patch"}, "body": "\r\nThis pull request aims to reduce compile time by the introduction of a header dedicated to providing forward declaration of nlohmann::json.\r\n\r\nOne of the great merits of the this library is that it is header only.  Unfortunately, that does also come with some disadvantages, namely the compile times are often higher with such code dependencies.\r\n\r\nThis pull request introduces a 'json_forward.hpp' header file (similar to how Boost offer forward header files) in an attempt to try reduce build times.  \r\n\r\nThings to note (and some of these come down to personal preference):\r\n- json.hpp includes json_forward.hpp to minimise code replication\r\n- json.hpp includes some of same std library headers as json_forward.hpp (technically these could be removed) but with #include guards, I don't feel this is much of an issue. Discuss.\r\n\r\nPoints to consider:\r\n- Code change is small.\r\n- It reduces build times (at least what I've seen).\r\n\r\nSo I tried integrating these code changes with my own project and ran a comparison test.\r\n\r\nBuild time without forward declaration header:\r\n> real\t10m7.981s\r\n> user\t36m40.768s\r\n> sys\t2m1.432s\r\n\r\n\r\nBuild time making extensive use of forward declaration header (where possible):\r\n> real\t9m21.282s\r\n> user\t33m53.744s\r\n> sys\t1m52.880s\r\n\r\nPlease note that this test was _not_ wholly scientific. I imagine mileage will vary across environments/compilers and the level of use of this library in the said project.\r\n\r\n\r\nTested with cmake and gcc 6.3 running on Ubuntu's 17.04 (Zesty).\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/822", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/822/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/822/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/822/events", "html_url": "https://github.com/nlohmann/json/pull/822", "id": 271546003, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUwOTA0NTM2", "number": 822, "title": "Fix Compile warning in Visual Studio", "user": {"login": "AraHaan", "id": 15173749, "node_id": "MDQ6VXNlcjE1MTczNzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/15173749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AraHaan", "html_url": "https://github.com/AraHaan", "followers_url": "https://api.github.com/users/AraHaan/followers", "following_url": "https://api.github.com/users/AraHaan/following{/other_user}", "gists_url": "https://api.github.com/users/AraHaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AraHaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AraHaan/subscriptions", "organizations_url": "https://api.github.com/users/AraHaan/orgs", "repos_url": "https://api.github.com/users/AraHaan/repos", "events_url": "https://api.github.com/users/AraHaan/events{/privacy}", "received_events_url": "https://api.github.com/users/AraHaan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-06T16:55:28Z", "updated_at": "2017-11-07T01:21:01Z", "closed_at": "2017-11-06T20:58:24Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/822", "html_url": "https://github.com/nlohmann/json/pull/822", "diff_url": "https://github.com/nlohmann/json/pull/822.diff", "patch_url": "https://github.com/nlohmann/json/pull/822.patch"}, "body": "In issue #821 I found that on the latest (since version 2.0.7) there are now min and max warnings. This PR now removes those warnings on the source and hopefully should work on all platforms without degrading anything. This only disables the min and max macros if defined.\r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\n- [x]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [x]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [x]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src).\r\n\r\n## Please don't\r\n\r\n- The C++11 support varies between different **compilers** and versions. Please note the [list of supported compilers](https://github.com/nlohmann/json/blob/master/README.md#supported-compilers). Some compilers like GCC 4.8 (and earlier), Clang 3.3 (and earlier), or Microsoft Visual Studio 13.0 and earlier are known not to work due to missing or incomplete C++11 support. Please refrain from proposing changes that work around these compiler's limitations with `#ifdef`s or other means.\r\n- Specifically, I am aware of compilation problems with **Microsoft Visual Studio** (there even is an [issue label](https://github.com/nlohmann/json/issues?utf8=\u2713&q=label%3A%22visual+studio%22+) for these kind of bugs). I understand that even in 2016, complete C++11 support isn't there yet. But please also understand that I do not want to drop features or uglify the code just to make Microsoft's sub-standard compiler happy. The past has shown that there are ways to express the functionality such that the code compiles with the most recent MSVC - unfortunately, this is not the main objective of the project.\r\n- Please refrain from proposing changes that would **break [JSON](http://json.org) conformance**. If you propose a conformant extension of JSON to be supported by the library, please motivate this extension.\r\n- Please do not open pull requests that address **multiple issues**.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/821", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/821/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/821/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/821/events", "html_url": "https://github.com/nlohmann/json/issues/821", "id": 271535636, "node_id": "MDU6SXNzdWUyNzE1MzU2MzY=", "number": 821, "title": "Code Checking Warnings from json.hpp on VS2017 Community", "user": {"login": "AraHaan", "id": 15173749, "node_id": "MDQ6VXNlcjE1MTczNzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/15173749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AraHaan", "html_url": "https://github.com/AraHaan", "followers_url": "https://api.github.com/users/AraHaan/followers", "following_url": "https://api.github.com/users/AraHaan/following{/other_user}", "gists_url": "https://api.github.com/users/AraHaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AraHaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AraHaan/subscriptions", "organizations_url": "https://api.github.com/users/AraHaan/orgs", "repos_url": "https://api.github.com/users/AraHaan/repos", "events_url": "https://api.github.com/users/AraHaan/events{/privacy}", "received_events_url": "https://api.github.com/users/AraHaan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-11-06T16:26:27Z", "updated_at": "2017-12-13T05:28:10Z", "closed_at": "2017-12-13T05:28:10Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nA lot of warnings from code checking in Visual Studio 2017.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\nNo annoying warnigns from json.hpp\r\n\r\n- And what is the actual behavior instead?\r\nWarnings right after another on json.hpp.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nThe latest Visual Studio 2017 Community compiler.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nRelease I think of version 2.0.7\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nHere are the warnings that are emmited on json.hpp when including and using it:\r\n```\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(10768): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(2204): warning C26409: Avoid calling new and delete explicitly, use std::make_unique<T> instead. (r.11 http://go.microsoft.com/fwlink/?linkid=845485)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(2223): warning C26424: Failing to delete or assign ownership of allocation at line 2204.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6883): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6877): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6846): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6840): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6398): warning C26499: Could not find any lifetime tracking information for '*return of ->'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6400): warning C26499: Could not find any lifetime tracking information for '*return of ->'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(843): warning C26495: Variable 'nlohmann::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool,__int64,unsigned __int64,double,std::allocator>::json_value::object' is uninitialized. Always initialize a member variable. (type.6: http://go.microsoft.com/fwlink/p/?LinkID=620422)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6326): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6327): warning C26412: Do not dereference a invalid pointer (lifetimes rule 1). '<range>$L1' was invalidated by 'end of scope for allotemp.2, allotemp.3'.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(5938): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(785): warning C26412: Do not dereference a invalid pointer (lifetimes rule 1). 'return of create' was invalidated by 'end of scope for allotemp.2'.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9167): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7614): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9065): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9074): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9055): warning C26494: Variable 'max' is uninitialized. Always initialize an object. (type.5: http://go.microsoft.com/fwlink/p/?LinkID=620421)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9058): warning C26494: Variable 'type' is uninitialized. Always initialize an object. (type.5: http://go.microsoft.com/fwlink/p/?LinkID=620421)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8862): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8862): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8868): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8918): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8925): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8925): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8925): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8931): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8935): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8947): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8862): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8957): warning C26412: Do not dereference an invalid pointer (lifetimes rule 1). 'i' was invalidated at line 8862 by 'no initialization'.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8918): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8931): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8793): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7842): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7966): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7972): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7953): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7981): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8140): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8208): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8214): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8463): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8577): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8631): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8672): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8309): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8341): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8357): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8373): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8389): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8325): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8293): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8133): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8000): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8006): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8022): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8048): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8054): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8405): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8499): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8416): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8530): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8540): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8079): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8085): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8091): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8098): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8442): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8556): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8612): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8666): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8106): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8449): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8563): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8619): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8114): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8456): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8570): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8625): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8121): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8127): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7959): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7841): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7971): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7981): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8219): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8468): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8582): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8636): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8677): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8314): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8346): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8362): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8378): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8394): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8330): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8298): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8138): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8022): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8053): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8504): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8545): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8098): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8106): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8114): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7800): warning C26494: Variable 'yych' is uninitialized. Always initialize an object. (type.5: http://go.microsoft.com/fwlink/p/?LinkID=620421)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9001): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8758): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8784): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8785): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8786): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8754): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8781): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9182): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\n```\r\n\r\nFor some reason it looks like in a few places it does not like the use of ``reinterpret_cast`` even when things like ``const_cast``, ``static_cast``, or ``dynamic_cast`` does not compile or fails.\r\n\r\nNot sure if a newer version has the warnings fixed or not so made this issue in case they have not been addressed (or suppressed).\r\n\r\nEdit: After updating to latest release the warnings increased as well as these while processing my code that includes this before the Code Check:\r\n\r\n```\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6683): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6689): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6695): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6701): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6715): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6715): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6721): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6721): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6727): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6727): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6733): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6733): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6750): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6756): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6762): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6768): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6925): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6931): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6937): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6959): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6965): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6971): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(7184): warning C4003: not enough actual parameters for macro 'max'\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/820", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/820/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/820/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/820/events", "html_url": "https://github.com/nlohmann/json/issues/820", "id": 271316284, "node_id": "MDU6SXNzdWUyNzEzMTYyODQ=", "number": 820, "title": "Missing iostream in try online", "user": {"login": "alexNeto", "id": 13910110, "node_id": "MDQ6VXNlcjEzOTEwMTEw", "avatar_url": "https://avatars2.githubusercontent.com/u/13910110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexNeto", "html_url": "https://github.com/alexNeto", "followers_url": "https://api.github.com/users/alexNeto/followers", "following_url": "https://api.github.com/users/alexNeto/following{/other_user}", "gists_url": "https://api.github.com/users/alexNeto/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexNeto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexNeto/subscriptions", "organizations_url": "https://api.github.com/users/alexNeto/orgs", "repos_url": "https://api.github.com/users/alexNeto/repos", "events_url": "https://api.github.com/users/alexNeto/events{/privacy}", "received_events_url": "https://api.github.com/users/alexNeto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 1, "created_at": "2017-11-05T21:34:29Z", "updated_at": "2017-11-06T19:35:45Z", "closed_at": "2017-11-06T19:35:14Z", "author_association": "NONE", "body": "In the try online, the `#include <iostream>` is missing so they give a error when try to run\r\n\r\n```\r\nprog.cc:35:5: error: 'cout' is not a member of 'std'\r\n     std::cout << std::setw(4) << j << '\\n';\r\n     ^\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/819", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/819/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/819/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/819/events", "html_url": "https://github.com/nlohmann/json/pull/819", "id": 271308523, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUwNzM5MDQ3", "number": 819, "title": "Adds get_to", "user": {"login": "arcanis", "id": 1037931, "node_id": "MDQ6VXNlcjEwMzc5MzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1037931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcanis", "html_url": "https://github.com/arcanis", "followers_url": "https://api.github.com/users/arcanis/followers", "following_url": "https://api.github.com/users/arcanis/following{/other_user}", "gists_url": "https://api.github.com/users/arcanis/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcanis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcanis/subscriptions", "organizations_url": "https://api.github.com/users/arcanis/orgs", "repos_url": "https://api.github.com/users/arcanis/repos", "events_url": "https://api.github.com/users/arcanis/events{/privacy}", "received_events_url": "https://api.github.com/users/arcanis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-11-05T19:54:20Z", "updated_at": "2018-01-09T01:24:10Z", "closed_at": "2018-01-09T01:24:10Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/819", "html_url": "https://github.com/nlohmann/json/pull/819", "diff_url": "https://github.com/nlohmann/json/pull/819.diff", "patch_url": "https://github.com/nlohmann/json/pull/819.patch"}, "body": "This PR adds a `get_to` method that does exactly the same thing as `get`, except that it doesn't create a new value to store the final result (it takes a reference instead).\r\n\r\nIt's a convenience function that can be easily implemented in userland (which is also true for `get`), but I felt like it was simple and useful enough to be added into the core.\r\n\r\nA few things have to be fixed before this PR can be merged, I plan to work on them if this API is accepted:\r\n\r\n  - [ ] Fixes the documentation\r\n  - [ ] Adds tests\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/818", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/818/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/818/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/818/events", "html_url": "https://github.com/nlohmann/json/issues/818", "id": 271244739, "node_id": "MDU6SXNzdWUyNzEyNDQ3Mzk=", "number": 818, "title": "Floating point value loses decimal point during dump", "user": {"login": "kishorenc", "id": 782073, "node_id": "MDQ6VXNlcjc4MjA3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/782073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kishorenc", "html_url": "https://github.com/kishorenc", "followers_url": "https://api.github.com/users/kishorenc/followers", "following_url": "https://api.github.com/users/kishorenc/following{/other_user}", "gists_url": "https://api.github.com/users/kishorenc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kishorenc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kishorenc/subscriptions", "organizations_url": "https://api.github.com/users/kishorenc/orgs", "repos_url": "https://api.github.com/users/kishorenc/repos", "events_url": "https://api.github.com/users/kishorenc/events{/privacy}", "received_events_url": "https://api.github.com/users/kishorenc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-05T03:13:50Z", "updated_at": "2017-11-05T03:17:42Z", "closed_at": "2017-11-05T03:17:42Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\nLet's say I've a floating point value \"4.0\". When it's dumped to disk using `.dump()` it's being written as just \"4\". So, the type of the value goes from `float` to `int` when I read the data back using `parse()`.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n```cpp\r\nstd::string json_str = \"{\\\"average_rating\\\": 4.0 }\";\r\nnlohmann::json document = nlohmann::json::parse(json_str);\r\nstd::cout << \"Float? \" << document[\"average_rating\"].is_number_float() << std::endl;\r\nstd::string json_serialized = document.dump();\r\nstd::cout << \"json_serialized: \" << json_serialized << std::endl;\r\ndocument = nlohmann::json::parse(json_serialized);\r\nstd::cout << \"Float? \" << document[\"average_rating\"].is_number_float() << std::endl;\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nFloat? 1\r\njson_serialized: {\"average_rating\":4}\r\nFloat? 0\r\n```\r\n- What is the expected behavior?\r\n\r\nThe `.dump()` should not drop the trailing \".0\". \r\n\r\n- And what is the actual behavior instead?\r\n\r\nThe `.dump()` drops the trailing `.0`.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n`Apple LLVM version 7.3.0 (clang-703.0.31)`\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nRelease version."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/817", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/817/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/817/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/817/events", "html_url": "https://github.com/nlohmann/json/issues/817", "id": 271105436, "node_id": "MDU6SXNzdWUyNzExMDU0MzY=", "number": 817, "title": "Conan package for the library", "user": {"login": "ZaMaZaN4iK", "id": 7355383, "node_id": "MDQ6VXNlcjczNTUzODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7355383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZaMaZaN4iK", "html_url": "https://github.com/ZaMaZaN4iK", "followers_url": "https://api.github.com/users/ZaMaZaN4iK/followers", "following_url": "https://api.github.com/users/ZaMaZaN4iK/following{/other_user}", "gists_url": "https://api.github.com/users/ZaMaZaN4iK/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZaMaZaN4iK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZaMaZaN4iK/subscriptions", "organizations_url": "https://api.github.com/users/ZaMaZaN4iK/orgs", "repos_url": "https://api.github.com/users/ZaMaZaN4iK/repos", "events_url": "https://api.github.com/users/ZaMaZaN4iK/events{/privacy}", "received_events_url": "https://api.github.com/users/ZaMaZaN4iK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-03T20:12:21Z", "updated_at": "2017-11-04T11:54:01Z", "closed_at": "2017-11-04T11:54:01Z", "author_association": "NONE", "body": "Hello,\r\nDo you know about Conan package manager? Can you add Conan package for the library and maintain it? Here you can find example of my conan recipe for libpng: https://github.com/ZaMaZaN4iK/conan-libpng"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/816", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/816/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/816/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/816/events", "html_url": "https://github.com/nlohmann/json/issues/816", "id": 270850420, "node_id": "MDU6SXNzdWUyNzA4NTA0MjA=", "number": 816, "title": "Idea: Handle Multimaps Better", "user": {"login": "Exaeta", "id": 2097010, "node_id": "MDQ6VXNlcjIwOTcwMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2097010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Exaeta", "html_url": "https://github.com/Exaeta", "followers_url": "https://api.github.com/users/Exaeta/followers", "following_url": "https://api.github.com/users/Exaeta/following{/other_user}", "gists_url": "https://api.github.com/users/Exaeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/Exaeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Exaeta/subscriptions", "organizations_url": "https://api.github.com/users/Exaeta/orgs", "repos_url": "https://api.github.com/users/Exaeta/repos", "events_url": "https://api.github.com/users/Exaeta/events{/privacy}", "received_events_url": "https://api.github.com/users/Exaeta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-03T00:35:40Z", "updated_at": "2018-01-13T00:14:47Z", "closed_at": "2018-01-13T00:14:47Z", "author_association": "NONE", "body": "My understanding is that currently:\r\n\r\n```\r\nstd::multimap<std::string,  std::string> a = { {\"a\", \"1\"}, {\"a\", \"2\"}, {\"b\", \"3\"} };\r\n```\r\n\r\nMight map to:\r\n`{ \"a\": \"1\", \"b\": \"3\" }`\r\n\r\nBut this does not preserve equality of the conversion back and forth. Thus I suggest a different way to convert multi-maps:\r\n`{ \"a\": [\"1\", \"2\"], \"b\": [\"3\"] }`\r\nThis preserves equality."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/815", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/815/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/815/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/815/events", "html_url": "https://github.com/nlohmann/json/issues/815", "id": 270792033, "node_id": "MDU6SXNzdWUyNzA3OTIwMzM=", "number": 815, "title": "stream error ", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-11-02T20:13:10Z", "updated_at": "2018-07-10T12:35:53Z", "closed_at": "2017-11-07T19:23:55Z", "author_association": "NONE", "body": "I've been trying to implement this solution and I have been consistently getting the same stream error, regardless of the json file or example I use/follow. I know I'm probably doing something silly but I'm a lowly junior in my CS degree. Here is my code:\r\n\r\n```cpp\r\n#include \"json.hpp\"\r\n\r\n#include <fstream>\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main() {\r\n    std::ifstream ifs{\"file.json\"};\r\n    json parsed_json = json::parse(ifs);\r\n    return 0;\r\n}\r\n``` \r\n\r\nand here is the json I've been using:\r\n```js\r\n[\r\n  {\r\n    \"stringKey\": \"Nathen\",\r\n    \"intKey\": 236\r\n  },\r\n  {\r\n    \"stringKey\": \"Emerald\",\r\n    \"intKey\": 739\r\n  },\r\n  {\r\n    \"stringKey\": \"Franco\",\r\n    \"intKey\": 544\r\n  }\r\n]\r\n```\r\n\r\nand here is the error:\r\n`/home/bry/CLionProjects/jsonexample/cmake-build-debug/jsonexample\r\nterminate called after throwing an instance of 'std::invalid_argument'\r\n  what():  stream error\r\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT)`"}]