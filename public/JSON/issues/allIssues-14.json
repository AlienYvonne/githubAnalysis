[{"url": "https://api.github.com/repos/nlohmann/json/issues/784", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/784/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/784/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/784/events", "html_url": "https://github.com/nlohmann/json/issues/784", "id": 265648153, "node_id": "MDU6SXNzdWUyNjU2NDgxNTM=", "number": 784, "title": "warning C4706 - Visual Studio 2017 (/W4)", "user": {"login": "jseward", "id": 1309841, "node_id": "MDQ6VXNlcjEzMDk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1309841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseward", "html_url": "https://github.com/jseward", "followers_url": "https://api.github.com/users/jseward/followers", "following_url": "https://api.github.com/users/jseward/following{/other_user}", "gists_url": "https://api.github.com/users/jseward/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseward/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseward/subscriptions", "organizations_url": "https://api.github.com/users/jseward/orgs", "repos_url": "https://api.github.com/users/jseward/repos", "events_url": "https://api.github.com/users/jseward/events{/privacy}", "received_events_url": "https://api.github.com/users/jseward/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 2, "created_at": "2017-10-16T05:06:02Z", "updated_at": "2017-10-16T17:48:51Z", "closed_at": "2017-10-16T17:48:21Z", "author_association": "CONTRIBUTOR", "body": "```\r\njson.hpp(3037): warning C4706: assignment within conditional expression\r\njson.hpp(3133): warning C4706: assignment within conditional expression\r\n```\r\n\r\nIt looks like this was discussed and solved already for VS 2015 here : https://github.com/nlohmann/json/issues/295\r\n\r\nBut the issue remains on VS 2017"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/783", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/783/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/783/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/783/events", "html_url": "https://github.com/nlohmann/json/pull/783", "id": 265533949, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ2NjI3Mzk4", "number": 783, "title": "Set GENERATE_TAGFILE in Doxyfile", "user": {"login": "eld00d", "id": 22281318, "node_id": "MDQ6VXNlcjIyMjgxMzE4", "avatar_url": "https://avatars0.githubusercontent.com/u/22281318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eld00d", "html_url": "https://github.com/eld00d", "followers_url": "https://api.github.com/users/eld00d/followers", "following_url": "https://api.github.com/users/eld00d/following{/other_user}", "gists_url": "https://api.github.com/users/eld00d/gists{/gist_id}", "starred_url": "https://api.github.com/users/eld00d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eld00d/subscriptions", "organizations_url": "https://api.github.com/users/eld00d/orgs", "repos_url": "https://api.github.com/users/eld00d/repos", "events_url": "https://api.github.com/users/eld00d/events{/privacy}", "received_events_url": "https://api.github.com/users/eld00d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 4, "created_at": "2017-10-15T00:09:16Z", "updated_at": "2017-10-17T02:08:41Z", "closed_at": "2017-10-16T15:54:29Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/783", "html_url": "https://github.com/nlohmann/json/pull/783", "diff_url": "https://github.com/nlohmann/json/pull/783.diff", "patch_url": "https://github.com/nlohmann/json/pull/783.patch"}, "body": "Allows documentation to be linked from other projects to https://nlohmann.github.io/json using Doxygen with the tag:\r\nTAGFILES = $(SOME_PATH)/nlohmann_json.tag=https://nlohmann.github.io/json\r\n\r\nThis change does not affect code or compilation in any way."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/782", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/782/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/782/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/782/events", "html_url": "https://github.com/nlohmann/json/issues/782", "id": 265488925, "node_id": "MDU6SXNzdWUyNjU0ODg5MjU=", "number": 782, "title": "Compile error in clang 5.0", "user": {"login": "DronCode", "id": 32241726, "node_id": "MDQ6VXNlcjMyMjQxNzI2", "avatar_url": "https://avatars3.githubusercontent.com/u/32241726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DronCode", "html_url": "https://github.com/DronCode", "followers_url": "https://api.github.com/users/DronCode/followers", "following_url": "https://api.github.com/users/DronCode/following{/other_user}", "gists_url": "https://api.github.com/users/DronCode/gists{/gist_id}", "starred_url": "https://api.github.com/users/DronCode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DronCode/subscriptions", "organizations_url": "https://api.github.com/users/DronCode/orgs", "repos_url": "https://api.github.com/users/DronCode/repos", "events_url": "https://api.github.com/users/DronCode/events{/privacy}", "received_events_url": "https://api.github.com/users/DronCode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-14T12:46:04Z", "updated_at": "2017-10-14T16:50:24Z", "closed_at": "2017-10-14T16:50:24Z", "author_association": "NONE", "body": "Hi. \r\nIn clang 5.0 I have an compile error:\r\n\r\n```json.hpp:9830:66: error: no type named 'string_view' in namespace std' and not std::is_same<ValueType, typename std::string_view>::value```\r\n\r\nI've found **temporary** solution (paste it after includes):\r\n```\r\n#if ((defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_MSC_VER) && _MSC_VER >1900 && defined(_HAS_CXX17) && _HAS_CXX17 == 1)) && defined(__clang__)\r\n#include <experimental/string_view>\r\nnamespace std {\r\n    using string_view = std::experimental::string_view;\r\n}\r\n#endif\r\n```\r\nMay be already created another better solution?\r\nIt can be helpful for people like me, who wants to get C++17 in clang :)\r\n\r\nP.S. Sorry for my English :)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/781", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/781/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/781/events", "html_url": "https://github.com/nlohmann/json/issues/781", "id": 265415623, "node_id": "MDU6SXNzdWUyNjU0MTU2MjM=", "number": 781, "title": "Error Installing appium_lib with Ruby v2.4.2 Due to JSON", "user": {"login": "PatrickDuncan", "id": 6889074, "node_id": "MDQ6VXNlcjY4ODkwNzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6889074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatrickDuncan", "html_url": "https://github.com/PatrickDuncan", "followers_url": "https://api.github.com/users/PatrickDuncan/followers", "following_url": "https://api.github.com/users/PatrickDuncan/following{/other_user}", "gists_url": "https://api.github.com/users/PatrickDuncan/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatrickDuncan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatrickDuncan/subscriptions", "organizations_url": "https://api.github.com/users/PatrickDuncan/orgs", "repos_url": "https://api.github.com/users/PatrickDuncan/repos", "events_url": "https://api.github.com/users/PatrickDuncan/events{/privacy}", "received_events_url": "https://api.github.com/users/PatrickDuncan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-13T20:52:06Z", "updated_at": "2017-10-31T16:55:48Z", "closed_at": "2017-10-21T08:01:11Z", "author_association": "NONE", "body": "Hello we're trying to install appium_lib v9.6.1 (bundle install) with Ruby v2.4.2-2 and we're getting an error with json v2.1.0 (and 1.8.7):\r\n\r\n<pre>Gem::Ext::BuildError: ERROR: Failed to build gem native extension.\r\n\r\ncurrent directory:\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0/ext/json/ext/generator\r\nC:/Ruby24-x64/bin/ruby.exe -r ./siteconf20171006-3700-aias1v.rb extconf.rb\r\ncreating Makefile\r\n\r\ncurrent directory:\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0/ext/json/ext/generator\r\nmake \"DESTDIR=\" clean\r\n\r\ncurrent directory:\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0/ext/json/ext/generator\r\nmake \"DESTDIR=\"\r\ngenerating generator-x64-mingw32.def\r\ncompiling generator.c\r\nMakefile:241: recipe for target 'generator.o' failed\r\nprocess_begin: CreateProcess(NULL, x86_64-w64-mingw32-gcc -I.\r\n-IC:/Ruby24-x64/include/ruby-2.4.0/x64-mingw32\r\n-I/C/Ruby24-x64/include/ruby-2.4.0/ruby/backward\r\n-I/C/Ruby24-x64/include/ruby-2.4.0 -I. -DJSON_GENERATOR -D_FORTIFY_SOURCE=2\r\n-D__USE_MINGW_ANSI_STDIO=1 -DFD_SETSIZE=2048 -D_WIN32_WINNT=0x0501\r\n-D__MINGW_USE_VC2005_COMPAT -D_FILE_OFFSET_BITS=64 -march=x86-64 -mtune=generic\r\n-O2 -pipe -o generator.o -c generator.c, ...) failed.\r\nmake (e=2): The system cannot find the file specified.\r\n\r\nmake: *** [generator.o] Error 2\r\n\r\nmake failed, exit code 2\r\n\r\nGem files will remain installed in\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0 for inspection.\r\nResults logged to\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/extensions/x64-mingw32/2.4.0/json-2.1.0/gem_make.out\r\n\r\nAn error occurred while installing json (2.1.0), and Bundler cannot continue.\r\nMake sure that `gem install json -v '2.1.0'` succeeds before bundling.\r\n\r\nIn Gemfile:\r\n  appium_lib was resolved to 9.6.1, which depends on\r\n    json\r\n</pre>\r\n\r\nWe've followed https://github.com/bundler/bundler/issues/4462 to no avail.\r\n\r\nRight now we're using Ruby 2.3.3 and everything is running smoothly. I created https://github.com/bundler/bundler/issues/6083 before this ticket"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/780", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/780/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/780/events", "html_url": "https://github.com/nlohmann/json/issues/780", "id": 265271878, "node_id": "MDU6SXNzdWUyNjUyNzE4Nzg=", "number": 780, "title": "::get<int>() fails in new(er) release [MSVC]", "user": {"login": "sfinktah", "id": 4650770, "node_id": "MDQ6VXNlcjQ2NTA3NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4650770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfinktah", "html_url": "https://github.com/sfinktah", "followers_url": "https://api.github.com/users/sfinktah/followers", "following_url": "https://api.github.com/users/sfinktah/following{/other_user}", "gists_url": "https://api.github.com/users/sfinktah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfinktah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfinktah/subscriptions", "organizations_url": "https://api.github.com/users/sfinktah/orgs", "repos_url": "https://api.github.com/users/sfinktah/repos", "events_url": "https://api.github.com/users/sfinktah/events{/privacy}", "received_events_url": "https://api.github.com/users/sfinktah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-10-13T12:27:34Z", "updated_at": "2018-03-28T08:32:00Z", "closed_at": "2017-11-04T18:54:05Z", "author_association": "NONE", "body": "Compiler: MSVC 15.1 (2017) with VS2015 libraries etc.\r\n\r\nWas working with: c42273d (2.1.1)\r\n```cpp\r\n    hsv_t(const json &values)\r\n        : hsv_t( \r\n            wrap360( values[0].get<int>()),\r\n            clamp100(values[1].get<int>()),\r\n            clamp100(values[2].get<int>()),\r\n            clamp100(values[3].get<int>())){}\r\n```\r\nFails with: d300a8e (2.1.1) latest dev\r\n```cpp\r\nReplaced with:\r\n    hsv_t(const json &values)\r\n        : hsv_t( \r\n            wrap360( static_cast<int>(values[0])),\r\n            clamp100(static_cast<int>(values[1])),\r\n            clamp100(static_cast<int>(values[2])),\r\n            clamp100(static_cast<int>(values[3]))){}\r\n```\r\nBut error just moved to json.hpp +9836\r\n```cpp\r\n    template < typename ValueType, typename std::enable_if <\r\n                   not std::is_pointer<ValueType>::value and\r\n                   not std::is_same<ValueType, detail::json_ref<basic_json>>::value and\r\n                   not std::is_same<ValueType, typename string_t::value_type>::value\r\n#ifndef _MSC_VER  // fix for issue #167 operator<< ambiguity under VS2015\r\n                   and not std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>::value\r\n#endif\r\n#if (defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_MSC_VER) && _MSC_VER >1900 && defined(_HAS_CXX17) && _HAS_CXX17 == 1) // fix for issue #464\r\n                   and not std::is_same<ValueType, typename std::string_view>::value\r\n#endif\r\n                   , int >::type = 0 >\r\n    operator ValueType() const\r\n    {\r\n        // delegate the call to get<>() const\r\n        return get<ValueType>();\r\n    }\r\n```\r\n\r\n```\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2672: 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get': no matching overloaded function found\r\n1>e:\\git\\infamous-dll\\src\\Update/Types.h(333): note: see reference to function template instantiation 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::operator ValueType(void) const<float,0>' being compiled\r\n1>        with\r\n1>        [\r\n1>            ValueType=float\r\n1>        ]\r\n1>e:\\git\\infamous-dll\\src\\Update/Types.h(333): note: see reference to function template instantiation 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::operator ValueType(void) const<float,0>' being compiled\r\n1>        with\r\n1>        [\r\n1>            ValueType=float\r\n1>        ]\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'const PointerType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) noexcept const': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9663): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'PointerType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) noexcept': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9651): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'ValueType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) noexcept(<expr>) const': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9614): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer> nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) const': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9509): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/779", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/779/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/779/events", "html_url": "https://github.com/nlohmann/json/issues/779", "id": 265071802, "node_id": "MDU6SXNzdWUyNjUwNzE4MDI=", "number": 779, "title": "Type Conversion", "user": {"login": "ccge", "id": 27977484, "node_id": "MDQ6VXNlcjI3OTc3NDg0", "avatar_url": "https://avatars0.githubusercontent.com/u/27977484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccge", "html_url": "https://github.com/ccge", "followers_url": "https://api.github.com/users/ccge/followers", "following_url": "https://api.github.com/users/ccge/following{/other_user}", "gists_url": "https://api.github.com/users/ccge/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccge/subscriptions", "organizations_url": "https://api.github.com/users/ccge/orgs", "repos_url": "https://api.github.com/users/ccge/repos", "events_url": "https://api.github.com/users/ccge/events{/privacy}", "received_events_url": "https://api.github.com/users/ccge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-12T20:16:43Z", "updated_at": "2017-10-21T08:01:42Z", "closed_at": "2017-10-21T08:01:32Z", "author_association": "NONE", "body": "Is there a way to convert a string value to a number value or vice versa?\r\n\r\nFor example:\r\n```\r\n{\r\n    \"number\": \"9\"\r\n}\r\n```\r\nI figured this word work, but it doesn't:\r\n`j.at( \"number\" ).get<int>();`\r\n\r\nDo I just have to grab it as a string and convert myself, or is there a better way?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/778", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/778/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/778/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/778/events", "html_url": "https://github.com/nlohmann/json/issues/778", "id": 264668279, "node_id": "MDU6SXNzdWUyNjQ2NjgyNzk=", "number": 778, "title": "Segfault on nested parsing", "user": {"login": "quicknir", "id": 10457096, "node_id": "MDQ6VXNlcjEwNDU3MDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quicknir", "html_url": "https://github.com/quicknir", "followers_url": "https://api.github.com/users/quicknir/followers", "following_url": "https://api.github.com/users/quicknir/following{/other_user}", "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}", "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions", "organizations_url": "https://api.github.com/users/quicknir/orgs", "repos_url": "https://api.github.com/users/quicknir/repos", "events_url": "https://api.github.com/users/quicknir/events{/privacy}", "received_events_url": "https://api.github.com/users/quicknir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2017-10-11T17:18:34Z", "updated_at": "2017-10-12T03:08:23Z", "closed_at": "2017-10-12T02:29:40Z", "author_association": "NONE", "body": "It's a bit difficult to provide a full repro here as it would mean tearing out a bunch of code, but the gist of the bug is as follows:\r\n\r\n```\r\nstruct Foo { int x; bool y};\r\n// define from_json; use f.x = j.at(\"x\").get<int>(), etc\r\n    auto j = json::parse(R\"(\r\n              { \"m\": {\"one\": {\"x\": 1},\r\n                      \"two\": {\"x\": 2, \"y\": false }},\r\n                \"s\": \"arg\"}\r\n             )\");\r\nstd::unordered_map<std::string, Foo> m = j.at(\"m\");\r\n```\r\n\r\nThe last line should throw IMHO, but in fact it segfaults. I think I'm on version 2.1.1."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/777", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/777/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/777/events", "html_url": "https://github.com/nlohmann/json/issues/777", "id": 264665359, "node_id": "MDU6SXNzdWUyNjQ2NjUzNTk=", "number": 777, "title": "Floating point rounding", "user": {"login": "quicknir", "id": 10457096, "node_id": "MDQ6VXNlcjEwNDU3MDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quicknir", "html_url": "https://github.com/quicknir", "followers_url": "https://api.github.com/users/quicknir/followers", "following_url": "https://api.github.com/users/quicknir/following{/other_user}", "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}", "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions", "organizations_url": "https://api.github.com/users/quicknir/orgs", "repos_url": "https://api.github.com/users/quicknir/repos", "events_url": "https://api.github.com/users/quicknir/events{/privacy}", "received_events_url": "https://api.github.com/users/quicknir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-10-11T17:08:10Z", "updated_at": "2018-01-21T15:00:08Z", "closed_at": "2018-01-21T15:00:08Z", "author_association": "NONE", "body": "I'll preface this by saying I know there's been some discussion about this already, and by saying that my version is not the latest, so this may already be fixed. Right now, you can do:\r\n\r\n```\r\nauto j = json::parse(R\"({\"x\":1.5})\");\r\nint x = j.at(\"x\");\r\n```\r\n\r\nWith no complaint. Is this intentional? I thought that json checks to see if precision is lost before converting to an integer."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/776", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/776/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/776/events", "html_url": "https://github.com/nlohmann/json/issues/776", "id": 264128155, "node_id": "MDU6SXNzdWUyNjQxMjgxNTU=", "number": 776, "title": "Build warnings: shadowing exception id", "user": {"login": "pvleuven", "id": 32666541, "node_id": "MDQ6VXNlcjMyNjY2NTQx", "avatar_url": "https://avatars2.githubusercontent.com/u/32666541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvleuven", "html_url": "https://github.com/pvleuven", "followers_url": "https://api.github.com/users/pvleuven/followers", "following_url": "https://api.github.com/users/pvleuven/following{/other_user}", "gists_url": "https://api.github.com/users/pvleuven/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvleuven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvleuven/subscriptions", "organizations_url": "https://api.github.com/users/pvleuven/orgs", "repos_url": "https://api.github.com/users/pvleuven/repos", "events_url": "https://api.github.com/users/pvleuven/events{/privacy}", "received_events_url": "https://api.github.com/users/pvleuven/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 706237888, "node_id": "MDU6TGFiZWw3MDYyMzc4ODg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20icc", "name": "platform: icc", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-10T07:43:57Z", "updated_at": "2018-03-03T16:35:50Z", "closed_at": "2017-10-17T18:43:40Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI get a bunch of build warnings (see below) that inform on hiding the exception member 'id'. To me it seems the member is not needed as the id is always passed through the calling functions. Looks like a potential source of trouble to me.\r\n\r\nBest regards,\r\n\r\nPeter\r\n\r\nwarnings: \r\n In file included from .*******: ********json/json.hpp(209): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static std::string name(const std::string& ename, int id)\r\n                                                            ^\r\n ********json/json.hpp(273): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static parse_error create(int id, std::size_t byte_, const std::string& what_arg)\r\n                                    ^\r\n ********json/json.hpp(337): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static invalid_iterator create(int id, const std::string& what_arg)\r\n                                         ^\r\n ********json/json.hpp(388): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static type_error create(int id, const std::string& what_arg)\r\n                                   ^\r\n ********json/json.hpp(431): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static out_of_range create(int id, const std::string& what_arg)\r\n                                     ^\r\n ********json/json.hpp(469): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static other_error create(int id, const std::string& what_arg)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/775", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/775/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/775/events", "html_url": "https://github.com/nlohmann/json/issues/775", "id": 264063002, "node_id": "MDU6SXNzdWUyNjQwNjMwMDI=", "number": 775, "title": "multi-level JSON support.", "user": {"login": "horntones", "id": 25620278, "node_id": "MDQ6VXNlcjI1NjIwMjc4", "avatar_url": "https://avatars0.githubusercontent.com/u/25620278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/horntones", "html_url": "https://github.com/horntones", "followers_url": "https://api.github.com/users/horntones/followers", "following_url": "https://api.github.com/users/horntones/following{/other_user}", "gists_url": "https://api.github.com/users/horntones/gists{/gist_id}", "starred_url": "https://api.github.com/users/horntones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/horntones/subscriptions", "organizations_url": "https://api.github.com/users/horntones/orgs", "repos_url": "https://api.github.com/users/horntones/repos", "events_url": "https://api.github.com/users/horntones/events{/privacy}", "received_events_url": "https://api.github.com/users/horntones/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-10T00:25:34Z", "updated_at": "2017-10-10T19:50:39Z", "closed_at": "2017-10-10T19:50:39Z", "author_association": "NONE", "body": "Hi,\r\nI'm using json.hpp in an attempt to create a jason object from a json string.  It appears that it only supports single hierarchy json.  for example, I'm trying to parse the following:\r\n\r\nstd::string myString = \"{ \\\"Meta Data\\\": { \\\"1. Information\\\": \\\"Intraday (1min) prices and volumes\\\", \\\"2. Symbol\\\" : \\\"MSFT\\\"}, \\\"Time Series (1min)\\\":{\\\"2017-10-09 16:00:00\\\": {\\\"1. open\\\": \\\"76.3300\\\",\\\"2. high\\\" : \\\"76.3400\\\",\\\"3. low\\\" : \\\"76.2900\\\"},\\\"2017-10-09 15:59:00\\\": {\\\"1. open\\\": \\\"76.3200\\\",\\\"2. high\\\" : \\\"76.3350\\\"} }}\";\r\n\r\njson j = json::parse(myString);\r\n\r\nwhen I print the json, I only get the top keys parsed:\r\nMeta Data : {\"1. Information\":\"Intraday (1min) prices and volumes\",\"2. Symbol\":\"MSFT\"}\r\nTime Series (1min) : {\"2017-10-09 15:59:00\":{\"1. open\":\"76.3200\",\"2. high\":\"76.3\r\n350\"},\"2017-10-09 16:00:00\":{\"1. open\":\"76.3300\",\"2. high\":\"76.3400\",\"3. low\":\"7\r\n6.2900\"}}\r\n\r\nAny advise?\r\nthanks!\r\nMike\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/774", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/774/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/774/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/774/events", "html_url": "https://github.com/nlohmann/json/issues/774", "id": 263704838, "node_id": "MDU6SXNzdWUyNjM3MDQ4Mzg=", "number": 774, "title": "Another idea about type support", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2017-10-08T09:23:58Z", "updated_at": "2018-01-18T00:27:08Z", "closed_at": "2017-12-28T20:57:22Z", "author_association": "OWNER", "body": "# The problem\r\n\r\nThe library currently offers some template arguments to configure the types used for numbers, strings, booleans, objects, and arrays. However, this type support is very limited, and even simple things like using `std::unordered_map` for objects or an `std::vector` with a user-defined allocator for arrays do not work. Even worse, there are tons of `std::string` usages in the code even though we actually have a type `basic_json::string_t` which is a typedef for the passed string type (see #766).\r\n\r\nWith issue #456 came the idea to replace the long template parameter list with a policy class. I like the idea, but I am afraid that this change does not improve things much with respect to the mentioned problems.\r\n\r\n# Another solution\r\n\r\nOne possible solution for a true type configuration could be the following: we define interfaces for each type that must be implemented by concrete implementations to be used in the `basic_json` class which would be refactored to only rely on this interface.\r\n\r\nFor instance, we could have a class hierarchy\r\n\r\n```cpp\r\nclass abstract_value\r\n{\r\npublic:\r\n    virtual ~abstract_value() = 0;\r\n\r\n    virtual bool empty() const noexcept = 0;\r\n    virtual size_type size() const noexcept = 0;\r\n    virtual size_type max_size() const noexcept = 0;\r\n    virtual void clear() noexcept = 0;\r\n    \r\n    virtual bool is_primitive() const noexcept = 0;\r\n    virtual bool is_structured() const noexcept = 0;\r\n    virtual const char* name() const noexcept = 0;\r\n    virtual value_t type() const noexcept = 0;\r\n    \r\n    ...\r\n};\r\n```\r\n\r\n```cpp\r\nclass abstract_primitive_value : public abstract_value\r\n{\r\npublic:\r\n    bool empty() const noexcept override { return false; }\r\n    size_type size() const noexcept override { return 1; }\r\n    size_type max_size() const noexcept override { return 1; }\r\n    \r\n    bool is_primitive() const noexcept override { return true; };\r\n    bool is_structured() const noexcept override { return false; };\r\n    \r\n    ...\r\n};\r\n```\r\n\r\n```cpp\r\nclass abstract_boolean_value : public abstract_primitive_value\r\n{\r\npublic:\r\n    const char* name() const noexcept override { return \"boolean\"; }\r\n    value_t type() const noexcept override { return value_t::boolean; }\r\n    \r\n    ...\r\n};\r\n```\r\n\r\nand finally\r\n\r\n```cpp\r\nclass boolean_value_imp : public abstract_boolean_value\r\n{\r\npublic:\r\n    boolean_value_imp() = default;\r\n    boolean_value_imp(const bool v) : m_value(v) {}\r\n    \r\n    void clear() noexcept override\r\n    {\r\n        m_value = false;\r\n    }\r\n    \r\n    ...\r\n    \r\nprivate:\r\n    bool m_value = false;\r\n};\r\n```\r\n\r\nto implement the Boolean value.\r\n\r\nWe could then have a traits class like\r\n\r\n```cpp\r\nstruct default_value_traits {\r\n    using null_value = null_value_imp;\r\n    using boolean_value = boolean_value_imp;\r\n    using string_value = string_value_imp;\r\n    using array_value = array_value_imp;\r\n    using object_value = object_value_imp;\r\n    ...\r\n};\r\n```\r\n\r\nand finally a value like\r\n\r\n```cpp\r\ntemplate<typename traits = default_value_traits>\r\nunion json_value\r\n{\r\n    using null_value = typename traits::null_value;\r\n    using boolean_value = typename traits::boolean_value;\r\n    using string_value = typename traits::string_value;\r\n    using array_value = typename traits::array_value;\r\n    using object_value = typename traits::object_value;\r\n\r\n    null_value *null;\r\n    boolean_value *boolean;\r\n    string_value *string;\r\n    array_value *array;\r\n    object_value *object;\r\n    \r\n    ...\r\n}\r\n```\r\n\r\nWe would provide the default implementations wrapping `bool`, `int64_t`, `uint64_t`, `std::string`, `std::vector`, and `std::map` as `default_value_traits`. If someone likes a different type, one just needs to implement the respective interface, add the implementation to a different traits class and pass it to `json_value`.\r\n\r\n## My questions\r\n\r\n1. What do you think about this approach?\r\n\r\n2. What types should we make configurable. I currently think of\r\n\t- null\r\n\t- boolean\r\n\t- number (integer)\r\n\t- number (unsigned integer)\r\n\t- number (floating-point)\r\n\t- string\r\n\t- object\r\n\t- array\r\n\r\n3. Should the keys of objects be of the same string type? What about strings used during serialization?\r\n\t\r\n4. What kind of constructors should we require? I sketched that Booleans should be constructible from `bool`. But what else? Should we require strings to be constructible from `const char*`? Or also `std::string`?\r\n5. How much overhead do we need to pay with this approach?\r\n6. How much behavior should we require? For instance, should a type bring its own `dump()` function? Should a number type bring its `from_string(const char*)` function for parsing?\r\n\r\nThis is a rough idea right now, but I would really appreciate feedback. I know there is a lot of work to be done, but I really want to get rid of all the limitations I described above."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/773", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/773/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/773/events", "html_url": "https://github.com/nlohmann/json/issues/773", "id": 263652132, "node_id": "MDU6SXNzdWUyNjM2NTIxMzI=", "number": 773, "title": "SIGABRT on dump()", "user": {"login": "cronnosli", "id": 10584435, "node_id": "MDQ6VXNlcjEwNTg0NDM1", "avatar_url": "https://avatars0.githubusercontent.com/u/10584435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cronnosli", "html_url": "https://github.com/cronnosli", "followers_url": "https://api.github.com/users/cronnosli/followers", "following_url": "https://api.github.com/users/cronnosli/following{/other_user}", "gists_url": "https://api.github.com/users/cronnosli/gists{/gist_id}", "starred_url": "https://api.github.com/users/cronnosli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cronnosli/subscriptions", "organizations_url": "https://api.github.com/users/cronnosli/orgs", "repos_url": "https://api.github.com/users/cronnosli/repos", "events_url": "https://api.github.com/users/cronnosli/events{/privacy}", "received_events_url": "https://api.github.com/users/cronnosli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 729086061, "node_id": "MDU6TGFiZWw3MjkwODYwNjE=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20arm", "name": "platform: arm", "color": "eb6420", "default": false}, {"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-10-07T16:09:09Z", "updated_at": "2017-10-24T06:22:47Z", "closed_at": "2017-10-13T06:48:49Z", "author_association": "NONE", "body": "/usr/local/include/nlohmann/json.hpp:6190: void nlohmann::detail::serializer<BasicJsonType>::dump(const BasicJsonType&, bool, bool, unsigned int, unsigned int) [with BasicJsonType = nlohmann::basic_json<>]: Assertion `std::next(i) == val.m_value.object->cend()' failed.\r\n\r\nThread 1 \"pk052\" received signal SIGABRT, Aborted"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/772", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/772/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/772/events", "html_url": "https://github.com/nlohmann/json/issues/772", "id": 263611410, "node_id": "MDU6SXNzdWUyNjM2MTE0MTA=", "number": 772, "title": "[Question] Custom StringType template parameter (possibility for a KeyType template parameter)", "user": {"login": "kyleoshaughnessy", "id": 5834110, "node_id": "MDQ6VXNlcjU4MzQxMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5834110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyleoshaughnessy", "html_url": "https://github.com/kyleoshaughnessy", "followers_url": "https://api.github.com/users/kyleoshaughnessy/followers", "following_url": "https://api.github.com/users/kyleoshaughnessy/following{/other_user}", "gists_url": "https://api.github.com/users/kyleoshaughnessy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyleoshaughnessy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyleoshaughnessy/subscriptions", "organizations_url": "https://api.github.com/users/kyleoshaughnessy/orgs", "repos_url": "https://api.github.com/users/kyleoshaughnessy/repos", "events_url": "https://api.github.com/users/kyleoshaughnessy/events{/privacy}", "received_events_url": "https://api.github.com/users/kyleoshaughnessy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-07T02:46:04Z", "updated_at": "2017-10-07T08:27:11Z", "closed_at": "2017-10-07T08:27:11Z", "author_association": "NONE", "body": "I've been using this library quite a bit but am encountering one minor issue when using the dump() routine. I understand that the default std::map<StringType, basic_json> ordering used for iteratiors is lexicographical and that this is the ordering used for output in dump(). This is a direct result of std::less<StringType> being used for the comparison functor as part of the ObjectType template parameter list.\r\n\r\nIdeally, it would be nice to have a KeyType template parameter which complies with the default constructor for StringType but otherwise only needs to implement the operator<() as required for std::map. \r\n\r\nIdeally i'd like my \"KeyType\" just to be as follows:\r\nstruct OrderedKey\r\n{\r\n    std::string keyName;\r\n    unsigned int keyOrder;\r\n};\r\n\r\ncomparison and \"toString\" operators would be defined for this custom key as well. \r\n\r\nMy question: Is it possible that this could be a feature in the foreseeable future? Or am I over thinking this? Essentially i just want to be able to define the order in which my keys are printed in dump() without rewriting the dump command. \r\n\r\nThanks."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/771", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/771/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/771/events", "html_url": "https://github.com/nlohmann/json/issues/771", "id": 263558138, "node_id": "MDU6SXNzdWUyNjM1NTgxMzg=", "number": 771, "title": "constexpr ALL the Things!", "user": {"login": "effolkronium", "id": 15274763, "node_id": "MDQ6VXNlcjE1Mjc0NzYz", "avatar_url": "https://avatars0.githubusercontent.com/u/15274763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/effolkronium", "html_url": "https://github.com/effolkronium", "followers_url": "https://api.github.com/users/effolkronium/followers", "following_url": "https://api.github.com/users/effolkronium/following{/other_user}", "gists_url": "https://api.github.com/users/effolkronium/gists{/gist_id}", "starred_url": "https://api.github.com/users/effolkronium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/effolkronium/subscriptions", "organizations_url": "https://api.github.com/users/effolkronium/orgs", "repos_url": "https://api.github.com/users/effolkronium/repos", "events_url": "https://api.github.com/users/effolkronium/events{/privacy}", "received_events_url": "https://api.github.com/users/effolkronium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-06T20:09:00Z", "updated_at": "2017-10-25T09:55:59Z", "closed_at": "2017-10-25T09:55:59Z", "author_association": "CONTRIBUTOR", "body": "https://youtu.be/PJwd4JLYJJY"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/770", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/770/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/770/events", "html_url": "https://github.com/nlohmann/json/issues/770", "id": 263466671, "node_id": "MDU6SXNzdWUyNjM0NjY2NzE=", "number": 770, "title": "error: \u2018BasicJsonType\u2019 in namespace \u2018::\u2019 does not name a type", "user": {"login": "pdroalves", "id": 1581332, "node_id": "MDQ6VXNlcjE1ODEzMzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1581332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdroalves", "html_url": "https://github.com/pdroalves", "followers_url": "https://api.github.com/users/pdroalves/followers", "following_url": "https://api.github.com/users/pdroalves/following{/other_user}", "gists_url": "https://api.github.com/users/pdroalves/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdroalves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdroalves/subscriptions", "organizations_url": "https://api.github.com/users/pdroalves/orgs", "repos_url": "https://api.github.com/users/pdroalves/repos", "events_url": "https://api.github.com/users/pdroalves/events{/privacy}", "received_events_url": "https://api.github.com/users/pdroalves/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-06T14:32:05Z", "updated_at": "2017-10-06T21:12:18Z", "closed_at": "2017-10-06T21:12:18Z", "author_association": "NONE", "body": "I'm using g++ 5.4.0 and nvcc 8.0.44 to compile the most recent commit of the library. I compiled, installed the library, and included in my code (with C++11 flag) but when I try to compile my code I get:\r\n\r\n    /usr/local/include/nlohmann/json.hpp:3624:10: error: \u2018BasicJsonType\u2019 in namespace \u2018::\u2019 does not name a type\r\n\r\nWhat am I missing?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/769", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/769/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/769/events", "html_url": "https://github.com/nlohmann/json/issues/769", "id": 263415011, "node_id": "MDU6SXNzdWUyNjM0MTUwMTE=", "number": 769, "title": "Program calls abort function", "user": {"login": "tomasMizera", "id": 22449698, "node_id": "MDQ6VXNlcjIyNDQ5Njk4", "avatar_url": "https://avatars0.githubusercontent.com/u/22449698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomasMizera", "html_url": "https://github.com/tomasMizera", "followers_url": "https://api.github.com/users/tomasMizera/followers", "following_url": "https://api.github.com/users/tomasMizera/following{/other_user}", "gists_url": "https://api.github.com/users/tomasMizera/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomasMizera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomasMizera/subscriptions", "organizations_url": "https://api.github.com/users/tomasMizera/orgs", "repos_url": "https://api.github.com/users/tomasMizera/repos", "events_url": "https://api.github.com/users/tomasMizera/events{/privacy}", "received_events_url": "https://api.github.com/users/tomasMizera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-06T11:26:27Z", "updated_at": "2017-10-07T08:13:17Z", "closed_at": "2017-10-07T08:13:17Z", "author_association": "NONE", "body": "Hi, I am facing a problem while loading a .json file. I do it this way:\r\n\r\n```\r\n#include \"json.hpp\"\r\n// for convenience\r\nusing json = nlohmann::json;\r\n\r\nint main() {\r\n\tstd::ifstream pah(\"eth_frame.json\");\r\n\tjson jFile;\r\n\tjFile << pah;\r\n\tcout << jFile[\"pi\"];\r\n....\r\n```\r\n\r\nline jFile << pah crashes and program ends with error, saying that it called abort() function. \r\n\r\n> When I try to debug, this problem occurs:\r\n> Unhandled exception at 0x753DB832 in JSONcpp.exe: Microsoft C++ exception: nlohmann::detail::parse_error at memory location 0x0133DE74.\r\n\r\nIn file json.hpp.\r\nWhat am I doing wrong? Thanks in advance for your help! :)\r\nbtw, I use VS2017 \r\nerror:\r\nhttp://prntscr.com/gtzmwp"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/768", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/768/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/768/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/768/events", "html_url": "https://github.com/nlohmann/json/issues/768", "id": 263405181, "node_id": "MDU6SXNzdWUyNjM0MDUxODE=", "number": 768, "title": "[Question] Floating point resolution config during dump() ?", "user": {"login": "rstoica", "id": 4814838, "node_id": "MDQ6VXNlcjQ4MTQ4Mzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4814838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rstoica", "html_url": "https://github.com/rstoica", "followers_url": "https://api.github.com/users/rstoica/followers", "following_url": "https://api.github.com/users/rstoica/following{/other_user}", "gists_url": "https://api.github.com/users/rstoica/gists{/gist_id}", "starred_url": "https://api.github.com/users/rstoica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rstoica/subscriptions", "organizations_url": "https://api.github.com/users/rstoica/orgs", "repos_url": "https://api.github.com/users/rstoica/repos", "events_url": "https://api.github.com/users/rstoica/events{/privacy}", "received_events_url": "https://api.github.com/users/rstoica/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-06T10:42:56Z", "updated_at": "2017-11-13T09:09:37Z", "closed_at": "2017-11-13T09:09:37Z", "author_association": "NONE", "body": "Hello,\r\n\r\nFirst of all I would like to thank for doing such a nice job in developing and maintaining a top-notch C++ JSON code base!\r\n\r\nI am a new user of this library, so maybe my question may be well documented somewhere, but I might have overlooked the explanation (if this is the case apologies beforehand but please point it out to me).\r\n\r\nIs there any functionality exposed to limit the floating point resolution during dump() ? \r\n\r\n**Context**: I am asking this as I am not using the basic output streams or its derivatives but an MQTT publisher. So basically I just dump the JSON objects that I have to the MQTT interface as a string. As of now, the float data fields have by default 10 or so decimal places as explained in the documentation, but is there a flag / API to restrict that to a configurable number, e.g. 2 decimals only ?\r\n\r\nBest,\r\nAndrei"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/767", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/767/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/767/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/767/events", "html_url": "https://github.com/nlohmann/json/issues/767", "id": 263400419, "node_id": "MDU6SXNzdWUyNjM0MDA0MTk=", "number": 767, "title": "make check - no test ran", "user": {"login": "emazv72", "id": 5381288, "node_id": "MDQ6VXNlcjUzODEyODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5381288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emazv72", "html_url": "https://github.com/emazv72", "followers_url": "https://api.github.com/users/emazv72/followers", "following_url": "https://api.github.com/users/emazv72/following{/other_user}", "gists_url": "https://api.github.com/users/emazv72/gists{/gist_id}", "starred_url": "https://api.github.com/users/emazv72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emazv72/subscriptions", "organizations_url": "https://api.github.com/users/emazv72/orgs", "repos_url": "https://api.github.com/users/emazv72/repos", "events_url": "https://api.github.com/users/emazv72/events{/privacy}", "received_events_url": "https://api.github.com/users/emazv72/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 486186748, "node_id": "MDU6TGFiZWw0ODYxODY3NDg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20mingw", "name": "platform: mingw", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-10-06T10:22:59Z", "updated_at": "2017-10-19T10:13:54Z", "closed_at": "2017-10-10T06:51:43Z", "author_association": "NONE", "body": "\r\nSymptom: Running make check doesn't run any test on my environment.\r\n\r\n```shell\r\n$ make check\r\nmake check -C test\r\nmake[1]: Entering directory '/hbdev/test/ziplib/json/test'\r\nExecuting test-json_patch...\r\n===============================================================================\r\nNo tests ran\r\n\r\n```\r\n\r\nThe issue seems to be in test/Makefile\r\n\r\nif I replace \r\n\r\n_TEST_PATTERN ?= \"*\"_\r\n\r\nwith \r\n\r\n_TEST_PATTERN ?= \"\"_\r\n\r\nThe issue seems fixed\r\n\r\nOS: Windows 10\r\nPlat: MSYS2 - GNU Make 4.2.1 - gcc version 7.2.0 (Rev1, Built by MSYS2 project)\r\n\r\nThanks\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/766", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/766/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/766/events", "html_url": "https://github.com/nlohmann/json/issues/766", "id": 263396258, "node_id": "MDU6SXNzdWUyNjMzOTYyNTg=", "number": 766, "title": "The library cannot work properly with custom allocator based containers", "user": {"login": "imalyavskiy", "id": 6505514, "node_id": "MDQ6VXNlcjY1MDU1MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6505514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imalyavskiy", "html_url": "https://github.com/imalyavskiy", "followers_url": "https://api.github.com/users/imalyavskiy/followers", "following_url": "https://api.github.com/users/imalyavskiy/following{/other_user}", "gists_url": "https://api.github.com/users/imalyavskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/imalyavskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imalyavskiy/subscriptions", "organizations_url": "https://api.github.com/users/imalyavskiy/orgs", "repos_url": "https://api.github.com/users/imalyavskiy/repos", "events_url": "https://api.github.com/users/imalyavskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/imalyavskiy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-10-06T10:06:31Z", "updated_at": "2017-10-17T07:08:51Z", "closed_at": "2017-10-17T07:08:51Z", "author_association": "NONE", "body": "Motivation: \r\nIn order to be able to pass std::string std::vector std::list containers between different binaries it was required to define a custom allocator because the project I am involved in uses binaries with statically linked CRT.\r\n\r\nIssue:\r\nOnce I defined own allocator and std containers that using it I faced a problem - if I need to put data from std::string to my customized std::basic_string I always need to copy data. Suppose tmp::string is my customized string and std::string is usual string. So in order to put data from 2nd to 1st I need to use c_str() each time. The best solution is to instantiate the nlohmann::basic_json with my customized containers. But inside the library its utility classes do not take into account the string_t alias and its string_t::value_type as well thus this leads to errors. I tried to push required types to each class inside the library that use std::string, char, std::vector etc... I did a lots of work but suddenly faced with difficulties that I just cannot understand. So I'm asking a society to help me to solve the issue and improve  the json library as a result - to make it truly(or almost truly) template.\r\n\r\n\r\n[Here](https://github.com/imalyavskiy/nlohmann_json_test) is the test project that does not compile because static assert fired up with a statement that  the \"to_json\" function with my custom types does not exist. The thing that I am wondering of is that the \"to_json\" function based on custom types exists(as it follows from the build log) and this confuses me a lot.\r\n \r\nThe fork of the JSON parser attached as sub module. And this is a MS VS 2017 project.\r\n\r\nThanks a lot.\r\n\r\nPS: [build.log.txt](https://github.com/nlohmann/json/files/1362354/build.log.txt)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/765", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/765/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/765/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/765/events", "html_url": "https://github.com/nlohmann/json/pull/765", "id": 262514045, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ0NDgwNzky", "number": 765, "title": "using more CMake", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 4, "created_at": "2017-10-03T17:25:24Z", "updated_at": "2017-10-04T08:40:22Z", "closed_at": "2017-10-04T08:39:57Z", "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/765", "html_url": "https://github.com/nlohmann/json/pull/765", "diff_url": "https://github.com/nlohmann/json/pull/765.diff", "patch_url": "https://github.com/nlohmann/json/pull/765.patch"}, "body": "Done:\r\n\r\n- using CMake for the special targets Valgrind (JSON_Valgrind), Clang sanitizers (JSON_Sanitizer), and no-exceptions (JSON_NoExceptions)\r\n- using Ninja to improve compilation speed\r\n- compiling and executing each test suite individually\r\n- removed test cases that broke the MSVC 2017 build\r\n\r\nMissing:\r\n\r\n- some magic to get Coveralls to work with individual executables (maybe @theodelrieu can help here with his approach from #700)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/764", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/764/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/764/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/764/events", "html_url": "https://github.com/nlohmann/json/pull/764", "id": 262235133, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ0Mjg4Njc3", "number": 764, "title": "Simplified istream handing #367", "user": {"login": "pjkundert", "id": 290924, "node_id": "MDQ6VXNlcjI5MDkyNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/290924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjkundert", "html_url": "https://github.com/pjkundert", "followers_url": "https://api.github.com/users/pjkundert/followers", "following_url": "https://api.github.com/users/pjkundert/following{/other_user}", "gists_url": "https://api.github.com/users/pjkundert/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjkundert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjkundert/subscriptions", "organizations_url": "https://api.github.com/users/pjkundert/orgs", "repos_url": "https://api.github.com/users/pjkundert/repos", "events_url": "https://api.github.com/users/pjkundert/events{/privacy}", "received_events_url": "https://api.github.com/users/pjkundert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 50, "created_at": "2017-10-02T21:30:22Z", "updated_at": "2017-10-22T07:12:48Z", "closed_at": "2017-10-22T06:52:29Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/764", "html_url": "https://github.com/nlohmann/json/pull/764", "diff_url": "https://github.com/nlohmann/json/pull/764.diff", "patch_url": "https://github.com/nlohmann/json/pull/764.patch"}, "body": "Simplified cached_input_stream_adapter<> to input_stream_adapter, to avoid redundant buffering (already buffered in underlying std::streambuf), and thus to not pre-load (and discard) a large buffer of input from the istream when parsing a smaller JSON record.  Handles a leading Byte Order Mark using standard istream putback/unget.\r\n\r\nAlso, instead of trying to re-read the previous token on error (which involved seeking, which may or may not be available on an istream), simply collects the developing token into a std::string.  The space underlying this string is preserved between tokens, so this collection devolves into simple copying, and is therefore quite efficient.\r\n\r\nThis also opens the door to further simplifications in the future.\r\n\r\nAdded a simple unit test to confirm operation.  Did not test effect on json::parse.  I feel that the approach suggested by @nlohmann (std::parse demands that the entire buffer be a single JSON object, but operator>> scans just a single upcoming JSON object) is correct...  Perhaps this pull request may help move in that direction."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/763", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/763/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/763/events", "html_url": "https://github.com/nlohmann/json/issues/763", "id": 261952404, "node_id": "MDU6SXNzdWUyNjE5NTI0MDQ=", "number": 763, "title": "Documentation or feature request.", "user": {"login": "deathly809", "id": 1381210, "node_id": "MDQ6VXNlcjEzODEyMTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1381210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deathly809", "html_url": "https://github.com/deathly809", "followers_url": "https://api.github.com/users/deathly809/followers", "following_url": "https://api.github.com/users/deathly809/following{/other_user}", "gists_url": "https://api.github.com/users/deathly809/gists{/gist_id}", "starred_url": "https://api.github.com/users/deathly809/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deathly809/subscriptions", "organizations_url": "https://api.github.com/users/deathly809/orgs", "repos_url": "https://api.github.com/users/deathly809/repos", "events_url": "https://api.github.com/users/deathly809/events{/privacy}", "received_events_url": "https://api.github.com/users/deathly809/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-01T22:38:38Z", "updated_at": "2017-10-02T16:32:56Z", "closed_at": "2017-10-02T16:32:56Z", "author_association": "NONE", "body": "Is it possible to flatten fixed sized arrays to a single array? \r\n\r\n**Serialize**\r\n```\r\nstd::vector<Vec3> points = {{1,2,3} , {4,5,6} };\r\n```\r\n```\r\n{\r\n  \"points\" : [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6\r\n  ]\r\n}\r\n```\r\n\r\n**Deserialize**\r\n```\r\n{\r\n  \"points\" : [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6\r\n  ]\r\n}\r\n```\r\n```\r\nstd::vector<Vec3>  points = { {1,2,3} {4,5,6} };\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/762", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/762/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/762/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/762/events", "html_url": "https://github.com/nlohmann/json/issues/762", "id": 261928291, "node_id": "MDU6SXNzdWUyNjE5MjgyOTE=", "number": 762, "title": "warnings in msvc about mix/max macro while windows.h is used in the project", "user": {"login": "crea7or", "id": 467357, "node_id": "MDQ6VXNlcjQ2NzM1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/467357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crea7or", "html_url": "https://github.com/crea7or", "followers_url": "https://api.github.com/users/crea7or/followers", "following_url": "https://api.github.com/users/crea7or/following{/other_user}", "gists_url": "https://api.github.com/users/crea7or/gists{/gist_id}", "starred_url": "https://api.github.com/users/crea7or/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crea7or/subscriptions", "organizations_url": "https://api.github.com/users/crea7or/orgs", "repos_url": "https://api.github.com/users/crea7or/repos", "events_url": "https://api.github.com/users/crea7or/events{/privacy}", "received_events_url": "https://api.github.com/users/crea7or/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 6, "created_at": "2017-10-01T16:34:28Z", "updated_at": "2017-10-02T19:28:00Z", "closed_at": "2017-10-02T18:38:59Z", "author_association": "NONE", "body": "In the version 2.1.1, msvc generates a few warnings about std::numeric_limits<>::max() (and min) usage. This is because windows.h have their own min/max macros definitions in the global namespace (here is [microsoft kb article about it.](https://support.microsoft.com/en-us/help/143208/prb-using-stl-in-windows-program-can-cause-min-max-conflicts).\r\nwarning exact text: warning C4003: not enough actual parameters for macro 'max'\r\n\r\npossible fixes:\r\n1)\r\n\r\n`#define NOMINMAX`\r\n\r\n2)\r\n\r\n```\r\n#ifdef max\r\n#undef max\r\n#endif\r\n\r\n#ifdef min\r\n#undef min\r\n#endif\r\n```\r\n\r\n3) use additional parenthesis\r\n\r\nstd::numeric_limits<uint8_t>::max() => (std::numeric_limits<uint8_t>::max)()\r\n\r\nFirst two methods can produce problems, due to use original windows min/max in the gdi and more.\r\nthe third method should be tested on the other compilers.\r\n\r\nSource to reproduce the problem:\r\n\r\n```\r\n#include \"stdafx.h\"\r\n#include \"windows.h\"\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main( int argc, char const *argv[] )\r\n{\r\n\tjson j;\r\n\tj[ \"test\" ] = 1;\r\n}\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/761", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/761/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/761/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/761/events", "html_url": "https://github.com/nlohmann/json/issues/761", "id": 261915208, "node_id": "MDU6SXNzdWUyNjE5MTUyMDg=", "number": 761, "title": "std::signbit ambiguous", "user": {"login": "adayoegi", "id": 15476718, "node_id": "MDQ6VXNlcjE1NDc2NzE4", "avatar_url": "https://avatars3.githubusercontent.com/u/15476718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adayoegi", "html_url": "https://github.com/adayoegi", "followers_url": "https://api.github.com/users/adayoegi/followers", "following_url": "https://api.github.com/users/adayoegi/following{/other_user}", "gists_url": "https://api.github.com/users/adayoegi/gists{/gist_id}", "starred_url": "https://api.github.com/users/adayoegi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adayoegi/subscriptions", "organizations_url": "https://api.github.com/users/adayoegi/orgs", "repos_url": "https://api.github.com/users/adayoegi/repos", "events_url": "https://api.github.com/users/adayoegi/events{/privacy}", "received_events_url": "https://api.github.com/users/adayoegi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-10-01T13:12:41Z", "updated_at": "2017-10-02T03:19:59Z", "closed_at": "2017-10-02T03:19:58Z", "author_association": "NONE", "body": "I just cloned the latest files and only copy json.hpp to my project, on Win10 with vs2015.\r\n\r\nWhile compilation, the error message C2668 states that signbit is ambiguous on line 6663,\r\n`const auto is_negative = std::signbit(x);`\r\nit seems signbit is from corecrt_math.h with 3 overloads whose inputs are float, double, long double.\r\nSince line 6663 is in dump_integer(), I guess the input x is an int so the compiler is not sure which type to convert.\r\n\r\nDoes anyone ever encountered C2668 ambiguous call to overloaded function \"signbit\" ?\r\nHow do you guys solve this?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/760", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/760/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/760/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/760/events", "html_url": "https://github.com/nlohmann/json/issues/760", "id": 261884485, "node_id": "MDU6SXNzdWUyNjE4ODQ0ODU=", "number": 760, "title": "How to use value for std::experimental::optional type?", "user": {"login": "dianambb", "id": 20344299, "node_id": "MDQ6VXNlcjIwMzQ0Mjk5", "avatar_url": "https://avatars2.githubusercontent.com/u/20344299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dianambb", "html_url": "https://github.com/dianambb", "followers_url": "https://api.github.com/users/dianambb/followers", "following_url": "https://api.github.com/users/dianambb/following{/other_user}", "gists_url": "https://api.github.com/users/dianambb/gists{/gist_id}", "starred_url": "https://api.github.com/users/dianambb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dianambb/subscriptions", "organizations_url": "https://api.github.com/users/dianambb/orgs", "repos_url": "https://api.github.com/users/dianambb/repos", "events_url": "https://api.github.com/users/dianambb/events{/privacy}", "received_events_url": "https://api.github.com/users/dianambb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-01T01:31:24Z", "updated_at": "2017-10-05T17:53:16Z", "closed_at": "2017-10-05T17:53:16Z", "author_association": "NONE", "body": "I am trying to parse the json value for a field if it exists and set it to std::experimental::nullopt if it does not.\r\n\r\n```cpp\r\n#include \"json.hpp\"\r\n#include <experimental/optional>\r\n\r\nnamespace nlohmann {\r\n    template <typename T>\r\n    struct adl_serializer<std::experimental::optional<T>> {\r\n        static void to_json(json& j, const std::experimental::optional<T>& opt) {\r\n            if (opt == std::experimental::nullopt) {\r\n                j = nullptr;\r\n            } else {\r\n                j = *opt;\r\n            }\r\n        }\r\n        \r\n        static void from_json(const json& j, std::experimental::optional<T>& opt) {\r\n            if (j.is_null()) {\r\n                opt = std::experimental::nullopt;\r\n            } else {\r\n                opt = j.get<T>();\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nnamespace my_project {\r\nstruct Person {\r\n    std::string id;\r\n    std::string name;\r\n    std::experimental::optional<std::string> company;\r\n};\r\n\r\n    void to_json(json& j, const Person& p) {\r\n        j = json {\r\n            {\"id\", p.id},\r\n            {\"name\", p.name},\r\n            {\"company\", p.company}\r\n        };\r\n    }\r\n    \r\n    void from_json(const json& j, Person& p) {\r\n        p.id = j.at(\"id\").get<std::string>();\r\n        p.name = j.at(\"name\").get<std::string>();\r\n\r\n        // This works\r\n\r\n        try {\r\n            p.company = j.at(\"company\").get<std::experimental::optional<std::string>>();\r\n        } catch(std::exception) {\r\n            p.company = std::experimental::nullopt;\r\n        }\r\n\r\n        // This does not work, but it would be nice to have it instead if using try/catch for multiple fields.\r\n\r\n        p.company = j.value(\"company\", std::experimental::nullopt);\r\n    }\r\n}\r\n\r\n\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/759", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/759/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/759/events", "html_url": "https://github.com/nlohmann/json/issues/759", "id": 261595042, "node_id": "MDU6SXNzdWUyNjE1OTUwNDI=", "number": 759, "title": "Cannot load json file properly", "user": {"login": "PowerOfCreation", "id": 24482177, "node_id": "MDQ6VXNlcjI0NDgyMTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/24482177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PowerOfCreation", "html_url": "https://github.com/PowerOfCreation", "followers_url": "https://api.github.com/users/PowerOfCreation/followers", "following_url": "https://api.github.com/users/PowerOfCreation/following{/other_user}", "gists_url": "https://api.github.com/users/PowerOfCreation/gists{/gist_id}", "starred_url": "https://api.github.com/users/PowerOfCreation/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PowerOfCreation/subscriptions", "organizations_url": "https://api.github.com/users/PowerOfCreation/orgs", "repos_url": "https://api.github.com/users/PowerOfCreation/repos", "events_url": "https://api.github.com/users/PowerOfCreation/events{/privacy}", "received_events_url": "https://api.github.com/users/PowerOfCreation/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-29T10:12:07Z", "updated_at": "2017-12-04T21:10:14Z", "closed_at": "2017-10-04T10:00:07Z", "author_association": "NONE", "body": "I couldn't find any example nor documentation on how to load a json file properly. I did it doing so:\r\nifstream myfile(p.path());\r\n```cpp\r\njson j;\r\nj << myfile;\r\ncout << j.at(0) << endl;\r\ncout << j[0] << endl;\r\n```\r\nNeither of those variants do work. I can compile it but I get the error cannot use at() with object and same with the [] operator. Only with a iterator I can actually access my values:\r\n`for (json::iterator it = j.begin(); it != j.end(); ++it) `\r\nBut I can't access the subvalues in any way yet as there are no examples or documentations avaiable.\r\nI tried it in many ways:\r\n```cpp\r\njson j;\r\nj << myfile;\r\nfor (json::iterator it = j.begin(); it != j.end(); ++it) \r\n{\r\n            json k;\r\n            k << it;\r\n            k << it.value();\r\n...\r\n```\r\n Are there any examples how to actually load a json file properly or am I doing something wrong?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/758", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/758/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/758/events", "html_url": "https://github.com/nlohmann/json/issues/758", "id": 261401643, "node_id": "MDU6SXNzdWUyNjE0MDE2NDM=", "number": 758, "title": "Compilation error with unordered_map< int, int >", "user": {"login": "giomasce", "id": 101675, "node_id": "MDQ6VXNlcjEwMTY3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/101675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giomasce", "html_url": "https://github.com/giomasce", "followers_url": "https://api.github.com/users/giomasce/followers", "following_url": "https://api.github.com/users/giomasce/following{/other_user}", "gists_url": "https://api.github.com/users/giomasce/gists{/gist_id}", "starred_url": "https://api.github.com/users/giomasce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giomasce/subscriptions", "organizations_url": "https://api.github.com/users/giomasce/orgs", "repos_url": "https://api.github.com/users/giomasce/repos", "events_url": "https://api.github.com/users/giomasce/events{/privacy}", "received_events_url": "https://api.github.com/users/giomasce/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-28T17:37:31Z", "updated_at": "2017-09-28T17:40:47Z", "closed_at": "2017-09-28T17:40:47Z", "author_association": "NONE", "body": "This might be similar to #734, but I observe different results with different plaftorms, so maybe it is a different thing. On Debian unstable with g++ 7.2.0-7 the following program does not compile:\r\n\r\n```c++\r\n#include <unordered_map>\r\n#include <string>\r\n\r\n#include \"json.h\"\r\n\r\nusing namespace std;\r\nusing json = nlohmann::json;\r\n\r\nint main(int argc, char const *argv[])\r\n{\r\n    json j;\r\n    unordered_map< int, int > m;\r\n    m = j.get<decltype(m)>();\r\n}\r\n```\r\n\r\nHowever, this does work:\r\n\r\n```c++\r\n#include <unordered_map>\r\n#include <string>\r\n\r\n#include \"json.h\"\r\n\r\nusing namespace std;\r\nusing json = nlohmann::json;\r\n\r\nint main(int argc, char const *argv[])\r\n{\r\n    json j;\r\n    unordered_map< string, int > m;\r\n    m = j.get<decltype(m)>();\r\n}\r\n```\r\n\r\nThe only change is `string` instead of `int` in the `unordered_map` template arguments. I tried to go through the template error messages, but my C++ knowledge is not sufficiently advanced. The same happens with clang++ 3.8.1-24, again from Debian unstable."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/757", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/757/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/757/events", "html_url": "https://github.com/nlohmann/json/issues/757", "id": 261155763, "node_id": "MDU6SXNzdWUyNjExNTU3NjM=", "number": 757, "title": "CBOR string", "user": {"login": "arnaudbrejeon", "id": 21390, "node_id": "MDQ6VXNlcjIxMzkw", "avatar_url": "https://avatars3.githubusercontent.com/u/21390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnaudbrejeon", "html_url": "https://github.com/arnaudbrejeon", "followers_url": "https://api.github.com/users/arnaudbrejeon/followers", "following_url": "https://api.github.com/users/arnaudbrejeon/following{/other_user}", "gists_url": "https://api.github.com/users/arnaudbrejeon/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnaudbrejeon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnaudbrejeon/subscriptions", "organizations_url": "https://api.github.com/users/arnaudbrejeon/orgs", "repos_url": "https://api.github.com/users/arnaudbrejeon/repos", "events_url": "https://api.github.com/users/arnaudbrejeon/events{/privacy}", "received_events_url": "https://api.github.com/users/arnaudbrejeon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-28T00:15:06Z", "updated_at": "2017-11-06T16:21:04Z", "closed_at": "2017-11-06T16:21:04Z", "author_association": "NONE", "body": "I received some CBOR files that contain strings (major type 2) and not UTF-8 strings(major type 3).\r\nIt looks like parsing fails. Is it on purpose?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/756", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/756/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/756/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/756/events", "html_url": "https://github.com/nlohmann/json/issues/756", "id": 261110435, "node_id": "MDU6SXNzdWUyNjExMTA0MzU=", "number": 756, "title": "Proposal: out_of_range should be a subclass of std::out_of_range", "user": {"login": "adityamarella", "id": 706873, "node_id": "MDQ6VXNlcjcwNjg3Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/706873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adityamarella", "html_url": "https://github.com/adityamarella", "followers_url": "https://api.github.com/users/adityamarella/followers", "following_url": "https://api.github.com/users/adityamarella/following{/other_user}", "gists_url": "https://api.github.com/users/adityamarella/gists{/gist_id}", "starred_url": "https://api.github.com/users/adityamarella/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adityamarella/subscriptions", "organizations_url": "https://api.github.com/users/adityamarella/orgs", "repos_url": "https://api.github.com/users/adityamarella/repos", "events_url": "https://api.github.com/users/adityamarella/events{/privacy}", "received_events_url": "https://api.github.com/users/adityamarella/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 3, "created_at": "2017-09-27T20:39:02Z", "updated_at": "2017-10-27T16:35:27Z", "closed_at": "2017-10-27T16:35:19Z", "author_association": "NONE", "body": "https://github.com/nlohmann/json/blob/b05ea3de55d83da56b8b045b9fdb4a53e6397be8/src/json.hpp#L428\r\n\r\nIs there any reason not to inherit `out_of_range` exception from `std::out_of_range`?\r\n\r\nThe current release version v2.1.1 is throwing std::out_of_range but the latest on develop throws custom `out_of_range` exception which could cause backward compatibility issues.\r\n\r\nMy code below was working with v2.1.1 release version, stopped working when I moved to the latest on develop\r\n```\r\ntry {\r\n    json.at(\"xxx\")\r\n} catch(std::out_of_range &e) {\r\n   ...\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/755", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/755/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/755/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/755/events", "html_url": "https://github.com/nlohmann/json/issues/755", "id": 260935580, "node_id": "MDU6SXNzdWUyNjA5MzU1ODA=", "number": 755, "title": "Compiling with icpc", "user": {"login": "tdegeus", "id": 7030445, "node_id": "MDQ6VXNlcjcwMzA0NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7030445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tdegeus", "html_url": "https://github.com/tdegeus", "followers_url": "https://api.github.com/users/tdegeus/followers", "following_url": "https://api.github.com/users/tdegeus/following{/other_user}", "gists_url": "https://api.github.com/users/tdegeus/gists{/gist_id}", "starred_url": "https://api.github.com/users/tdegeus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tdegeus/subscriptions", "organizations_url": "https://api.github.com/users/tdegeus/orgs", "repos_url": "https://api.github.com/users/tdegeus/repos", "events_url": "https://api.github.com/users/tdegeus/events{/privacy}", "received_events_url": "https://api.github.com/users/tdegeus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 706237888, "node_id": "MDU6TGFiZWw3MDYyMzc4ODg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20icc", "name": "platform: icc", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 17, "created_at": "2017-09-27T11:11:13Z", "updated_at": "2018-01-19T15:18:18Z", "closed_at": "2017-10-04T15:31:12Z", "author_association": "NONE", "body": "I would like to compile with the Intel C++ compiler, in particular this one\r\n\r\n```bash\r\n$ icpc --version\r\nicpc (ICC) 17.0.2 20170213\r\nCopyright (C) 1985-2017 Intel Corporation.  All rights reserved.\r\n```\r\n\r\nBut currently this results in \r\n\r\n```bash\r\n...json.hpp(67): error: #error directive: \"unsupported GCC version - see https://github.com/nlohmann/json#supported-compilers\"\r\n          #error \"unsupported GCC version - see https://github.com/nlohmann/json#supported-compilers\"\r\n```\r\n\r\nWhen I remove the checks, I'm able to successfully compile and run. Compiling with `-Wall -Wextra -pendantic` only results in the following warnings\r\n\r\n```bash\r\n/home/tdegeus/prog/research/avalanches_inertia/json/json.hpp(6323): warning #186: pointless comparison of unsigned integer with zero\r\n          return ((0 <= u and u <= 127) ? 0\r\n                     ^\r\n          detected during:\r\n            instantiation of \"std::size_t={unsigned long} nlohmann::detail::serializer<BasicJsonType>::extra_space(const nlohmann::detail::serializer<BasicJsonType>::string_t &, bool) [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 6500\r\n            instantiation of \"void nlohmann::detail::serializer<BasicJsonType>::dump_escaped(const nlohmann::detail::serializer<BasicJsonType>::string_t &, bool) const [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 6154\r\n            instantiation of \"void nlohmann::detail::serializer<BasicJsonType>::dump(const BasicJsonType &, bool, bool, unsigned int, unsigned int) [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 8995\r\n            instantiation of \"nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::dump(int, char, bool) const [with ObjectType=std::map, ArrayType=std::vector, StringType=std::string, BooleanType=bool,\r\n                      NumberIntegerType=int64_t={long}, NumberUnsignedType=uint64_t={unsigned long}, NumberFloatType=double, AllocatorType=std::allocator, JSONSerializer=nlohmann::adl_serializer]\" at line 14653\r\n\r\n/home/tdegeus/prog/research/avalanches_inertia/json/json.hpp(6663): warning #186: pointless comparison of unsigned integer with zero\r\n          const bool is_negative = x < 0;\r\n                                     ^\r\n          detected during:\r\n            instantiation of \"void nlohmann::detail::serializer<BasicJsonType>::dump_integer(NumberType) [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, NumberType=uint64_t={unsigned long}, <unnamed>=0]\" at line 6290\r\n            instantiation of \"void nlohmann::detail::serializer<BasicJsonType>::dump(const BasicJsonType &, bool, bool, unsigned int, unsigned int) [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 8995\r\n            instantiation of \"nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::dump(int, char, bool) const [with ObjectType=std::map, ArrayType=std::vector, StringType=std::string, BooleanType=bool,\r\n                      NumberIntegerType=int64_t={long}, NumberUnsignedType=uint64_t={unsigned long}, NumberFloatType=double, AllocatorType=std::allocator, JSONSerializer=nlohmann::adl_serializer]\" at line 14653\r\n\r\n/home/tdegeus/prog/research/avalanches_inertia/json/json.hpp(9762): warning #191: type qualifier is meaningless on cast type\r\n          return get_impl_ptr(static_cast<const PointerType>(nullptr));\r\n                                          ^\r\n          detected during:\r\n            instantiation of \"void nlohmann::detail::get_arithmetic_value(const BasicJsonType &, ArithmeticType &) [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, ArithmeticType=double, <unnamed>=0]\" at line 1133\r\n            instantiation of \"void nlohmann::detail::from_json(const BasicJsonType &, BasicJsonType::number_float_t &) [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>]\" at line 1368\r\n            instantiation of \"auto nlohmann::detail::from_json_fn::call(const BasicJsonType &, T &, nlohmann::detail::priority_tag<1U>) const->decltype((<expression>)) [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, T=double]\" at line 1383\r\n            instantiation of \"void nlohmann::detail::from_json_fn::operator()(const BasicJsonType &, T &) const [with BasicJsonType=nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer>, T=double]\" at line 6880\r\n            instantiation of \"void nlohmann::adl_serializer<<unnamed>, <unnamed>>::from_json(BasicJsonType &&, ValueType &) [with <unnamed>=double, <unnamed>=void, BasicJsonType=const nlohmann::basic_json<std::map, std::vector, std::string, bool, int64_t={long}, uint64_t={unsigned long}, double, std::allocator, nlohmann::adl_serializer> &, ValueType=double]\" at line 9592\r\n            instantiation of \"ValueType nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::get<ValueTypeCV,ValueType,<unnamed>>() const [with ObjectType=std::map, ArrayType=std::vector, StringType=std::string, BooleanType=bool, NumberIntegerType=int64_t={long}, NumberUnsignedType=uint64_t={unsigned long}, NumberFloatType=double, AllocatorType=std::allocator,\r\n                      JSONSerializer=nlohmann::adl_serializer, ValueTypeCV=double, ValueType=double, <unnamed>=0]\" at line 237 of \"/home/tdegeus/prog/research/avalanches_inertia/main.cpp\"\r\n\r\nremark #11074: Inlining inhibited by limit max-size\r\nremark #11074: Inlining inhibited by limit max-total-size\r\nremark #11076: To get full report use -qopt-report=4 -qopt-report-phase ipo\r\n```"}]