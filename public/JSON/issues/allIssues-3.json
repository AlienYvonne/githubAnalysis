[{"url": "https://api.github.com/repos/nlohmann/json/issues/1116", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1116/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1116/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1116/events", "html_url": "https://github.com/nlohmann/json/issues/1116", "id": 327923303, "node_id": "MDU6SXNzdWUzMjc5MjMzMDM=", "number": 1116, "title": "Implicit conversions to complex types can lead to surprising and confusing errors", "user": {"login": "tlemo", "id": 13824553, "node_id": "MDQ6VXNlcjEzODI0NTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/13824553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlemo", "html_url": "https://github.com/tlemo", "followers_url": "https://api.github.com/users/tlemo/followers", "following_url": "https://api.github.com/users/tlemo/following{/other_user}", "gists_url": "https://api.github.com/users/tlemo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlemo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlemo/subscriptions", "organizations_url": "https://api.github.com/users/tlemo/orgs", "repos_url": "https://api.github.com/users/tlemo/repos", "events_url": "https://api.github.com/users/tlemo/events{/privacy}", "received_events_url": "https://api.github.com/users/tlemo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-30T22:33:54Z", "updated_at": "2018-07-08T09:58:55Z", "closed_at": "2018-07-08T09:58:55Z", "author_association": "NONE", "body": "Using std::vector<T> as an example (since it's likely a popular scenario) illustrates how the implicit conversions (json::operator ValueType() const) result in a potentially frustrating errors:\r\n\r\nNote that the assignment operator case (the last one) could be fixed by \"more SFINAE\": ignore any specializations of std::initializer_list. I don't see a generic solution for the other cases (this is just an example)\r\n\r\nMy suggestion is to scale back on the implicit conversions:\r\n1. A moderate solution is to exclude any implicit conversions to non-scalar types (easy to implement)\r\n2. The more radical, but the right solution long term IMO, would be to:\r\n  - add a \"strict\" compile time mode, where all the implicit conversions are disabled (operator ValueType and all the json constructors made explicit)\r\n  - deprecate and gradually remove the non-strict variant.\r\n\r\nI realize that the 2nd choice seems a drastic departure and that some people are attracted to the initial convenience of implicit conversions (for large, complex project this short term convenience is likely a liability though).\r\n\r\nThank you!\r\n\r\n```\r\njson j = { 1, 2, 3 };\r\n\r\n// works as advertised\r\nstd::vector<float> v = j;\r\n\r\n// compiles, but likely not as intended:\r\n// resolves to explicit vector( size_type count )\r\nstd::vector<float> v2{j};\r\n\r\n// error: call to constructor of 'vector<float>' is ambiguous\r\n// note: candidate constructors:\r\n//   vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT\r\n//   vector(size_type __n, const allocator_type& __a = allocator_type())\r\n//   vector(vector&& __x) noexcept\r\n//   vector(const vector& __x)\r\n//   vector(initializer_list<value_type> __l,\r\nstd::vector<float> v3(j);\r\n\r\n// error: use of overloaded operator '=' is ambiguous (with operand types 'vector<float>' and 'json' (aka 'basic_json<>'))\r\n// note: candidate functions:\r\n//  operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\r\n//  operator=(const vector& __x);\r\n//  operator=(initializer_list<value_type> __l)\r\nv = j;\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1115", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1115/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1115/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1115/events", "html_url": "https://github.com/nlohmann/json/issues/1115", "id": 327873372, "node_id": "MDU6SXNzdWUzMjc4NzMzNzI=", "number": 1115, "title": "How can I write from_json for a complex datatype that is not default constructible?", "user": {"login": "shikhartanwar", "id": 6910192, "node_id": "MDQ6VXNlcjY5MTAxOTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6910192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shikhartanwar", "html_url": "https://github.com/shikhartanwar", "followers_url": "https://api.github.com/users/shikhartanwar/followers", "following_url": "https://api.github.com/users/shikhartanwar/following{/other_user}", "gists_url": "https://api.github.com/users/shikhartanwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shikhartanwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shikhartanwar/subscriptions", "organizations_url": "https://api.github.com/users/shikhartanwar/orgs", "repos_url": "https://api.github.com/users/shikhartanwar/repos", "events_url": "https://api.github.com/users/shikhartanwar/events{/privacy}", "received_events_url": "https://api.github.com/users/shikhartanwar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-30T19:47:03Z", "updated_at": "2018-05-31T05:03:01Z", "closed_at": "2018-05-30T22:18:13Z", "author_association": "NONE", "body": "Hi. This is more of a question rather than a issue. \r\n\r\nI have a requirement where I need to create objects from serialized json (serialized using this library only) but those types are not default constructible. I went through the section [regarding get() for non-default constructible/non-copyable types](https://github.com/nlohmann/json#how-can-i-use-get-for-non-default-constructiblenon-copyable-types) but wasn't sure as to how am I supposed to use it for a complex datatype.\r\n\r\nCan you please help?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1114", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1114/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1114/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1114/events", "html_url": "https://github.com/nlohmann/json/issues/1114", "id": 327583092, "node_id": "MDU6SXNzdWUzMjc1ODMwOTI=", "number": 1114, "title": "Compile error in VS2015 when compiling unit-conversions.cpp", "user": {"login": "sonulohani", "id": 2958681, "node_id": "MDQ6VXNlcjI5NTg2ODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2958681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonulohani", "html_url": "https://github.com/sonulohani", "followers_url": "https://api.github.com/users/sonulohani/followers", "following_url": "https://api.github.com/users/sonulohani/following{/other_user}", "gists_url": "https://api.github.com/users/sonulohani/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonulohani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonulohani/subscriptions", "organizations_url": "https://api.github.com/users/sonulohani/orgs", "repos_url": "https://api.github.com/users/sonulohani/repos", "events_url": "https://api.github.com/users/sonulohani/events{/privacy}", "received_events_url": "https://api.github.com/users/sonulohani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 14, "created_at": "2018-05-30T05:52:01Z", "updated_at": "2018-06-29T11:49:53Z", "closed_at": "2018-06-29T07:04:11Z", "author_association": "CONTRIBUTOR", "body": "When i compile unit-conversions.cpp with VS 2015 compiler, I get this error:-\r\n\r\n\"unit-conversions.cpp : fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj\" . \r\n\r\nI think we should configure this in cmake to compile this file with /bigobj. \r\n\r\nVS 2015 configuration:-\r\nDebug mode\r\nPlatform :- x64\r\n\r\nHere is the screenshot of the same:-\r\n![issue ss](https://user-images.githubusercontent.com/2958681/40701563-03bc0438-63fc-11e8-89a6-915b08282308.PNG)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1113", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1113/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1113/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1113/events", "html_url": "https://github.com/nlohmann/json/issues/1113", "id": 327356954, "node_id": "MDU6SXNzdWUzMjczNTY5NTQ=", "number": 1113, "title": "ADL Serializer for std::any / boost::any", "user": {"login": "anthonygclark", "id": 59702, "node_id": "MDQ6VXNlcjU5NzAy", "avatar_url": "https://avatars0.githubusercontent.com/u/59702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anthonygclark", "html_url": "https://github.com/anthonygclark", "followers_url": "https://api.github.com/users/anthonygclark/followers", "following_url": "https://api.github.com/users/anthonygclark/following{/other_user}", "gists_url": "https://api.github.com/users/anthonygclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/anthonygclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anthonygclark/subscriptions", "organizations_url": "https://api.github.com/users/anthonygclark/orgs", "repos_url": "https://api.github.com/users/anthonygclark/repos", "events_url": "https://api.github.com/users/anthonygclark/events{/privacy}", "received_events_url": "https://api.github.com/users/anthonygclark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-29T14:52:42Z", "updated_at": "2018-05-29T17:16:57Z", "closed_at": "2018-05-29T17:15:57Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nI can't figure out how to specialize the `adl_serializer` for `std::any/boost::any`.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n```cpp\r\n#include <vector>\r\n#include <iostream>\r\n\r\n#include <boost/any.hpp>\r\n\r\n#include \"nlohmann/json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nnamespace nlohmann {\r\n    \r\n    template<>\r\n    struct adl_serializer<boost::any>\r\n    {\r\n        static void from_json(const json& j, boost::any & opt)\r\n        {\r\n            opt = j.get<boost::any>();\r\n        }\r\n    };\r\n}\r\n\r\nint main() {\r\n    auto doc = json::parse(\"{\\\"params\\\" : [1,2,3,4]}\");\r\n    std::cout << doc.dump(4) << std::endl;\r\n    \r\n    auto aot = doc[\"params\"].get<std::vector<boost::any>>();\r\n}\r\n```\r\n\r\n- What is the expected behavior?\r\n\r\nI guess I expected any parsed value to be assigned to a `boost::any`.\r\n\r\n- And what is the actual behavior instead?\r\n\r\nSegfault\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n`g++ (GCC) 8.1.0` \r\n\r\nand \r\n\r\n`clang version 6.0.0 (tags/RELEASE_600/final)\r\nTarget: x86_64-pc-linux-gnu`\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nRelease\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nNo compilation errors and no warnings with `-Wall -Wextra`\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1112", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1112/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1112/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1112/events", "html_url": "https://github.com/nlohmann/json/issues/1112", "id": 327015572, "node_id": "MDU6SXNzdWUzMjcwMTU1NzI=", "number": 1112, "title": "Unexpected behaviour of is_null", "user": {"login": "phyz777", "id": 19569239, "node_id": "MDQ6VXNlcjE5NTY5MjM5", "avatar_url": "https://avatars1.githubusercontent.com/u/19569239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phyz777", "html_url": "https://github.com/phyz777", "followers_url": "https://api.github.com/users/phyz777/followers", "following_url": "https://api.github.com/users/phyz777/following{/other_user}", "gists_url": "https://api.github.com/users/phyz777/gists{/gist_id}", "starred_url": "https://api.github.com/users/phyz777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phyz777/subscriptions", "organizations_url": "https://api.github.com/users/phyz777/orgs", "repos_url": "https://api.github.com/users/phyz777/repos", "events_url": "https://api.github.com/users/phyz777/events{/privacy}", "received_events_url": "https://api.github.com/users/phyz777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-28T12:49:01Z", "updated_at": "2018-05-28T14:15:00Z", "closed_at": "2018-05-28T14:15:00Z", "author_association": "NONE", "body": "The following code produces unexpected output (which is, _all_ four statements being printed): \r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#include \"json.hpp\"\r\n\r\nint main()\r\n{\r\n    nlohmann::json j;\r\n\r\n    if (j.empty()) {\r\n        std::cout << \"Object is empty\" << std::endl;\r\n    }\r\n\r\n    if (j.is_null()) {\r\n        std::cout << \"Object is null\" << std::endl;\r\n    }\r\n\r\n    nlohmann::json k;\r\n\r\n    j[\"aminull\"] = k;\r\n\r\n    if (j[\"aminull\"].empty()) {\r\n        std::cout << \"Object under key is empty\" << std::endl;\r\n    }\r\n\r\n    if (j[\"aminull\"].is_null()) {\r\n        std::cout << \"Object under key is null\" << std::endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```\r\nI am not entirely sure whether or not this is the expected behaviour, but I think it would be more intuitive to have only the empty() conditions evaluate to true and the others to false? \r\n\r\nBest wishes and thanks for the great work!\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1111", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1111/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1111/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1111/events", "html_url": "https://github.com/nlohmann/json/issues/1111", "id": 326820887, "node_id": "MDU6SXNzdWUzMjY4MjA4ODc=", "number": 1111, "title": "How to resolve  \" undefined reference to `std::__throw_bad_cast()'\"", "user": {"login": "TridentTD", "id": 15370479, "node_id": "MDQ6VXNlcjE1MzcwNDc5", "avatar_url": "https://avatars1.githubusercontent.com/u/15370479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TridentTD", "html_url": "https://github.com/TridentTD", "followers_url": "https://api.github.com/users/TridentTD/followers", "following_url": "https://api.github.com/users/TridentTD/following{/other_user}", "gists_url": "https://api.github.com/users/TridentTD/gists{/gist_id}", "starred_url": "https://api.github.com/users/TridentTD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TridentTD/subscriptions", "organizations_url": "https://api.github.com/users/TridentTD/orgs", "repos_url": "https://api.github.com/users/TridentTD/repos", "events_url": "https://api.github.com/users/TridentTD/events{/privacy}", "received_events_url": "https://api.github.com/users/TridentTD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2018-05-27T14:29:09Z", "updated_at": "2018-07-28T12:46:46Z", "closed_at": "2018-07-28T12:46:46Z", "author_association": "NONE", "body": "- What is the issue you have?\r\n\r\nI can compile well on ESP8266's xtensa_gcc  compiler version5.1.0, \r\nhowever when I want to receive string by dump() function .\r\nIt occurs some errors. How to resolve it?\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nFirst I try this code \r\n```\r\njson j = {  {\"pi\", 3.141}, {\"happy\", true}, {\"name\", \"testtest\"}, \r\n                    {\"nothing\", nullptr}, { \"answer\", { {\"everything\", 42} } },\r\n                    {\"list\", {1, 0, 2}}, { \"object\", { {\"currency\", \"USD\"}, {\"value\", 42.99} } } };\r\n\r\nSerial.println((float) j[\"pi\"],3);     // print to Serial Monitor\r\n```\r\nThe result  can print well on Serial Monitor -->  3.141   \r\nHowever when I want to dump like the following.\r\n\r\n```\r\nstd::string dump_string =  j.dump();\r\n```\r\n\r\nIt occurs error like this\r\n\r\n```\r\nlibstdc++.a(ostream-inst.o): In function `std::ostream& std::ostream::_M_insert<long>(long)':\r\nlibstdc++-v3/include/ostream:544: undefined reference to `std::__throw_bad_cast()'\r\nlibstdc++.a(wlocale-inst.o): In function `std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)':\r\nlibstdc++-v3/include/bits/locale_facets_nonio.tcc:1173: undefined reference to `std::__throw_bad_cast()'\r\n...\r\n```\r\n\r\nHow to resolve   \"undefined reference to `std::__throw_bad_cast()' \" error ?\r\n\r\nThank you.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1110", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1110/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1110/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1110/events", "html_url": "https://github.com/nlohmann/json/issues/1110", "id": 326775715, "node_id": "MDU6SXNzdWUzMjY3NzU3MTU=", "number": 1110, "title": "cannot compile on ubuntu 18.04 and 16.04", "user": {"login": "chakpongchung", "id": 8110904, "node_id": "MDQ6VXNlcjgxMTA5MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8110904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chakpongchung", "html_url": "https://github.com/chakpongchung", "followers_url": "https://api.github.com/users/chakpongchung/followers", "following_url": "https://api.github.com/users/chakpongchung/following{/other_user}", "gists_url": "https://api.github.com/users/chakpongchung/gists{/gist_id}", "starred_url": "https://api.github.com/users/chakpongchung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chakpongchung/subscriptions", "organizations_url": "https://api.github.com/users/chakpongchung/orgs", "repos_url": "https://api.github.com/users/chakpongchung/repos", "events_url": "https://api.github.com/users/chakpongchung/events{/privacy}", "received_events_url": "https://api.github.com/users/chakpongchung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}, {"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-26T23:55:39Z", "updated_at": "2018-06-14T16:19:45Z", "closed_at": "2018-06-14T16:19:45Z", "author_association": "NONE", "body": "- What is the issue you have?\r\n```\r\n\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n// #include <json.hpp>\r\n#include <nlohmann/json.hpp>\r\nusing json = nlohmann::json;  // for convenience\r\n\r\nint main() { cout << 0; }\r\n```\r\n```\r\nsudo apt install nlohmann-json-dev  \r\n\r\ng++ -std=c++11 main.cpp\r\n```\r\n```\r\n\r\n\r\nIn file included from test_json.cpp:6:0:\r\n/usr/include/nlohmann/json.hpp: In function \u2018bool nlohmann::operator<(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::const_reference, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::const_reference)\u2019:\r\n/usr/include/nlohmann/json.hpp:6057:62: error: wrong number of template arguments (1, should be 2)\r\n                     return *lhs.m_value.array < *rhs.m_value.array;\r\n                                                              ^~~~~\r\nIn file included from /usr/include/nlohmann/json.hpp:33:0,\r\n                 from test_json.cpp:6:\r\n/usr/include/c++/7/array:94:12: note: provided for \u2018template<class _Tp, long unsigned int _Nm> struct std::array\u2019\r\n     struct array\r\n            ^~~~~\r\n\r\n```\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\n\r\n- And what is the actual behavior instead?\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n`\r\nLinux ubuntu 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n`\r\n```\r\nUsing built-in specs.\r\nCOLLECT_GCC=g++\r\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper\r\nOFFLOAD_TARGET_NAMES=nvptx-none\r\nOFFLOAD_TARGET_DEFAULT=1\r\nTarget: x86_64-linux-gnu\r\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-16ubuntu3' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --with-as=/usr/bin/x86_64-linux-gnu-as --with-ld=/usr/bin/x86_64-linux-gnu-ld --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\r\nThread model: posix\r\ngcc version 7.3.0 (Ubuntu 7.3.0-16ubuntu3) \r\n\r\n```\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1109", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1109/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1109/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1109/events", "html_url": "https://github.com/nlohmann/json/issues/1109", "id": 326633335, "node_id": "MDU6SXNzdWUzMjY2MzMzMzU=", "number": 1109, "title": "JSON representation for floating point values has too many digits", "user": {"login": "grebenyukaa", "id": 8776486, "node_id": "MDQ6VXNlcjg3NzY0ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8776486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grebenyukaa", "html_url": "https://github.com/grebenyukaa", "followers_url": "https://api.github.com/users/grebenyukaa/followers", "following_url": "https://api.github.com/users/grebenyukaa/following{/other_user}", "gists_url": "https://api.github.com/users/grebenyukaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/grebenyukaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grebenyukaa/subscriptions", "organizations_url": "https://api.github.com/users/grebenyukaa/orgs", "repos_url": "https://api.github.com/users/grebenyukaa/repos", "events_url": "https://api.github.com/users/grebenyukaa/events{/privacy}", "received_events_url": "https://api.github.com/users/grebenyukaa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-25T19:09:08Z", "updated_at": "2018-06-07T19:39:07Z", "closed_at": "2018-06-07T19:39:07Z", "author_association": "NONE", "body": "The values of type \"float\" seem to be internally treated as values of type \"double\". This leads to an issue with their text representation. For example, the snippet below: \r\n```\r\njson j;\r\nj[\"test\"] = 0.42f;\r\nstd::cout << j.dump() << std::endl;\r\n```\r\nproduces this json output:\r\n>{\"test\":0.41999998688697815}\r\n\r\n\r\nI experimented a bit with float values, and found out, that a workaround, like that:\r\n```\r\nnamespace nlohmann\r\n{\r\n    namespace detail\r\n   {\r\n        template<>\r\n        inline char* to_chars<json::number_float_t>(char* first, char* last, json::number_float_t value)\r\n        {\r\n            std::ostringstream s;\r\n            s << value;\r\n            std::string buf = oss.str();\r\n            return std::copy(buf.begin(), buf.end(), first);\r\n        }\r\n    }\r\n}\r\n```\r\ncan impove floats' representation, and produce the following json:\r\n>{\"test\":0.42}\r\n\r\n\r\nI know, that floating point arithmetics is a sensitive topic, but I think, floats' representation in human-readable format should be improved, if possible.\r\n\r\n- Compiler: Microsoft Visual C++ 2015\r\n- Release: 3.1.2\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1108", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1108/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1108/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1108/events", "html_url": "https://github.com/nlohmann/json/issues/1108", "id": 326604723, "node_id": "MDU6SXNzdWUzMjY2MDQ3MjM=", "number": 1108, "title": "Not working for classes containing \"_declspec(dllimport)\" in their declaration", "user": {"login": "shikhartanwar", "id": 6910192, "node_id": "MDQ6VXNlcjY5MTAxOTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6910192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shikhartanwar", "html_url": "https://github.com/shikhartanwar", "followers_url": "https://api.github.com/users/shikhartanwar/followers", "following_url": "https://api.github.com/users/shikhartanwar/following{/other_user}", "gists_url": "https://api.github.com/users/shikhartanwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shikhartanwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shikhartanwar/subscriptions", "organizations_url": "https://api.github.com/users/shikhartanwar/orgs", "repos_url": "https://api.github.com/users/shikhartanwar/repos", "events_url": "https://api.github.com/users/shikhartanwar/events{/privacy}", "received_events_url": "https://api.github.com/users/shikhartanwar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 14, "created_at": "2018-05-25T17:23:20Z", "updated_at": "2018-05-28T16:16:06Z", "closed_at": "2018-05-28T16:16:06Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI have a 3rd party SDK included in my project that has class declarations like below -\r\nLet's assume the class name as Person (simplified the code for reporting purposes) -\r\n```c++\r\nclass _declspec(dllimport) Person \r\n{\r\n       public std::string name;\r\n}\r\n```\r\n\r\nI am trying to serialize the class using the below `to_json` function as mentioned in the documentation -\r\n```c++\r\n#include <Person.h>\r\n#include <nlohmann/json.hpp>\r\nusing json = nlohmann::json;\r\nvoid to_json(json& j, Person & o)\r\n{\r\n\tj = json{ { \"value\", o.name } };\r\n}\r\n\r\nPerson p = new Person();\r\np.name = \"Test\";\r\njson j = p;\r\n```\r\n\r\nHowever even though everything is syntactically correct, I am getting the below errors on building my project -\r\n\r\n1. `could not find to_json() method in T's namespace`\r\n2. `'force_msvc_stacktrace': is not a member of 'Person'`\r\n3. `'force_msvc_stacktrace': undeclared identifier`\r\n4. `forcing MSVC stacktrace to show which T we're talking about.`\r\n\r\nI have also tried creating a simple class **without** the `_declspec(dllimport)` and that works like a charm. \r\n\r\nCan someone please help in this regard?\r\n\r\n**Details:**\r\n1. Compiler: Visual Studio 2017\r\n2. Operating System: Windows"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1107", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1107/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1107/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1107/events", "html_url": "https://github.com/nlohmann/json/issues/1107", "id": 326391070, "node_id": "MDU6SXNzdWUzMjYzOTEwNzA=", "number": 1107, "title": "Get keys from json object", "user": {"login": "Radmir2015", "id": 21173382, "node_id": "MDQ6VXNlcjIxMTczMzgy", "avatar_url": "https://avatars3.githubusercontent.com/u/21173382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Radmir2015", "html_url": "https://github.com/Radmir2015", "followers_url": "https://api.github.com/users/Radmir2015/followers", "following_url": "https://api.github.com/users/Radmir2015/following{/other_user}", "gists_url": "https://api.github.com/users/Radmir2015/gists{/gist_id}", "starred_url": "https://api.github.com/users/Radmir2015/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Radmir2015/subscriptions", "organizations_url": "https://api.github.com/users/Radmir2015/orgs", "repos_url": "https://api.github.com/users/Radmir2015/repos", "events_url": "https://api.github.com/users/Radmir2015/events{/privacy}", "received_events_url": "https://api.github.com/users/Radmir2015/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-25T05:57:53Z", "updated_at": "2018-05-26T15:13:35Z", "closed_at": "2018-05-26T15:13:35Z", "author_association": "NONE", "body": "Is it possible to get all keys from json object (like on picture)?\r\n![screenshot_181](https://user-images.githubusercontent.com/21173382/40528398-96257f0e-5ff9-11e8-9f8d-2f20e9fc3057.png)\r\n![screenshot_182](https://user-images.githubusercontent.com/21173382/40528399-9657a2b8-5ff9-11e8-9ff8-67eb4d084421.png)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1106", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1106/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1106/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1106/events", "html_url": "https://github.com/nlohmann/json/issues/1106", "id": 326146050, "node_id": "MDU6SXNzdWUzMjYxNDYwNTA=", "number": 1106, "title": "dump() without alphabetical order", "user": {"login": "berte", "id": 922696, "node_id": "MDQ6VXNlcjkyMjY5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/922696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berte", "html_url": "https://github.com/berte", "followers_url": "https://api.github.com/users/berte/followers", "following_url": "https://api.github.com/users/berte/following{/other_user}", "gists_url": "https://api.github.com/users/berte/gists{/gist_id}", "starred_url": "https://api.github.com/users/berte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berte/subscriptions", "organizations_url": "https://api.github.com/users/berte/orgs", "repos_url": "https://api.github.com/users/berte/repos", "events_url": "https://api.github.com/users/berte/events{/privacy}", "received_events_url": "https://api.github.com/users/berte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-24T14:24:00Z", "updated_at": "2018-05-26T12:13:22Z", "closed_at": "2018-05-26T12:13:22Z", "author_association": "NONE", "body": "Hi,\r\n\r\nis it possible to use dump without alphabetical order?\r\n\r\ncheers,"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1105", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1105/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1105/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1105/events", "html_url": "https://github.com/nlohmann/json/issues/1105", "id": 325743051, "node_id": "MDU6SXNzdWUzMjU3NDMwNTE=", "number": 1105, "title": "Cannot deserialize types using std::ratio", "user": {"login": "GabrielDav", "id": 6910086, "node_id": "MDQ6VXNlcjY5MTAwODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6910086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabrielDav", "html_url": "https://github.com/GabrielDav", "followers_url": "https://api.github.com/users/GabrielDav/followers", "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}", "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions", "organizations_url": "https://api.github.com/users/GabrielDav/orgs", "repos_url": "https://api.github.com/users/GabrielDav/repos", "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}", "received_events_url": "https://api.github.com/users/GabrielDav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-23T14:52:08Z", "updated_at": "2018-05-23T17:02:40Z", "closed_at": "2018-05-23T16:22:41Z", "author_association": "NONE", "body": "Given\r\n`void from_json(const json& j, std::ratio<60>& r)\r\n\t{\r\n            // parsing\r\n\t}`\r\nI expect to get parsed value back when used like this:\r\n`auto data = j.at(\"Data\").get<std::ratio<60>>()`\r\nHowever, instead I'm getting a compilation error:\r\n\r\n> could not find from_json() method in T's namespace\r\n\r\nThis problem impacts usage of std::chrono::duration and std::crhono::time_point\r\n\r\nThis is really weird, because I copied implementation of std::ratio and renamed struct to rat\r\n\r\n```\r\ntemplate<intmax_t _Nx,\r\n\t\tintmax_t _Dx = 1>\r\n\t\tstruct rat\r\n\t{\t// holds the ratio of _Nx to _Dx\r\n\t\tstatic_assert(_Dx != 0,\r\n\t\t\t\"zero denominator\");\r\n\t\tstatic_assert(-INTMAX_MAX <= _Nx,\r\n\t\t\t\"numerator too negative\");\r\n\t\tstatic_assert(-INTMAX_MAX <= _Dx,\r\n\t\t\t\"denominator too negative\");\r\n\r\n\t\tstatic constexpr intmax_t num = _Sign_of<_Nx>::value\r\n\t\t\t* _Sign_of<_Dx>::value * _Abs<_Nx>::value / _Gcd<_Nx, _Dx>::value;\r\n\r\n\t\tstatic constexpr intmax_t den = _Abs<_Dx>::value / _Gcd<_Nx, _Dx>::value;\r\n\r\n\t\ttypedef rat<num, den> type;\r\n\t};\r\n\r\nvoid from_json(const json& j, rat<60>& r)\r\n\t{\r\n            // parsing\r\n\t}\r\n\r\nauto data = j.at(\"Data\").get<rat<60>>();\r\n```\r\nSurprisingly this works as expected.\r\nI'm using Visual Studio 2017 msvc compiler. Project uses std::chrono across solution without any issues."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1104", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1104/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1104/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1104/events", "html_url": "https://github.com/nlohmann/json/issues/1104", "id": 325494338, "node_id": "MDU6SXNzdWUzMjU0OTQzMzg=", "number": 1104, "title": " i want to learn json", "user": {"login": "wenhuancai", "id": 20059816, "node_id": "MDQ6VXNlcjIwMDU5ODE2", "avatar_url": "https://avatars1.githubusercontent.com/u/20059816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenhuancai", "html_url": "https://github.com/wenhuancai", "followers_url": "https://api.github.com/users/wenhuancai/followers", "following_url": "https://api.github.com/users/wenhuancai/following{/other_user}", "gists_url": "https://api.github.com/users/wenhuancai/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenhuancai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenhuancai/subscriptions", "organizations_url": "https://api.github.com/users/wenhuancai/orgs", "repos_url": "https://api.github.com/users/wenhuancai/repos", "events_url": "https://api.github.com/users/wenhuancai/events{/privacy}", "received_events_url": "https://api.github.com/users/wenhuancai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-22T23:10:00Z", "updated_at": "2018-05-27T15:30:21Z", "closed_at": "2018-05-27T15:30:21Z", "author_association": "NONE", "body": "Hi, I want to learn about this json library.Json [key] = values.I think it's a cool thing to do, but I don't know how to read the source code.Is there any good documentation for me to join this project quickly?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1103", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1103/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1103/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1103/events", "html_url": "https://github.com/nlohmann/json/issues/1103", "id": 325016956, "node_id": "MDU6SXNzdWUzMjUwMTY5NTY=", "number": 1103, "title": "Type checking during compile", "user": {"login": "trivigy", "id": 3146062, "node_id": "MDQ6VXNlcjMxNDYwNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3146062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trivigy", "html_url": "https://github.com/trivigy", "followers_url": "https://api.github.com/users/trivigy/followers", "following_url": "https://api.github.com/users/trivigy/following{/other_user}", "gists_url": "https://api.github.com/users/trivigy/gists{/gist_id}", "starred_url": "https://api.github.com/users/trivigy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trivigy/subscriptions", "organizations_url": "https://api.github.com/users/trivigy/orgs", "repos_url": "https://api.github.com/users/trivigy/repos", "events_url": "https://api.github.com/users/trivigy/events{/privacy}", "received_events_url": "https://api.github.com/users/trivigy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-21T18:38:24Z", "updated_at": "2018-05-23T05:39:48Z", "closed_at": "2018-05-23T05:39:48Z", "author_association": "NONE", "body": "Sorry for the naive question in case this is really rudimentary but is there a way to type check the json instance during compile time? The basic use case in my situation is that I am passing a json object as a function argument and I want to ensure that only `json::object` is passed. Was hoping it could be check done during compile time."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1102", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1102/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1102/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1102/events", "html_url": "https://github.com/nlohmann/json/issues/1102", "id": 324950111, "node_id": "MDU6SXNzdWUzMjQ5NTAxMTE=", "number": 1102, "title": "Iterate through sub items", "user": {"login": "johnroper100", "id": 9782943, "node_id": "MDQ6VXNlcjk3ODI5NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9782943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnroper100", "html_url": "https://github.com/johnroper100", "followers_url": "https://api.github.com/users/johnroper100/followers", "following_url": "https://api.github.com/users/johnroper100/following{/other_user}", "gists_url": "https://api.github.com/users/johnroper100/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnroper100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnroper100/subscriptions", "organizations_url": "https://api.github.com/users/johnroper100/orgs", "repos_url": "https://api.github.com/users/johnroper100/repos", "events_url": "https://api.github.com/users/johnroper100/events{/privacy}", "received_events_url": "https://api.github.com/users/johnroper100/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-21T15:04:38Z", "updated_at": "2018-06-03T17:33:16Z", "closed_at": "2018-06-03T17:33:16Z", "author_association": "NONE", "body": "I have a json file that looks like this:\r\n\r\n```json\r\n{\r\n    \"name\": \"Generic Dimmer\",\r\n    \"shortName\": \"Dimmer\",\r\n    \"manufacturer\": \"Generic\",\r\n    \"channels\": [\r\n        {\r\n            \"type\": \"intensity\",\r\n            \"name\": \"Intensity\",\r\n            \"max\": 255,\r\n            \"min\": 0,\r\n            \"displayMax\": 100,\r\n            \"displayMin\": 0,\r\n            \"default\": 0,\r\n            \"dmxAddress\": 0,\r\n            \"value\": 0,\r\n            \"displayValue\": 0\r\n        }\r\n    ]\r\n}\r\n```\r\nI was able to import the file and access props such as `name`, `shortName`, and `manufacturer`, but I'm having trouble looping through the `channel` array.\r\n\r\nThis is what I've tried so far:\r\n```cpp\r\n    ifstream i(\"../fixtures/\"+fixtureName+\".json\");\r\n    json f;\r\n    i >> f;\r\n\r\n    // Create a new fixture from the fixture spec and save it to the fixtures list\r\n    fixture newFixture;\r\n    newFixture.id = randomString();\r\n    newFixture.name = f[\"name\"];\r\n    newFixture.shortName = f[\"shortName\"];\r\n    newFixture.manufacturer = f[\"manufacturer\"];\r\n    newFixture.startDMXAddress = j[\"startDMXAddress\"];\r\n    channel newChannel;\r\n    for (auto& x : json::iterator_wrapper(f[\"channels\"]))\r\n    {\r\n        newChannel.id = randomString();\r\n        newChannel.type = x.value()[\"type\"];\r\n        cout << \"key: \" << x.key() << \", value: \" << x.value() << '\\n';\r\n    }\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1101", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1101/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1101/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1101/events", "html_url": "https://github.com/nlohmann/json/issues/1101", "id": 324664396, "node_id": "MDU6SXNzdWUzMjQ2NjQzOTY=", "number": 1101, "title": "cppcheck failing for version 3.1.2", "user": {"login": "psalvaggio", "id": 13050294, "node_id": "MDQ6VXNlcjEzMDUwMjk0", "avatar_url": "https://avatars0.githubusercontent.com/u/13050294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psalvaggio", "html_url": "https://github.com/psalvaggio", "followers_url": "https://api.github.com/users/psalvaggio/followers", "following_url": "https://api.github.com/users/psalvaggio/following{/other_user}", "gists_url": "https://api.github.com/users/psalvaggio/gists{/gist_id}", "starred_url": "https://api.github.com/users/psalvaggio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psalvaggio/subscriptions", "organizations_url": "https://api.github.com/users/psalvaggio/orgs", "repos_url": "https://api.github.com/users/psalvaggio/repos", "events_url": "https://api.github.com/users/psalvaggio/events{/privacy}", "received_events_url": "https://api.github.com/users/psalvaggio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 11, "created_at": "2018-05-19T22:14:52Z", "updated_at": "2018-05-30T04:58:04Z", "closed_at": "2018-05-27T10:31:36Z", "author_association": "NONE", "body": "- What is the issue you have?\r\n\r\nThe \"make cppcheck\" test is failing on version 3.1.2\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nDownload the .tar.gz for the version, run \"make cppcheck\"\r\n\r\n- What is the expected behavior?\r\n\r\nPassing\r\n\r\n- And what is the actual behavior instead?\r\n\r\n```\r\n[json-3.1.2]$ make cppcheck\r\ncppcheck --enable=warning --inconclusive --force --std=c++11 single_include/nlohmann/json.hpp --error-exitcode=1\r\nChecking single_include/nlohmann/json.hpp ...\r\n[single_include/nlohmann/json.hpp:72]: (error) syntax error\r\nChecking single_include/nlohmann/json.hpp: JSON_CATCH_USER...\r\nChecking single_include/nlohmann/json.hpp: JSON_NOEXCEPTION;_CPPUNWIND;__EXCEPTIONS;__cpp_exceptions...\r\nChecking single_include/nlohmann/json.hpp: JSON_THROW_USER...\r\nChecking single_include/nlohmann/json.hpp: JSON_TRY_USER...\r\nChecking single_include/nlohmann/json.hpp: _HAS_CXX14...\r\nChecking single_include/nlohmann/json.hpp: _HAS_CXX17...\r\nChecking single_include/nlohmann/json.hpp: _MSC_VER...\r\nChecking single_include/nlohmann/json.hpp: _WIN32...\r\nChecking single_include/nlohmann/json.hpp: __APPLE__...\r\nChecking single_include/nlohmann/json.hpp: __GNUC__...\r\nChecking single_include/nlohmann/json.hpp: __GNUC__;__GNUG__...\r\nChecking single_include/nlohmann/json.hpp: __GNUC__;__GNUG__;__clang__...\r\nChecking single_include/nlohmann/json.hpp: __HP_aCC;__HP_cc...\r\nChecking single_include/nlohmann/json.hpp: __IBMCPP__...\r\nChecking single_include/nlohmann/json.hpp: __ICC;__INTEL_COMPILER...\r\nChecking single_include/nlohmann/json.hpp: __PGI...\r\nChecking single_include/nlohmann/json.hpp: __SUNPRO_CC...\r\nChecking single_include/nlohmann/json.hpp: __clang__...\r\nChecking single_include/nlohmann/json.hpp: __linux__...\r\nChecking single_include/nlohmann/json.hpp: __unix__...\r\nmake: *** [Makefile:259: cppcheck] Error 1\r\n```\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nGCC 7.3.1 on Fedora 27\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nReleased\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nUnit tests are all passing.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1100", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1100/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1100/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1100/events", "html_url": "https://github.com/nlohmann/json/issues/1100", "id": 324377051, "node_id": "MDU6SXNzdWUzMjQzNzcwNTE=", "number": 1100, "title": "Deserializing std::map", "user": {"login": "RolandasV", "id": 17047859, "node_id": "MDQ6VXNlcjE3MDQ3ODU5", "avatar_url": "https://avatars0.githubusercontent.com/u/17047859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RolandasV", "html_url": "https://github.com/RolandasV", "followers_url": "https://api.github.com/users/RolandasV/followers", "following_url": "https://api.github.com/users/RolandasV/following{/other_user}", "gists_url": "https://api.github.com/users/RolandasV/gists{/gist_id}", "starred_url": "https://api.github.com/users/RolandasV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RolandasV/subscriptions", "organizations_url": "https://api.github.com/users/RolandasV/orgs", "repos_url": "https://api.github.com/users/RolandasV/repos", "events_url": "https://api.github.com/users/RolandasV/events{/privacy}", "received_events_url": "https://api.github.com/users/RolandasV/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2018-05-18T11:41:53Z", "updated_at": "2018-07-04T10:59:41Z", "closed_at": "2018-05-28T09:14:12Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nWhen trying to deserialize a std::map which has a int/Enum as a key I'm getting compilation error.\r\nError\tC2166\tl-value specifies const object\r\n\r\nWhen i try to deserialize a std::map with a key as a string for example, it compiles fine.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nSerialize a std::map having int/enum as a key. Try to deserialize it.\r\n\r\n`json.at(_materialTypeByFaceSelectionJson).get<map<MaterialTypeEnum, FaceSelectionEnum>>();`\r\n\r\n- What is the expected behavior?\r\nIt should compile.\r\n\r\n- And what is the actual behavior instead?\r\nIt doesn't.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nI'm using windows 10 and Visual Studio 2017.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nI'm using released version.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1098", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1098/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1098/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1098/events", "html_url": "https://github.com/nlohmann/json/issues/1098", "id": 324244420, "node_id": "MDU6SXNzdWUzMjQyNDQ0MjA=", "number": 1098, "title": "accessing key by reference", "user": {"login": "crusader-mike", "id": 22357016, "node_id": "MDQ6VXNlcjIyMzU3MDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/22357016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusader-mike", "html_url": "https://github.com/crusader-mike", "followers_url": "https://api.github.com/users/crusader-mike/followers", "following_url": "https://api.github.com/users/crusader-mike/following{/other_user}", "gists_url": "https://api.github.com/users/crusader-mike/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusader-mike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusader-mike/subscriptions", "organizations_url": "https://api.github.com/users/crusader-mike/orgs", "repos_url": "https://api.github.com/users/crusader-mike/repos", "events_url": "https://api.github.com/users/crusader-mike/events{/privacy}", "received_events_url": "https://api.github.com/users/crusader-mike/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 11, "created_at": "2018-05-18T01:58:22Z", "updated_at": "2018-05-28T01:36:23Z", "closed_at": "2018-05-27T20:26:33Z", "author_association": "NONE", "body": "Is there any way to access `key` in object by reference? Currently `(const_)iterator::key()` returns string by value causing extra copy every time I need to access it.\r\n\r\nIs there any reason why that string gets returned by value?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1097", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1097/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1097/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1097/events", "html_url": "https://github.com/nlohmann/json/issues/1097", "id": 324191756, "node_id": "MDU6SXNzdWUzMjQxOTE3NTY=", "number": 1097, "title": "clang 3.8.0 croaks while trying to compile with debug symbols", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-17T21:26:09Z", "updated_at": "2018-05-29T16:04:59Z", "closed_at": "2018-05-29T16:03:20Z", "author_association": "NONE", "body": "To clarify: the compiler aborts, rather than a mere compilation error.\r\nInitial problematic commit: 8e681d1e570b2274a799521aad83292ed719e172\r\n\r\nTo reproduce:\r\n```c++\r\n//main.cpp\r\n#include \"nlohmann/json.hpp\"\r\n#include <iostream>\r\nint main()\r\n{\r\n    nlohmann::json j; \r\n    std::cin >> j; \r\n    return 0; \r\n}\r\n```\r\n\r\n```\r\n>>clang++ -std=c++11  -g main.cpp\r\nclang: /usr/local/llvm/3.8.0/src/llvm-3.8.0.src/lib/IR/Metadata.cpp:192: void llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata*): Assertion `!(MD && isa<MDNode>(MD) && cast<MDNode>(MD)->isTemporary()) && \"Expected non-temp node\"' failed.\r\n...\r\nclang: error: unable to execute command: Aborted\r\nclang: error: clang frontend command failed due to signal (use -v to see invocation)\r\nclang version 3.8.0 (tags/RELEASE_380/final)\r\n...\r\n```\r\n\r\nProposed workaround:\r\n1) Move `parse_event_t` outside of `parser` into `detail`\r\n2) Remove `using parse_event_t = typename parser::parse_event_t;` in `basic_json`\r\n3) Replace `using parser_callback_t = typename parser::parser_callback_t;` with `using parser_callback_t = std::function<bool(int depth, detail::parse_event_t event, basic_json& parsed)>;`\r\n\r\n```diff\r\ndiff --git a/single_include/nlohmann/json.hpp b/single_include/nlohmann/json.hpp\r\nindex 8c9942b..d7f133d 100644\r\n--- a/single_include/nlohmann/json.hpp\r\n+++ b/single_include/nlohmann/json.hpp\r\n@@ -3321,6 +3321,24 @@ namespace nlohmann\r\n {\r\n namespace detail\r\n {\r\n+\r\n+enum class parse_event_t : uint8_t\r\n+{\r\n+    /// the parser read `{` and started to process a JSON object\r\n+    object_start,\r\n+    /// the parser read `}` and finished processing a JSON object\r\n+    object_end,\r\n+    /// the parser read `[` and started to process a JSON array\r\n+    array_start,\r\n+    /// the parser read `]` and finished processing a JSON array\r\n+    array_end,\r\n+    /// the parser read a key of a value in an object\r\n+    key,\r\n+    /// the parser finished reading a JSON value\r\n+    value\r\n+};\r\n+\r\n+    \r\n ////////////\r\n // parser //\r\n ////////////\r\n@@ -3341,21 +3359,6 @@ class parser\r\n     using token_type = typename lexer_t::token_type;\r\n \r\n   public:\r\n-    enum class parse_event_t : uint8_t\r\n-    {\r\n-        /// the parser read `{` and started to process a JSON object\r\n-        object_start,\r\n-        /// the parser read `}` and finished processing a JSON object\r\n-        object_end,\r\n-        /// the parser read `[` and started to process a JSON array\r\n-        array_start,\r\n-        /// the parser read `]` and finished processing a JSON array\r\n-        array_end,\r\n-        /// the parser read a key of a value in an object\r\n-        key,\r\n-        /// the parser finished reading a JSON value\r\n-        value\r\n-    };\r\n \r\n     using parser_callback_t =\r\n         std::function<bool(int depth, parse_event_t event, BasicJsonType& parsed)>;\r\n@@ -10859,23 +10862,6 @@ class basic_json\r\n     //////////////////////////\r\n \r\n     /*!\r\n-    @brief parser event types\r\n-\r\n-    The parser callback distinguishes the following events:\r\n-    - `object_start`: the parser read `{` and started to process a JSON object\r\n-    - `key`: the parser read a key of a value in an object\r\n-    - `object_end`: the parser read `}` and finished processing a JSON object\r\n-    - `array_start`: the parser read `[` and started to process a JSON array\r\n-    - `array_end`: the parser read `]` and finished processing a JSON array\r\n-    - `value`: the parser finished reading a JSON value\r\n-\r\n-    @image html callback_events.png \"Example when certain parse events are triggered\"\r\n-\r\n-    @sa @ref parser_callback_t for more information and examples\r\n-    */\r\n-    using parse_event_t = typename parser::parse_event_t;\r\n-\r\n-    /*!\r\n     @brief per-element parser callback type\r\n \r\n     With a parser callback function, the result of parsing a JSON text can be\r\n@@ -10924,7 +10910,7 @@ class basic_json\r\n \r\n     @since version 1.0.0\r\n     */\r\n-    using parser_callback_t = typename parser::parser_callback_t;\r\n+    using parser_callback_t = std::function<bool(int depth, detail::parse_event_t event, basic_json& parsed)>;\r\n \r\n \r\n     //////////////////\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1096", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1096/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1096/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1096/events", "html_url": "https://github.com/nlohmann/json/issues/1096", "id": 324161803, "node_id": "MDU6SXNzdWUzMjQxNjE4MDM=", "number": 1096, "title": "Serialize a list of class objects with json", "user": {"login": "AncaMRG", "id": 39385676, "node_id": "MDQ6VXNlcjM5Mzg1Njc2", "avatar_url": "https://avatars0.githubusercontent.com/u/39385676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AncaMRG", "html_url": "https://github.com/AncaMRG", "followers_url": "https://api.github.com/users/AncaMRG/followers", "following_url": "https://api.github.com/users/AncaMRG/following{/other_user}", "gists_url": "https://api.github.com/users/AncaMRG/gists{/gist_id}", "starred_url": "https://api.github.com/users/AncaMRG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AncaMRG/subscriptions", "organizations_url": "https://api.github.com/users/AncaMRG/orgs", "repos_url": "https://api.github.com/users/AncaMRG/repos", "events_url": "https://api.github.com/users/AncaMRG/events{/privacy}", "received_events_url": "https://api.github.com/users/AncaMRG/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-17T19:51:07Z", "updated_at": "2018-05-30T07:49:46Z", "closed_at": "2018-05-30T07:49:46Z", "author_association": "NONE", "body": "Hello,\r\nI want to serialize a list which contains a class objects. How can I do that using json. For a list of regular types I understand, but when I try to use json j_list(listName), and the listName is a list of objects I receive some errors from to_json method and 'force_msvc_stacktrace'.\r\n\r\nThis is the code.\r\n\r\n       std::list<Student>studentList;\r\n\r\n// populate studentList with objects of Student class\r\n\r\n\tstring filename = \"StudentList.json\";\r\n\tstd::ofstream output(filename, std::ofstream::out);\r\n\tjson js_list(studentList);\r\n\toutput << js_list;\r\n\toutput.close();\r\n\r\nWhat should I do to I make this work? \r\nThank you! :D"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1095", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1095/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1095/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1095/events", "html_url": "https://github.com/nlohmann/json/issues/1095", "id": 324066087, "node_id": "MDU6SXNzdWUzMjQwNjYwODc=", "number": 1095, "title": "Null bytes in files are treated like EOF", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-17T15:08:56Z", "updated_at": "2018-06-23T15:39:28Z", "closed_at": "2018-06-23T15:39:28Z", "author_association": "OWNER", "body": "- What is the issue you have?\r\n\r\nWhen reading parsing JSON from a file, null bytes are treated as EOF. The reason for this is explicit code in the JSON lexer to treat `\\0` as EOF to properly parse string literals.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nParse file https://github.com/nst/JSONTestSuite/blob/master/test_parsing/n_multidigit_number_then_00.json, e.g. by\r\n\r\n```cpp\r\nstd::ifstream f(\"n_multidigit_number_then_00.json\");\r\njson::parse(f);\r\n```\r\n\r\n- What is the expected behavior?\r\n\r\nParse error: unexpected null byte after reading `123`.\r\n\r\n- And what is the actual behavior instead?\r\n\r\nThe file is successfully parsed as number `123`.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nApple LLVM version 9.1.0.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n`develop`.\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nN/A"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1094", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1094/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1094/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1094/events", "html_url": "https://github.com/nlohmann/json/issues/1094", "id": 323965053, "node_id": "MDU6SXNzdWUzMjM5NjUwNTM=", "number": 1094, "title": "Small question", "user": {"login": "martinnnnnn", "id": 12356294, "node_id": "MDQ6VXNlcjEyMzU2Mjk0", "avatar_url": "https://avatars0.githubusercontent.com/u/12356294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinnnnnn", "html_url": "https://github.com/martinnnnnn", "followers_url": "https://api.github.com/users/martinnnnnn/followers", "following_url": "https://api.github.com/users/martinnnnnn/following{/other_user}", "gists_url": "https://api.github.com/users/martinnnnnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinnnnnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinnnnnn/subscriptions", "organizations_url": "https://api.github.com/users/martinnnnnn/orgs", "repos_url": "https://api.github.com/users/martinnnnnn/repos", "events_url": "https://api.github.com/users/martinnnnnn/events{/privacy}", "received_events_url": "https://api.github.com/users/martinnnnnn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-17T10:33:01Z", "updated_at": "2018-05-17T14:48:46Z", "closed_at": "2018-05-17T14:48:46Z", "author_association": "NONE", "body": "Hi,\r\nThanks for the library, it's really easy to setup and use :) I only have one small question :\r\nIs it possible to set pretty print when printing a json object without setting it for arrays in the object ? I end up with \r\n`\"obj1\": {`\r\n`        \"key1\": \"value1\",`\r\n`        \"key2\": [`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0`\r\n   `     ]`\r\n   ` },`\r\n(there should be tabs but I couldn't get the code insertion to do what I want ^^')\r\nwhich doesn't look very good.. Any way I can set the array to print in 1 line ? I could probably iterate thought each objects and check when there is an array and print it differenlty but that seems like a lot of work !\r\nThanks :)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1093", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1093/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1093/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1093/events", "html_url": "https://github.com/nlohmann/json/issues/1093", "id": 323902756, "node_id": "MDU6SXNzdWUzMjM5MDI3NTY=", "number": 1093, "title": "Upgrading to 3.x: to_/from_json with enum class", "user": {"login": "endorph-soft", "id": 6407517, "node_id": "MDQ6VXNlcjY0MDc1MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6407517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/endorph-soft", "html_url": "https://github.com/endorph-soft", "followers_url": "https://api.github.com/users/endorph-soft/followers", "following_url": "https://api.github.com/users/endorph-soft/following{/other_user}", "gists_url": "https://api.github.com/users/endorph-soft/gists{/gist_id}", "starred_url": "https://api.github.com/users/endorph-soft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/endorph-soft/subscriptions", "organizations_url": "https://api.github.com/users/endorph-soft/orgs", "repos_url": "https://api.github.com/users/endorph-soft/repos", "events_url": "https://api.github.com/users/endorph-soft/events{/privacy}", "received_events_url": "https://api.github.com/users/endorph-soft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-05-17T07:28:57Z", "updated_at": "2018-07-10T21:02:11Z", "closed_at": "2018-07-10T20:14:44Z", "author_association": "NONE", "body": "I'm in the process of updating a project from version 2.1.1 to the version 3.x series.\r\n\r\nI have the following two functions defined to handle enum classes:\r\n\r\n```cpp\r\ntemplate <typename JSON, typename Enum>\r\nvoid to_json(JSON & j, Enum e) {\r\n  j = ToString(e);\r\n}\r\n\r\ntemplate <typename JSON, typename Enum>\r\nvoid from_json(const JSON & j, Enum & e) {\r\n  if (!FromString(e, j)) {\r\n    throw std::invalid_argument(\"Badness...\");\r\n  }\r\n}\r\n```\r\n\r\nThere are definitions of `ToString` and `FromString` for all the enumerations of interest. I'm not using SFINAE to restrict `Enum` to enumerations, because it's not currently needed. With version 2.1.1, everything is working fine.\r\n\r\nWith the update to 3.x, these functions are no longer found by the lookup. If I comment out the new enum `to_json` and `from_json` inside the library, the errors disappear, and all is well again.\r\n\r\nHow can I make my functions work? Do I need a more specific signature? I don't want to define a function for every enumeration, if I can get away with it."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1092", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1092/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1092/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1092/events", "html_url": "https://github.com/nlohmann/json/issues/1092", "id": 323812440, "node_id": "MDU6SXNzdWUzMjM4MTI0NDA=", "number": 1092, "title": "Q: few questions about json construction", "user": {"login": "crusader-mike", "id": 22357016, "node_id": "MDQ6VXNlcjIyMzU3MDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/22357016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusader-mike", "html_url": "https://github.com/crusader-mike", "followers_url": "https://api.github.com/users/crusader-mike/followers", "following_url": "https://api.github.com/users/crusader-mike/following{/other_user}", "gists_url": "https://api.github.com/users/crusader-mike/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusader-mike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusader-mike/subscriptions", "organizations_url": "https://api.github.com/users/crusader-mike/orgs", "repos_url": "https://api.github.com/users/crusader-mike/repos", "events_url": "https://api.github.com/users/crusader-mike/events{/privacy}", "received_events_url": "https://api.github.com/users/crusader-mike/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2018-05-16T22:39:29Z", "updated_at": "2018-05-18T16:38:21Z", "closed_at": "2018-05-16T23:58:59Z", "author_association": "NONE", "body": "I was digging in json.hpp (v2.1.0) in order to understand how stuff gets created and check for unnecessary copies/allocations in simple cases like:\r\n```\r\njson x = { {\"val1\", 1}, {\"val2\", true} };\r\n```\r\n\r\nAs I see it:\r\n\r\n- `basic_json` has expensive copy semantics as evidenced by it's cctor and op=:\r\n```\r\n    basic_json(const basic_json& other)\r\n        : m_type(other.m_type)\r\n    {\r\n        ...\r\n        switch (m_type)\r\n        {\r\n            case value_t::object:\r\n            {\r\n                m_value = *other.m_value.object;   <-- mem alloc + cctor call\r\n                break;\r\n            }\r\n        ...\r\n\r\n    reference& operator=(basic_json other) ...    <-- note lack of const&\r\n    {\r\n        ...\r\n        using std::swap;\r\n        swap(m_type, other.m_type);\r\n        swap(m_value, other.m_value);\r\n```\r\n\r\n- which means in my example we will end up copying the same data many times (depending how deep in hierarchy given piece of data is)\r\n\r\n- `{\"val1\", 1}` will be used to create a `basic_json` of type array that contains two `basic_json` objects of types `string` and `whatever` respectively (underlying vector will be allocated on heap, same for that string)\r\n\r\n- then it will be used to populate an `std::map` entry in `basic_json` object of type _object_ here:\r\n```\r\n    basic_json(std::initializer_list<basic_json> init,\r\n               bool type_deduction = true,\r\n               value_t manual_type = value_t::array)\r\n    {\r\n        ...\r\n            std::for_each(init.begin(), init.end(), [this](const basic_json & element)\r\n            {\r\n                m_value.object->emplace(*(element[0].m_value.string), element[1]);\r\n            });\r\n```\r\nwhere `m_value.object` is of type `std::map<string, basic_json>` and `emplace` will end up passing a `string&` to related constructor (which will have to make another copy of a string)\r\n\r\n- and at some point `initializer_list` instances will be destroyed causing destruction of related `basic_json` objects and aforementioned `vector` and `string` objects will be deallocated\r\n\r\nPlease, correct me if this is incorrect or I missed smth important. \r\n\r\nNow, as I see it there is a quick and easy way to avoid few copies:\r\n```\r\nm_value.object->emplace(std::move(*(element[0].m_value.string)), std::move(element[1]));\r\n```\r\n\r\nQ1: do you think it is ok? if not -- why?\r\n\r\nQ2: this process has a lot of extra allocations (basic_json copies, underlying vectors and strings) -- is there an approach to construct my json object and avoid them?\r\n\r\nQ3: pushing it further a bit -- inserting new sub-element into object means `std::map` lookup, can I avoid it somehow? For example by providing sub-elements in proper order and forcing related `std::map::emplace/insert` to use `end()` as a hint.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1091", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1091/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1091/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1091/events", "html_url": "https://github.com/nlohmann/json/issues/1091", "id": 323664868, "node_id": "MDU6SXNzdWUzMjM2NjQ4Njg=", "number": 1091, "title": "general crayCC compilation failure", "user": {"login": "cpranger", "id": 39338887, "node_id": "MDQ6VXNlcjM5MzM4ODg3", "avatar_url": "https://avatars0.githubusercontent.com/u/39338887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpranger", "html_url": "https://github.com/cpranger", "followers_url": "https://api.github.com/users/cpranger/followers", "following_url": "https://api.github.com/users/cpranger/following{/other_user}", "gists_url": "https://api.github.com/users/cpranger/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpranger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpranger/subscriptions", "organizations_url": "https://api.github.com/users/cpranger/orgs", "repos_url": "https://api.github.com/users/cpranger/repos", "events_url": "https://api.github.com/users/cpranger/events{/privacy}", "received_events_url": "https://api.github.com/users/cpranger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-05-16T15:10:14Z", "updated_at": "2018-05-20T09:54:11Z", "closed_at": "2018-05-20T09:54:11Z", "author_association": "NONE", "body": "I am very interested to use this amazing JSON library for my project. However, I am virtually tied to using the Cray Compiling Environment (CCE) and the Cray C++ compiler (crayCC). I realise that what I am reporting below may well be outside the scope of the developer(s), and that moreover, CrayCC is not on the list of supported compilers. Yet I want to make mention of this, and leave it up to the author to decide what to do with this information. Any help would be appreciated!\r\n\r\nI have constructed a minimal working example (hello world) which does absolutely nothing with JSON except include the single header file:\r\n\r\n```\r\n#include <iostream>\r\n#include \"nlohmann/json.hpp\"\r\n\r\nint main()\r\n\t{ std::cout << \"hello world!\" << std::endl; }\r\n```\r\n\r\nthis program is compiled with either gcc 7.2.0 producing expected behaviour (hello world!), and with crayCC 8.6.5 (https://pubs.cray.com/content/S-2179/8.6/cray-c-and-c++-reference-manual-s-2179-86/about-the-cray-and-c++-reference-manual).\r\n\r\n```\r\n> CC hello_json.cpp\r\n```\r\n\r\nthe output is:\r\n\r\n```\r\n/tmp/pe_38754/hello_json_1.o: In function `std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()':\r\n/opt/gcc/6.1.0/snos/include/g++/bits/shared_ptr_base.h:147: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/opt/gcc/6.1.0/snos/include/g++/bits/shared_ptr_base.h:162: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/tmp/pe_38754/hello_json_1.o: In function `std::__shared_ptr<nlohmann::detail::input_adapter_protocol, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()':\r\n/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:1: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:1: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/tmp/pe_38754/hello_json_1.o: In function `std::__shared_ptr<nlohmann::detail::output_adapter_protocol<char>, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()':\r\n/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:7488: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/tmp/pe_38754/hello_json_1.o:/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:7488: more undefined references to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main' follow\r\n/tmp/pe_38754/hello_json_1.o: In function `std::unique_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::create<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)#1}>::~unique_ptr()':\r\n/opt/gcc/6.1.0/snos/include/g++/bits/unique_ptr.h:236: undefined reference to `_ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_ENKUlPS8_E_clESJ_$$CFE_id_b13fd261_main'\r\n/opt/cray/pe/cce/8.6.5/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: link errors found, deleting executable `a.out'\r\n/usr/bin/X11/sha1sum: a.out: No such file or directory\r\n```\r\n\r\nFYI, `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main` demangles to \r\n```\r\n_INTERNAL_b13fd261_main::__gnu_cxx::__exchange_and_add_dispatch(int*, int)$$CFE_id_b13fd261_main\r\n```\r\nand `_ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_ENKUlPS8_E_clESJ_$$CFE_id_b13fd261_main` demangles to \r\n```\r\nstd::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::create<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)#1}::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const$$CFE_id_b13fd261_main\r\n```\r\n\r\nPlease let me know if any more information is required!\r\n\r\nCasper"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1090", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1090/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1090/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1090/events", "html_url": "https://github.com/nlohmann/json/issues/1090", "id": 323074845, "node_id": "MDU6SXNzdWUzMjMwNzQ4NDU=", "number": 1090, "title": "Merge Patch clears original data", "user": {"login": "FlowShowcontrol", "id": 10196339, "node_id": "MDQ6VXNlcjEwMTk2MzM5", "avatar_url": "https://avatars3.githubusercontent.com/u/10196339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlowShowcontrol", "html_url": "https://github.com/FlowShowcontrol", "followers_url": "https://api.github.com/users/FlowShowcontrol/followers", "following_url": "https://api.github.com/users/FlowShowcontrol/following{/other_user}", "gists_url": "https://api.github.com/users/FlowShowcontrol/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlowShowcontrol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlowShowcontrol/subscriptions", "organizations_url": "https://api.github.com/users/FlowShowcontrol/orgs", "repos_url": "https://api.github.com/users/FlowShowcontrol/repos", "events_url": "https://api.github.com/users/FlowShowcontrol/events{/privacy}", "received_events_url": "https://api.github.com/users/FlowShowcontrol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-15T05:48:51Z", "updated_at": "2018-05-16T07:49:28Z", "closed_at": "2018-05-16T07:23:08Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nI have two objects which I want to merge using the `merge_patch()` function. An example of my objects:\r\n```\r\n\r\nA {c : [{a : \"1\", b: \"2\"}], d: \"5\"}\r\n\r\nB{c: [{a: \"2\"}]}\r\n\r\nresult:\r\n\r\nC{c:[{a:\"2\"}], d:\"5\"}\r\n```\r\n\r\nWhen merging B into A, the library seems to delete value A{c[{b}]}. \r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\nI was expecting for all the original values to remain because they are not defined in the patch object\r\n- And what is the actual behavior instead?\r\nThe original values that are not defined are removed\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nlatest version\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1089", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1089/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1089/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1089/events", "html_url": "https://github.com/nlohmann/json/pull/1089", "id": 322747730, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg3Nzc0ODcx", "number": 1089, "title": "Provide a from_json overload for std::map", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 10, "created_at": "2018-05-14T09:56:24Z", "updated_at": "2018-05-28T14:34:04Z", "closed_at": "2018-05-28T12:53:24Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1089", "html_url": "https://github.com/nlohmann/json/pull/1089", "diff_url": "https://github.com/nlohmann/json/pull/1089.diff", "patch_url": "https://github.com/nlohmann/json/pull/1089.patch"}, "body": "This overload is chosen only when BasicJsonType::string_t\r\nis not constructible from std::map::key_type.\r\n\r\nCurrently, converting a map to json treats it as an array of pairs.\r\n\r\nfixes #1079 \r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\nRead the [Contribution Guidelines](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md) for detailed information.\r\n\r\n- [x]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [x]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [x]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src).\r\n- [x]  The source code is amalgamated; that is, after making changes to the sources in the `include/nlohmann` directory, run `make amalgamate` to create the single-header file `single_include/nlohmann/json.hpp`. The whole process is described [here](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md#files-to-change).\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1088", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1088/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1088/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1088/events", "html_url": "https://github.com/nlohmann/json/issues/1088", "id": 322695859, "node_id": "MDU6SXNzdWUzMjI2OTU4NTk=", "number": 1088, "title": "[Question] how to use nlohmann/json in c++?", "user": {"login": "boddumanohar", "id": 9148277, "node_id": "MDQ6VXNlcjkxNDgyNzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9148277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boddumanohar", "html_url": "https://github.com/boddumanohar", "followers_url": "https://api.github.com/users/boddumanohar/followers", "following_url": "https://api.github.com/users/boddumanohar/following{/other_user}", "gists_url": "https://api.github.com/users/boddumanohar/gists{/gist_id}", "starred_url": "https://api.github.com/users/boddumanohar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boddumanohar/subscriptions", "organizations_url": "https://api.github.com/users/boddumanohar/orgs", "repos_url": "https://api.github.com/users/boddumanohar/repos", "events_url": "https://api.github.com/users/boddumanohar/events{/privacy}", "received_events_url": "https://api.github.com/users/boddumanohar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-05-14T07:08:22Z", "updated_at": "2018-05-17T14:44:50Z", "closed_at": "2018-05-17T14:44:50Z", "author_association": "NONE", "body": "I am working on an application where two process exchange data through shared memory. So instead of using structs to pack the data, I choose to use JSON so that I won't face any issues due to compilers.\r\n\r\nMy sender side is written in C++14 and the receiver side is written in C\r\n\r\nOn the reciver side, which is C, how do I read  the json data?\r\n\r\nI really appreciate the help."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1087", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1087/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1087/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1087/events", "html_url": "https://github.com/nlohmann/json/issues/1087", "id": 322653701, "node_id": "MDU6SXNzdWUzMjI2NTM3MDE=", "number": 1087, "title": "C++17 decomposition declaration support", "user": {"login": "kenjichanhkg", "id": 7701160, "node_id": "MDQ6VXNlcjc3MDExNjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7701160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenjichanhkg", "html_url": "https://github.com/kenjichanhkg", "followers_url": "https://api.github.com/users/kenjichanhkg/followers", "following_url": "https://api.github.com/users/kenjichanhkg/following{/other_user}", "gists_url": "https://api.github.com/users/kenjichanhkg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenjichanhkg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenjichanhkg/subscriptions", "organizations_url": "https://api.github.com/users/kenjichanhkg/orgs", "repos_url": "https://api.github.com/users/kenjichanhkg/repos", "events_url": "https://api.github.com/users/kenjichanhkg/events{/privacy}", "received_events_url": "https://api.github.com/users/kenjichanhkg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-14T02:29:35Z", "updated_at": "2018-05-23T07:09:49Z", "closed_at": "2018-05-23T07:09:49Z", "author_association": "NONE", "body": "Possible to support this syntax in the library?\r\n```\r\nauto j = \"{\\\"abc\\\":[34]}\"_json;\r\nfor (auto& [k, v] : j){ // compile error\r\n}\r\n```\r\nstd::map example:\r\n```\r\nstd::map<int, int> m;\r\nfor (auto& [k, v] : m){ // this works\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1086", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1086/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1086/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1086/events", "html_url": "https://github.com/nlohmann/json/issues/1086", "id": 322573666, "node_id": "MDU6SXNzdWUzMjI1NzM2NjY=", "number": 1086, "title": "[Question] Access multi-level json objects", "user": {"login": "JimmySnails", "id": 7029836, "node_id": "MDQ6VXNlcjcwMjk4MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7029836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimmySnails", "html_url": "https://github.com/JimmySnails", "followers_url": "https://api.github.com/users/JimmySnails/followers", "following_url": "https://api.github.com/users/JimmySnails/following{/other_user}", "gists_url": "https://api.github.com/users/JimmySnails/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimmySnails/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimmySnails/subscriptions", "organizations_url": "https://api.github.com/users/JimmySnails/orgs", "repos_url": "https://api.github.com/users/JimmySnails/repos", "events_url": "https://api.github.com/users/JimmySnails/events{/privacy}", "received_events_url": "https://api.github.com/users/JimmySnails/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-13T08:08:58Z", "updated_at": "2018-05-14T19:15:05Z", "closed_at": "2018-05-14T19:15:05Z", "author_association": "NONE", "body": "Sry for posting a question here, but you don't have a forum and i couldn't figure out how to do this properly.\r\n\r\nFor my game, i want to store information about sprites in a json file.\r\nFirst Level - Sprite type (Terrain, Building, Water, ...)\r\nSecond Level - Sprite ID (Unique ID to access sprites)\r\nThird Level - Detail Information (Filename, which can vary)\r\n\r\nMy Implementation:\r\n```cpp\r\n  #include <iostream>\r\n  #include <nlohmann/json.hpp>\r\n\r\n  using json = nlohmann::json;\r\n\r\n  void accessTileData(std::string TileType, int tileID);\r\n  json _json;\r\n\r\n  int main() {\r\n      // create a JSON object\r\n\r\n        _json[\"terrain\"][\"0\"][\"filename\"] = std::string(\"images/floor/floor.png\");\r\n        _json[\"terrain\"][\"0\"][\"isPowered\"] = true;\r\n        _json[\"terrain\"][\"1\"][\"filename\"] = std::string(\"images/floor/floor2.png\");\r\n        _json[\"terrain\"][\"1\"][\"isPowered\"] = true;\r\n        _json[\"terrain\"][\"2\"][\"filename\"] = std::string(\"images/floor/floor3.png\");\r\n        _json[\"terrain\"][\"2\"][\"isPowered\"] = true;\r\n        _json[\"terrain\"][\"3\"][\"filename\"] = std::string(\"images/floor/floor4.png\");\r\n        _json[\"terrain\"][\"3\"][\"isPowered\"] = true;\r\n        _json[\"buildings\"][\"4\"][\"filename\"] = std::string(\"images/buildings/house1.png\");\r\n        _json[\"buildings\"][\"4\"][\"type\"] = \"building\";\r\n        _json[\"buildings\"][\"4\"][\"zone\"] = \"residential\";\r\n\r\n        accessTileData(\"terrain\", 2);\r\n      \r\n  }\r\n\r\n\r\n  void accessTileData(std::string TileType, int tileID) {\r\n    for (json::iterator it = _json.begin(); it != _json.end(); ++it) {\r\n      if (it.key() == TileType) {\r\n        std::cout << \"Terrain Tiles:\\n\\t\" << it.value() << std::endl;            \r\n              \r\n              // This retrieves more then just the filename value\r\n              std::string retrievedFileName = _json[it.key()][std::to_string(tileID)][\"filename\"].dump();\r\n              std::cout << \"Filename of Tile \" << tileID  << std::endl << retrievedFileName;\r\n              // Output:\r\n              // Filename of Tile 2\r\n              // \"images/floor/floor3.png\"\t0  {\"filename\":\"images/floor/floor.png\",\"isPowered\":true}\r\n\r\n              \r\n              // this does not work\r\n        for (json::iterator it_meta = it.value().begin(); it_meta != it.value().end(); ++it) {\r\n          std::cout << \"\\t\" << it_meta.key() << \"  \" << it_meta.value() << std::endl;\r\n        }\r\n              // Error Message\r\n              // prog.exe: ./nlohmann/json.hpp:4087: nlohmann::detail::iter_impl<BasicJsonType>::reference nlohmann::detail::iter_impl<BasicJsonType>::operator*() const [with BasicJsonType = nlohmann::basic_json<>; nlohmann::detail::iter_impl<BasicJsonType>::reference = nlohmann::basic_json<>&]: Assertion `m_it.object_iterator != m_object->m_value.object->end()' failed.\r\n      }\r\n    }\r\n  }\r\n\r\n```\r\n\r\nHow do i properly retrieve all the informations of a tileID ?\r\nIs there a possibility to retrieve a tile id (second key) from the json object without specifying the first key (type)?"}]