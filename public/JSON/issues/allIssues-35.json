[{"url": "https://api.github.com/repos/nlohmann/json/issues/154", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/154/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/154/events", "html_url": "https://github.com/nlohmann/json/issues/154", "id": 121263184, "node_id": "MDU6SXNzdWUxMjEyNjMxODQ=", "number": 154, "title": "prevent json.hpp from emitting compiler warnings", "user": {"login": "luxe", "id": 1312081, "node_id": "MDQ6VXNlcjEzMTIwODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1312081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luxe", "html_url": "https://github.com/luxe", "followers_url": "https://api.github.com/users/luxe/followers", "following_url": "https://api.github.com/users/luxe/following{/other_user}", "gists_url": "https://api.github.com/users/luxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/luxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luxe/subscriptions", "organizations_url": "https://api.github.com/users/luxe/orgs", "repos_url": "https://api.github.com/users/luxe/repos", "events_url": "https://api.github.com/users/luxe/events{/privacy}", "received_events_url": "https://api.github.com/users/luxe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-12-09T14:57:00Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2015-12-14T15:59:42Z", "author_association": "CONTRIBUTOR", "body": "compiling `json.hpp` with `g++`.  \nI've enabled some warnings flags, and now get the following:\n\n```\nIn file included from ./Test_Utilities/all_test_utilities.hpp:9:0,\n                 from test.cpp:2:\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::~basic_json() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018null\u2019 not handled in switch [-Wswitch-enum]\n         switch (m_type)\n         ^\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018boolean\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018number_integer\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018number_float\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018discarded\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018void nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::dump(std::ostream&, bool, unsigned int, unsigned int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; std::ostream = std::basic_ostream<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:1739:17:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::dump(int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7268:25:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:4722:9: warning: enumeration value \u2018null\u2019 not handled in switch [-Wswitch-enum]\n         switch (m_type)\n         ^\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018uninitialized\u2019 not handled in switch [-Wswitch-enum]\n             switch (last_token)\n             ^\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018end_array\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018end_object\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018name_separator\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018value_separator\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018parse_error\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018end_of_input\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::basic_json(const nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:6961:42:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:1553:9: warning: switch missing default case [-Wswitch-default]\n         switch (m_type)\n         ^\nIn file included from ./Test_Utilities/all_test_utilities.hpp:9:0,\n                 from test.cpp:2:\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::json_value::json_value(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::value_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:6978:40:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:632:13: warning: switch missing default case [-Wswitch-default]\n             switch (t)\n             ^\nIn file included from ./Test_Utilities/all_test_utilities.hpp:9:0,\n                 from test.cpp:2:\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::get_string() const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:7009:61:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:6795:21: warning: switch missing default case [-Wswitch-default]\n                     switch (*i)\n                     ^\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018static std::string nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type_name(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; std::string = std::basic_string<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:7194:61:   required from \u2018void nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::expect(typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type = nlohmann::basic_json<>::lexer::token_type]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6957:19:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:5922:13: warning: enumeration value \u2018parse_error\u2019 not handled in switch [-Wswitch-enum]\n             switch (t)\n             ^\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::type_name() const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:2664:78:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::value_type& nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::operator[](const typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::object_t::key_type&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::reference = nlohmann::basic_json<>&; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::value_type = nlohmann::basic_json<>; typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::object_t::key_type = std::basic_string<char>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7034:35:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:4508:9: warning: enumeration value \u2018number_integer\u2019 not handled in switch [-Wswitch-enum]\n         switch (m_type)\n         ^\n./Test_Utilities/3rd_Party_Libs/json.hpp:4508:9: warning: enumeration value \u2018number_float\u2019 not handled in switch [-Wswitch-enum]\n```\n\nIt's just `-Wswitch-enum` and `-Wswitch-default`.  \nCan we suppress these warnings in the library, so I can still apply them to my own code without all the noise?  \nThe Catch testing framework, seems to take a similar approach.  \nhttps://github.com/philsquared/Catch/blob/master/include/internal/catch_suppress_warnings.h\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/153", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/153/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/153/events", "html_url": "https://github.com/nlohmann/json/pull/153", "id": 120678484, "node_id": "MDExOlB1bGxSZXF1ZXN0NTI3OTY0MzA=", "number": 153, "title": "Replace sprintf with hex function, this fixes #149", "user": {"login": "whackashoe", "id": 855581, "node_id": "MDQ6VXNlcjg1NTU4MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/855581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whackashoe", "html_url": "https://github.com/whackashoe", "followers_url": "https://api.github.com/users/whackashoe/followers", "following_url": "https://api.github.com/users/whackashoe/following{/other_user}", "gists_url": "https://api.github.com/users/whackashoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/whackashoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whackashoe/subscriptions", "organizations_url": "https://api.github.com/users/whackashoe/orgs", "repos_url": "https://api.github.com/users/whackashoe/repos", "events_url": "https://api.github.com/users/whackashoe/events{/privacy}", "received_events_url": "https://api.github.com/users/whackashoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-07T00:52:48Z", "updated_at": "2015-12-07T19:35:57Z", "closed_at": "2015-12-07T19:35:43Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/153", "html_url": "https://github.com/nlohmann/json/pull/153", "diff_url": "https://github.com/nlohmann/json/pull/153.diff", "patch_url": "https://github.com/nlohmann/json/pull/153.patch"}, "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/152", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/152/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/152/events", "html_url": "https://github.com/nlohmann/json/issues/152", "id": 119494021, "node_id": "MDU6SXNzdWUxMTk0OTQwMjE=", "number": 152, "title": "json::parse(string) does not check utf8 bom", "user": {"login": "rockeet", "id": 1574991, "node_id": "MDQ6VXNlcjE1NzQ5OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1574991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rockeet", "html_url": "https://github.com/rockeet", "followers_url": "https://api.github.com/users/rockeet/followers", "following_url": "https://api.github.com/users/rockeet/following{/other_user}", "gists_url": "https://api.github.com/users/rockeet/gists{/gist_id}", "starred_url": "https://api.github.com/users/rockeet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rockeet/subscriptions", "organizations_url": "https://api.github.com/users/rockeet/orgs", "repos_url": "https://api.github.com/users/rockeet/repos", "events_url": "https://api.github.com/users/rockeet/events{/privacy}", "received_events_url": "https://api.github.com/users/rockeet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-30T13:43:12Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2015-12-07T21:28:08Z", "author_association": "NONE", "body": "Exception thrown when passing an utf8 string with starting bom to json::parse, it should skip the bom mark and treat the string as utf8\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/151", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/151/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/151/events", "html_url": "https://github.com/nlohmann/json/issues/151", "id": 118271440, "node_id": "MDU6SXNzdWUxMTgyNzE0NDA=", "number": 151, "title": "unsigned 64bit values output as signed", "user": {"login": "mbunkus", "id": 414282, "node_id": "MDQ6VXNlcjQxNDI4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/414282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbunkus", "html_url": "https://github.com/mbunkus", "followers_url": "https://api.github.com/users/mbunkus/followers", "following_url": "https://api.github.com/users/mbunkus/following{/other_user}", "gists_url": "https://api.github.com/users/mbunkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbunkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbunkus/subscriptions", "organizations_url": "https://api.github.com/users/mbunkus/orgs", "repos_url": "https://api.github.com/users/mbunkus/repos", "events_url": "https://api.github.com/users/mbunkus/events{/privacy}", "received_events_url": "https://api.github.com/users/mbunkus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-11-22T16:04:28Z", "updated_at": "2016-11-13T22:38:10Z", "closed_at": "2015-12-16T10:39:25Z", "author_association": "NONE", "body": "I'm trying to add JSON output to [mkvmerge's](/mbunkus/mkvtoolnix/) identification output. mkvmerge is a tool dealing with Matroska media files, and those in turn use a lot of unsigned 64bit values \u2013 e.g. each track in that file has a unique ID that's basically a random 64bit number.\n\nOutputting those results in signed 64bit values being output instead, obviously.\n\nTrivial test case:\n\n``` c++\nstd::cout << nlohmann::json{std::numeric_limits<uint64_t>::max()};\n```\n\nOutput:\n\n```\n[-1]\n```\n\nWhen parsing JSON with such huge values: it would be nice to be able to query the JSON object if the encoded value was in fact negative, but for my use case encoding is the important part, not parsing.\n\nThis is obviously similar to #30, but probably harder to fix. Maybe you'll have to store integers both signed and unsigned and output them depending on which type has been used\u2026\n\nBTW: I really love using your library. Thanks for providing it.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/150", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/150/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/150/events", "html_url": "https://github.com/nlohmann/json/issues/150", "id": 118187528, "node_id": "MDU6SXNzdWUxMTgxODc1Mjg=", "number": 150, "title": "Wish feature: json5", "user": {"login": "rockeet", "id": 1574991, "node_id": "MDQ6VXNlcjE1NzQ5OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1574991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rockeet", "html_url": "https://github.com/rockeet", "followers_url": "https://api.github.com/users/rockeet/followers", "following_url": "https://api.github.com/users/rockeet/following{/other_user}", "gists_url": "https://api.github.com/users/rockeet/gists{/gist_id}", "starred_url": "https://api.github.com/users/rockeet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rockeet/subscriptions", "organizations_url": "https://api.github.com/users/rockeet/orgs", "repos_url": "https://api.github.com/users/rockeet/repos", "events_url": "https://api.github.com/users/rockeet/events{/privacy}", "received_events_url": "https://api.github.com/users/rockeet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-21T10:20:49Z", "updated_at": "2016-11-13T22:38:10Z", "closed_at": "2015-12-06T16:13:04Z", "author_association": "NONE", "body": "As described in: http://json5.org/\nAnd there is a js implementation for json5: https://github.com/aseemk/json5\nBut I didn't found a good json5 in C++\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/149", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/149/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/149/events", "html_url": "https://github.com/nlohmann/json/issues/149", "id": 117739253, "node_id": "MDU6SXNzdWUxMTc3MzkyNTM=", "number": 149, "title": "Unable to compile on MSVC 2015 with SDL checking enabled: This function or variable may be unsafe.", "user": {"login": "dmartyn-0", "id": 9222588, "node_id": "MDQ6VXNlcjkyMjI1ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9222588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmartyn-0", "html_url": "https://github.com/dmartyn-0", "followers_url": "https://api.github.com/users/dmartyn-0/followers", "following_url": "https://api.github.com/users/dmartyn-0/following{/other_user}", "gists_url": "https://api.github.com/users/dmartyn-0/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmartyn-0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmartyn-0/subscriptions", "organizations_url": "https://api.github.com/users/dmartyn-0/orgs", "repos_url": "https://api.github.com/users/dmartyn-0/repos", "events_url": "https://api.github.com/users/dmartyn-0/events{/privacy}", "received_events_url": "https://api.github.com/users/dmartyn-0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-19T04:34:41Z", "updated_at": "2015-12-07T19:35:44Z", "closed_at": "2015-12-07T19:35:44Z", "author_association": "NONE", "body": "When this library is compiled under MSVC 2015 with SDL checking on, compilation fails with this error:\n\nC4996 'sprintf': This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.\n\nThe error occurs here at line 4694:\n![image](https://cloud.githubusercontent.com/assets/9222588/11262352/2955c4f4-8ee3-11e5-8bb3-eb4314fbd26e.png)\n\nedit: This occurs with the latest release available from the releases list.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/148", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/148/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/148/events", "html_url": "https://github.com/nlohmann/json/issues/148", "id": 117301052, "node_id": "MDU6SXNzdWUxMTczMDEwNTI=", "number": 148, "title": "\"Json Object\" type does not keep object order", "user": {"login": "rockeet", "id": 1574991, "node_id": "MDQ6VXNlcjE1NzQ5OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1574991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rockeet", "html_url": "https://github.com/rockeet", "followers_url": "https://api.github.com/users/rockeet/followers", "following_url": "https://api.github.com/users/rockeet/following{/other_user}", "gists_url": "https://api.github.com/users/rockeet/gists{/gist_id}", "starred_url": "https://api.github.com/users/rockeet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rockeet/subscriptions", "organizations_url": "https://api.github.com/users/rockeet/orgs", "repos_url": "https://api.github.com/users/rockeet/repos", "events_url": "https://api.github.com/users/rockeet/events{/privacy}", "received_events_url": "https://api.github.com/users/rockeet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-17T07:36:36Z", "updated_at": "2017-01-19T13:06:49Z", "closed_at": "2015-11-17T20:34:06Z", "author_association": "NONE", "body": "for json: { \"b\" : \"B\", \"a\" : \"A\" }\nThe iteration order is by lexical order of keys, but it should be the original order in the json object.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/147", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/147/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/147/events", "html_url": "https://github.com/nlohmann/json/issues/147", "id": 116914317, "node_id": "MDU6SXNzdWUxMTY5MTQzMTc=", "number": 147, "title": "dump()  convert strings encoded by utf-8 to shift-jis on windows 10. ", "user": {"login": "silverist", "id": 10098847, "node_id": "MDQ6VXNlcjEwMDk4ODQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/10098847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/silverist", "html_url": "https://github.com/silverist", "followers_url": "https://api.github.com/users/silverist/followers", "following_url": "https://api.github.com/users/silverist/following{/other_user}", "gists_url": "https://api.github.com/users/silverist/gists{/gist_id}", "starred_url": "https://api.github.com/users/silverist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/silverist/subscriptions", "organizations_url": "https://api.github.com/users/silverist/orgs", "repos_url": "https://api.github.com/users/silverist/repos", "events_url": "https://api.github.com/users/silverist/events{/privacy}", "received_events_url": "https://api.github.com/users/silverist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-14T09:38:36Z", "updated_at": "2015-11-17T22:50:50Z", "closed_at": "2015-11-17T22:50:50Z", "author_association": "NONE", "body": "when I dump() a json object as follows, the dumped string is converted from \"utf-8\" to \"shift-jis\".\nHow can I do to keep up its encode \"utf-8\"?\n\n``` C++\n{\n   \"data\":\"[[0,1,2,3,4],[0,1,2,3,4]]\",\n   \"status\":1\n}\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/146", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/146/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/146/events", "html_url": "https://github.com/nlohmann/json/pull/146", "id": 116758760, "node_id": "MDExOlB1bGxSZXF1ZXN0NTA2MzUxMTE=", "number": 146, "title": "Fix character skipping after a surrogate pair", "user": {"login": "robertmrk", "id": 7045469, "node_id": "MDQ6VXNlcjcwNDU0Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7045469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertmrk", "html_url": "https://github.com/robertmrk", "followers_url": "https://api.github.com/users/robertmrk/followers", "following_url": "https://api.github.com/users/robertmrk/following{/other_user}", "gists_url": "https://api.github.com/users/robertmrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertmrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertmrk/subscriptions", "organizations_url": "https://api.github.com/users/robertmrk/orgs", "repos_url": "https://api.github.com/users/robertmrk/repos", "events_url": "https://api.github.com/users/robertmrk/events{/privacy}", "received_events_url": "https://api.github.com/users/robertmrk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-13T12:21:14Z", "updated_at": "2015-11-18T16:10:24Z", "closed_at": "2015-11-14T07:22:04Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/146", "html_url": "https://github.com/nlohmann/json/pull/146", "diff_url": "https://github.com/nlohmann/json/pull/146.diff", "patch_url": "https://github.com/nlohmann/json/pull/146.patch"}, "body": "In a string the first character following a surrogate pair is skipped by the\nlexer, but the rest of the string is parsed as usual.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/145", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/145/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/145/events", "html_url": "https://github.com/nlohmann/json/issues/145", "id": 116254210, "node_id": "MDU6SXNzdWUxMTYyNTQyMTA=", "number": 145, "title": "Unable to get field names in a json object", "user": {"login": "renkun-ken", "id": 4662568, "node_id": "MDQ6VXNlcjQ2NjI1Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4662568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/renkun-ken", "html_url": "https://github.com/renkun-ken", "followers_url": "https://api.github.com/users/renkun-ken/followers", "following_url": "https://api.github.com/users/renkun-ken/following{/other_user}", "gists_url": "https://api.github.com/users/renkun-ken/gists{/gist_id}", "starred_url": "https://api.github.com/users/renkun-ken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/renkun-ken/subscriptions", "organizations_url": "https://api.github.com/users/renkun-ken/orgs", "repos_url": "https://api.github.com/users/renkun-ken/repos", "events_url": "https://api.github.com/users/renkun-ken/events{/privacy}", "received_events_url": "https://api.github.com/users/renkun-ken/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-11T03:04:55Z", "updated_at": "2015-11-11T03:08:28Z", "closed_at": "2015-11-11T03:08:28Z", "author_association": "NONE", "body": "For a json document like the example \n\n``` json\n{\n  \"pi\": 3.141,\n  \"happy\": true,\n  \"name\": \"Niels\",\n  \"nothing\": null,\n  \"answer\": {\n    \"everything\": 42\n  },\n  \"list\": [1, 0, 2],\n  \"object\": {\n    \"currency\": \"USD\",\n    \"value\": 42.99\n  }\n}\n```\n\nI don't find a method to get the name list of the fields, something like\n\n``` cpp\njson j;\nifstream file(\"example.json\");\nfile >> j;\nvector<string> names = j.fields();\n```\n\nso that I can get `\"pi\", \"happy\", \"name\", \"nothing\", \"answer\", \"list\", \"object\"`.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/144", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/144/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/144/events", "html_url": "https://github.com/nlohmann/json/issues/144", "id": 114524987, "node_id": "MDU6SXNzdWUxMTQ1MjQ5ODc=", "number": 144, "title": "Implicit assignment to std::string fails", "user": {"login": "Cleroth", "id": 4611301, "node_id": "MDQ6VXNlcjQ2MTEzMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4611301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cleroth", "html_url": "https://github.com/Cleroth", "followers_url": "https://api.github.com/users/Cleroth/followers", "following_url": "https://api.github.com/users/Cleroth/following{/other_user}", "gists_url": "https://api.github.com/users/Cleroth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cleroth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cleroth/subscriptions", "organizations_url": "https://api.github.com/users/Cleroth/orgs", "repos_url": "https://api.github.com/users/Cleroth/repos", "events_url": "https://api.github.com/users/Cleroth/events{/privacy}", "received_events_url": "https://api.github.com/users/Cleroth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/2", "html_url": "https://github.com/nlohmann/json/milestone/2", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/2/labels", "id": 1479859, "node_id": "MDk6TWlsZXN0b25lMTQ3OTg1OQ==", "number": 2, "title": "Release 1.1.0", "description": "", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 19, "state": "closed", "created_at": "2016-01-01T17:36:30Z", "updated_at": "2016-01-26T05:26:42Z", "due_on": "2016-01-23T08:00:00Z", "closed_at": "2016-01-26T05:26:42Z"}, "comments": 22, "created_at": "2015-11-02T04:58:52Z", "updated_at": "2016-12-16T09:38:28Z", "closed_at": "2016-01-26T05:26:30Z", "author_association": "NONE", "body": "Put simply, when constructing a string, you can pass a basic_json:\n\n```\nstd::string s = o[\"name\"];\n```\n\nHowever, this does not work:\n\n```\nstd::string s;\ns = o[\"name\"];\ns = o[\"name\"].get<std::string>(); // this works\n```\n\nThe following compiler errors pop up:\n\n1>g:\\files\\smoldy_adventure\\src\\client\\units\\unitmgr.cpp(53): error C2593: 'operator =' is ambiguous\n1>  g:\\program files (x86)\\microsoft visual studio 14.0\\vc\\include\\xstring(1032): note: could be 'std::basic_string<char,std::char_traits<char>,std::allocator<char>> &std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator =(_Elem)'\n1>          with\n1>          [\n1>              _Elem=char\n1>          ] (compiling source file units\\unitmgr.cpp)\n1>  g:\\program files (x86)\\microsoft visual studio 14.0\\vc\\include\\xstring(1027): note: or       'std::basic_string<char,std::char_traits<char>,std::allocator<char>> &std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator =(const _Elem *)'\n1>          with\n1>          [\n1>              _Elem=char\n1>          ] (compiling source file units\\unitmgr.cpp)\n1>  g:\\program files (x86)\\microsoft visual studio 14.0\\vc\\include\\xstring(1011): note: or       'std::basic_string<char,std::char_traits<char>,std::allocator<char>> &std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator =(const std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)' (compiling source file units\\unitmgr.cpp)\n1>  g:\\program files (x86)\\microsoft visual studio 14.0\\vc\\include\\xstring(972): note: or       'std::basic_string<char,std::char_traits<char>,std::allocator<char>> &std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator =(std::initializer_list<_Elem>)'\n1>          with\n1>          [\n1>              _Elem=char\n1>          ] (compiling source file units\\unitmgr.cpp)\n1>  g:\\program files (x86)\\microsoft visual studio 14.0\\vc\\include\\xstring(914): note: or       'std::basic_string<char,std::char_traits<char>,std::allocator<char>> &std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator =(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&) noexcept' (compiling source file units\\unitmgr.cpp)\n1>  g:\\files\\smoldy_adventure\\src\\client\\units\\unitmgr.cpp(53): note: while trying to match the argument list '(std::string, stlx::basic_jsonstd::map,std::vector,std::string,bool,int64_t,double,std::allocator)'\n\n**Compiler**: Visual Studio 2015\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/141", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/141/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/141/events", "html_url": "https://github.com/nlohmann/json/pull/141", "id": 112764167, "node_id": "MDExOlB1bGxSZXF1ZXN0NDg0MzQ4OTg=", "number": 141, "title": "using c++11 snprintf", "user": {"login": "benloong", "id": 1171605, "node_id": "MDQ6VXNlcjExNzE2MDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1171605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benloong", "html_url": "https://github.com/benloong", "followers_url": "https://api.github.com/users/benloong/followers", "following_url": "https://api.github.com/users/benloong/following{/other_user}", "gists_url": "https://api.github.com/users/benloong/gists{/gist_id}", "starred_url": "https://api.github.com/users/benloong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benloong/subscriptions", "organizations_url": "https://api.github.com/users/benloong/orgs", "repos_url": "https://api.github.com/users/benloong/repos", "events_url": "https://api.github.com/users/benloong/events{/privacy}", "received_events_url": "https://api.github.com/users/benloong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-22T09:25:56Z", "updated_at": "2015-12-07T19:42:46Z", "closed_at": "2015-12-07T19:42:46Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/141", "html_url": "https://github.com/nlohmann/json/pull/141", "diff_url": "https://github.com/nlohmann/json/pull/141.diff", "patch_url": "https://github.com/nlohmann/json/pull/141.patch"}, "body": "change `sprintf` to safe version `snprintf`\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/140", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/140/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/140/events", "html_url": "https://github.com/nlohmann/json/pull/140", "id": 112750154, "node_id": "MDExOlB1bGxSZXF1ZXN0NDg0Mjc2NDQ=", "number": 140, "title": "kill two warnings", "user": {"login": "406345", "id": 3886219, "node_id": "MDQ6VXNlcjM4ODYyMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3886219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/406345", "html_url": "https://github.com/406345", "followers_url": "https://api.github.com/users/406345/followers", "following_url": "https://api.github.com/users/406345/following{/other_user}", "gists_url": "https://api.github.com/users/406345/gists{/gist_id}", "starred_url": "https://api.github.com/users/406345/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/406345/subscriptions", "organizations_url": "https://api.github.com/users/406345/orgs", "repos_url": "https://api.github.com/users/406345/repos", "events_url": "https://api.github.com/users/406345/events{/privacy}", "received_events_url": "https://api.github.com/users/406345/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-22T08:00:58Z", "updated_at": "2015-12-07T20:10:30Z", "closed_at": "2015-12-07T20:10:30Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/140", "html_url": "https://github.com/nlohmann/json/pull/140", "diff_url": "https://github.com/nlohmann/json/pull/140.diff", "patch_url": "https://github.com/nlohmann/json/pull/140.patch"}, "body": " sprintf(&result[pos + 1], \"u%04x\", int(c));   ---->    sprintf_s(&result[pos + 1],result.size(),\"u%04x\", int(c));\n\n difference_type m_it = std::numeric_limitsstd::ptrdiff_t::min();   ---->    difference_type m_it = std::numeric_limitsstd::ptrdiff_t::denorm_min();\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/139", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/139/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/139/events", "html_url": "https://github.com/nlohmann/json/pull/139", "id": 112748730, "node_id": "MDExOlB1bGxSZXF1ZXN0NDg0MjY3OTM=", "number": 139, "title": "kill warning", "user": {"login": "406345", "id": 3886219, "node_id": "MDQ6VXNlcjM4ODYyMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3886219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/406345", "html_url": "https://github.com/406345", "followers_url": "https://api.github.com/users/406345/followers", "following_url": "https://api.github.com/users/406345/following{/other_user}", "gists_url": "https://api.github.com/users/406345/gists{/gist_id}", "starred_url": "https://api.github.com/users/406345/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/406345/subscriptions", "organizations_url": "https://api.github.com/users/406345/orgs", "repos_url": "https://api.github.com/users/406345/repos", "events_url": "https://api.github.com/users/406345/events{/privacy}", "received_events_url": "https://api.github.com/users/406345/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-10-22T07:49:59Z", "updated_at": "2015-10-22T07:50:47Z", "closed_at": "2015-10-22T07:50:47Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/139", "html_url": "https://github.com/nlohmann/json/pull/139", "diff_url": "https://github.com/nlohmann/json/pull/139.diff", "patch_url": "https://github.com/nlohmann/json/pull/139.patch"}, "body": "line: 4295\ndifference_type m_it = std::numeric_limitsstd::ptrdiff_t::min();\nchanged to\ndifference_type m_it = std::numeric_limitsstd::ptrdiff_t::denorm_min();\n\nline: 4068\nsprintf( &result[pos + 1], \"u%04x\", int( c ) );\nchanged to\nsprintf_s( &result[pos + 1], result.size() , \"u%04x\", int( c ) );\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/138", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/138/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/138/events", "html_url": "https://github.com/nlohmann/json/issues/138", "id": 111872918, "node_id": "MDU6SXNzdWUxMTE4NzI5MTg=", "number": 138, "title": "Question: Is the use of incomplete type correct?", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-10-16T17:11:13Z", "updated_at": "2015-12-15T08:42:24Z", "closed_at": "2015-12-15T08:42:15Z", "author_association": "CONTRIBUTOR", "body": "The definitions of `array_t` and `object_t` in json.hpp look like this:\n\n``` cpp\nclass basic_json\n{\n    ...\n    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;\n    ...\n    using object_t = ObjectType<StringType,\n          basic_json,\n          std::less<StringType>,\n          AllocatorType<std::pair<const StringType,\n          basic_json>>>;\n```\n\nSo it is instantiating the `ArrayType` and the `ObjectType` templates when `basic_json` is still an incomplete type. By default those templates are `std::vector` and `std::map`.\nIt seems to work, but I wonder, is it correct according to the standard?\n\nInstantiating STL types with incomplete types seems to be prohibited, so I'd say recursive structures like this would not be _technically_ correct (even if the current implementation allowed it).\n\nFrom an [answer](http://stackoverflow.com/questions/12281274/map-with-incomplete-value-type) in stackoverflow:\n\n> \u00a717.6.4.8 Other functions / 2:\n> In particular, the effects are undefined in the following cases:\n> ...\n> - if an incomplete type (3.9) is used as a template argument when instantiating a template component, unless specifically allowed for that component.\n\nIn fact, supporting recursive structures is one of the nice features that Boost.Container provides and the STL does not, according to its [docs](http://www.boost.org/doc/libs/1_59_0/doc/html/container/main_features.html#container.main_features.containers_of_incomplete_types).\n\nWhat do you think?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/137", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/137/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/137/events", "html_url": "https://github.com/nlohmann/json/pull/137", "id": 111792381, "node_id": "MDExOlB1bGxSZXF1ZXN0NDc4ODY4Njc=", "number": 137, "title": "Detect correctly pointer-to-const", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-16T09:11:53Z", "updated_at": "2015-10-20T20:31:26Z", "closed_at": "2015-10-20T20:31:15Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/137", "html_url": "https://github.com/nlohmann/json/pull/137", "diff_url": "https://github.com/nlohmann/json/pull/137.diff", "patch_url": "https://github.com/nlohmann/json/pull/137.patch"}, "body": "The intention of the current code is to detect a pointer-to-const but instead it is detecting a const-pointer. See #134\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/136", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/136/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/136/events", "html_url": "https://github.com/nlohmann/json/issues/136", "id": 110861980, "node_id": "MDU6SXNzdWUxMTA4NjE5ODA=", "number": 136, "title": "json.hpp:5746:32: error: 'to_string' is not a member of 'std'", "user": {"login": "Ingener74", "id": 3167594, "node_id": "MDQ6VXNlcjMxNjc1OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3167594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ingener74", "html_url": "https://github.com/Ingener74", "followers_url": "https://api.github.com/users/Ingener74/followers", "following_url": "https://api.github.com/users/Ingener74/following{/other_user}", "gists_url": "https://api.github.com/users/Ingener74/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ingener74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ingener74/subscriptions", "organizations_url": "https://api.github.com/users/Ingener74/orgs", "repos_url": "https://api.github.com/users/Ingener74/repos", "events_url": "https://api.github.com/users/Ingener74/events{/privacy}", "received_events_url": "https://api.github.com/users/Ingener74/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 382449225, "node_id": "MDU6TGFiZWwzODI0NDkyMjU=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20android", "name": "platform: android", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 78, "created_at": "2015-10-11T15:07:27Z", "updated_at": "2017-03-06T23:51:58Z", "closed_at": "2015-12-15T17:34:43Z", "author_association": "NONE", "body": "Hello.\nOn Android i have this messages\n- json.hpp:5746:32: error: 'to_string' is not a member of 'std'\n- json.hpp:6911:36: error: 'strtold' is not a member of 'std'\n\nandroid ndk have no to_strign realization\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/135", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/135/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/135/events", "html_url": "https://github.com/nlohmann/json/issues/135", "id": 110645836, "node_id": "MDU6SXNzdWUxMTA2NDU4MzY=", "number": 135, "title": "Bug in basic_json::operator[] const overload", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2015-10-09T12:16:50Z", "updated_at": "2015-12-21T08:02:59Z", "closed_at": "2015-12-21T08:02:59Z", "author_association": "CONTRIBUTOR", "body": "The following code\n\n```\n// note the *const*\nconst json object =\n{\n        {\"one\", 1}, {\"two\", 2}, {\"three\", 2.9}\n};\nstd::cout << object.size() << '\\n';\nstd::cout << object[\"doh!\"] << '\\n'; // element not found\nstd::cout << object.size() << '\\n'; // const object modified!\n```\n\nprints\n\n```\n3\nnull\n4\n```\n\nAllowing a const object to change like this is not a good idea.\nI think this is a bug: either the const overload of `operator[]` throws if the key cannot be found, or there is no such const overload (e.g. std::map does not have it).\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/134", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/134/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/134/events", "html_url": "https://github.com/nlohmann/json/issues/134", "id": 110500666, "node_id": "MDU6SXNzdWUxMTA1MDA2NjY=", "number": 134, "title": "wrong enable_if for const pointer (instead of pointer-to-const)", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2015-10-08T17:12:26Z", "updated_at": "2015-12-06T15:44:54Z", "closed_at": "2015-12-06T15:44:54Z", "author_association": "CONTRIBUTOR", "body": "Hi ,\nThe following test fails to compile:\n\n```\nconst json value = {{\"one\", 1}, {\"two\", 2}};\nconst json::object_t* p = value.get_ptr<const json::object_t*>();\n```\n\nBut this compiles (note the extra const):\n\n```\nconst json value = {{\"one\", 1}, {\"two\", 2}};\nconst json::object_t* const q = value.get_ptr<const json::object_t* const>();\n```\n\nI think that the problem is the additional check for the const overload of get_ptr\n`and std::is_const<PointerType>::value`\n\nI think what you intended was to check that the template parameter is a \"pointer-to-const\" but what you are actually checking is if you got a \"const pointer\".\n\nI believe the right fix is to check for \"pointer-to-const\" like this:\n`and std::is_const< typename std::remove_pointer<PointerType>::type >::value`\nIt works in VS2015.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/133", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/133/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/133/events", "html_url": "https://github.com/nlohmann/json/issues/133", "id": 110451476, "node_id": "MDU6SXNzdWUxMTA0NTE0NzY=", "number": 133, "title": "overload of at() with default value", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 22, "created_at": "2015-10-08T13:31:07Z", "updated_at": "2016-11-13T22:38:10Z", "closed_at": "2015-12-27T14:32:48Z", "author_association": "CONTRIBUTOR", "body": "My use case is:\n- use find() to look for a key\n- if the key is not found return a default_value of type T (possibly moved in and out)\n- if the key is found return the object converted to type T (only if T is compatible)\n\ne.g.\n\n```\ntemplate <typename T>\nT at (const typename object_t::key_type & key, T default_value) const noexcept\n{\n    auto it = find(key);\n    if (it != end()) return *it;\n    return default_value;\n}\n```\n\nWhat do you think?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/132", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/132/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/132/events", "html_url": "https://github.com/nlohmann/json/issues/132", "id": 110425267, "node_id": "MDU6SXNzdWUxMTA0MjUyNjc=", "number": 132, "title": "Splitting source", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-10-08T11:03:14Z", "updated_at": "2015-12-09T15:32:39Z", "closed_at": "2015-12-09T15:32:39Z", "author_association": "CONTRIBUTOR", "body": "Hi,\nI appreciate the ease of deploying a single header file.\nBut, I think it would be better to decouple the different pieces of functionality.\n\nI propose splitting the single json.hpp header file into three parts:\n- json_fwd.hpp with only the forward declarations of template basic_json and the alias json\n- json.hpp with the definition of template basic_json but without the io (and without the dependency to all the very heavy standard io related headers)\n- json_io.hpp with the definition of the io funcitonality, i.e. parsing, streaming, etc...\n\nDo you think this is feasible?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/131", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/131/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/131/events", "html_url": "https://github.com/nlohmann/json/pull/131", "id": 110265672, "node_id": "MDExOlB1bGxSZXF1ZXN0NDcwNTA0ODc=", "number": 131, "title": "disabled \"CopyAssignable\" test for MSVC in Debug mode, see #125", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-07T16:31:54Z", "updated_at": "2015-10-17T10:41:25Z", "closed_at": "2015-10-17T10:41:20Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/131", "html_url": "https://github.com/nlohmann/json/pull/131", "diff_url": "https://github.com/nlohmann/json/pull/131.diff", "patch_url": "https://github.com/nlohmann/json/pull/131.patch"}, "body": "STL iterators used by json::iterator don't pass this test in Debug mode.\nThe test does pass in Release mode, so I felt the best thing to do was selectively disable that test.\nMore details in #125 \n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/130", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/130/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/130/events", "html_url": "https://github.com/nlohmann/json/pull/130", "id": 110257212, "node_id": "MDExOlB1bGxSZXF1ZXN0NDcwNDU2MzA=", "number": 130, "title": "removed stream operator for iterator, resolution for #125", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-07T15:51:23Z", "updated_at": "2015-10-23T16:42:16Z", "closed_at": "2015-10-23T16:42:10Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/130", "html_url": "https://github.com/nlohmann/json/pull/130", "diff_url": "https://github.com/nlohmann/json/pull/130.diff", "patch_url": "https://github.com/nlohmann/json/pull/130.patch"}, "body": "It doesn't really make sense to stream an iterator.\nBesides, this was causing trouble in MSVC in Debug mode (see #125)\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/129", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/129/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/129/events", "html_url": "https://github.com/nlohmann/json/pull/129", "id": 109499805, "node_id": "MDExOlB1bGxSZXF1ZXN0NDY2NDAzMzI=", "number": 129, "title": "fixed typos in comments for examples", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-02T14:20:43Z", "updated_at": "2015-10-03T08:36:39Z", "closed_at": "2015-10-03T08:36:36Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/129", "html_url": "https://github.com/nlohmann/json/pull/129", "diff_url": "https://github.com/nlohmann/json/pull/129.diff", "patch_url": "https://github.com/nlohmann/json/pull/129.patch"}, "body": "Minor fixes to comments in examples.\n\nBTW, I don't see the examples compiled as part of the tests.\nHow do you make sure they compile?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/128", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/128/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/128/events", "html_url": "https://github.com/nlohmann/json/issues/128", "id": 109462593, "node_id": "MDU6SXNzdWUxMDk0NjI1OTM=", "number": 128, "title": "Question about get_ref()", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/2", "html_url": "https://github.com/nlohmann/json/milestone/2", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/2/labels", "id": 1479859, "node_id": "MDk6TWlsZXN0b25lMTQ3OTg1OQ==", "number": 2, "title": "Release 1.1.0", "description": "", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 19, "state": "closed", "created_at": "2016-01-01T17:36:30Z", "updated_at": "2016-01-26T05:26:42Z", "due_on": "2016-01-23T08:00:00Z", "closed_at": "2016-01-26T05:26:42Z"}, "comments": 11, "created_at": "2015-10-02T09:50:35Z", "updated_at": "2016-01-20T20:16:24Z", "closed_at": "2016-01-20T20:16:24Z", "author_association": "CONTRIBUTOR", "body": "I see there were some discussions about adding get_ref(), but I can't see it in the code.\nWhat happened to get_ref()?\n\nI believe that having get_ref() is convenient and safe. It could merely call get_ptr() and throw if it returns nullptr. It makes it easier to traverse a json object when I'm pretty sure about the types it holds. Otherwise I have to constantly check against nullptr myself.\n\nI'd like the following code to work seamlessly:\n\n``` cpp\nvoid func(const std::string&);\njson value = \"foobar\";\nfunc( value.get_ref<const std::string>() );\n```\n\nCurrently I'd have to write the following:\n\n``` cpp\nvoid func(const std::string&);\njson value = \"foobar\";\nauto p = value.get_ptr<const std::string*>();\nif (!p) throw some_exception;\nfunc( *p );\n```\n\nWould you accept a PR for this functionality?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/127", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/127/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/127/events", "html_url": "https://github.com/nlohmann/json/issues/127", "id": 109460870, "node_id": "MDU6SXNzdWUxMDk0NjA4NzA=", "number": 127, "title": "Question about get_ptr()", "user": {"login": "dariomt", "id": 12997431, "node_id": "MDQ6VXNlcjEyOTk3NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/12997431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariomt", "html_url": "https://github.com/dariomt", "followers_url": "https://api.github.com/users/dariomt/followers", "following_url": "https://api.github.com/users/dariomt/following{/other_user}", "gists_url": "https://api.github.com/users/dariomt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariomt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariomt/subscriptions", "organizations_url": "https://api.github.com/users/dariomt/orgs", "repos_url": "https://api.github.com/users/dariomt/repos", "events_url": "https://api.github.com/users/dariomt/events{/privacy}", "received_events_url": "https://api.github.com/users/dariomt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-10-02T09:37:37Z", "updated_at": "2015-12-16T10:43:34Z", "closed_at": "2015-12-16T10:43:34Z", "author_association": "CONTRIBUTOR", "body": "I see the following in the documentation of get_ptr()\n\n\"@warning Writing data to the pointee of the result yields an undefined state.\"\n\nIIUC this means that the following code yields an undefined state:\n\n``` cpp\njson value = 17;\nauto p = value.get_ptr<json::number_integer_t*>();\n*p = 42;\n```\n\ni.e. I cannot modify the integer value inside the json\n\nWhy is this so?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/126", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/126/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/126/events", "html_url": "https://github.com/nlohmann/json/pull/126", "id": 108380131, "node_id": "MDExOlB1bGxSZXF1ZXN0NDYwNDA4MjA=", "number": 126, "title": "Remove superfluous inefficiency", "user": {"login": "d-frey", "id": 3956325, "node_id": "MDQ6VXNlcjM5NTYzMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3956325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-frey", "html_url": "https://github.com/d-frey", "followers_url": "https://api.github.com/users/d-frey/followers", "following_url": "https://api.github.com/users/d-frey/following{/other_user}", "gists_url": "https://api.github.com/users/d-frey/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-frey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-frey/subscriptions", "organizations_url": "https://api.github.com/users/d-frey/orgs", "repos_url": "https://api.github.com/users/d-frey/repos", "events_url": "https://api.github.com/users/d-frey/events{/privacy}", "received_events_url": "https://api.github.com/users/d-frey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-25T18:08:47Z", "updated_at": "2015-10-03T12:42:42Z", "closed_at": "2015-10-03T08:38:18Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/126", "html_url": "https://github.com/nlohmann/json/pull/126", "diff_url": "https://github.com/nlohmann/json/pull/126.diff", "patch_url": "https://github.com/nlohmann/json/pull/126.patch"}, "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/125", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/125/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/125/events", "html_url": "https://github.com/nlohmann/json/issues/125", "id": 107807939, "node_id": "MDU6SXNzdWUxMDc4MDc5Mzk=", "number": 125, "title": "Visual Studio 14 Debug assertion failed", "user": {"login": "ruslo", "id": 4346993, "node_id": "MDQ6VXNlcjQzNDY5OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4346993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruslo", "html_url": "https://github.com/ruslo", "followers_url": "https://api.github.com/users/ruslo/followers", "following_url": "https://api.github.com/users/ruslo/following{/other_user}", "gists_url": "https://api.github.com/users/ruslo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruslo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruslo/subscriptions", "organizations_url": "https://api.github.com/users/ruslo/orgs", "repos_url": "https://api.github.com/users/ruslo/repos", "events_url": "https://api.github.com/users/ruslo/events{/privacy}", "received_events_url": "https://api.github.com/users/ruslo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2015-09-22T21:36:49Z", "updated_at": "2015-12-08T01:26:38Z", "closed_at": "2015-12-08T01:26:38Z", "author_association": "NONE", "body": "I've tried to run unit-test with Visual Studio 14 2015 generator and got runtime error:\n\n```\nExpression: vector iterator not dereferencable\n```\n\nLast backtrace entry comes from: https://github.com/nlohmann/json/blob/0a813539894d8a6d688ca6a404966f17b56f6e01/src/json.hpp#L5119\n\nwhich came from: https://github.com/nlohmann/json/blob/0a813539894d8a6d688ca6a404966f17b56f6e01/test/unit.cpp#L2879\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/124", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/124/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/124/events", "html_url": "https://github.com/nlohmann/json/pull/124", "id": 107734845, "node_id": "MDExOlB1bGxSZXF1ZXN0NDU2NzUxNjk=", "number": 124, "title": "remove invalid parameter '-stdlib=libc++' in CMakeLists.txt", "user": {"login": "emvivre", "id": 12485451, "node_id": "MDQ6VXNlcjEyNDg1NDUx", "avatar_url": "https://avatars0.githubusercontent.com/u/12485451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emvivre", "html_url": "https://github.com/emvivre", "followers_url": "https://api.github.com/users/emvivre/followers", "following_url": "https://api.github.com/users/emvivre/following{/other_user}", "gists_url": "https://api.github.com/users/emvivre/gists{/gist_id}", "starred_url": "https://api.github.com/users/emvivre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emvivre/subscriptions", "organizations_url": "https://api.github.com/users/emvivre/orgs", "repos_url": "https://api.github.com/users/emvivre/repos", "events_url": "https://api.github.com/users/emvivre/events{/privacy}", "received_events_url": "https://api.github.com/users/emvivre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-22T15:07:47Z", "updated_at": "2015-12-07T20:11:59Z", "closed_at": "2015-12-07T20:11:58Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/124", "html_url": "https://github.com/nlohmann/json/pull/124", "diff_url": "https://github.com/nlohmann/json/pull/124.diff", "patch_url": "https://github.com/nlohmann/json/pull/124.patch"}, "body": "I remove the following invalid parameter : -stdlib=libc++\nThis produce a compilation error with my compiler : g++ 4.9.3\nc++: error: unrecognized command line option \u2018-stdlib=libc++\u2019\nCMakeFiles/json_unit.dir/build.make:54: recipe for target 'CMakeFiles/json_unit.dir/test/unit.cpp.o' failed\nmake[2]: **\\* [CMakeFiles/json_unit.dir/test/unit.cpp.o] Error 1\nCMakeFiles/Makefile2:60: recipe for target 'CMakeFiles/json_unit.dir/all' failed\nmake[1]: **\\* [CMakeFiles/json_unit.dir/all] Error 2\nMakefile:75: recipe for target 'all' failed\nmake: **\\* [all] Error 2\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/123", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/123/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/123/events", "html_url": "https://github.com/nlohmann/json/pull/123", "id": 107529238, "node_id": "MDExOlB1bGxSZXF1ZXN0NDU1NTc1ODE=", "number": 123, "title": "support cmake package config file : find_package support + auto-install ", "user": {"login": "daminetreg", "id": 181726, "node_id": "MDQ6VXNlcjE4MTcyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/181726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daminetreg", "html_url": "https://github.com/daminetreg", "followers_url": "https://api.github.com/users/daminetreg/followers", "following_url": "https://api.github.com/users/daminetreg/following{/other_user}", "gists_url": "https://api.github.com/users/daminetreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/daminetreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daminetreg/subscriptions", "organizations_url": "https://api.github.com/users/daminetreg/orgs", "repos_url": "https://api.github.com/users/daminetreg/repos", "events_url": "https://api.github.com/users/daminetreg/events{/privacy}", "received_events_url": "https://api.github.com/users/daminetreg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-09-21T14:48:45Z", "updated_at": "2015-12-20T14:47:56Z", "closed_at": "2015-12-20T14:47:56Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/123", "html_url": "https://github.com/nlohmann/json/pull/123", "diff_url": "https://github.com/nlohmann/json/pull/123.diff", "patch_url": "https://github.com/nlohmann/json/pull/123.patch"}, "body": "Dear @nlohmann,\n\nI wish to submit you these changes which adds the possibility for dependent programs of your library to use it easily via cmake `find_package`, and therefore auto-download+install via `hunter_add_package` ( _i.e._ see [example cmake](https://github.com/daminetreg/hunter/blob/pull-request/add-nlohmann-json/examples/nlohmann-json/) )..\n\n``` cmake\n\nHunterGate(\n    URL \"https://github.com/ruslo/hunter/archive/vUPCOMING.tar.gz\"\n    SHA1 \"53b198e364dc7bc8360fc545f798563229bd7e20\"\n)\n\nproject(dowload-nlohmann-json)\n\nhunter_add_package(nlohmann-json)\nfind_package(nlohmann-json)\n\nadd_executable(main main.cpp)\n\ntarget_link_libraries(main\n  nlohmann-json::nlohmann-json)\n```\n\nFor the moment this is not in Hunter ( _i.e._ See PR [#239](https://github.com/ruslo/hunter/pull/239) ), but even if it isn't accepted in Hunter, it is useful for code depending on your library, as the changes aren't Hunter specific, they allow the standard cmake `find_package` mechanism to be used to find your library.\n\nThank you very much for your awesome library to handle json. I like it. :smile: \nCheers,\n"}]