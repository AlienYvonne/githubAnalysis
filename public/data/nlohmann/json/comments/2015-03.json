[{"url": "https://api.github.com/repos/nlohmann/json/comments/10334030", "html_url": "https://github.com/nlohmann/json/commit/abc6137001da7d3f45eaa2a2a9c46e6e165236e0#commitcomment-10334030", "id": 10334030, "node_id": "MDEzOkNvbW1pdENvbW1lbnQxMDMzNDAzMA==", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "abc6137001da7d3f45eaa2a2a9c46e6e165236e0", "created_at": "2015-03-22T16:34:19Z", "updated_at": "2015-03-22T16:34:35Z", "author_association": "NONE", "body": "That will just call the `begin` and `end` functions in the `std` namespace, but won't use those in the namespace of the corresponding type. For enabling ADL to kick in, the right way to do it is:\n\n``` c++\nusing std::begin;\nusing std::end;\n// use unqualified begin(...), end(...)\n```\n\nC++ sucks :D\n"}, {"url": "https://api.github.com/repos/nlohmann/json/comments/10370558", "html_url": "https://github.com/nlohmann/json/commit/6fc52f33023ff0d5bd14b0ab23883649b14ada80#commitcomment-10370558", "id": 10370558, "node_id": "MDEzOkNvbW1pdENvbW1lbnQxMDM3MDU1OA==", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "6fc52f33023ff0d5bd14b0ab23883649b14ada80", "created_at": "2015-03-24T15:52:20Z", "updated_at": "2015-03-24T15:52:20Z", "author_association": "NONE", "body": "Awesome!\n"}, {"url": "https://api.github.com/repos/nlohmann/json/comments/10371316", "html_url": "https://github.com/nlohmann/json/commit/abc6137001da7d3f45eaa2a2a9c46e6e165236e0#commitcomment-10371316", "id": 10371316, "node_id": "MDEzOkNvbW1pdENvbW1lbnQxMDM3MTMxNg==", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "abc6137001da7d3f45eaa2a2a9c46e6e165236e0", "created_at": "2015-03-24T16:21:42Z", "updated_at": "2015-03-24T16:21:42Z", "author_association": "OWNER", "body": "Thanks for the comment. But isn't `std::begin(foo)` just a function that returns `foo.begin()` for any type of `foo`?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/comments/10371557", "html_url": "https://github.com/nlohmann/json/commit/abc6137001da7d3f45eaa2a2a9c46e6e165236e0#commitcomment-10371557", "id": 10371557, "node_id": "MDEzOkNvbW1pdENvbW1lbnQxMDM3MTU1Nw==", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "abc6137001da7d3f45eaa2a2a9c46e6e165236e0", "created_at": "2015-03-24T16:31:17Z", "updated_at": "2015-03-24T16:31:17Z", "author_association": "NONE", "body": "In standarese `std::swap`, `std::begin`, `std::end`, `std::iter_swap`, ... are _customization points_. They are defined in the `std` namespace and overloaded for some standard types, but when used as:\n\n``` c++\nusing std::swap;\nswap(a, b); // this might call std::swap or some other swap!\n```\n\nargument dependent look-up is going to try and find a swap function declared in the namespace where the types of `a` and `b` are defined. _Iff it doesn't find any_, is going to try any `swap` function in scope (e.g. `std::swap` which is brought into scope by the `using` directive). \n\nThat is: \n\n``` c++\nstd::swap(a, b); // will always call std::swap!\n```\n\ndoesn't do the same thing as `using std::swap` + unqualified call to `swap`. \n\n> But isn't std::begin(foo) just a function that returns foo.begin() for any type of foo?\n\n`std::begin` is a free function, that can be overloaded for other types. It is, in particular, overloaded for C-Arrays, which don't have member functions. Since you don't have to modify the type to implement non-member non-friend `begin` for a type, it allows you to adapt e.g. third-party code (that you cannot modify) such that it can e.g. be used with the range-for statement.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/comments/10371655", "html_url": "https://github.com/nlohmann/json/commit/abc6137001da7d3f45eaa2a2a9c46e6e165236e0#commitcomment-10371655", "id": 10371655, "node_id": "MDEzOkNvbW1pdENvbW1lbnQxMDM3MTY1NQ==", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "abc6137001da7d3f45eaa2a2a9c46e6e165236e0", "created_at": "2015-03-24T16:34:59Z", "updated_at": "2015-03-24T16:34:59Z", "author_association": "OWNER", "body": "OK. I just do not know any user-defined types with iterators where `std::begin` would not do the job. But I understand your explanation and trust you that there is demand :-)\n\nI'll update the code in a minute.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/comments/10371692", "html_url": "https://github.com/nlohmann/json/commit/abc6137001da7d3f45eaa2a2a9c46e6e165236e0#commitcomment-10371692", "id": 10371692, "node_id": "MDEzOkNvbW1pdENvbW1lbnQxMDM3MTY5Mg==", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "position": null, "line": null, "path": null, "commit_id": "abc6137001da7d3f45eaa2a2a9c46e6e165236e0", "created_at": "2015-03-24T16:36:46Z", "updated_at": "2015-03-24T16:36:46Z", "author_association": "NONE", "body": "I use this on e.g. Eigen3 vectors and matrices which do not provide `begin` and `end`.\n"}]