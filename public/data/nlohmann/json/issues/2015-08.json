[{"url": "https://api.github.com/repos/nlohmann/json/issues/117", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/117/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/117/events", "html_url": "https://github.com/nlohmann/json/issues/117", "id": 104052015, "node_id": "MDU6SXNzdWUxMDQwNTIwMTU=", "number": 117, "title": "Find and Count for arrays", "user": {"login": "alvarolb", "id": 1141353, "node_id": "MDQ6VXNlcjExNDEzNTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1141353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvarolb", "html_url": "https://github.com/alvarolb", "followers_url": "https://api.github.com/users/alvarolb/followers", "following_url": "https://api.github.com/users/alvarolb/following{/other_user}", "gists_url": "https://api.github.com/users/alvarolb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvarolb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvarolb/subscriptions", "organizations_url": "https://api.github.com/users/alvarolb/orgs", "repos_url": "https://api.github.com/users/alvarolb/repos", "events_url": "https://api.github.com/users/alvarolb/events{/privacy}", "received_events_url": "https://api.github.com/users/alvarolb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2015-08-31T13:19:30Z", "updated_at": "2016-11-13T22:38:10Z", "closed_at": "2015-12-16T10:37:39Z", "author_association": "NONE", "body": "Not sure if this has been already discussed, but I find useful to implement the find and count methods also for arrays. Arrays can store multiple items, so count can be useful to check wether a item is present of how many times it appears. However I don't know if it is easy to develop taking into account that an array can store multiple value types.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/114", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/114/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/114/events", "html_url": "https://github.com/nlohmann/json/issues/114", "id": 101791194, "node_id": "MDU6SXNzdWUxMDE3OTExOTQ=", "number": 114, "title": "dynamically constructing an arbitrarily nested object", "user": {"login": "zcourts", "id": 692396, "node_id": "MDQ6VXNlcjY5MjM5Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/692396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zcourts", "html_url": "https://github.com/zcourts", "followers_url": "https://api.github.com/users/zcourts/followers", "following_url": "https://api.github.com/users/zcourts/following{/other_user}", "gists_url": "https://api.github.com/users/zcourts/gists{/gist_id}", "starred_url": "https://api.github.com/users/zcourts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zcourts/subscriptions", "organizations_url": "https://api.github.com/users/zcourts/orgs", "repos_url": "https://api.github.com/users/zcourts/repos", "events_url": "https://api.github.com/users/zcourts/events{/privacy}", "received_events_url": "https://api.github.com/users/zcourts/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-08-19T02:20:17Z", "updated_at": "2016-11-13T22:38:10Z", "closed_at": "2015-12-16T10:20:45Z", "author_association": "NONE", "body": "How would you go about constructing an arbitrarily nested object e.g. a.b.c.d for serialisation?\nSomething like the following comes to mind but doesn't work:\n\n``` c++\n      auto record(nlohmann::json({});\n      nlohmann::json field = record;\n      for (const auto &part:utils::spilt(name)) {\n        field = field[part].is_null() ? nlohmann::json({}) : field[part];\n      }\n```\n\nwhere split(...) returns a vector of components from a dot notation string.\nI know I can do `record[\"a\"][\"b\"][\"c\"]` but they keys or depth aren't known in advance.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/113", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/113/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/113/events", "html_url": "https://github.com/nlohmann/json/issues/113", "id": 101613751, "node_id": "MDU6SXNzdWUxMDE2MTM3NTE=", "number": 113, "title": "Returning any data type", "user": {"login": "tomus85", "id": 462692, "node_id": "MDQ6VXNlcjQ2MjY5Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/462692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomus85", "html_url": "https://github.com/tomus85", "followers_url": "https://api.github.com/users/tomus85/followers", "following_url": "https://api.github.com/users/tomus85/following{/other_user}", "gists_url": "https://api.github.com/users/tomus85/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomus85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomus85/subscriptions", "organizations_url": "https://api.github.com/users/tomus85/orgs", "repos_url": "https://api.github.com/users/tomus85/repos", "events_url": "https://api.github.com/users/tomus85/events{/privacy}", "received_events_url": "https://api.github.com/users/tomus85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-08-18T09:34:23Z", "updated_at": "2015-08-21T07:46:35Z", "closed_at": "2015-08-21T07:46:35Z", "author_association": "NONE", "body": "Morning, \n\nI know this isn't the right place to ask as I don't have an issue with the library. It's more of C++ support. I have looked everywhere on Google and haven't found a solution. I hope you don't mind helping me out, I would very much appreciated it, cheers :-)\n\nI am creating a caching class in C++ so that It can be used in iOS and Android. I have created a simple class, this class is a singleton class:\n\nusing json = nlohmann::json;\nusing namespace std;\n\nclass Cache\n{\nprivate:\n    static Cache *instance;\n    json j;\n\n```\nCache() {};\nCache(Cache const&)             = delete;\nvoid operator=(Cache const&)    = delete;\n```\n\npublic:\n    static bool fileExists();\n    static Cache\\* getInstance();\n\n```\ntemplate<typename T> void add(string key, T t) { j[key] = t; }\n```\n\n//    template<typename T> T get(string key) { return j[key]; }\n\n```\nvoid persist();\n\nstring toString();\n```\n\n};\n\nThis is what I have implemented in Objective-C class \n        cache = Cache::getInstance();\n\n```\n    cache->add(\"test\", \"test\");\n    cache->add(\"name\", true);\n    cache->add(\"again\", 199.9);\n    NSLog(@\"%s\", cache->toString().c_str());\n```\n\nSo far the result is what I am expecting however I am trying to implement the 'get' method. As you can see I have comment this out in the header file. I would like to implement this method so that whatever key i pass in the parameter I get the value associated with the key. For example \n\ncache->get(\"test\") would return string \"test\"\ncache->get(\"name\") returns bool true\nand so on. \n\nWhat I have commented out requires this syntax 'cache->get<>(\"key\")'.\nI would very much appreciate if I could  get help implementing the 'get' method. \n\nIf this is not the right place to ask as this is not an issue with the framework then I will remove this thread.\n\nThank you for your time ;-)\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/112", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/112/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/112/events", "html_url": "https://github.com/nlohmann/json/issues/112", "id": 101500426, "node_id": "MDU6SXNzdWUxMDE1MDA0MjY=", "number": 112, "title": "Compile error with g++ 4.9.3 cygwin 64-bit", "user": {"login": "dariost", "id": 5399827, "node_id": "MDQ6VXNlcjUzOTk4Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5399827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariost", "html_url": "https://github.com/dariost", "followers_url": "https://api.github.com/users/dariost/followers", "following_url": "https://api.github.com/users/dariost/following{/other_user}", "gists_url": "https://api.github.com/users/dariost/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariost/subscriptions", "organizations_url": "https://api.github.com/users/dariost/orgs", "repos_url": "https://api.github.com/users/dariost/repos", "events_url": "https://api.github.com/users/dariost/events{/privacy}", "received_events_url": "https://api.github.com/users/dariost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2015-08-17T20:12:09Z", "updated_at": "2015-12-07T21:04:06Z", "closed_at": "2015-12-07T21:04:06Z", "author_association": "NONE", "body": "I've tried to compile the following code\n\n``` c++\n#include \"json.hpp\"\n#include <iostream>\n\nusing json = nlohmann::json;\n\nint main()\n{\n    json j;\n    j[\"success\"] = false;\n    std::cout << j.dump(4) << std::endl;\n    return 0;\n}\n```\n\nwith g++ 4.9.3 on cygwin 64-bit (I'm using Windows 10)\n\n```\n$ g++ --version\ng++ (GCC) 4.9.3\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\nThis is the compiler output\n\n```\n$ g++ main.cpp -std=c++11 -o main\nIn file included from main.cpp:1:0:\njson.hpp: In member function \u2018std::string nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::iterator_wrapper::iterator_wrapper_internal::calculate_key()\u2019:\njson.hpp:5725:32: error: \u2018to_string\u2019 is not a member of \u2018std\u2019\n                         return std::to_string(array_index);\n                                ^\njson.hpp: In member function \u2018long double nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::get_number() const\u2019:\njson.hpp:6940:36: error: \u2018strtold\u2019 is not a member of \u2018std\u2019\n             const auto float_val = std::strtold(reinterpret_cast<typename string_t::const_pointer>(m_start),\n                                    ^\njson.hpp:6940:36: note: suggested alternative:\nIn file included from /usr/lib/gcc/x86_64-pc-cygwin/4.9.3/include/c++/cstdlib:72:0,\n                 from /usr/lib/gcc/x86_64-pc-cygwin/4.9.3/include/c++/bits/stl_algo.h:59,\n                 from /usr/lib/gcc/x86_64-pc-cygwin/4.9.3/include/c++/algorithm:62,\n                 from json.hpp:41,\n                 from main.cpp:1:\n/usr/include/stdlib.h:279:20: note:   \u2018strtold\u2019\n extern long double strtold (const char *__restrict, char **__restrict);\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/110", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/110/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/110/events", "html_url": "https://github.com/nlohmann/json/issues/110", "id": 100225606, "node_id": "MDU6SXNzdWUxMDAyMjU2MDY=", "number": 110, "title": "insert json array issue with gcc4.8.2", "user": {"login": "tjuliuyou", "id": 5418088, "node_id": "MDQ6VXNlcjU0MTgwODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5418088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjuliuyou", "html_url": "https://github.com/tjuliuyou", "followers_url": "https://api.github.com/users/tjuliuyou/followers", "following_url": "https://api.github.com/users/tjuliuyou/following{/other_user}", "gists_url": "https://api.github.com/users/tjuliuyou/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjuliuyou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjuliuyou/subscriptions", "organizations_url": "https://api.github.com/users/tjuliuyou/orgs", "repos_url": "https://api.github.com/users/tjuliuyou/repos", "events_url": "https://api.github.com/users/tjuliuyou/events{/privacy}", "received_events_url": "https://api.github.com/users/tjuliuyou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2015-08-11T04:51:42Z", "updated_at": "2015-12-08T17:13:50Z", "closed_at": "2015-12-08T17:13:26Z", "author_association": "NONE", "body": "The task may like this:\n\n``` json\n[\n{\n \"id\" : \"1111-0000\",\n\"content\" : []\n},\n{\n \"id\" : \"1111-2222\",\n\"content\" : []\n}\n]\n```\n\nwhen I try to insert json to `_task` \n\n``` cpp\n // nlohmann::json _task; \n  void add_task(const nlohmann::json& tasks) {\n    std::lock_guard<std::mutex> lock(_mtx);\n    _task.insert(_task.end(),tasks.cbegin(),tasks.cend());\n  }\n```\n\nI get this error when using gcc4.8.2 (but worked when using clang3.6)\n\n```\nhome/sven/Workspace/Collector/include/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::iterator nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::insert(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::const_iterator, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::const_iterator, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::const_iterator) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n/home/sven/Workspace/Collector/Collector/Services/serialize_manager.cpp:46:57:   required from here\n/home/sven/Workspace/Collector/include/json.hpp:3897:36: error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > >::iterator {aka __gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >}\u2019 and \u2018void\u2019)\n         result.m_it.array_iterator = m_value.array->insert(pos.m_it.array_iterator,\n                                    ^\n/home/sven/Workspace/Collector/include/json.hpp:3897:36: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/bits/stl_algobase.h:67:0,\n                 from /usr/include/c++/4.8.2/bits/char_traits.h:39,\n                 from /usr/include/c++/4.8.2/string:40,\n                 from /home/sven/Workspace/Collector/Collector/Services/serialize_manager.h:8,\n                 from /home/sven/Workspace/Collector/Collector/Services/serialize_manager.cpp:5:\n/usr/include/c++/4.8.2/bits/stl_iterator.h:708:11: note: __gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >& __gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >::operator=(const __gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >&)\n     class __normal_iterator\n           ^\n/usr/include/c++/4.8.2/bits/stl_iterator.h:708:11: note:   no known conversion for argument 1 from \u2018void\u2019 to \u2018const __gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >&\u2019\n/usr/include/c++/4.8.2/bits/stl_iterator.h:708:11: note: __gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >& __gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >::operator=(__gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >&&)\n/usr/include/c++/4.8.2/bits/stl_iterator.h:708:11: note:   no known conversion for argument 1 from \u2018void\u2019 to \u2018__gnu_cxx::__normal_iterator<nlohmann::basic_json<>*, std::vector<nlohmann::basic_json<>, std::allocator<nlohmann::basic_json<> > > >&&\u2019\ngmake[3]: *** [Collector/CMakeFiles/collector.dir/Services/serialize_manager.cpp.o] Error 1\ngmake[2]: *** [Collector/CMakeFiles/collector.dir/all] Error 2\ngmake[1]: *** [Collector/CMakeFiles/collector.dir/rule] Error 2\ngmake: *** [collector] Error 2\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/109", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/109/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/109/events", "html_url": "https://github.com/nlohmann/json/issues/109", "id": 100206652, "node_id": "MDU6SXNzdWUxMDAyMDY2NTI=", "number": 109, "title": "error: unterminated raw string", "user": {"login": "brianbreitsch", "id": 4730272, "node_id": "MDQ6VXNlcjQ3MzAyNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4730272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianbreitsch", "html_url": "https://github.com/brianbreitsch", "followers_url": "https://api.github.com/users/brianbreitsch/followers", "following_url": "https://api.github.com/users/brianbreitsch/following{/other_user}", "gists_url": "https://api.github.com/users/brianbreitsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianbreitsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianbreitsch/subscriptions", "organizations_url": "https://api.github.com/users/brianbreitsch/orgs", "repos_url": "https://api.github.com/users/brianbreitsch/repos", "events_url": "https://api.github.com/users/brianbreitsch/events{/privacy}", "received_events_url": "https://api.github.com/users/brianbreitsch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2015-08-11T01:52:48Z", "updated_at": "2018-07-19T05:46:45Z", "closed_at": "2015-12-07T20:54:04Z", "author_association": "NONE", "body": "G++ 4.8.2\n\nI'm not 100% sure that I'm doing things correctly--nevertheless, the first error I get when running `make` is:\n\n```\ng++ -std=c++11  -Wall -Wextra -pedantic -Weffc++ -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wmissing-declarations -Wmissing-include-dirs -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-conversion -Wsign-promo -Wstrict-overflow=5 -Wswitch -Wundef -Wno-unused -Wnon-virtual-dtor -Wreorder -Wdeprecated -Wfloat-equal  -I src -I test test/unit.cpp  -o json_unit\ntest/unit.cpp:9675:32: error: unterminated raw string\n             CHECK_NOTHROW(json(R\"(\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/108", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/108/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/108/events", "html_url": "https://github.com/nlohmann/json/issues/108", "id": 99422504, "node_id": "MDU6SXNzdWU5OTQyMjUwNA==", "number": 108, "title": "vector<json> copy constructor really weird", "user": {"login": "ajneu", "id": 11367585, "node_id": "MDQ6VXNlcjExMzY3NTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/11367585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajneu", "html_url": "https://github.com/ajneu", "followers_url": "https://api.github.com/users/ajneu/followers", "following_url": "https://api.github.com/users/ajneu/following{/other_user}", "gists_url": "https://api.github.com/users/ajneu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajneu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajneu/subscriptions", "organizations_url": "https://api.github.com/users/ajneu/orgs", "repos_url": "https://api.github.com/users/ajneu/repos", "events_url": "https://api.github.com/users/ajneu/events{/privacy}", "received_events_url": "https://api.github.com/users/ajneu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-08-06T12:17:26Z", "updated_at": "2015-09-07T11:23:32Z", "closed_at": "2015-08-11T17:19:24Z", "author_association": "NONE", "body": "Hi there!\n\nTry guess the output of the following:\n\n``` cpp\n#include <iostream>\n#include <cassert>\n#include <vector>\n\n#include <json.hpp>\n\n// for convenience\nusing json = nlohmann::json;\n\ntemplate <typename T>\nclass WeirdClass {\npublic:\n  WeirdClass(const std::vector<T> &v) : vec{v}\n  {\n    std::cout << \"v.size()   == \" << v.size()   << std::endl;\n    std::cout << \"vec.size() == \" << vec.size() << std::endl;\n\n    std::cout << std::endl;\n\n    for (decltype(v.size()) idx = 0; idx != v.size(); ++idx) {\n      std::cout << \"v[\" << idx << \"]   == \" << v[idx] << std::endl;\n    }\n\n    std::cout << std::endl;\n\n    for (decltype(vec.size()) idx = 0; idx != vec.size(); ++idx) {\n      std::cout << \"vec[\" << idx << \"] == \" << vec[idx] << std::endl;\n    }\n    std::cout << std::endl;\n\n    assert(v.size() == vec.size());\n  }\nprivate:\n  const std::vector<T> vec;\n };\n\n\nint main()\n{\n  json x, y;\n  x[\"value\"] = 0;\n  y[\"value\"] = 1;\n  WeirdClass<json> weird{{x, y}};\n\n  return 0;\n}\n```\n\nIt aborts!!!!! and gives me this\n\n``` bash\nv.size()   == 2\nvec.size() == 1\n\nv[0]   == {\"value\":0}\nv[1]   == {\"value\":1}\n\nvec[0] == [{\"value\":0},{\"value\":1}]\n\ngo: /home/me/main.cpp:31: WeirdClass<T>::WeirdClass(const std::vector<_RealType>&) [with T = nlohmann::basic_json<>]: Assertion `v.size() == vec.size()' failed.\nAborted\n```\n\nChanging the constructor to \n\n``` cpp\n  WeirdClass(const std::vector<T> &v) : vec{v.cbegin(), v.cend()}\n  { //...\n```\n\ngives me the expected output:\n\n``` bash\nv.size()   == 2\nvec.size() == 2\n\nv[0]   == {\"value\":0}\nv[1]   == {\"value\":1}\n\nvec[0] == {\"value\":0}\nvec[1] == {\"value\":1}\n```\n\nWhat's going on here??\nI thought things like the copy constructor should behave in a standard way. (Or is my compiler buggy?? I'm using: gcc c++ (Debian 4.9.3-3) 4.9.3; and compiling with `-std=c++14`)\n\nThanks\n"}]