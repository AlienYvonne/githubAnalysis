[{"url": "https://api.github.com/repos/nlohmann/json/issues/167", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/167/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/167/events", "html_url": "https://github.com/nlohmann/json/issues/167", "id": 124406689, "node_id": "MDU6SXNzdWUxMjQ0MDY2ODk=", "number": 167, "title": "MSVC 2015 build fails when attempting to compare object_t", "user": {"login": "erichkeane", "id": 8562757, "node_id": "MDQ6VXNlcjg1NjI3NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8562757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erichkeane", "html_url": "https://github.com/erichkeane", "followers_url": "https://api.github.com/users/erichkeane/followers", "following_url": "https://api.github.com/users/erichkeane/following{/other_user}", "gists_url": "https://api.github.com/users/erichkeane/gists{/gist_id}", "starred_url": "https://api.github.com/users/erichkeane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erichkeane/subscriptions", "organizations_url": "https://api.github.com/users/erichkeane/orgs", "repos_url": "https://api.github.com/users/erichkeane/repos", "events_url": "https://api.github.com/users/erichkeane/events{/privacy}", "received_events_url": "https://api.github.com/users/erichkeane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/2", "html_url": "https://github.com/nlohmann/json/milestone/2", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/2/labels", "id": 1479859, "node_id": "MDk6TWlsZXN0b25lMTQ3OTg1OQ==", "number": 2, "title": "Release 1.1.0", "description": "", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 19, "state": "closed", "created_at": "2016-01-01T17:36:30Z", "updated_at": "2016-01-26T05:26:42Z", "due_on": "2016-01-23T08:00:00Z", "closed_at": "2016-01-26T05:26:42Z"}, "comments": 36, "created_at": "2015-12-30T22:18:58Z", "updated_at": "2016-01-24T12:00:01Z", "closed_at": "2016-01-24T12:00:01Z", "author_association": "NONE", "body": "See #144 and #165 for examples of the build.  \n\nIt seems that the following results in a test to see if a value is streamable in catch.hpp:\nunit.cpp:2588 CHECK(*p1 == value.get<test_type>());\n\nThis causes a call to operator == in catch.hpp (17771): \n\n```\ntemplate<typename RhsT>\nResultBuilder& operator == ( RhsT const& rhs ) {\nreturn captureExpression<Internal::IsEqualTo>( rhs );\n}\n```\n\nTHAT causes a call to the captureExpression function on catch.hpp:1829\n\n```\ntemplate<Internal::Operator Op, typename RhsT>\nResultBuilder& captureExpression( RhsT const& rhs ) {\n    return m_rb\n        .setResultType( Internal::compare<Op>( m_lhs, rhs ) )\n         .setLhs( Catch::toString( m_lhs ) )\n        .setRhs( Catch::toString( rhs ) )\n        .setOp( Internal::OperatorTraits<Op>::getName() );\n}\n```\n\nThe Catch::toString results in a call to catch.hpp: 1731's toString->StringMaker:\n\n```\ntemplate<typename T>\nstd::string toString( T const& value ) {\nreturn StringMaker<T>::convert( value );\n}\n```\n\nStringMaker<T> simply offloads to Detail::StringMakerBase, but first goes through the Detail::IsStreamInsertable<T>::value!  This happens on 1575:\n\n```\n template<typename T>\n struct IsStreamInsertable {\n     static std::ostream &s;\n     static T  const&t;\n     enum { value = sizeof( testStreamable(s << t) ) == sizeof( TrueType ) };\n };\n```\n\nOn Linux, this appears to realize there is NO overload for operator << that works, however MSVC doesn't seem to know that, and decides that it is an ambiguous call between just about every possible overload.  \n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/166", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/166/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/166/events", "html_url": "https://github.com/nlohmann/json/issues/166", "id": 124396915, "node_id": "MDU6SXNzdWUxMjQzOTY5MTU=", "number": 166, "title": "Member detector is not portable", "user": {"login": "glenfe", "id": 712180, "node_id": "MDQ6VXNlcjcxMjE4MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/712180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glenfe", "html_url": "https://github.com/glenfe", "followers_url": "https://api.github.com/users/glenfe/followers", "following_url": "https://api.github.com/users/glenfe/following{/other_user}", "gists_url": "https://api.github.com/users/glenfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/glenfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glenfe/subscriptions", "organizations_url": "https://api.github.com/users/glenfe/orgs", "repos_url": "https://api.github.com/users/glenfe/repos", "events_url": "https://api.github.com/users/glenfe/events{/privacy}", "received_events_url": "https://api.github.com/users/glenfe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/2", "html_url": "https://github.com/nlohmann/json/milestone/2", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/2/labels", "id": 1479859, "node_id": "MDk6TWlsZXN0b25lMTQ3OTg1OQ==", "number": 2, "title": "Release 1.1.0", "description": "", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 19, "state": "closed", "created_at": "2016-01-01T17:36:30Z", "updated_at": "2016-01-26T05:26:42Z", "due_on": "2016-01-23T08:00:00Z", "closed_at": "2016-01-26T05:26:42Z"}, "comments": 5, "created_at": "2015-12-30T20:36:00Z", "updated_at": "2016-01-01T17:36:57Z", "closed_at": "2016-01-01T17:36:57Z", "author_association": "NONE", "body": "Your `has_mapped_type` definition may be dependent on the C++ implementation providing `int` and `char` of different sizes. It is valid for an implementation to make them the same size.\n\nYou can remedy this by changing the return types to types which will be different sizes.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/164", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/164/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/164/events", "html_url": "https://github.com/nlohmann/json/issues/164", "id": 124202445, "node_id": "MDU6SXNzdWUxMjQyMDI0NDU=", "number": 164, "title": "std::unorderd_map cannot be used as ObjectType", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2015-12-29T12:10:48Z", "updated_at": "2016-11-02T16:24:44Z", "closed_at": "2016-11-02T16:24:44Z", "author_association": "OWNER", "body": "The following code does not compile:\n\n``` cpp\nusing json = nlohmann::basic_json<std::unordered_map, std::vector, std::string, bool, int64_t, double, std::allocator>;\n```\n\nThe reason for this seems to be that the definition of `object_t` seems to rely on specifics of `std::map`:\n\n``` cpp\nusing object_t = ObjectType<StringType,\n      basic_json,\n      std::less<StringType>,\n      AllocatorType<std::pair<const StringType,\n      basic_json>>>;\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/163", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/163/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/163/events", "html_url": "https://github.com/nlohmann/json/issues/163", "id": 124196309, "node_id": "MDU6SXNzdWUxMjQxOTYzMDk=", "number": 163, "title": "Provide a FAQ", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-29T11:11:39Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2016-01-30T20:20:20Z", "author_association": "OWNER", "body": "As proposed on [Reddit](https://www.reddit.com/r/cpp/comments/3yiw5g/json_for_modern_c_version_100/cyedvg8), it would be a good idea to have a FAQ section.\n\nPossible questions:\n- Why does the code not work with GCC 4.8? (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55817, https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57824)\n- Is putting all code in a single header a good idea? (http://stackoverflow.com/questions/583255/c-code-in-header-files)\n- Why are elements of objects ordered when I iterate/dump them?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/162", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/162/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/162/events", "html_url": "https://github.com/nlohmann/json/issues/162", "id": 124141902, "node_id": "MDU6SXNzdWUxMjQxNDE5MDI=", "number": 162, "title": "Unnecessary const_cast", "user": {"login": "gregmarr", "id": 8569738, "node_id": "MDQ6VXNlcjg1Njk3Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8569738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregmarr", "html_url": "https://github.com/gregmarr", "followers_url": "https://api.github.com/users/gregmarr/followers", "following_url": "https://api.github.com/users/gregmarr/following{/other_user}", "gists_url": "https://api.github.com/users/gregmarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregmarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregmarr/subscriptions", "organizations_url": "https://api.github.com/users/gregmarr/orgs", "repos_url": "https://api.github.com/users/gregmarr/repos", "events_url": "https://api.github.com/users/gregmarr/events{/privacy}", "received_events_url": "https://api.github.com/users/gregmarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/2", "html_url": "https://github.com/nlohmann/json/milestone/2", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/2/labels", "id": 1479859, "node_id": "MDk6TWlsZXN0b25lMTQ3OTg1OQ==", "number": 2, "title": "Release 1.1.0", "description": "", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 19, "state": "closed", "created_at": "2016-01-01T17:36:30Z", "updated_at": "2016-01-26T05:26:42Z", "due_on": "2016-01-23T08:00:00Z", "closed_at": "2016-01-26T05:26:42Z"}, "comments": 1, "created_at": "2015-12-28T23:43:14Z", "updated_at": "2016-01-01T17:37:13Z", "closed_at": "2015-12-29T11:30:11Z", "author_association": "CONTRIBUTOR", "body": "```\ninline nlohmann::json operator \"\" _json(const char* s, std::size_t)\n{\n    return nlohmann::json::parse(reinterpret_cast<nlohmann::json::string_t::value_type*>\n                                 (const_cast<char*>(s)));\n}\n```\n\nThe const_cast<char *>() can be removed simply by adding const to the reinterpret_cast.\n\n```\nreturn nlohmann::json::parse(reinterpret_cast<const nlohmann::json::string_t::value_type*>(s));\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/161", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/161/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/161/events", "html_url": "https://github.com/nlohmann/json/issues/161", "id": 124078526, "node_id": "MDU6SXNzdWUxMjQwNzg1MjY=", "number": 161, "title": "Incorrect C++11 allocator model support", "user": {"login": "glenfe", "id": 712180, "node_id": "MDQ6VXNlcjcxMjE4MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/712180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glenfe", "html_url": "https://github.com/glenfe", "followers_url": "https://api.github.com/users/glenfe/followers", "following_url": "https://api.github.com/users/glenfe/following{/other_user}", "gists_url": "https://api.github.com/users/glenfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/glenfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glenfe/subscriptions", "organizations_url": "https://api.github.com/users/glenfe/orgs", "repos_url": "https://api.github.com/users/glenfe/repos", "events_url": "https://api.github.com/users/glenfe/events{/privacy}", "received_events_url": "https://api.github.com/users/glenfe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2015-12-28T15:07:51Z", "updated_at": "2017-06-16T17:36:51Z", "closed_at": "2017-06-16T17:36:51Z", "author_association": "NONE", "body": "Here is a preliminary list of issues:\n- Your allocator template parameter should be just `class AllocatorType = std::allocator<ValueType>` instead of `template<class U> class AllocatorType = std::allocator`.  i.e. Do not require that the allocator type is a class template with one template parameter.\n- You only support stateless allocators; C++ allocators can be stateful. Your `basic_json` constructors should accept an optional allocator instance: `basic_json(..., const AllocatorType& allocator = AllocatorType());`\n- Your `get_allocator()` member should return the value of that stored allocator instance.\n- Don't use `AllocatorType<Type> alloc;`, instead rebind the stored allocator instance member variable with `std::allocator_traits<AllocatorType>::rebind_alloc<Type> alloc(allocator);`.\n- Don't use `alloc.construct(...)` directly, instead use `std::allocator_traits<AllocatorType>::rebind_traits<Type>::construct(alloc, ...)`. Allocators are not required to provide `construct` or `destroy` so all construction and destruction should go through `std::allocator_traits`.\n- A given allocator is allowed to have complex types for `pointer` so preserve those (instead of `T*`) for the result of `alloc.allocate(n)`. Use `std::addressof` with those pointers to obtain the value for use with `construct(...)`.\n\nYou'll notice all the C++ standard library facilities which support allocators implement the above, so look to them (or to allocator aware types in Boost) for further examples.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/160", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/160/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/160/events", "html_url": "https://github.com/nlohmann/json/issues/160", "id": 123105905, "node_id": "MDU6SXNzdWUxMjMxMDU5MDU=", "number": 160, "title": "add key name to exception", "user": {"login": "Furcube", "id": 5106643, "node_id": "MDQ6VXNlcjUxMDY2NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5106643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Furcube", "html_url": "https://github.com/Furcube", "followers_url": "https://api.github.com/users/Furcube/followers", "following_url": "https://api.github.com/users/Furcube/following{/other_user}", "gists_url": "https://api.github.com/users/Furcube/gists{/gist_id}", "starred_url": "https://api.github.com/users/Furcube/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Furcube/subscriptions", "organizations_url": "https://api.github.com/users/Furcube/orgs", "repos_url": "https://api.github.com/users/Furcube/repos", "events_url": "https://api.github.com/users/Furcube/events{/privacy}", "received_events_url": "https://api.github.com/users/Furcube/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-19T19:22:27Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2015-12-27T14:32:21Z", "author_association": "NONE", "body": "I use library to deserialize json to class.\nSeem to be simple like this:\n\n``` c++\nclass test {\npublic:\n  std::string str;\n  int i;\n\n  test(const json & json) :\n          str(json.at(\"str\").get<std::string>()),\n          i(json.at(\"i\"))) {\n  }\n};\n```\n\nBut at will throw out_of_range without actually telling what it could not find. Makes deserialization without touching json.hpp much harder that it could be.\n\nIt would be good for exceptions to be more verbose.\n\nNot sure that it will work in all cases, but it works for mine. I've changed json.hpp like this:\n\n``` diff\ndiff --git a/src/json.hpp b/src/json.hpp\nindex 9de73dd..a5d74b9 100644\n--- a/src/json.hpp\n+++ b/src/json.hpp\n@@ -2686,7 +2686,11 @@ class basic_json\n         // at only works for objects\n         if (is_object())\n         {\n-            return m_value.object->at(key);\n+               try {\n+                       return m_value.object->at(key);\n+               } catch(const std::out_of_range & e) {\n+                       throw std::out_of_range(\"can't find \\\"\" + key + '\"');\n+               }\n         }\n         else\n         {\n@@ -2724,7 +2728,11 @@ class basic_json\n         // at only works for objects\n         if (is_object())\n         {\n-            return m_value.object->at(key);\n+               try {\n+                       return m_value.object->at(key);\n+               } catch(const std::out_of_range & e) {\n+                       throw std::out_of_range(\"can't find \\\"\" + key + '\"');\n+               }\n         }\n         else\n         {\n```\n\nAnd now I can just log exception and tell what is missing.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/159", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/159/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/159/events", "html_url": "https://github.com/nlohmann/json/issues/159", "id": 122948279, "node_id": "MDU6SXNzdWUxMjI5NDgyNzk=", "number": 159, "title": "Getting member discarding qualifyer", "user": {"login": "EvilPudding", "id": 7356051, "node_id": "MDQ6VXNlcjczNTYwNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7356051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EvilPudding", "html_url": "https://github.com/EvilPudding", "followers_url": "https://api.github.com/users/EvilPudding/followers", "following_url": "https://api.github.com/users/EvilPudding/following{/other_user}", "gists_url": "https://api.github.com/users/EvilPudding/gists{/gist_id}", "starred_url": "https://api.github.com/users/EvilPudding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EvilPudding/subscriptions", "organizations_url": "https://api.github.com/users/EvilPudding/orgs", "repos_url": "https://api.github.com/users/EvilPudding/repos", "events_url": "https://api.github.com/users/EvilPudding/events{/privacy}", "received_events_url": "https://api.github.com/users/EvilPudding/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-12-18T13:24:48Z", "updated_at": "2015-12-21T12:42:00Z", "closed_at": "2015-12-21T12:42:00Z", "author_association": "NONE", "body": "I know there has been a lot of discussion on this topic in\nthe issues, but I don't know what conclusion you guys\narrived to, all I know is that I'm need to use json as a\nconst reference, and what I've been doing to access the\nobject entries isn't very efficient, what I want to do is:\n\n``` c++\nvoid func(const json &event)\n{\n    float x = event[\"x\"];\n}\n```\n\nBut I get a warning that this discards the const qualifier,\nso what I'm doing to fix it is the horrible:\n\n``` c++\nvoid func(const json &event)\n{\n    json ev = event;\n    float x = ev[\"x\"];\n}\n```\n\nWhich works, but is silly and not efficient as hell, seen\nthis function is supposed to be called maybe thousands\nof times per second. Is there a plan to fix it, and what\nshould I do meanwhile so that I'm not copying the\nmemory every time I call the function?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/158", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/158/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/158/events", "html_url": "https://github.com/nlohmann/json/issues/158", "id": 122865737, "node_id": "MDU6SXNzdWUxMjI4NjU3Mzc=", "number": 158, "title": "basic_json::iterator::value() output includes quotes while basic_json::iterator::key() doesn't", "user": {"login": "RElesgoe", "id": 1463845, "node_id": "MDQ6VXNlcjE0NjM4NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1463845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RElesgoe", "html_url": "https://github.com/RElesgoe", "followers_url": "https://api.github.com/users/RElesgoe/followers", "following_url": "https://api.github.com/users/RElesgoe/following{/other_user}", "gists_url": "https://api.github.com/users/RElesgoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/RElesgoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RElesgoe/subscriptions", "organizations_url": "https://api.github.com/users/RElesgoe/orgs", "repos_url": "https://api.github.com/users/RElesgoe/repos", "events_url": "https://api.github.com/users/RElesgoe/events{/privacy}", "received_events_url": "https://api.github.com/users/RElesgoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-18T02:27:47Z", "updated_at": "2015-12-20T11:32:28Z", "closed_at": "2015-12-20T11:32:28Z", "author_association": "NONE", "body": "I've noticed that when iterating through a json object, calling `value()` wraps the string with quotes while `key()` doesn't. This should be changed so that either they both be wrapped with quotes or not wrapped at all.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/157", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/157/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/157/events", "html_url": "https://github.com/nlohmann/json/issues/157", "id": 122264542, "node_id": "MDU6SXNzdWUxMjIyNjQ1NDI=", "number": 157, "title": "Indexing `const basic_json<>` with `const basic_string<char>`", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-12-15T12:44:34Z", "updated_at": "2015-12-15T18:26:46Z", "closed_at": "2015-12-15T13:39:06Z", "author_association": "NONE", "body": "I cannot index `const basic_json<>` with a `const basic_string<char>` anymore.\n\n``` shell\nIn file included from my/json.hpp.cpp:2:\nmy/json.hpp:30:11: error: no viable overloaded operator[] for type 'const json' (aka 'const basic_json<>')\n  return j[name];\n         ~^~~~~\nsrc/json.hpp:2593:15: note: candidate function not viable: 'this' argument has type 'const json' (aka 'const basic_json<>'), but method is not marked const\n    reference operator[](size_type idx)\n              ^\nsrc/json.hpp:2634:21: note: candidate function not viable: no known conversion from 'const string' (aka 'const basic_string<char>') to 'size_type' (aka 'unsigned long') for 1st argument\n    const_reference operator[](size_type idx) const\n                    ^\nsrc/json.hpp:2671:15: note: candidate function not viable: 'this' argument has type 'const json' (aka 'const basic_json<>'), but method is not marked const\n    reference operator[](const typename object_t::key_type& key)\n              ^\nsrc/json.hpp:2718:15: note: candidate template ignored: could not match 'const T [n]' against 'const string' (aka 'const basic_string<char>')\n    reference operator[](const T (&key)[n])\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/156", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/156/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/156/events", "html_url": "https://github.com/nlohmann/json/issues/156", "id": 122259765, "node_id": "MDU6SXNzdWUxMjIyNTk3NjU=", "number": 156, "title": "token_type_name(token_type t): not all control paths return a value", "user": {"login": "Drealmer", "id": 1515698, "node_id": "MDQ6VXNlcjE1MTU2OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1515698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Drealmer", "html_url": "https://github.com/Drealmer", "followers_url": "https://api.github.com/users/Drealmer/followers", "following_url": "https://api.github.com/users/Drealmer/following{/other_user}", "gists_url": "https://api.github.com/users/Drealmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Drealmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Drealmer/subscriptions", "organizations_url": "https://api.github.com/users/Drealmer/orgs", "repos_url": "https://api.github.com/users/Drealmer/repos", "events_url": "https://api.github.com/users/Drealmer/events{/privacy}", "received_events_url": "https://api.github.com/users/Drealmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-12-15T12:13:26Z", "updated_at": "2015-12-17T15:52:59Z", "closed_at": "2015-12-17T15:52:59Z", "author_association": "NONE", "body": "Hello,\n\nThe function \"token_type_name(token_type t)\" contains a switch where every case contains a return, but Visual Studio 2015 complains about the function still having a control path that wouldn't return a value. Adding a default to the switch would fix it.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/154", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/154/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/154/events", "html_url": "https://github.com/nlohmann/json/issues/154", "id": 121263184, "node_id": "MDU6SXNzdWUxMjEyNjMxODQ=", "number": 154, "title": "prevent json.hpp from emitting compiler warnings", "user": {"login": "luxe", "id": 1312081, "node_id": "MDQ6VXNlcjEzMTIwODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1312081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luxe", "html_url": "https://github.com/luxe", "followers_url": "https://api.github.com/users/luxe/followers", "following_url": "https://api.github.com/users/luxe/following{/other_user}", "gists_url": "https://api.github.com/users/luxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/luxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luxe/subscriptions", "organizations_url": "https://api.github.com/users/luxe/orgs", "repos_url": "https://api.github.com/users/luxe/repos", "events_url": "https://api.github.com/users/luxe/events{/privacy}", "received_events_url": "https://api.github.com/users/luxe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-12-09T14:57:00Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2015-12-14T15:59:42Z", "author_association": "CONTRIBUTOR", "body": "compiling `json.hpp` with `g++`.  \nI've enabled some warnings flags, and now get the following:\n\n```\nIn file included from ./Test_Utilities/all_test_utilities.hpp:9:0,\n                 from test.cpp:2:\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::~basic_json() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018null\u2019 not handled in switch [-Wswitch-enum]\n         switch (m_type)\n         ^\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018boolean\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018number_integer\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018number_float\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:1669:9: warning: enumeration value \u2018discarded\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018void nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::dump(std::ostream&, bool, unsigned int, unsigned int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; std::ostream = std::basic_ostream<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:1739:17:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::dump(int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7268:25:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:4722:9: warning: enumeration value \u2018null\u2019 not handled in switch [-Wswitch-enum]\n         switch (m_type)\n         ^\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018uninitialized\u2019 not handled in switch [-Wswitch-enum]\n             switch (last_token)\n             ^\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018end_array\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018end_object\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018name_separator\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018value_separator\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018parse_error\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp:6970:13: warning: enumeration value \u2018end_of_input\u2019 not handled in switch [-Wswitch-enum]\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::basic_json(const nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:6961:42:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:1553:9: warning: switch missing default case [-Wswitch-default]\n         switch (m_type)\n         ^\nIn file included from ./Test_Utilities/all_test_utilities.hpp:9:0,\n                 from test.cpp:2:\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::json_value::json_value(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::value_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:6978:40:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:632:13: warning: switch missing default case [-Wswitch-default]\n             switch (t)\n             ^\nIn file included from ./Test_Utilities/all_test_utilities.hpp:9:0,\n                 from test.cpp:2:\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::get_string() const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:7009:61:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:6795:21: warning: switch missing default case [-Wswitch-default]\n                     switch (*i)\n                     ^\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018static std::string nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type_name(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; std::string = std::basic_string<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:7194:61:   required from \u2018void nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::expect(typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::lexer::token_type = nlohmann::basic_json<>::lexer::token_type]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6957:19:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:5922:13: warning: enumeration value \u2018parse_error\u2019 not handled in switch [-Wswitch-enum]\n             switch (t)\n             ^\n./Test_Utilities/3rd_Party_Libs/json.hpp: In instantiation of \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::type_name() const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]\u2019:\n./Test_Utilities/3rd_Party_Libs/json.hpp:2664:78:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::value_type& nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::operator[](const typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::object_t::key_type&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::reference = nlohmann::basic_json<>&; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::value_type = nlohmann::basic_json<>; typename nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::object_t::key_type = std::basic_string<char>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7034:35:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse_internal(bool) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:6955:47:   required from \u2018nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:4429:36:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\n./Test_Utilities/3rd_Party_Libs/json.hpp:7286:56:   required from here\n./Test_Utilities/3rd_Party_Libs/json.hpp:4508:9: warning: enumeration value \u2018number_integer\u2019 not handled in switch [-Wswitch-enum]\n         switch (m_type)\n         ^\n./Test_Utilities/3rd_Party_Libs/json.hpp:4508:9: warning: enumeration value \u2018number_float\u2019 not handled in switch [-Wswitch-enum]\n```\n\nIt's just `-Wswitch-enum` and `-Wswitch-default`.  \nCan we suppress these warnings in the library, so I can still apply them to my own code without all the noise?  \nThe Catch testing framework, seems to take a similar approach.  \nhttps://github.com/philsquared/Catch/blob/master/include/internal/catch_suppress_warnings.h\n"}]