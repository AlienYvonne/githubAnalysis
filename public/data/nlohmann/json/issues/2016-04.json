[{"url": "https://api.github.com/repos/nlohmann/json/issues/239", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/239/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/239/events", "html_url": "https://github.com/nlohmann/json/issues/239", "id": 151645583, "node_id": "MDU6SXNzdWUxNTE2NDU1ODM=", "number": 239, "title": "-Wconversion warnings", "user": {"login": "Aykelith", "id": 2557410, "node_id": "MDQ6VXNlcjI1NTc0MTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2557410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aykelith", "html_url": "https://github.com/Aykelith", "followers_url": "https://api.github.com/users/Aykelith/followers", "following_url": "https://api.github.com/users/Aykelith/following{/other_user}", "gists_url": "https://api.github.com/users/Aykelith/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aykelith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aykelith/subscriptions", "organizations_url": "https://api.github.com/users/Aykelith/orgs", "repos_url": "https://api.github.com/users/Aykelith/repos", "events_url": "https://api.github.com/users/Aykelith/events{/privacy}", "received_events_url": "https://api.github.com/users/Aykelith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/3", "html_url": "https://github.com/nlohmann/json/milestone/3", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/3/labels", "id": 1510937, "node_id": "MDk6TWlsZXN0b25lMTUxMDkzNw==", "number": 3, "title": "Release 2.0.0", "description": "This release adds several features such as JSON Pointers, JSON Patch, or support for 64 bit unsigned integers. Furthermore, several (subtle) bugs have been fixed.\r\n\r\nAs `noexcept` and `constexpr` specifier have been added to several functions, the public API has effectively been changed in a (potential) non-backwards compatible manner. As we adhere to [Semantic Versioning](http://semver.org), this calls for a new major version, so say hello to 2\ufe0f\u20e3.0\ufe0f\u20e3.0\ufe0f\u20e3.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 34, "state": "closed", "created_at": "2016-01-17T12:14:39Z", "updated_at": "2016-06-23T22:53:19Z", "due_on": "2016-06-23T07:00:00Z", "closed_at": "2016-06-23T22:53:19Z"}, "comments": 7, "created_at": "2016-04-28T13:46:39Z", "updated_at": "2016-05-11T15:27:13Z", "closed_at": "2016-05-11T15:27:13Z", "author_association": "NONE", "body": "I'm using `g++ (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 5.3.0` and `g++ (i686-posix-dwarf-rev1, Built by MinGW-W64 project) 4.9.2` and I'm getting this:\n\n> In file included from ..\\path\\StateMachine.cpp:3:0:\n> ../path/json/json.hpp: In instantiation of 'nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::type_data_t& nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::type_data_t::operator=(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::value_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator]':\n> ../path/json/json.hpp:2037:22:   required from 'nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::basic_json(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>&&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator]'\n> ../path/json/json.hpp:9568:98:   required from here\n> ../path/json/json.hpp:760:23: warning: conversion to 'unsigned char:4' from 'uint16_t {aka short unsigned int}' may alter its value [-Wconversion]\n>              bits.type = static_cast<uint16_t>(rhs);\n>                        ^\n> In file included from ..\\path\\StateMachine.cpp:3:0:\n> ../path/json/json.hpp: In instantiation of 'nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::escape_string(const string_t&)::<lambda(char)> [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator]':\n> ../path/json/json.hpp:6081:40:   required from 'struct nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::escape_string(const string_t&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]::<lambda(char)>'\n> ../path/json/json.hpp:6084:25:   required from 'static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::escape_string(const string_t&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]'\n> ../path/json/json.hpp:6162:48:   required from 'void nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::dump(std::ostream&, bool, unsigned int, unsigned int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; std::ostream = std::basic_ostream<char>]'\n> ../path/json/json.hpp:2167:61:   required from 'nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::dump(int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]'\n> ../path/json/json.hpp:9549:25:   required from here\n> ../path/json/json.hpp:6083:72: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]\n>                              return (v < 10) ? ('0' + v) : ('a' + v - 10);\n>                                                                         ^\n> ../path/json/json.hpp:6083:72: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]\n> ../path/json/json.hpp: In instantiation of 'static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::escape_string(const string_t&) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]':\n> ../path/json/json.hpp:6162:48:   required from 'void nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::dump(std::ostream&, bool, unsigned int, unsigned int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; std::ostream = std::basic_ostream<char>]'\n> ../path/json/json.hpp:2167:61:   required from 'nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::dump(int) const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>]'\n> ../path/json/json.hpp:9549:25:   required from here\n> ../path/json/json.hpp:6088:51: warning: conversion to 'char' from 'int' may alter its value [-Wconversion]\n>                      { 'u', '0', '0', hexify(c >> 4), hexify(c & 0x0f)\n>                                                    ^\n> In file included from ..\\path\\StateMachine.cpp:3:0:\n> ../path/json/json.hpp: In instantiation of 'nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::type_data_t::type_data_t(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::value_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator]':\n> ../path/json/json.hpp:1060:5:   required from 'nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::parser::parse() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator]'\n> ../path/json/json.hpp:5837:36:   required from 'static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::parse(const string_t&, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::parser_callback_t) [with ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long long int; NumberUnsignedType = long long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::string_t = std::basic_string<char>; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]'\n> ../path/json/json.hpp:9568:98:   required from here\n> ../path/json/json.hpp:768:23: warning: conversion to 'unsigned char:4' from 'uint16_t {aka short unsigned int}' may alter its value [-Wconversion]\n>              bits.type = static_cast<uint16_t>(t);\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/237", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/237/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/237/events", "html_url": "https://github.com/nlohmann/json/issues/237", "id": 150838245, "node_id": "MDU6SXNzdWUxNTA4MzgyNDU=", "number": 237, "title": "Additional integration options", "user": {"login": "robertmrk", "id": 7045469, "node_id": "MDQ6VXNlcjcwNDU0Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7045469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertmrk", "html_url": "https://github.com/robertmrk", "followers_url": "https://api.github.com/users/robertmrk/followers", "following_url": "https://api.github.com/users/robertmrk/following{/other_user}", "gists_url": "https://api.github.com/users/robertmrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertmrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertmrk/subscriptions", "organizations_url": "https://api.github.com/users/robertmrk/orgs", "repos_url": "https://api.github.com/users/robertmrk/repos", "events_url": "https://api.github.com/users/robertmrk/events{/privacy}", "received_events_url": "https://api.github.com/users/robertmrk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/3", "html_url": "https://github.com/nlohmann/json/milestone/3", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/3/labels", "id": 1510937, "node_id": "MDk6TWlsZXN0b25lMTUxMDkzNw==", "number": 3, "title": "Release 2.0.0", "description": "This release adds several features such as JSON Pointers, JSON Patch, or support for 64 bit unsigned integers. Furthermore, several (subtle) bugs have been fixed.\r\n\r\nAs `noexcept` and `constexpr` specifier have been added to several functions, the public API has effectively been changed in a (potential) non-backwards compatible manner. As we adhere to [Semantic Versioning](http://semver.org), this calls for a new major version, so say hello to 2\ufe0f\u20e3.0\ufe0f\u20e3.0\ufe0f\u20e3.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 34, "state": "closed", "created_at": "2016-01-17T12:14:39Z", "updated_at": "2016-06-23T22:53:19Z", "due_on": "2016-06-23T07:00:00Z", "closed_at": "2016-06-23T22:53:19Z"}, "comments": 3, "created_at": "2016-04-25T12:12:55Z", "updated_at": "2017-02-11T14:21:52Z", "closed_at": "2016-04-26T18:32:07Z", "author_association": "CONTRIBUTOR", "body": "At the moment the only way to integrate the library into a client project is to add the `json.hpp` file to the source tree of the project. In some use cases that might not be the ideal solution.\nFor instance I'm working on a JSON processing library that uses the nlohmann/json library not only internally but in it's API as well. So client applications which would wan't to use the library would either have to use the `json.hpp` file supplied by the JSON processing library, which is awkward, or if they are already using the `json.hpp` file they can create and pass `json` variables to the library which can cause unpredictable problems if the version of the `json.hpp` file used by the client application and the JSON processing library differs.\nFortunately, CMake has a solution to the above problems. \nWith a few lines of CMake code we can create an [interface library](https://cmake.org/cmake/help/v3.0/manual/cmake-buildsystem.7.html#interface-libraries) (a library target that doesn't generates any output, but it can be used to store usage requirements, which in our case would be the include directory of the `json.hpp` file) and export it. This way by including the nlohmann/json library into the client application with `add_subdirectory`, all targets would be able to find and use the library with the `find_package` command.\n\n``` CMake\nfind_package(json)\nadd_executable(json-client ...) #or add_library(json-client ...)\ntarget_link_libraries(json-client json)\n```\n\nWith another few lines of CMake we can add an install target to the nlohmann/json project. Users would be able to install it using `make install` and use it, again, with the `find_package` command without including the `json.hpp` file into the project.\nSo by using `find_package` users can be sure that all the targets that depend on nlohmann/json are using the exact same file, and since we can optionally specify a version number for the `find_package` command too, users can avoid problems that might arise when using different versions.\nIn the end, we wouldn't lose anything. Users can continue to copy the `json.hpp` file into their projects if they feel that this is the right approach for integrating nlohmann/json into their projects. But we would gain some additional integration options.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/236", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/236/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/236/events", "html_url": "https://github.com/nlohmann/json/issues/236", "id": 150689049, "node_id": "MDU6SXNzdWUxNTA2ODkwNDk=", "number": 236, "title": ".get<std::string>() works for non spaced string but returns as array for spaced/longer strings", "user": {"login": "ilikenwf", "id": 414778, "node_id": "MDQ6VXNlcjQxNDc3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/414778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilikenwf", "html_url": "https://github.com/ilikenwf", "followers_url": "https://api.github.com/users/ilikenwf/followers", "following_url": "https://api.github.com/users/ilikenwf/following{/other_user}", "gists_url": "https://api.github.com/users/ilikenwf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilikenwf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilikenwf/subscriptions", "organizations_url": "https://api.github.com/users/ilikenwf/orgs", "repos_url": "https://api.github.com/users/ilikenwf/repos", "events_url": "https://api.github.com/users/ilikenwf/events{/privacy}", "received_events_url": "https://api.github.com/users/ilikenwf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-24T18:33:02Z", "updated_at": "2016-04-24T21:35:05Z", "closed_at": "2016-04-24T18:34:22Z", "author_association": "NONE", "body": "I'm not sure if this is the expected behavior or not, but seeing as how the json below isn't really returning the \"message\" as an array, I'm confused as to why I'm having to use [0] to select it...\n\nAssuming the json below:\n\n```\n    {\n        \"status\": \"failure\",\n        \"message\": \"This is a spaced string.\"\n    }\n```\n\nWorks:\n\n```\n    std::string status = j[\"status\"].get<std::string>();\n    cout << status;\n```\n\nDoesn't work:\n\n```\n   std::string message = j[\"message\"].get<std::string>();\n   cout << message;\n```\n\nWorks: \n\n```\n   std::string message = j[\"message\"][0].get<std::string>();\n   cout << message;\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/235", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/235/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/235/events", "html_url": "https://github.com/nlohmann/json/issues/235", "id": 149439516, "node_id": "MDU6SXNzdWUxNDk0Mzk1MTY=", "number": 235, "title": "ambiguous overload for 'push_back' and 'operator+='", "user": {"login": "alestrooisma", "id": 6317807, "node_id": "MDQ6VXNlcjYzMTc4MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6317807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alestrooisma", "html_url": "https://github.com/alestrooisma", "followers_url": "https://api.github.com/users/alestrooisma/followers", "following_url": "https://api.github.com/users/alestrooisma/following{/other_user}", "gists_url": "https://api.github.com/users/alestrooisma/gists{/gist_id}", "starred_url": "https://api.github.com/users/alestrooisma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alestrooisma/subscriptions", "organizations_url": "https://api.github.com/users/alestrooisma/orgs", "repos_url": "https://api.github.com/users/alestrooisma/repos", "events_url": "https://api.github.com/users/alestrooisma/events{/privacy}", "received_events_url": "https://api.github.com/users/alestrooisma/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/3", "html_url": "https://github.com/nlohmann/json/milestone/3", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/3/labels", "id": 1510937, "node_id": "MDk6TWlsZXN0b25lMTUxMDkzNw==", "number": 3, "title": "Release 2.0.0", "description": "This release adds several features such as JSON Pointers, JSON Patch, or support for 64 bit unsigned integers. Furthermore, several (subtle) bugs have been fixed.\r\n\r\nAs `noexcept` and `constexpr` specifier have been added to several functions, the public API has effectively been changed in a (potential) non-backwards compatible manner. As we adhere to [Semantic Versioning](http://semver.org), this calls for a new major version, so say hello to 2\ufe0f\u20e3.0\ufe0f\u20e3.0\ufe0f\u20e3.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 34, "state": "closed", "created_at": "2016-01-17T12:14:39Z", "updated_at": "2016-06-23T22:53:19Z", "due_on": "2016-06-23T07:00:00Z", "closed_at": "2016-06-23T22:53:19Z"}, "comments": 5, "created_at": "2016-04-19T12:05:08Z", "updated_at": "2016-05-09T10:01:28Z", "closed_at": "2016-05-08T18:45:53Z", "author_association": "NONE", "body": "When compiling this very simple program with g++ 4.9.2, I get \"ambiguous overload\" errors about both the `push_back` and the `operator+=` calls.\n\n``` cpp\n#include <iostream>\n#include \"json.hpp\"\n\nusing json = nlohmann::json;\n\nint main(int argc, char** argv) {\n    json data = {{\"key\", \"value\"}};\n    data.push_back({\"key2\", \"value2\"});\n    data += {\"key3\", \"value3\"};\n    return 0;\n}\n```\n\nSee [here](http://pastebin.com/5MwBXULU) for the compiler output (it's rather large)\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/233", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/233/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/233/events", "html_url": "https://github.com/nlohmann/json/issues/233", "id": 148033909, "node_id": "MDU6SXNzdWUxNDgwMzM5MDk=", "number": 233, "title": "Can't use basic_json::iterator as a base iterator for std::move_iterator", "user": {"login": "robertmrk", "id": 7045469, "node_id": "MDQ6VXNlcjcwNDU0Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7045469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertmrk", "html_url": "https://github.com/robertmrk", "followers_url": "https://api.github.com/users/robertmrk/followers", "following_url": "https://api.github.com/users/robertmrk/following{/other_user}", "gists_url": "https://api.github.com/users/robertmrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertmrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertmrk/subscriptions", "organizations_url": "https://api.github.com/users/robertmrk/orgs", "repos_url": "https://api.github.com/users/robertmrk/repos", "events_url": "https://api.github.com/users/robertmrk/events{/privacy}", "received_events_url": "https://api.github.com/users/robertmrk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/3", "html_url": "https://github.com/nlohmann/json/milestone/3", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/3/labels", "id": 1510937, "node_id": "MDk6TWlsZXN0b25lMTUxMDkzNw==", "number": 3, "title": "Release 2.0.0", "description": "This release adds several features such as JSON Pointers, JSON Patch, or support for 64 bit unsigned integers. Furthermore, several (subtle) bugs have been fixed.\r\n\r\nAs `noexcept` and `constexpr` specifier have been added to several functions, the public API has effectively been changed in a (potential) non-backwards compatible manner. As we adhere to [Semantic Versioning](http://semver.org), this calls for a new major version, so say hello to 2\ufe0f\u20e3.0\ufe0f\u20e3.0\ufe0f\u20e3.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 34, "state": "closed", "created_at": "2016-01-17T12:14:39Z", "updated_at": "2016-06-23T22:53:19Z", "due_on": "2016-06-23T07:00:00Z", "closed_at": "2016-06-23T22:53:19Z"}, "comments": 2, "created_at": "2016-04-13T11:45:30Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2016-04-16T10:13:39Z", "author_association": "CONTRIBUTOR", "body": "While it's possible to move a range of container elements instead of copying them by using the [std::move](http://en.cppreference.com/w/cpp/algorithm/move) algorithm instead of [std::copy](http://en.cppreference.com/w/cpp/algorithm/copy), some copying algorithms like [std::copy_if](http://en.cppreference.com/w/cpp/algorithm/copy) and [std::copy_n](http://en.cppreference.com/w/cpp/algorithm/copy_n) doesn't have a move counterpart. The only way to use move semantics with these algorithms is to wrap the input iterators into [std::move_iterator](http://en.cppreference.com/w/cpp/iterator/move_iterator) objects.\n\n``` c++\njson source = {\"a\", \"b\", \"c\"};  \njson dest;\nstd::copy_n(std::make_move_iterator(source.begin()), 2, std::back_inserter(dest));\n```\n\nUnfortunately, creating a move_iterator from a basic_json::iterator is not possible, because the indirection operator of move_iterator is a const member function and it can't call the non-const indirection operator of basic_json::iterator.\nCompiling the code above with AppleClang 7.0.0 (which is based on clang 3.7 I think), will produce the following error:\n\n``` c++\n../include/c++/v1/iterator:959:37: error: indirection requires pointer operand ('const nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator>::iterator' invalid)\n      return static_cast<reference>(*__i);\n                                    ^~~~\n```\n\nThe issue can be fixed by making the indirection operator of basic_json::iterator const, and while we're at it, we can safely make the dereference operator const too, since the non-const iterators in STL have a const indirection and dereference operator too.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/231", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/231/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/231/events", "html_url": "https://github.com/nlohmann/json/issues/231", "id": 146602335, "node_id": "MDU6SXNzdWUxNDY2MDIzMzU=", "number": 231, "title": "json object's creation can freezes execution", "user": {"login": "cfoursan", "id": 2263965, "node_id": "MDQ6VXNlcjIyNjM5NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2263965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfoursan", "html_url": "https://github.com/cfoursan", "followers_url": "https://api.github.com/users/cfoursan/followers", "following_url": "https://api.github.com/users/cfoursan/following{/other_user}", "gists_url": "https://api.github.com/users/cfoursan/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfoursan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfoursan/subscriptions", "organizations_url": "https://api.github.com/users/cfoursan/orgs", "repos_url": "https://api.github.com/users/cfoursan/repos", "events_url": "https://api.github.com/users/cfoursan/events{/privacy}", "received_events_url": "https://api.github.com/users/cfoursan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-04-07T12:23:47Z", "updated_at": "2016-06-19T16:20:22Z", "closed_at": "2016-05-28T10:15:55Z", "author_association": "NONE", "body": "When I try create json object and if no memory to allocate there is execution freeze instead of std::bad_alloc.\n\nGdb trace:\nThread 541 (Thread 0x7fc74f64a700 (LWP 133066)):\n#0  0x000000000043cf71 in _ZSt3getILm0EIPSt6vectorIN8nlohmann10basic_jsonISt3mapS0_SsblmdSaEESaIS4_EEZNS4_6createIS6_ISt16initializer_listIS4_EEEEPT_DpOT0_EUlS7_E_EENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKSM_ (__t=empty std::tuple) at /usr/include/c++/4.8/tuple:766\n#1  0x000000000043cf9c in _ZNKSt10unique_ptrISt6vectorIN8nlohmann10basic_jsonISt3mapS0_SsblmdSaEESaIS4_EEZNS4_6createIS6_ISt16initializer_listIS4_EEEEPT_DpOT0_EUlPS6_E_E3getEv (this=0x7fc74f648ba0) at /usr/include/c++/4.8/bits/unique_ptr.h:234\n#2  0x000000000043a1d1 in nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator>::create<std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator> > >, std::initializer_list<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator> > >(std::initializer_list<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator> >&&) () at ../src/json.hpp:689\n#3  0x0000000000437af4 in nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator>::basic_json (this=0x7fc74f648f30, init=..., type_deduction=true, manual_type=nlohmann::basic_json<std::map, std::vector, std::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator>::array) at ../src/json.hpp:1571\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/230", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/230/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/230/events", "html_url": "https://github.com/nlohmann/json/issues/230", "id": 146089505, "node_id": "MDU6SXNzdWUxNDYwODk1MDU=", "number": 230, "title": "Incorrect dumping of parsed numbers with exponents, but without decimal places", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/3", "html_url": "https://github.com/nlohmann/json/milestone/3", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/3/labels", "id": 1510937, "node_id": "MDk6TWlsZXN0b25lMTUxMDkzNw==", "number": 3, "title": "Release 2.0.0", "description": "This release adds several features such as JSON Pointers, JSON Patch, or support for 64 bit unsigned integers. Furthermore, several (subtle) bugs have been fixed.\r\n\r\nAs `noexcept` and `constexpr` specifier have been added to several functions, the public API has effectively been changed in a (potential) non-backwards compatible manner. As we adhere to [Semantic Versioning](http://semver.org), this calls for a new major version, so say hello to 2\ufe0f\u20e3.0\ufe0f\u20e3.0\ufe0f\u20e3.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 34, "state": "closed", "created_at": "2016-01-17T12:14:39Z", "updated_at": "2016-06-23T22:53:19Z", "due_on": "2016-06-23T07:00:00Z", "closed_at": "2016-06-23T22:53:19Z"}, "comments": 20, "created_at": "2016-04-05T19:38:58Z", "updated_at": "2016-06-23T16:12:35Z", "closed_at": "2016-06-23T16:12:27Z", "author_association": "OWNER", "body": "The new floating point representation (#201) has a bug when it comes to negative exponents. Number `2342e-2` is correctly duped as `23.42`, but when it is parsed from a string, the output is `2e01`.\n\nExample code:\n\n``` cpp\njson j2a = 2342e-2;\njson j2b = json::parse(\"2342e-2\");\n\nCHECK(j2a.dump() == \"23.42\");\nCHECK(j2b.dump() == \"2342e-2\");\n```\n\nOutput:\n\n```\nFAILED:\n  CHECK( j2b.dump() == \"2342e-2\" )\nwith expansion:\n  \"2e01\" == \"2342e-2\"\n```\n\n@twelsby Any idea about this?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/229", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/229/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/229/events", "html_url": "https://github.com/nlohmann/json/issues/229", "id": 145677205, "node_id": "MDU6SXNzdWUxNDU2NzcyMDU=", "number": 229, "title": "Please add a Pretty-Print option for arrays to stay always in one line", "user": {"login": "mireiner", "id": 18225068, "node_id": "MDQ6VXNlcjE4MjI1MDY4", "avatar_url": "https://avatars1.githubusercontent.com/u/18225068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mireiner", "html_url": "https://github.com/mireiner", "followers_url": "https://api.github.com/users/mireiner/followers", "following_url": "https://api.github.com/users/mireiner/following{/other_user}", "gists_url": "https://api.github.com/users/mireiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/mireiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mireiner/subscriptions", "organizations_url": "https://api.github.com/users/mireiner/orgs", "repos_url": "https://api.github.com/users/mireiner/repos", "events_url": "https://api.github.com/users/mireiner/events{/privacy}", "received_events_url": "https://api.github.com/users/mireiner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2016-04-04T12:58:59Z", "updated_at": "2018-06-03T20:18:48Z", "closed_at": "2016-11-02T16:18:44Z", "author_association": "NONE", "body": "Please add a Pretty-Printing option for arrays to stay always in one line (don't add lines) if dump() parameter > -1 or std::setw()) is set. So that only other JSON types than arrays are expanded.\n\nExample:\n\n``` cpp\njson j;\nj[\"person\"][\"name\"] = \"Glory Rainbow\";\nj[\"person\"][\"age\"] = 61;\nj[\"person\"][\"mind\"] = \"Easy going\";\nj[\"color\"][\"month\"] = { 1, 3, 5, 7, 8, 10, 12};\nj[\"color\"][\"order\"] = {\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"};\nstd::cout << j.dump(4);\n```\n\nWanted output:\n\n``` json\n{\n    \"color\": {\n        \"month\":  [1, 3, 5, 7, 8, 10, 12],\n        \"order\": [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\n    } ,\n    \"person\": {\n        \"age\": 61,\n        \"name\": \"Glory Rainbow\",\n        \"mind\": \"Easy going\"\n    }\n} \n```\n\nThank you!\n"}]