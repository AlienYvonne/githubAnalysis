[{"url": "https://api.github.com/repos/nlohmann/json/issues/810", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/810/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/810/events", "html_url": "https://github.com/nlohmann/json/issues/810", "id": 269988596, "node_id": "MDU6SXNzdWUyNjk5ODg1OTY=", "number": 810, "title": "segfault when using fifo_map with json", "user": {"login": "jllansford", "id": 33156649, "node_id": "MDQ6VXNlcjMzMTU2NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/33156649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jllansford", "html_url": "https://github.com/jllansford", "followers_url": "https://api.github.com/users/jllansford/followers", "following_url": "https://api.github.com/users/jllansford/following{/other_user}", "gists_url": "https://api.github.com/users/jllansford/gists{/gist_id}", "starred_url": "https://api.github.com/users/jllansford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jllansford/subscriptions", "organizations_url": "https://api.github.com/users/jllansford/orgs", "repos_url": "https://api.github.com/users/jllansford/repos", "events_url": "https://api.github.com/users/jllansford/events{/privacy}", "received_events_url": "https://api.github.com/users/jllansford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-31T14:52:00Z", "updated_at": "2017-11-03T12:04:36Z", "closed_at": "2017-11-02T20:37:48Z", "author_association": "NONE", "body": "This bug was discovered by a coworker, I cleaned up the test program a bit and am posting it here.\r\n\r\nI wasn't sure if I should post this under the fifo_map project or here, ultimately because the fifo_map integration workaround posted on the documentation was used I decided to post here.  If you'd rather I post it under fifo_map instead I can.\r\n\r\nPlease note that without the fifo_map this code does not segfault and works fine.\r\n\r\n```cpp\r\n#include <iostream>\r\n#include \"fifo_map.hpp\"\r\n#include \"json.hpp\"\r\n\r\n// A workaround to give to use fifo_map as map, we are just ignoring the 'less' compare\r\ntemplate<class K, class V, class dummy_compare, class A>\r\nusing my_workaround_fifo_map = nlohmann::fifo_map<K, V, nlohmann::fifo_map_compare<K>, A>;\r\nusing my_json = nlohmann::basic_json<my_workaround_fifo_map>;\r\n\r\nint main(int argc, char* argv[]) {\r\n\tusing namespace std;\r\n\r\n\tmy_json a {\r\n\t\t{\"obj\", {\r\n\t\t\t{\"one\", 1},\r\n\t\t\t{\"two\", 2}\r\n\t\t}}\t\r\n\t};  \r\n\r\n\tcout << a << endl;\r\n\r\n\t//won't segfault until 2nd time through the loop\r\n\tfor(int i = 0; i < 3; i++) {\r\n\t\tmy_json d = a;\r\n       \t\tmy_json c = d[\"obj\"];\r\n       \t\ta = d;\r\n\t\tcout << i << \" - \" << a << endl;\r\n        }\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nHere is the stack trace I'm getting from gdb:\r\n\r\n```\r\n#0  0x000000000040f21e in std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const ()\r\n#1  0x000000000040dfc2 in std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const ()\r\n#2  0x000000000040c876 in std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Defau---Type <return> to continue, or q <return> to quit---\r\nlt_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > > const&, std::integral_constant<bool, true>) ()\r\n#3  0x000000000040af06 in std::__detail::_Insert_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&) ()\r\n#4  0x0000000000408ff5 in std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&) ()\r\n#5  0x0000000000406ca8 in nlohmann::fifo_map_compare<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::add_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\r\n#6  0x0000000000406355 in nlohmann::fifo_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::fifo_map_compare<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) ()\r\n#7  0x000000000040440a in nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>& nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::operator[]<char const>(char const*) ()\r\n#8  0x0000000000402baf in main ()\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/809", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/809/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/809/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/809/events", "html_url": "https://github.com/nlohmann/json/issues/809", "id": 269382149, "node_id": "MDU6SXNzdWUyNjkzODIxNDk=", "number": 809, "title": "This shit is shit ", "user": {"login": "reijpower", "id": 19877049, "node_id": "MDQ6VXNlcjE5ODc3MDQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/19877049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reijpower", "html_url": "https://github.com/reijpower", "followers_url": "https://api.github.com/users/reijpower/followers", "following_url": "https://api.github.com/users/reijpower/following{/other_user}", "gists_url": "https://api.github.com/users/reijpower/gists{/gist_id}", "starred_url": "https://api.github.com/users/reijpower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reijpower/subscriptions", "organizations_url": "https://api.github.com/users/reijpower/orgs", "repos_url": "https://api.github.com/users/reijpower/repos", "events_url": "https://api.github.com/users/reijpower/events{/privacy}", "received_events_url": "https://api.github.com/users/reijpower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-29T08:53:11Z", "updated_at": "2017-10-29T19:46:19Z", "closed_at": "2017-10-29T08:53:40Z", "author_association": "NONE", "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/808", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/808/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/808/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/808/events", "html_url": "https://github.com/nlohmann/json/issues/808", "id": 269332832, "node_id": "MDU6SXNzdWUyNjkzMzI4MzI=", "number": 808, "title": "_finite and _isnan are no members of \"std\"", "user": {"login": "SimonNitzsche", "id": 6717311, "node_id": "MDQ6VXNlcjY3MTczMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6717311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonNitzsche", "html_url": "https://github.com/SimonNitzsche", "followers_url": "https://api.github.com/users/SimonNitzsche/followers", "following_url": "https://api.github.com/users/SimonNitzsche/following{/other_user}", "gists_url": "https://api.github.com/users/SimonNitzsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonNitzsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonNitzsche/subscriptions", "organizations_url": "https://api.github.com/users/SimonNitzsche/orgs", "repos_url": "https://api.github.com/users/SimonNitzsche/repos", "events_url": "https://api.github.com/users/SimonNitzsche/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonNitzsche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-10-28T17:00:12Z", "updated_at": "2017-10-31T14:27:40Z", "closed_at": "2017-10-31T14:27:40Z", "author_association": "NONE", "body": "![image](https://user-images.githubusercontent.com/6717311/32136669-0df2b9b6-bc12-11e7-8f34-06cd875aa217.png)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/806", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/806/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/806/events", "html_url": "https://github.com/nlohmann/json/issues/806", "id": 269274048, "node_id": "MDU6SXNzdWUyNjkyNzQwNDg=", "number": 806, "title": "how to print out the line which causing exception?", "user": {"login": "todatamining", "id": 4322386, "node_id": "MDQ6VXNlcjQzMjIzODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4322386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/todatamining", "html_url": "https://github.com/todatamining", "followers_url": "https://api.github.com/users/todatamining/followers", "following_url": "https://api.github.com/users/todatamining/following{/other_user}", "gists_url": "https://api.github.com/users/todatamining/gists{/gist_id}", "starred_url": "https://api.github.com/users/todatamining/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/todatamining/subscriptions", "organizations_url": "https://api.github.com/users/todatamining/orgs", "repos_url": "https://api.github.com/users/todatamining/repos", "events_url": "https://api.github.com/users/todatamining/events{/privacy}", "received_events_url": "https://api.github.com/users/todatamining/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-28T01:35:14Z", "updated_at": "2017-10-28T11:17:31Z", "closed_at": "2017-10-28T11:17:31Z", "author_association": "NONE", "body": "Something wrong with my json, but it just print out:\r\n\r\n[json.exception.type_error.302] type must be array, but is null\r\n\r\nFrom the error, it is hard to tell which line is wrong in the json file or my code, is there a way to print out the line causing exception?\r\n\r\n\r\n\r\n\r\nupdate:\r\nI check the json, the error is causing by the following line:\r\n\r\n{\r\n       \"email\": [....]\r\n}\r\n\r\nin the code, there is a typo\r\n\r\nvector<string> emails =  info[\"emails\"]; //should be \"email\"\r\n\r\nis it possible to print out the line#?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/805", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/805/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/805/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/805/events", "html_url": "https://github.com/nlohmann/json/issues/805", "id": 269125804, "node_id": "MDU6SXNzdWUyNjkxMjU4MDQ=", "number": 805, "title": "{} uses copy constructor, while = does not", "user": {"login": "jllansford", "id": 33156649, "node_id": "MDQ6VXNlcjMzMTU2NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/33156649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jllansford", "html_url": "https://github.com/jllansford", "followers_url": "https://api.github.com/users/jllansford/followers", "following_url": "https://api.github.com/users/jllansford/following{/other_user}", "gists_url": "https://api.github.com/users/jllansford/gists{/gist_id}", "starred_url": "https://api.github.com/users/jllansford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jllansford/subscriptions", "organizations_url": "https://api.github.com/users/jllansford/orgs", "repos_url": "https://api.github.com/users/jllansford/repos", "events_url": "https://api.github.com/users/jllansford/events{/privacy}", "received_events_url": "https://api.github.com/users/jllansford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-27T14:26:36Z", "updated_at": "2017-10-31T13:45:10Z", "closed_at": "2017-10-28T13:33:23Z", "author_association": "NONE", "body": "Just a little annoyance I encountered while writing to_json functions for a large number of in house classes.  Ideally I'd like it if the {} operator behaved the same as the = operator.\r\n\r\nGiven the following code:\r\n```cpp\r\nusing json = nlohmann::json;\r\n\r\nclass A {\r\nprivate:\r\n\tstd::string          _val;\r\n\r\n\t// by including the mutex we've implicitly deleted our copy constructor \r\n\tstd::recursive_mutex _mutex;\r\n\r\npublic:\r\n\tA() : _val(\"Hello World\") {};\r\n\r\n\tfriend void to_json(json &j, const A &a) {\r\n\t\tj = {\r\n\t\t\t{\"val\", a._val}\r\n\t\t};\r\n\t}\r\n};\r\n\r\n\r\n\r\nint main(int argc, char* argv[]) {\r\n\r\n\tjson j = {};\r\n\tA a;\r\n\r\n        // This line compiles and runs completely fine.\r\n        j[\"data\"][\"A\"] =  a;\r\n\r\n        //this line will fail to compile, due to the implicitly deleted A::A(const A&)\r\n\tj[\"data\"] = {{\"A\", a}};\r\n\t\r\n        std::cout << j.dump() << std::endl;\r\n\treturn 0;\r\n}\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/804", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/804/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/804/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/804/events", "html_url": "https://github.com/nlohmann/json/issues/804", "id": 269065821, "node_id": "MDU6SXNzdWUyNjkwNjU4MjE=", "number": 804, "title": "json.hpp:8955: multiple definition of function that is not defined twice or more.", "user": {"login": "NeverMine17", "id": 23419131, "node_id": "MDQ6VXNlcjIzNDE5MTMx", "avatar_url": "https://avatars2.githubusercontent.com/u/23419131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeverMine17", "html_url": "https://github.com/NeverMine17", "followers_url": "https://api.github.com/users/NeverMine17/followers", "following_url": "https://api.github.com/users/NeverMine17/following{/other_user}", "gists_url": "https://api.github.com/users/NeverMine17/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeverMine17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeverMine17/subscriptions", "organizations_url": "https://api.github.com/users/NeverMine17/orgs", "repos_url": "https://api.github.com/users/NeverMine17/repos", "events_url": "https://api.github.com/users/NeverMine17/events{/privacy}", "received_events_url": "https://api.github.com/users/NeverMine17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-10-27T10:49:49Z", "updated_at": "2017-10-27T12:08:26Z", "closed_at": "2017-10-27T12:08:26Z", "author_association": "NONE", "body": "## Json version 2.1.1\r\nAny code in this form:\r\n```cpp\r\n// This file called \"lib.hpp\"\r\nusing json = nlohmann::json;\r\n\r\nnamespace someNS {\r\n    someType someFunction(json file) {\r\n        // ...\r\n    }\r\n}\r\n```\r\n...Returns this error:\r\n```\r\nlib.hpp.o: In function `std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)':\r\njson.hpp:8955: multiple definition of `someNS::someFunction(nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>)'\r\nmain.cpp.o:lib.hpp:7: first defined here\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/803", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/803/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/803/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/803/events", "html_url": "https://github.com/nlohmann/json/issues/803", "id": 269060713, "node_id": "MDU6SXNzdWUyNjkwNjA3MTM=", "number": 803, "title": "[question] to_json for base and derived class", "user": {"login": "bluehazzard", "id": 5720389, "node_id": "MDQ6VXNlcjU3MjAzODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5720389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluehazzard", "html_url": "https://github.com/bluehazzard", "followers_url": "https://api.github.com/users/bluehazzard/followers", "following_url": "https://api.github.com/users/bluehazzard/following{/other_user}", "gists_url": "https://api.github.com/users/bluehazzard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluehazzard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluehazzard/subscriptions", "organizations_url": "https://api.github.com/users/bluehazzard/orgs", "repos_url": "https://api.github.com/users/bluehazzard/repos", "events_url": "https://api.github.com/users/bluehazzard/events{/privacy}", "received_events_url": "https://api.github.com/users/bluehazzard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-27T10:29:24Z", "updated_at": "2017-10-27T13:00:21Z", "closed_at": "2017-10-27T12:59:36Z", "author_association": "NONE", "body": "Hi,\r\nthis is not a bug report but a question. I have a base class and a derived class, both with some members. Now i would like to store them in a json object:\r\n```c++\r\nclass A\r\n{\r\n   private:\r\n    std::string m_base;\r\n}\r\n\r\nclass B : public A\r\n{\r\n   private:\r\n     std::string m_derived;\r\n}\r\n\r\nvoid to_json(nlohmann::json& j,const A el)\r\n{\r\n   j = nlohmann::json{\r\n      {\"base\", el.m_base},\r\n   }\r\n}\r\n\r\nvoid to_json(nlohmann::json& j,const B el)\r\n{\r\n   j = nlohmann::json{\r\n     static_cast<A>(el),   // insert the \"base\" element\r\n     {\"derived\", el.m_derived}\r\n   }\r\n}\r\n```\r\ni would like to have a resulting json element like this\r\n```json\r\n{\r\n  \"base\" : \"content base\",\r\n  \"derived\" : \"content derived\"\r\n}\r\n```\r\n\r\nwith the provided code this does not work... Any idea?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/802", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/802/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/802/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/802/events", "html_url": "https://github.com/nlohmann/json/issues/802", "id": 269029886, "node_id": "MDU6SXNzdWUyNjkwMjk4ODY=", "number": 802, "title": "Misleading error message - unexpected '\"' - on incorrect utf-8 symbol", "user": {"login": "stgrzeszczak", "id": 12528958, "node_id": "MDQ6VXNlcjEyNTI4OTU4", "avatar_url": "https://avatars0.githubusercontent.com/u/12528958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stgrzeszczak", "html_url": "https://github.com/stgrzeszczak", "followers_url": "https://api.github.com/users/stgrzeszczak/followers", "following_url": "https://api.github.com/users/stgrzeszczak/following{/other_user}", "gists_url": "https://api.github.com/users/stgrzeszczak/gists{/gist_id}", "starred_url": "https://api.github.com/users/stgrzeszczak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stgrzeszczak/subscriptions", "organizations_url": "https://api.github.com/users/stgrzeszczak/orgs", "repos_url": "https://api.github.com/users/stgrzeszczak/repos", "events_url": "https://api.github.com/users/stgrzeszczak/events{/privacy}", "received_events_url": "https://api.github.com/users/stgrzeszczak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-27T08:41:52Z", "updated_at": "2017-10-27T13:18:19Z", "closed_at": "2017-10-27T13:17:27Z", "author_association": "NONE", "body": "Hi,\r\nI was recently confounded by this error and spent quite a while looking for unmached quotation marks, only to find out that my JSON had incorrect utf-8 data. Please take a look at the code sample below. I have a wrapper file for your library that looks like this:\r\n\r\n```cpp\r\nnamespace json {\r\nusing uint_t = std::uint64_t;\r\nusing int_t = std::int64_t;\r\nusing string_t = std::string;\r\ntemplate <typename T, typename... Args> using array_t = std::vector<T>;\r\ntemplate <typename K, typename T, typename... Args> using object_t = std::map<K, T>;\r\nusing bool_t = bool;\r\nusing float_t = double;\r\n\r\nusing Json = nlohmann::basic_json<object_t, array_t, string_t, bool_t, int_t, uint_t, float_t>;\r\n}\r\n```\r\n\r\nand here's an example program showing the issue:\r\n\r\n```cpp\r\n#include \"json-wrapper/json-wrapper.hpp\"\r\n\r\nint main(void) {\r\n    std::string data{};\r\n    data += char(0xff);   // 'data' string is not UTF-8 compliant\r\n\r\n    json::Json message{};\r\n    message[\"data\"] = data;\r\n\r\n    std::string raw_message = message.dump();\r\n\r\n    try {\r\n        json::Json parsed = json::Json::parse(raw_message);\r\n    }\r\n    catch (const std::exception& e) {\r\n        std::cout << e.what() << '\\n';\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThe output is `parse error - unexpected '\"'`. It should say that there was a problem parsing unicode characters."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/801", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/801/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/801/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/801/events", "html_url": "https://github.com/nlohmann/json/issues/801", "id": 268984768, "node_id": "MDU6SXNzdWUyNjg5ODQ3Njg=", "number": 801, "title": "json data = std::string_view(\"hi\"); doesn't work?", "user": {"login": "lethe555", "id": 8001254, "node_id": "MDQ6VXNlcjgwMDEyNTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8001254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lethe555", "html_url": "https://github.com/lethe555", "followers_url": "https://api.github.com/users/lethe555/followers", "following_url": "https://api.github.com/users/lethe555/following{/other_user}", "gists_url": "https://api.github.com/users/lethe555/gists{/gist_id}", "starred_url": "https://api.github.com/users/lethe555/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lethe555/subscriptions", "organizations_url": "https://api.github.com/users/lethe555/orgs", "repos_url": "https://api.github.com/users/lethe555/repos", "events_url": "https://api.github.com/users/lethe555/events{/privacy}", "received_events_url": "https://api.github.com/users/lethe555/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-27T04:26:46Z", "updated_at": "2018-06-23T15:11:25Z", "closed_at": "2017-10-31T13:30:00Z", "author_association": "NONE", "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/800", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/800/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/800/events", "html_url": "https://github.com/nlohmann/json/issues/800", "id": 268817503, "node_id": "MDU6SXNzdWUyNjg4MTc1MDM=", "number": 800, "title": "Thread safety of parse()", "user": {"login": "tanaynv", "id": 33129354, "node_id": "MDQ6VXNlcjMzMTI5MzU0", "avatar_url": "https://avatars0.githubusercontent.com/u/33129354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanaynv", "html_url": "https://github.com/tanaynv", "followers_url": "https://api.github.com/users/tanaynv/followers", "following_url": "https://api.github.com/users/tanaynv/following{/other_user}", "gists_url": "https://api.github.com/users/tanaynv/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanaynv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanaynv/subscriptions", "organizations_url": "https://api.github.com/users/tanaynv/orgs", "repos_url": "https://api.github.com/users/tanaynv/repos", "events_url": "https://api.github.com/users/tanaynv/events{/privacy}", "received_events_url": "https://api.github.com/users/tanaynv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-26T15:57:41Z", "updated_at": "2017-10-31T16:10:14Z", "closed_at": "2017-10-31T16:10:14Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI plan to use this library to parse JSON files in a multithreaded environment. Specifically I am concerned about thread safety with respect to the behaviour of parse() when called simultaneously from different threads. I would appreciate any help or input on this matter. \r\n\r\nThanks, \r\nTanay"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/799", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/799/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/799/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/799/events", "html_url": "https://github.com/nlohmann/json/issues/799", "id": 268321574, "node_id": "MDU6SXNzdWUyNjgzMjE1NzQ=", "number": 799, "title": "Numbers as strings", "user": {"login": "tomba", "id": 51776, "node_id": "MDQ6VXNlcjUxNzc2", "avatar_url": "https://avatars1.githubusercontent.com/u/51776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomba", "html_url": "https://github.com/tomba", "followers_url": "https://api.github.com/users/tomba/followers", "following_url": "https://api.github.com/users/tomba/following{/other_user}", "gists_url": "https://api.github.com/users/tomba/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomba/subscriptions", "organizations_url": "https://api.github.com/users/tomba/orgs", "repos_url": "https://api.github.com/users/tomba/repos", "events_url": "https://api.github.com/users/tomba/events{/privacy}", "received_events_url": "https://api.github.com/users/tomba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-25T09:10:49Z", "updated_at": "2017-10-28T13:34:41Z", "closed_at": "2017-10-28T13:34:41Z", "author_association": "NONE", "body": "Hi,\r\n\r\nIs there a way to get the json data in its original string format? The problem is that the following code:\r\n\r\n```\r\n\tauto j = json::parse(\"[ 0.1 ]\");\r\n\r\n\tauto& v = j.at(0);\r\n\r\n\tstringstream ss;\r\n\tss << fixed << setprecision(50) << v.get<double>();\r\n\tstring str = ss.str();\r\n```\r\nproduces:\r\n\r\n`\"0.10000000000000000555111512312578270211815834045410\"`\r\n\r\nBeing able to get the original string data would fix the floating point problems and also allow handling of integer numbers larger than 64 bit.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/797", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/797/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/797/events", "html_url": "https://github.com/nlohmann/json/issues/797", "id": 267900948, "node_id": "MDU6SXNzdWUyNjc5MDA5NDg=", "number": 797, "title": "Tests failing on arm", "user": {"login": "abliss", "id": 215283, "node_id": "MDQ6VXNlcjIxNTI4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/215283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abliss", "html_url": "https://github.com/abliss", "followers_url": "https://api.github.com/users/abliss/followers", "following_url": "https://api.github.com/users/abliss/following{/other_user}", "gists_url": "https://api.github.com/users/abliss/gists{/gist_id}", "starred_url": "https://api.github.com/users/abliss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abliss/subscriptions", "organizations_url": "https://api.github.com/users/abliss/orgs", "repos_url": "https://api.github.com/users/abliss/repos", "events_url": "https://api.github.com/users/abliss/events{/privacy}", "received_events_url": "https://api.github.com/users/abliss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 729086061, "node_id": "MDU6TGFiZWw3MjkwODYwNjE=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20arm", "name": "platform: arm", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-24T05:19:50Z", "updated_at": "2017-10-26T14:06:48Z", "closed_at": "2017-10-25T21:32:07Z", "author_association": "NONE", "body": "Hi, I see many tests currently failing after building on armv7hf with gcc5.4 on the \"devel\" branch. Is that expected?\r\n```\r\nTest  #7: test-cbor_default ...................***Failed   16.56 sec                                                                                            \r\nTest  #8: test-cbor_all .......................***Failed  146.45 sec                                                                                            \r\nTest #15: test-class_parser_default ...........***Failed    0.78 sec                                                                                            \r\nTest #16: test-class_parser_all ...............***Failed    0.76 sec                                                                                            \r\nTest #21: test-constructor1_default ...........***Failed    0.13 sec                                                                                            \r\nTest #22: test-constructor1_all ...............***Failed    0.11 sec                                                                                            \r\nTest #61: test-regression_default .............***Failed   20.09 sec                                                                                            \r\nTest #62: test-regression_all .................***Failed   28.13 sec                                                                                            \r\nTest #65: test-testsuites_default .............***Failed    4.16 sec                                                                                            \r\nTest #66: test-testsuites_all .................***Failed    0.28 sec\r\n```\r\n\r\ne.g.:\r\n```\r\ntest-algorithms            test-concepts              test-iterators1            test-pointer_access\r\nabliss@localhost:~/json-develop/test$ ./test-cbor\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntest-cbor is a Catch v1.9.7 host application.\r\nRun with -? for options\r\n\r\n-------------------------------------------------------------------------------\r\nCBOR\r\n  individual values\r\n  number\r\n  half-precision float (edge cases)\r\n  exp = 0b11111\r\n  infinity (0 11111 0000000000)\r\n-------------------------------------------------------------------------------\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:780\r\n...............................................................................\r\n\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:785: FAILED:\r\n  CHECK( j.dump() == \"null\" )\r\nwith expansion:\r\n  \"inf.0\" == \"null\"\r\n\r\n-------------------------------------------------------------------------------\r\nCBOR\r\n  individual values\r\n  number\r\n  half-precision float (edge cases)\r\n  exp = 0b11111\r\n  -infinity (1 11111 0000000000)\r\n-------------------------------------------------------------------------------\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:788\r\n...............................................................................\r\n\r\n/home/abliss/json-develop/test/src/unit-cbor.cpp:793: FAILED:\r\n  CHECK( j.dump() == \"null\" )\r\nwith expansion:\r\n  \"-inf.0\" == \"null\"\r\n\r\n-------------------------------------------------------------------------------\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/796", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/796/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/796/events", "html_url": "https://github.com/nlohmann/json/issues/796", "id": 267495956, "node_id": "MDU6SXNzdWUyNjc0OTU5NTY=", "number": 796, "title": "Using your library (without modification) in another library", "user": {"login": "chetmurthy", "id": 1755771, "node_id": "MDQ6VXNlcjE3NTU3NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1755771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetmurthy", "html_url": "https://github.com/chetmurthy", "followers_url": "https://api.github.com/users/chetmurthy/followers", "following_url": "https://api.github.com/users/chetmurthy/following{/other_user}", "gists_url": "https://api.github.com/users/chetmurthy/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetmurthy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetmurthy/subscriptions", "organizations_url": "https://api.github.com/users/chetmurthy/orgs", "repos_url": "https://api.github.com/users/chetmurthy/repos", "events_url": "https://api.github.com/users/chetmurthy/events{/privacy}", "received_events_url": "https://api.github.com/users/chetmurthy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-22T20:26:09Z", "updated_at": "2017-10-23T15:29:35Z", "closed_at": "2017-10-23T15:29:34Z", "author_association": "NONE", "body": "Hi,\r\n\r\nFirst, this is wonderful.  Thank you so much!\r\n\r\nSecond, I'd like to use your library in some code I'm writing to provide a JSON wire-format for Apache Thrift.  I'll be distributing this code on github in source, under the Apache license, and would -like- to be able to include a copy of your json.hpp (with your license) in my source-tree.  Only b/c it'll be convenient that people who clone this repo won't have to go clone other repos also.  Of course, I'd make sure to credit you and point at your git repo.\r\n\r\nIs this something you'd find agreeable?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/794", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/794/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/794/events", "html_url": "https://github.com/nlohmann/json/issues/794", "id": 267412377, "node_id": "MDU6SXNzdWUyNjc0MTIzNzc=", "number": 794, "title": "Iterating over sub-object", "user": {"login": "fwsGonzo", "id": 3758947, "node_id": "MDQ6VXNlcjM3NTg5NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3758947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fwsGonzo", "html_url": "https://github.com/fwsGonzo", "followers_url": "https://api.github.com/users/fwsGonzo/followers", "following_url": "https://api.github.com/users/fwsGonzo/following{/other_user}", "gists_url": "https://api.github.com/users/fwsGonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fwsGonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fwsGonzo/subscriptions", "organizations_url": "https://api.github.com/users/fwsGonzo/orgs", "repos_url": "https://api.github.com/users/fwsGonzo/repos", "events_url": "https://api.github.com/users/fwsGonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fwsGonzo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-21T20:38:12Z", "updated_at": "2017-10-22T09:03:11Z", "closed_at": "2017-10-22T09:03:11Z", "author_association": "NONE", "body": "I'm sorry but I'm completely lost\r\nI just want to iterate over a value:\r\n\r\n```\r\n    auto tiles = j.find(\"tiles\");\r\n    if (tiles != j.end())\r\n    {\r\n      for (auto tile : *tiles)\r\n      {\r\n        std::cout << tile.key() << std::endl;\r\n        //printf(\"Name: %s\\n\", tile.key().c_str());\r\n      }\r\n    }\r\n```\r\nI even used std::cout just like the examples.\r\n```\r\n{\r\n  \"tiles\":\r\n  {\r\n    \"a\": [2, 5],\r\n    \"b\": [3, 0],\r\n```\r\n\r\n\r\nWhat am I doing wrong? It says `error: no member named 'key' in tile` but that makes no sense because im *iterator so I should already be ranged-for-ing over each tile.\r\nThe examples also don't really provide any insight into iterating over things like these.\r\n\r\nIterating over the sub-object and then `std::cout << tile << std::endl;` works like expected, however that is just magic. I want to print the key and the value separately, one as a string and the other as an array using indexing operator."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/792", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/792/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/792/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/792/events", "html_url": "https://github.com/nlohmann/json/issues/792", "id": 266416184, "node_id": "MDU6SXNzdWUyNjY0MTYxODQ=", "number": 792, "title": "how to get the json object again from which printed by the method of dump()", "user": {"login": "CoderOverflow", "id": 29338660, "node_id": "MDQ6VXNlcjI5MzM4NjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/29338660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CoderOverflow", "html_url": "https://github.com/CoderOverflow", "followers_url": "https://api.github.com/users/CoderOverflow/followers", "following_url": "https://api.github.com/users/CoderOverflow/following{/other_user}", "gists_url": "https://api.github.com/users/CoderOverflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/CoderOverflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CoderOverflow/subscriptions", "organizations_url": "https://api.github.com/users/CoderOverflow/orgs", "repos_url": "https://api.github.com/users/CoderOverflow/repos", "events_url": "https://api.github.com/users/CoderOverflow/events{/privacy}", "received_events_url": "https://api.github.com/users/CoderOverflow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-10-18T09:08:58Z", "updated_at": "2017-10-18T13:48:00Z", "closed_at": "2017-10-18T12:29:21Z", "author_association": "NONE", "body": "string wormhole;\r\nwormhole = jsonPayload.dump();\r\n\r\nHow can I convert std::string to json object again?\r\nWhen I use 'auto x = json::parse(wormhole.c_str()) ', the exception was occurred. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/791", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/791/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/791/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/791/events", "html_url": "https://github.com/nlohmann/json/issues/791", "id": 266343395, "node_id": "MDU6SXNzdWUyNjYzNDMzOTU=", "number": 791, "title": "ppa to include source", "user": {"login": "jgsuess", "id": 782737, "node_id": "MDQ6VXNlcjc4MjczNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/782737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgsuess", "html_url": "https://github.com/jgsuess", "followers_url": "https://api.github.com/users/jgsuess/followers", "following_url": "https://api.github.com/users/jgsuess/following{/other_user}", "gists_url": "https://api.github.com/users/jgsuess/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgsuess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgsuess/subscriptions", "organizations_url": "https://api.github.com/users/jgsuess/orgs", "repos_url": "https://api.github.com/users/jgsuess/repos", "events_url": "https://api.github.com/users/jgsuess/events{/privacy}", "received_events_url": "https://api.github.com/users/jgsuess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-18T02:51:21Z", "updated_at": "2017-10-21T08:05:46Z", "closed_at": "2017-10-21T08:05:46Z", "author_association": "NONE", "body": "Hi!\r\nWe are using cmake and Ubuntu in our build. Would you be willing to make a PPA so json can be shipped in the ubuntu sphere.\r\nAnd _Yes_ - I am aware that:\r\n- it is just a single source file\r\n- I can use wget to simply grab it of the repository for each release.\r\nConsideration would be welcome though!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/790", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/790/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/790/events", "html_url": "https://github.com/nlohmann/json/issues/790", "id": 266296842, "node_id": "MDU6SXNzdWUyNjYyOTY4NDI=", "number": 790, "title": "Different include paths in macOS and Ubuntu", "user": {"login": "C0DEF52", "id": 7161820, "node_id": "MDQ6VXNlcjcxNjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7161820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C0DEF52", "html_url": "https://github.com/C0DEF52", "followers_url": "https://api.github.com/users/C0DEF52/followers", "following_url": "https://api.github.com/users/C0DEF52/following{/other_user}", "gists_url": "https://api.github.com/users/C0DEF52/gists{/gist_id}", "starred_url": "https://api.github.com/users/C0DEF52/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C0DEF52/subscriptions", "organizations_url": "https://api.github.com/users/C0DEF52/orgs", "repos_url": "https://api.github.com/users/C0DEF52/repos", "events_url": "https://api.github.com/users/C0DEF52/events{/privacy}", "received_events_url": "https://api.github.com/users/C0DEF52/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-17T22:13:30Z", "updated_at": "2017-10-27T16:34:49Z", "closed_at": "2017-10-18T17:44:25Z", "author_association": "NONE", "body": "I want to use json.hpp in my project and it must be compiled for the latest macOS and for Ubuntu 16.04 LTS. I use CMake for the project. For macOS I followed the guide and installed json via homebrew, so I have /usr/local/include/json.hpp. But Ubuntu 16.04 does not have nlohmann-json-dev in apt repository (only 16.10 and newer have). So, I decided to clone json and generate makefiles via CMake to install it. And I noticed that it is installed into /usr/local/include/nlohmann/json.hpp. So, now I have to solve the problem with different include paths using platform dependent conditions in CMake file that is not so convenient.\r\nMaybe it would be better to change installation path in homebrew version and make it /usr/local/include/nlohmann/json.hpp too? As I see it is good practice to put includes in some subfolder. So, users may include it like this:\r\n#include <nlohmann/json.hpp>"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/789", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/789/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/789/events", "html_url": "https://github.com/nlohmann/json/issues/789", "id": 266251693, "node_id": "MDU6SXNzdWUyNjYyNTE2OTM=", "number": 789, "title": "Missing break after line 12886 in switch/case", "user": {"login": "jamespharvey20", "id": 13026414, "node_id": "MDQ6VXNlcjEzMDI2NDE0", "avatar_url": "https://avatars1.githubusercontent.com/u/13026414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamespharvey20", "html_url": "https://github.com/jamespharvey20", "followers_url": "https://api.github.com/users/jamespharvey20/followers", "following_url": "https://api.github.com/users/jamespharvey20/following{/other_user}", "gists_url": "https://api.github.com/users/jamespharvey20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamespharvey20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamespharvey20/subscriptions", "organizations_url": "https://api.github.com/users/jamespharvey20/orgs", "repos_url": "https://api.github.com/users/jamespharvey20/repos", "events_url": "https://api.github.com/users/jamespharvey20/events{/privacy}", "received_events_url": "https://api.github.com/users/jamespharvey20/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-17T19:35:57Z", "updated_at": "2017-10-21T20:50:18Z", "closed_at": "2017-10-21T20:50:18Z", "author_association": "NONE", "body": "```\r\ncase lexer::token_type::parse_error:\r\n{\r\n   // using \"uninitialized\" to avoid \"expected\" message\r\n   expect(lexer::token_type::uninitialized); // line 12886\r\n}\r\n```\r\n\r\nOn gcc 7.2.0, with `-Werror`, this causes:\r\n\r\n```\r\njson.hpp:12886:27: error: this statement may fall through [-Werror=implicit-fallthrough=]\r\n                     expect(lexer::token_type::uninitialized);\r\n                     ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\njson.hpp:12889:17: note: here\r\n                 default:\r\n                 ^~~~~~~\r\ncc1plus: all warnings being treated as errors\r\n```\r\n\r\nThis is of course worked around by including the json directory as a system directory.\r\n\r\nAnd, it's sort of a non-issue because if `expect()` throws, it never falls through, and if it doesn't throw the first time, it won't throw the second time."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/787", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/787/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/787/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/787/events", "html_url": "https://github.com/nlohmann/json/issues/787", "id": 265850468, "node_id": "MDU6SXNzdWUyNjU4NTA0Njg=", "number": 787, "title": "All unit tests fail?", "user": {"login": "QuantumDonDoerner", "id": 16194526, "node_id": "MDQ6VXNlcjE2MTk0NTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/16194526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuantumDonDoerner", "html_url": "https://github.com/QuantumDonDoerner", "followers_url": "https://api.github.com/users/QuantumDonDoerner/followers", "following_url": "https://api.github.com/users/QuantumDonDoerner/following{/other_user}", "gists_url": "https://api.github.com/users/QuantumDonDoerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuantumDonDoerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuantumDonDoerner/subscriptions", "organizations_url": "https://api.github.com/users/QuantumDonDoerner/orgs", "repos_url": "https://api.github.com/users/QuantumDonDoerner/repos", "events_url": "https://api.github.com/users/QuantumDonDoerner/events{/privacy}", "received_events_url": "https://api.github.com/users/QuantumDonDoerner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-16T17:28:41Z", "updated_at": "2017-10-16T19:58:45Z", "closed_at": "2017-10-16T19:58:45Z", "author_association": "NONE", "body": "Using up-level cmake:\r\n%cmake3 --version\r\ncmake3 version 3.6.3\r\n\r\nUsing up-level compiler (6.3.0, on the list)\r\n%c++ --version\r\nc++ (GCC) 6.3.0\r\nCopyright (C) 2016 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\nTests built with a couple of innocuous warnings like this:\r\n.../json/test/src/unit-serialization.cpp:71:18: warning: \u2018std::ostream& nlohmann::operator>>(const\r\nnlohmann::basic_json<>&, std::ostream&)\u2019 is deprecated [-Wdeprecated-declarations]\r\n\r\nBut all tests fail: \"0% tests passed, 70 tests failed out of 70\"\r\n\r\nAny idea what may be happening?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/786", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/786/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/786/events", "html_url": "https://github.com/nlohmann/json/issues/786", "id": 265761851, "node_id": "MDU6SXNzdWUyNjU3NjE4NTE=", "number": 786, "title": "More use of move semantics in deserialization", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-16T13:02:00Z", "updated_at": "2017-10-16T14:17:41Z", "closed_at": "2017-10-16T14:17:41Z", "author_association": "NONE", "body": "## Short version\r\n\r\nFor certain cases, where copying things is an issue (as the one described below), I would like to favor examples similar to `move_only_type` over the creation of a `from_json` function, but specializations of `adl_serializer` does not seem to work with containers of types for which the specialization exist.\r\n\r\nIdeally, I would like to have a \"return by value\" version of `from_json`. The STL container of those types would be built by *emplacing* the values returned by `from_json` into the container.\r\n\r\n## Long version / context\r\n\r\nWe currently use your library (vendoring the json header for now) in xeus, a native C++ implementation of the Jupyter protocol.\r\n\r\nIn this work, some of the classes that we deserialize from json have a value semantics and implement the RAII pattern. Basically, constructor and destructors amount to acquiring and freeing the resources. Any non-move copy acquires a new version of the resource (with a different id). Move constructor and assignment transfers the resource to the moved-to object.\r\n\r\nThis is a context in which being able to move things to a container would make a lot of sense..."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/784", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/784/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/784/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/784/events", "html_url": "https://github.com/nlohmann/json/issues/784", "id": 265648153, "node_id": "MDU6SXNzdWUyNjU2NDgxNTM=", "number": 784, "title": "warning C4706 - Visual Studio 2017 (/W4)", "user": {"login": "jseward", "id": 1309841, "node_id": "MDQ6VXNlcjEzMDk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1309841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseward", "html_url": "https://github.com/jseward", "followers_url": "https://api.github.com/users/jseward/followers", "following_url": "https://api.github.com/users/jseward/following{/other_user}", "gists_url": "https://api.github.com/users/jseward/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseward/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseward/subscriptions", "organizations_url": "https://api.github.com/users/jseward/orgs", "repos_url": "https://api.github.com/users/jseward/repos", "events_url": "https://api.github.com/users/jseward/events{/privacy}", "received_events_url": "https://api.github.com/users/jseward/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 2, "created_at": "2017-10-16T05:06:02Z", "updated_at": "2017-10-16T17:48:51Z", "closed_at": "2017-10-16T17:48:21Z", "author_association": "CONTRIBUTOR", "body": "```\r\njson.hpp(3037): warning C4706: assignment within conditional expression\r\njson.hpp(3133): warning C4706: assignment within conditional expression\r\n```\r\n\r\nIt looks like this was discussed and solved already for VS 2015 here : https://github.com/nlohmann/json/issues/295\r\n\r\nBut the issue remains on VS 2017"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/782", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/782/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/782/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/782/events", "html_url": "https://github.com/nlohmann/json/issues/782", "id": 265488925, "node_id": "MDU6SXNzdWUyNjU0ODg5MjU=", "number": 782, "title": "Compile error in clang 5.0", "user": {"login": "DronCode", "id": 32241726, "node_id": "MDQ6VXNlcjMyMjQxNzI2", "avatar_url": "https://avatars3.githubusercontent.com/u/32241726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DronCode", "html_url": "https://github.com/DronCode", "followers_url": "https://api.github.com/users/DronCode/followers", "following_url": "https://api.github.com/users/DronCode/following{/other_user}", "gists_url": "https://api.github.com/users/DronCode/gists{/gist_id}", "starred_url": "https://api.github.com/users/DronCode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DronCode/subscriptions", "organizations_url": "https://api.github.com/users/DronCode/orgs", "repos_url": "https://api.github.com/users/DronCode/repos", "events_url": "https://api.github.com/users/DronCode/events{/privacy}", "received_events_url": "https://api.github.com/users/DronCode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-14T12:46:04Z", "updated_at": "2017-10-14T16:50:24Z", "closed_at": "2017-10-14T16:50:24Z", "author_association": "NONE", "body": "Hi. \r\nIn clang 5.0 I have an compile error:\r\n\r\n```json.hpp:9830:66: error: no type named 'string_view' in namespace std' and not std::is_same<ValueType, typename std::string_view>::value```\r\n\r\nI've found **temporary** solution (paste it after includes):\r\n```\r\n#if ((defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_MSC_VER) && _MSC_VER >1900 && defined(_HAS_CXX17) && _HAS_CXX17 == 1)) && defined(__clang__)\r\n#include <experimental/string_view>\r\nnamespace std {\r\n    using string_view = std::experimental::string_view;\r\n}\r\n#endif\r\n```\r\nMay be already created another better solution?\r\nIt can be helpful for people like me, who wants to get C++17 in clang :)\r\n\r\nP.S. Sorry for my English :)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/781", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/781/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/781/events", "html_url": "https://github.com/nlohmann/json/issues/781", "id": 265415623, "node_id": "MDU6SXNzdWUyNjU0MTU2MjM=", "number": 781, "title": "Error Installing appium_lib with Ruby v2.4.2 Due to JSON", "user": {"login": "PatrickDuncan", "id": 6889074, "node_id": "MDQ6VXNlcjY4ODkwNzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6889074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatrickDuncan", "html_url": "https://github.com/PatrickDuncan", "followers_url": "https://api.github.com/users/PatrickDuncan/followers", "following_url": "https://api.github.com/users/PatrickDuncan/following{/other_user}", "gists_url": "https://api.github.com/users/PatrickDuncan/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatrickDuncan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatrickDuncan/subscriptions", "organizations_url": "https://api.github.com/users/PatrickDuncan/orgs", "repos_url": "https://api.github.com/users/PatrickDuncan/repos", "events_url": "https://api.github.com/users/PatrickDuncan/events{/privacy}", "received_events_url": "https://api.github.com/users/PatrickDuncan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-13T20:52:06Z", "updated_at": "2017-10-31T16:55:48Z", "closed_at": "2017-10-21T08:01:11Z", "author_association": "NONE", "body": "Hello we're trying to install appium_lib v9.6.1 (bundle install) with Ruby v2.4.2-2 and we're getting an error with json v2.1.0 (and 1.8.7):\r\n\r\n<pre>Gem::Ext::BuildError: ERROR: Failed to build gem native extension.\r\n\r\ncurrent directory:\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0/ext/json/ext/generator\r\nC:/Ruby24-x64/bin/ruby.exe -r ./siteconf20171006-3700-aias1v.rb extconf.rb\r\ncreating Makefile\r\n\r\ncurrent directory:\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0/ext/json/ext/generator\r\nmake \"DESTDIR=\" clean\r\n\r\ncurrent directory:\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0/ext/json/ext/generator\r\nmake \"DESTDIR=\"\r\ngenerating generator-x64-mingw32.def\r\ncompiling generator.c\r\nMakefile:241: recipe for target 'generator.o' failed\r\nprocess_begin: CreateProcess(NULL, x86_64-w64-mingw32-gcc -I.\r\n-IC:/Ruby24-x64/include/ruby-2.4.0/x64-mingw32\r\n-I/C/Ruby24-x64/include/ruby-2.4.0/ruby/backward\r\n-I/C/Ruby24-x64/include/ruby-2.4.0 -I. -DJSON_GENERATOR -D_FORTIFY_SOURCE=2\r\n-D__USE_MINGW_ANSI_STDIO=1 -DFD_SETSIZE=2048 -D_WIN32_WINNT=0x0501\r\n-D__MINGW_USE_VC2005_COMPAT -D_FILE_OFFSET_BITS=64 -march=x86-64 -mtune=generic\r\n-O2 -pipe -o generator.o -c generator.c, ...) failed.\r\nmake (e=2): The system cannot find the file specified.\r\n\r\nmake: *** [generator.o] Error 2\r\n\r\nmake failed, exit code 2\r\n\r\nGem files will remain installed in\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/json-2.1.0 for inspection.\r\nResults logged to\r\nC:/Ruby24-x64/lib/ruby/gems/2.4.0/extensions/x64-mingw32/2.4.0/json-2.1.0/gem_make.out\r\n\r\nAn error occurred while installing json (2.1.0), and Bundler cannot continue.\r\nMake sure that `gem install json -v '2.1.0'` succeeds before bundling.\r\n\r\nIn Gemfile:\r\n  appium_lib was resolved to 9.6.1, which depends on\r\n    json\r\n</pre>\r\n\r\nWe've followed https://github.com/bundler/bundler/issues/4462 to no avail.\r\n\r\nRight now we're using Ruby 2.3.3 and everything is running smoothly. I created https://github.com/bundler/bundler/issues/6083 before this ticket"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/780", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/780/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/780/events", "html_url": "https://github.com/nlohmann/json/issues/780", "id": 265271878, "node_id": "MDU6SXNzdWUyNjUyNzE4Nzg=", "number": 780, "title": "::get<int>() fails in new(er) release [MSVC]", "user": {"login": "sfinktah", "id": 4650770, "node_id": "MDQ6VXNlcjQ2NTA3NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4650770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfinktah", "html_url": "https://github.com/sfinktah", "followers_url": "https://api.github.com/users/sfinktah/followers", "following_url": "https://api.github.com/users/sfinktah/following{/other_user}", "gists_url": "https://api.github.com/users/sfinktah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfinktah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfinktah/subscriptions", "organizations_url": "https://api.github.com/users/sfinktah/orgs", "repos_url": "https://api.github.com/users/sfinktah/repos", "events_url": "https://api.github.com/users/sfinktah/events{/privacy}", "received_events_url": "https://api.github.com/users/sfinktah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-10-13T12:27:34Z", "updated_at": "2018-03-28T08:32:00Z", "closed_at": "2017-11-04T18:54:05Z", "author_association": "NONE", "body": "Compiler: MSVC 15.1 (2017) with VS2015 libraries etc.\r\n\r\nWas working with: c42273d (2.1.1)\r\n```cpp\r\n    hsv_t(const json &values)\r\n        : hsv_t( \r\n            wrap360( values[0].get<int>()),\r\n            clamp100(values[1].get<int>()),\r\n            clamp100(values[2].get<int>()),\r\n            clamp100(values[3].get<int>())){}\r\n```\r\nFails with: d300a8e (2.1.1) latest dev\r\n```cpp\r\nReplaced with:\r\n    hsv_t(const json &values)\r\n        : hsv_t( \r\n            wrap360( static_cast<int>(values[0])),\r\n            clamp100(static_cast<int>(values[1])),\r\n            clamp100(static_cast<int>(values[2])),\r\n            clamp100(static_cast<int>(values[3]))){}\r\n```\r\nBut error just moved to json.hpp +9836\r\n```cpp\r\n    template < typename ValueType, typename std::enable_if <\r\n                   not std::is_pointer<ValueType>::value and\r\n                   not std::is_same<ValueType, detail::json_ref<basic_json>>::value and\r\n                   not std::is_same<ValueType, typename string_t::value_type>::value\r\n#ifndef _MSC_VER  // fix for issue #167 operator<< ambiguity under VS2015\r\n                   and not std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>::value\r\n#endif\r\n#if (defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_MSC_VER) && _MSC_VER >1900 && defined(_HAS_CXX17) && _HAS_CXX17 == 1) // fix for issue #464\r\n                   and not std::is_same<ValueType, typename std::string_view>::value\r\n#endif\r\n                   , int >::type = 0 >\r\n    operator ValueType() const\r\n    {\r\n        // delegate the call to get<>() const\r\n        return get<ValueType>();\r\n    }\r\n```\r\n\r\n```\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2672: 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get': no matching overloaded function found\r\n1>e:\\git\\infamous-dll\\src\\Update/Types.h(333): note: see reference to function template instantiation 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::operator ValueType(void) const<float,0>' being compiled\r\n1>        with\r\n1>        [\r\n1>            ValueType=float\r\n1>        ]\r\n1>e:\\git\\infamous-dll\\src\\Update/Types.h(333): note: see reference to function template instantiation 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::operator ValueType(void) const<float,0>' being compiled\r\n1>        with\r\n1>        [\r\n1>            ValueType=float\r\n1>        ]\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'const PointerType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) noexcept const': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9663): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'PointerType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) noexcept': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9651): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'ValueType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) noexcept(<expr>) const': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9614): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9836): error C2783: 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer> nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get(void) const': could not deduce template argument for '__formal'\r\n1>E:\\git\\infamous-dll\\src\\vendor\\sfinktah\\include\\json.hpp(9509): note: see declaration of 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get'\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/779", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/779/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/779/events", "html_url": "https://github.com/nlohmann/json/issues/779", "id": 265071802, "node_id": "MDU6SXNzdWUyNjUwNzE4MDI=", "number": 779, "title": "Type Conversion", "user": {"login": "ccge", "id": 27977484, "node_id": "MDQ6VXNlcjI3OTc3NDg0", "avatar_url": "https://avatars0.githubusercontent.com/u/27977484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccge", "html_url": "https://github.com/ccge", "followers_url": "https://api.github.com/users/ccge/followers", "following_url": "https://api.github.com/users/ccge/following{/other_user}", "gists_url": "https://api.github.com/users/ccge/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccge/subscriptions", "organizations_url": "https://api.github.com/users/ccge/orgs", "repos_url": "https://api.github.com/users/ccge/repos", "events_url": "https://api.github.com/users/ccge/events{/privacy}", "received_events_url": "https://api.github.com/users/ccge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-12T20:16:43Z", "updated_at": "2017-10-21T08:01:42Z", "closed_at": "2017-10-21T08:01:32Z", "author_association": "NONE", "body": "Is there a way to convert a string value to a number value or vice versa?\r\n\r\nFor example:\r\n```\r\n{\r\n    \"number\": \"9\"\r\n}\r\n```\r\nI figured this word work, but it doesn't:\r\n`j.at( \"number\" ).get<int>();`\r\n\r\nDo I just have to grab it as a string and convert myself, or is there a better way?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/778", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/778/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/778/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/778/events", "html_url": "https://github.com/nlohmann/json/issues/778", "id": 264668279, "node_id": "MDU6SXNzdWUyNjQ2NjgyNzk=", "number": 778, "title": "Segfault on nested parsing", "user": {"login": "quicknir", "id": 10457096, "node_id": "MDQ6VXNlcjEwNDU3MDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quicknir", "html_url": "https://github.com/quicknir", "followers_url": "https://api.github.com/users/quicknir/followers", "following_url": "https://api.github.com/users/quicknir/following{/other_user}", "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}", "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions", "organizations_url": "https://api.github.com/users/quicknir/orgs", "repos_url": "https://api.github.com/users/quicknir/repos", "events_url": "https://api.github.com/users/quicknir/events{/privacy}", "received_events_url": "https://api.github.com/users/quicknir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2017-10-11T17:18:34Z", "updated_at": "2017-10-12T03:08:23Z", "closed_at": "2017-10-12T02:29:40Z", "author_association": "NONE", "body": "It's a bit difficult to provide a full repro here as it would mean tearing out a bunch of code, but the gist of the bug is as follows:\r\n\r\n```\r\nstruct Foo { int x; bool y};\r\n// define from_json; use f.x = j.at(\"x\").get<int>(), etc\r\n    auto j = json::parse(R\"(\r\n              { \"m\": {\"one\": {\"x\": 1},\r\n                      \"two\": {\"x\": 2, \"y\": false }},\r\n                \"s\": \"arg\"}\r\n             )\");\r\nstd::unordered_map<std::string, Foo> m = j.at(\"m\");\r\n```\r\n\r\nThe last line should throw IMHO, but in fact it segfaults. I think I'm on version 2.1.1."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/777", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/777/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/777/events", "html_url": "https://github.com/nlohmann/json/issues/777", "id": 264665359, "node_id": "MDU6SXNzdWUyNjQ2NjUzNTk=", "number": 777, "title": "Floating point rounding", "user": {"login": "quicknir", "id": 10457096, "node_id": "MDQ6VXNlcjEwNDU3MDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quicknir", "html_url": "https://github.com/quicknir", "followers_url": "https://api.github.com/users/quicknir/followers", "following_url": "https://api.github.com/users/quicknir/following{/other_user}", "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}", "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions", "organizations_url": "https://api.github.com/users/quicknir/orgs", "repos_url": "https://api.github.com/users/quicknir/repos", "events_url": "https://api.github.com/users/quicknir/events{/privacy}", "received_events_url": "https://api.github.com/users/quicknir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-10-11T17:08:10Z", "updated_at": "2018-01-21T15:00:08Z", "closed_at": "2018-01-21T15:00:08Z", "author_association": "NONE", "body": "I'll preface this by saying I know there's been some discussion about this already, and by saying that my version is not the latest, so this may already be fixed. Right now, you can do:\r\n\r\n```\r\nauto j = json::parse(R\"({\"x\":1.5})\");\r\nint x = j.at(\"x\");\r\n```\r\n\r\nWith no complaint. Is this intentional? I thought that json checks to see if precision is lost before converting to an integer."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/776", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/776/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/776/events", "html_url": "https://github.com/nlohmann/json/issues/776", "id": 264128155, "node_id": "MDU6SXNzdWUyNjQxMjgxNTU=", "number": 776, "title": "Build warnings: shadowing exception id", "user": {"login": "pvleuven", "id": 32666541, "node_id": "MDQ6VXNlcjMyNjY2NTQx", "avatar_url": "https://avatars2.githubusercontent.com/u/32666541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvleuven", "html_url": "https://github.com/pvleuven", "followers_url": "https://api.github.com/users/pvleuven/followers", "following_url": "https://api.github.com/users/pvleuven/following{/other_user}", "gists_url": "https://api.github.com/users/pvleuven/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvleuven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvleuven/subscriptions", "organizations_url": "https://api.github.com/users/pvleuven/orgs", "repos_url": "https://api.github.com/users/pvleuven/repos", "events_url": "https://api.github.com/users/pvleuven/events{/privacy}", "received_events_url": "https://api.github.com/users/pvleuven/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 706237888, "node_id": "MDU6TGFiZWw3MDYyMzc4ODg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20icc", "name": "platform: icc", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-10T07:43:57Z", "updated_at": "2018-03-03T16:35:50Z", "closed_at": "2017-10-17T18:43:40Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI get a bunch of build warnings (see below) that inform on hiding the exception member 'id'. To me it seems the member is not needed as the id is always passed through the calling functions. Looks like a potential source of trouble to me.\r\n\r\nBest regards,\r\n\r\nPeter\r\n\r\nwarnings: \r\n In file included from .*******: ********json/json.hpp(209): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static std::string name(const std::string& ename, int id)\r\n                                                            ^\r\n ********json/json.hpp(273): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static parse_error create(int id, std::size_t byte_, const std::string& what_arg)\r\n                                    ^\r\n ********json/json.hpp(337): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static invalid_iterator create(int id, const std::string& what_arg)\r\n                                         ^\r\n ********json/json.hpp(388): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static type_error create(int id, const std::string& what_arg)\r\n                                   ^\r\n ********json/json.hpp(431): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static out_of_range create(int id, const std::string& what_arg)\r\n                                     ^\r\n ********json/json.hpp(469): warning #3280: declaration hides member \"nlohmann::detail::exception::id\" (declared at line 204)\r\n      static other_error create(int id, const std::string& what_arg)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/775", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/775/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/775/events", "html_url": "https://github.com/nlohmann/json/issues/775", "id": 264063002, "node_id": "MDU6SXNzdWUyNjQwNjMwMDI=", "number": 775, "title": "multi-level JSON support.", "user": {"login": "horntones", "id": 25620278, "node_id": "MDQ6VXNlcjI1NjIwMjc4", "avatar_url": "https://avatars0.githubusercontent.com/u/25620278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/horntones", "html_url": "https://github.com/horntones", "followers_url": "https://api.github.com/users/horntones/followers", "following_url": "https://api.github.com/users/horntones/following{/other_user}", "gists_url": "https://api.github.com/users/horntones/gists{/gist_id}", "starred_url": "https://api.github.com/users/horntones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/horntones/subscriptions", "organizations_url": "https://api.github.com/users/horntones/orgs", "repos_url": "https://api.github.com/users/horntones/repos", "events_url": "https://api.github.com/users/horntones/events{/privacy}", "received_events_url": "https://api.github.com/users/horntones/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-10T00:25:34Z", "updated_at": "2017-10-10T19:50:39Z", "closed_at": "2017-10-10T19:50:39Z", "author_association": "NONE", "body": "Hi,\r\nI'm using json.hpp in an attempt to create a jason object from a json string.  It appears that it only supports single hierarchy json.  for example, I'm trying to parse the following:\r\n\r\nstd::string myString = \"{ \\\"Meta Data\\\": { \\\"1. Information\\\": \\\"Intraday (1min) prices and volumes\\\", \\\"2. Symbol\\\" : \\\"MSFT\\\"}, \\\"Time Series (1min)\\\":{\\\"2017-10-09 16:00:00\\\": {\\\"1. open\\\": \\\"76.3300\\\",\\\"2. high\\\" : \\\"76.3400\\\",\\\"3. low\\\" : \\\"76.2900\\\"},\\\"2017-10-09 15:59:00\\\": {\\\"1. open\\\": \\\"76.3200\\\",\\\"2. high\\\" : \\\"76.3350\\\"} }}\";\r\n\r\njson j = json::parse(myString);\r\n\r\nwhen I print the json, I only get the top keys parsed:\r\nMeta Data : {\"1. Information\":\"Intraday (1min) prices and volumes\",\"2. Symbol\":\"MSFT\"}\r\nTime Series (1min) : {\"2017-10-09 15:59:00\":{\"1. open\":\"76.3200\",\"2. high\":\"76.3\r\n350\"},\"2017-10-09 16:00:00\":{\"1. open\":\"76.3300\",\"2. high\":\"76.3400\",\"3. low\":\"7\r\n6.2900\"}}\r\n\r\nAny advise?\r\nthanks!\r\nMike\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/774", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/774/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/774/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/774/events", "html_url": "https://github.com/nlohmann/json/issues/774", "id": 263704838, "node_id": "MDU6SXNzdWUyNjM3MDQ4Mzg=", "number": 774, "title": "Another idea about type support", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2017-10-08T09:23:58Z", "updated_at": "2018-01-18T00:27:08Z", "closed_at": "2017-12-28T20:57:22Z", "author_association": "OWNER", "body": "# The problem\r\n\r\nThe library currently offers some template arguments to configure the types used for numbers, strings, booleans, objects, and arrays. However, this type support is very limited, and even simple things like using `std::unordered_map` for objects or an `std::vector` with a user-defined allocator for arrays do not work. Even worse, there are tons of `std::string` usages in the code even though we actually have a type `basic_json::string_t` which is a typedef for the passed string type (see #766).\r\n\r\nWith issue #456 came the idea to replace the long template parameter list with a policy class. I like the idea, but I am afraid that this change does not improve things much with respect to the mentioned problems.\r\n\r\n# Another solution\r\n\r\nOne possible solution for a true type configuration could be the following: we define interfaces for each type that must be implemented by concrete implementations to be used in the `basic_json` class which would be refactored to only rely on this interface.\r\n\r\nFor instance, we could have a class hierarchy\r\n\r\n```cpp\r\nclass abstract_value\r\n{\r\npublic:\r\n    virtual ~abstract_value() = 0;\r\n\r\n    virtual bool empty() const noexcept = 0;\r\n    virtual size_type size() const noexcept = 0;\r\n    virtual size_type max_size() const noexcept = 0;\r\n    virtual void clear() noexcept = 0;\r\n    \r\n    virtual bool is_primitive() const noexcept = 0;\r\n    virtual bool is_structured() const noexcept = 0;\r\n    virtual const char* name() const noexcept = 0;\r\n    virtual value_t type() const noexcept = 0;\r\n    \r\n    ...\r\n};\r\n```\r\n\r\n```cpp\r\nclass abstract_primitive_value : public abstract_value\r\n{\r\npublic:\r\n    bool empty() const noexcept override { return false; }\r\n    size_type size() const noexcept override { return 1; }\r\n    size_type max_size() const noexcept override { return 1; }\r\n    \r\n    bool is_primitive() const noexcept override { return true; };\r\n    bool is_structured() const noexcept override { return false; };\r\n    \r\n    ...\r\n};\r\n```\r\n\r\n```cpp\r\nclass abstract_boolean_value : public abstract_primitive_value\r\n{\r\npublic:\r\n    const char* name() const noexcept override { return \"boolean\"; }\r\n    value_t type() const noexcept override { return value_t::boolean; }\r\n    \r\n    ...\r\n};\r\n```\r\n\r\nand finally\r\n\r\n```cpp\r\nclass boolean_value_imp : public abstract_boolean_value\r\n{\r\npublic:\r\n    boolean_value_imp() = default;\r\n    boolean_value_imp(const bool v) : m_value(v) {}\r\n    \r\n    void clear() noexcept override\r\n    {\r\n        m_value = false;\r\n    }\r\n    \r\n    ...\r\n    \r\nprivate:\r\n    bool m_value = false;\r\n};\r\n```\r\n\r\nto implement the Boolean value.\r\n\r\nWe could then have a traits class like\r\n\r\n```cpp\r\nstruct default_value_traits {\r\n    using null_value = null_value_imp;\r\n    using boolean_value = boolean_value_imp;\r\n    using string_value = string_value_imp;\r\n    using array_value = array_value_imp;\r\n    using object_value = object_value_imp;\r\n    ...\r\n};\r\n```\r\n\r\nand finally a value like\r\n\r\n```cpp\r\ntemplate<typename traits = default_value_traits>\r\nunion json_value\r\n{\r\n    using null_value = typename traits::null_value;\r\n    using boolean_value = typename traits::boolean_value;\r\n    using string_value = typename traits::string_value;\r\n    using array_value = typename traits::array_value;\r\n    using object_value = typename traits::object_value;\r\n\r\n    null_value *null;\r\n    boolean_value *boolean;\r\n    string_value *string;\r\n    array_value *array;\r\n    object_value *object;\r\n    \r\n    ...\r\n}\r\n```\r\n\r\nWe would provide the default implementations wrapping `bool`, `int64_t`, `uint64_t`, `std::string`, `std::vector`, and `std::map` as `default_value_traits`. If someone likes a different type, one just needs to implement the respective interface, add the implementation to a different traits class and pass it to `json_value`.\r\n\r\n## My questions\r\n\r\n1. What do you think about this approach?\r\n\r\n2. What types should we make configurable. I currently think of\r\n\t- null\r\n\t- boolean\r\n\t- number (integer)\r\n\t- number (unsigned integer)\r\n\t- number (floating-point)\r\n\t- string\r\n\t- object\r\n\t- array\r\n\r\n3. Should the keys of objects be of the same string type? What about strings used during serialization?\r\n\t\r\n4. What kind of constructors should we require? I sketched that Booleans should be constructible from `bool`. But what else? Should we require strings to be constructible from `const char*`? Or also `std::string`?\r\n5. How much overhead do we need to pay with this approach?\r\n6. How much behavior should we require? For instance, should a type bring its own `dump()` function? Should a number type bring its `from_string(const char*)` function for parsing?\r\n\r\nThis is a rough idea right now, but I would really appreciate feedback. I know there is a lot of work to be done, but I really want to get rid of all the limitations I described above."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/773", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/773/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/773/events", "html_url": "https://github.com/nlohmann/json/issues/773", "id": 263652132, "node_id": "MDU6SXNzdWUyNjM2NTIxMzI=", "number": 773, "title": "SIGABRT on dump()", "user": {"login": "cronnosli", "id": 10584435, "node_id": "MDQ6VXNlcjEwNTg0NDM1", "avatar_url": "https://avatars0.githubusercontent.com/u/10584435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cronnosli", "html_url": "https://github.com/cronnosli", "followers_url": "https://api.github.com/users/cronnosli/followers", "following_url": "https://api.github.com/users/cronnosli/following{/other_user}", "gists_url": "https://api.github.com/users/cronnosli/gists{/gist_id}", "starred_url": "https://api.github.com/users/cronnosli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cronnosli/subscriptions", "organizations_url": "https://api.github.com/users/cronnosli/orgs", "repos_url": "https://api.github.com/users/cronnosli/repos", "events_url": "https://api.github.com/users/cronnosli/events{/privacy}", "received_events_url": "https://api.github.com/users/cronnosli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 729086061, "node_id": "MDU6TGFiZWw3MjkwODYwNjE=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20arm", "name": "platform: arm", "color": "eb6420", "default": false}, {"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-10-07T16:09:09Z", "updated_at": "2017-10-24T06:22:47Z", "closed_at": "2017-10-13T06:48:49Z", "author_association": "NONE", "body": "/usr/local/include/nlohmann/json.hpp:6190: void nlohmann::detail::serializer<BasicJsonType>::dump(const BasicJsonType&, bool, bool, unsigned int, unsigned int) [with BasicJsonType = nlohmann::basic_json<>]: Assertion `std::next(i) == val.m_value.object->cend()' failed.\r\n\r\nThread 1 \"pk052\" received signal SIGABRT, Aborted"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/772", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/772/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/772/events", "html_url": "https://github.com/nlohmann/json/issues/772", "id": 263611410, "node_id": "MDU6SXNzdWUyNjM2MTE0MTA=", "number": 772, "title": "[Question] Custom StringType template parameter (possibility for a KeyType template parameter)", "user": {"login": "kyleoshaughnessy", "id": 5834110, "node_id": "MDQ6VXNlcjU4MzQxMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5834110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyleoshaughnessy", "html_url": "https://github.com/kyleoshaughnessy", "followers_url": "https://api.github.com/users/kyleoshaughnessy/followers", "following_url": "https://api.github.com/users/kyleoshaughnessy/following{/other_user}", "gists_url": "https://api.github.com/users/kyleoshaughnessy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyleoshaughnessy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyleoshaughnessy/subscriptions", "organizations_url": "https://api.github.com/users/kyleoshaughnessy/orgs", "repos_url": "https://api.github.com/users/kyleoshaughnessy/repos", "events_url": "https://api.github.com/users/kyleoshaughnessy/events{/privacy}", "received_events_url": "https://api.github.com/users/kyleoshaughnessy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-07T02:46:04Z", "updated_at": "2017-10-07T08:27:11Z", "closed_at": "2017-10-07T08:27:11Z", "author_association": "NONE", "body": "I've been using this library quite a bit but am encountering one minor issue when using the dump() routine. I understand that the default std::map<StringType, basic_json> ordering used for iteratiors is lexicographical and that this is the ordering used for output in dump(). This is a direct result of std::less<StringType> being used for the comparison functor as part of the ObjectType template parameter list.\r\n\r\nIdeally, it would be nice to have a KeyType template parameter which complies with the default constructor for StringType but otherwise only needs to implement the operator<() as required for std::map. \r\n\r\nIdeally i'd like my \"KeyType\" just to be as follows:\r\nstruct OrderedKey\r\n{\r\n    std::string keyName;\r\n    unsigned int keyOrder;\r\n};\r\n\r\ncomparison and \"toString\" operators would be defined for this custom key as well. \r\n\r\nMy question: Is it possible that this could be a feature in the foreseeable future? Or am I over thinking this? Essentially i just want to be able to define the order in which my keys are printed in dump() without rewriting the dump command. \r\n\r\nThanks."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/771", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/771/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/771/events", "html_url": "https://github.com/nlohmann/json/issues/771", "id": 263558138, "node_id": "MDU6SXNzdWUyNjM1NTgxMzg=", "number": 771, "title": "constexpr ALL the Things!", "user": {"login": "effolkronium", "id": 15274763, "node_id": "MDQ6VXNlcjE1Mjc0NzYz", "avatar_url": "https://avatars0.githubusercontent.com/u/15274763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/effolkronium", "html_url": "https://github.com/effolkronium", "followers_url": "https://api.github.com/users/effolkronium/followers", "following_url": "https://api.github.com/users/effolkronium/following{/other_user}", "gists_url": "https://api.github.com/users/effolkronium/gists{/gist_id}", "starred_url": "https://api.github.com/users/effolkronium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/effolkronium/subscriptions", "organizations_url": "https://api.github.com/users/effolkronium/orgs", "repos_url": "https://api.github.com/users/effolkronium/repos", "events_url": "https://api.github.com/users/effolkronium/events{/privacy}", "received_events_url": "https://api.github.com/users/effolkronium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-06T20:09:00Z", "updated_at": "2017-10-25T09:55:59Z", "closed_at": "2017-10-25T09:55:59Z", "author_association": "CONTRIBUTOR", "body": "https://youtu.be/PJwd4JLYJJY"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/770", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/770/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/770/events", "html_url": "https://github.com/nlohmann/json/issues/770", "id": 263466671, "node_id": "MDU6SXNzdWUyNjM0NjY2NzE=", "number": 770, "title": "error: \u2018BasicJsonType\u2019 in namespace \u2018::\u2019 does not name a type", "user": {"login": "pdroalves", "id": 1581332, "node_id": "MDQ6VXNlcjE1ODEzMzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1581332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdroalves", "html_url": "https://github.com/pdroalves", "followers_url": "https://api.github.com/users/pdroalves/followers", "following_url": "https://api.github.com/users/pdroalves/following{/other_user}", "gists_url": "https://api.github.com/users/pdroalves/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdroalves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdroalves/subscriptions", "organizations_url": "https://api.github.com/users/pdroalves/orgs", "repos_url": "https://api.github.com/users/pdroalves/repos", "events_url": "https://api.github.com/users/pdroalves/events{/privacy}", "received_events_url": "https://api.github.com/users/pdroalves/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-06T14:32:05Z", "updated_at": "2017-10-06T21:12:18Z", "closed_at": "2017-10-06T21:12:18Z", "author_association": "NONE", "body": "I'm using g++ 5.4.0 and nvcc 8.0.44 to compile the most recent commit of the library. I compiled, installed the library, and included in my code (with C++11 flag) but when I try to compile my code I get:\r\n\r\n    /usr/local/include/nlohmann/json.hpp:3624:10: error: \u2018BasicJsonType\u2019 in namespace \u2018::\u2019 does not name a type\r\n\r\nWhat am I missing?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/769", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/769/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/769/events", "html_url": "https://github.com/nlohmann/json/issues/769", "id": 263415011, "node_id": "MDU6SXNzdWUyNjM0MTUwMTE=", "number": 769, "title": "Program calls abort function", "user": {"login": "tomasMizera", "id": 22449698, "node_id": "MDQ6VXNlcjIyNDQ5Njk4", "avatar_url": "https://avatars0.githubusercontent.com/u/22449698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomasMizera", "html_url": "https://github.com/tomasMizera", "followers_url": "https://api.github.com/users/tomasMizera/followers", "following_url": "https://api.github.com/users/tomasMizera/following{/other_user}", "gists_url": "https://api.github.com/users/tomasMizera/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomasMizera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomasMizera/subscriptions", "organizations_url": "https://api.github.com/users/tomasMizera/orgs", "repos_url": "https://api.github.com/users/tomasMizera/repos", "events_url": "https://api.github.com/users/tomasMizera/events{/privacy}", "received_events_url": "https://api.github.com/users/tomasMizera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-06T11:26:27Z", "updated_at": "2017-10-07T08:13:17Z", "closed_at": "2017-10-07T08:13:17Z", "author_association": "NONE", "body": "Hi, I am facing a problem while loading a .json file. I do it this way:\r\n\r\n```\r\n#include \"json.hpp\"\r\n// for convenience\r\nusing json = nlohmann::json;\r\n\r\nint main() {\r\n\tstd::ifstream pah(\"eth_frame.json\");\r\n\tjson jFile;\r\n\tjFile << pah;\r\n\tcout << jFile[\"pi\"];\r\n....\r\n```\r\n\r\nline jFile << pah crashes and program ends with error, saying that it called abort() function. \r\n\r\n> When I try to debug, this problem occurs:\r\n> Unhandled exception at 0x753DB832 in JSONcpp.exe: Microsoft C++ exception: nlohmann::detail::parse_error at memory location 0x0133DE74.\r\n\r\nIn file json.hpp.\r\nWhat am I doing wrong? Thanks in advance for your help! :)\r\nbtw, I use VS2017 \r\nerror:\r\nhttp://prntscr.com/gtzmwp"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/768", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/768/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/768/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/768/events", "html_url": "https://github.com/nlohmann/json/issues/768", "id": 263405181, "node_id": "MDU6SXNzdWUyNjM0MDUxODE=", "number": 768, "title": "[Question] Floating point resolution config during dump() ?", "user": {"login": "rstoica", "id": 4814838, "node_id": "MDQ6VXNlcjQ4MTQ4Mzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4814838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rstoica", "html_url": "https://github.com/rstoica", "followers_url": "https://api.github.com/users/rstoica/followers", "following_url": "https://api.github.com/users/rstoica/following{/other_user}", "gists_url": "https://api.github.com/users/rstoica/gists{/gist_id}", "starred_url": "https://api.github.com/users/rstoica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rstoica/subscriptions", "organizations_url": "https://api.github.com/users/rstoica/orgs", "repos_url": "https://api.github.com/users/rstoica/repos", "events_url": "https://api.github.com/users/rstoica/events{/privacy}", "received_events_url": "https://api.github.com/users/rstoica/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-06T10:42:56Z", "updated_at": "2017-11-13T09:09:37Z", "closed_at": "2017-11-13T09:09:37Z", "author_association": "NONE", "body": "Hello,\r\n\r\nFirst of all I would like to thank for doing such a nice job in developing and maintaining a top-notch C++ JSON code base!\r\n\r\nI am a new user of this library, so maybe my question may be well documented somewhere, but I might have overlooked the explanation (if this is the case apologies beforehand but please point it out to me).\r\n\r\nIs there any functionality exposed to limit the floating point resolution during dump() ? \r\n\r\n**Context**: I am asking this as I am not using the basic output streams or its derivatives but an MQTT publisher. So basically I just dump the JSON objects that I have to the MQTT interface as a string. As of now, the float data fields have by default 10 or so decimal places as explained in the documentation, but is there a flag / API to restrict that to a configurable number, e.g. 2 decimals only ?\r\n\r\nBest,\r\nAndrei"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/767", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/767/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/767/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/767/events", "html_url": "https://github.com/nlohmann/json/issues/767", "id": 263400419, "node_id": "MDU6SXNzdWUyNjM0MDA0MTk=", "number": 767, "title": "make check - no test ran", "user": {"login": "emazv72", "id": 5381288, "node_id": "MDQ6VXNlcjUzODEyODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5381288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emazv72", "html_url": "https://github.com/emazv72", "followers_url": "https://api.github.com/users/emazv72/followers", "following_url": "https://api.github.com/users/emazv72/following{/other_user}", "gists_url": "https://api.github.com/users/emazv72/gists{/gist_id}", "starred_url": "https://api.github.com/users/emazv72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emazv72/subscriptions", "organizations_url": "https://api.github.com/users/emazv72/orgs", "repos_url": "https://api.github.com/users/emazv72/repos", "events_url": "https://api.github.com/users/emazv72/events{/privacy}", "received_events_url": "https://api.github.com/users/emazv72/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 486186748, "node_id": "MDU6TGFiZWw0ODYxODY3NDg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20mingw", "name": "platform: mingw", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-10-06T10:22:59Z", "updated_at": "2017-10-19T10:13:54Z", "closed_at": "2017-10-10T06:51:43Z", "author_association": "NONE", "body": "\r\nSymptom: Running make check doesn't run any test on my environment.\r\n\r\n```shell\r\n$ make check\r\nmake check -C test\r\nmake[1]: Entering directory '/hbdev/test/ziplib/json/test'\r\nExecuting test-json_patch...\r\n===============================================================================\r\nNo tests ran\r\n\r\n```\r\n\r\nThe issue seems to be in test/Makefile\r\n\r\nif I replace \r\n\r\n_TEST_PATTERN ?= \"*\"_\r\n\r\nwith \r\n\r\n_TEST_PATTERN ?= \"\"_\r\n\r\nThe issue seems fixed\r\n\r\nOS: Windows 10\r\nPlat: MSYS2 - GNU Make 4.2.1 - gcc version 7.2.0 (Rev1, Built by MSYS2 project)\r\n\r\nThanks\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/766", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/766/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/766/events", "html_url": "https://github.com/nlohmann/json/issues/766", "id": 263396258, "node_id": "MDU6SXNzdWUyNjMzOTYyNTg=", "number": 766, "title": "The library cannot work properly with custom allocator based containers", "user": {"login": "imalyavskiy", "id": 6505514, "node_id": "MDQ6VXNlcjY1MDU1MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6505514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imalyavskiy", "html_url": "https://github.com/imalyavskiy", "followers_url": "https://api.github.com/users/imalyavskiy/followers", "following_url": "https://api.github.com/users/imalyavskiy/following{/other_user}", "gists_url": "https://api.github.com/users/imalyavskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/imalyavskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imalyavskiy/subscriptions", "organizations_url": "https://api.github.com/users/imalyavskiy/orgs", "repos_url": "https://api.github.com/users/imalyavskiy/repos", "events_url": "https://api.github.com/users/imalyavskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/imalyavskiy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-10-06T10:06:31Z", "updated_at": "2017-10-17T07:08:51Z", "closed_at": "2017-10-17T07:08:51Z", "author_association": "NONE", "body": "Motivation: \r\nIn order to be able to pass std::string std::vector std::list containers between different binaries it was required to define a custom allocator because the project I am involved in uses binaries with statically linked CRT.\r\n\r\nIssue:\r\nOnce I defined own allocator and std containers that using it I faced a problem - if I need to put data from std::string to my customized std::basic_string I always need to copy data. Suppose tmp::string is my customized string and std::string is usual string. So in order to put data from 2nd to 1st I need to use c_str() each time. The best solution is to instantiate the nlohmann::basic_json with my customized containers. But inside the library its utility classes do not take into account the string_t alias and its string_t::value_type as well thus this leads to errors. I tried to push required types to each class inside the library that use std::string, char, std::vector etc... I did a lots of work but suddenly faced with difficulties that I just cannot understand. So I'm asking a society to help me to solve the issue and improve  the json library as a result - to make it truly(or almost truly) template.\r\n\r\n\r\n[Here](https://github.com/imalyavskiy/nlohmann_json_test) is the test project that does not compile because static assert fired up with a statement that  the \"to_json\" function with my custom types does not exist. The thing that I am wondering of is that the \"to_json\" function based on custom types exists(as it follows from the build log) and this confuses me a lot.\r\n \r\nThe fork of the JSON parser attached as sub module. And this is a MS VS 2017 project.\r\n\r\nThanks a lot.\r\n\r\nPS: [build.log.txt](https://github.com/nlohmann/json/files/1362354/build.log.txt)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/763", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/763/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/763/events", "html_url": "https://github.com/nlohmann/json/issues/763", "id": 261952404, "node_id": "MDU6SXNzdWUyNjE5NTI0MDQ=", "number": 763, "title": "Documentation or feature request.", "user": {"login": "deathly809", "id": 1381210, "node_id": "MDQ6VXNlcjEzODEyMTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1381210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deathly809", "html_url": "https://github.com/deathly809", "followers_url": "https://api.github.com/users/deathly809/followers", "following_url": "https://api.github.com/users/deathly809/following{/other_user}", "gists_url": "https://api.github.com/users/deathly809/gists{/gist_id}", "starred_url": "https://api.github.com/users/deathly809/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deathly809/subscriptions", "organizations_url": "https://api.github.com/users/deathly809/orgs", "repos_url": "https://api.github.com/users/deathly809/repos", "events_url": "https://api.github.com/users/deathly809/events{/privacy}", "received_events_url": "https://api.github.com/users/deathly809/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-01T22:38:38Z", "updated_at": "2017-10-02T16:32:56Z", "closed_at": "2017-10-02T16:32:56Z", "author_association": "NONE", "body": "Is it possible to flatten fixed sized arrays to a single array? \r\n\r\n**Serialize**\r\n```\r\nstd::vector<Vec3> points = {{1,2,3} , {4,5,6} };\r\n```\r\n```\r\n{\r\n  \"points\" : [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6\r\n  ]\r\n}\r\n```\r\n\r\n**Deserialize**\r\n```\r\n{\r\n  \"points\" : [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6\r\n  ]\r\n}\r\n```\r\n```\r\nstd::vector<Vec3>  points = { {1,2,3} {4,5,6} };\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/762", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/762/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/762/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/762/events", "html_url": "https://github.com/nlohmann/json/issues/762", "id": 261928291, "node_id": "MDU6SXNzdWUyNjE5MjgyOTE=", "number": 762, "title": "warnings in msvc about mix/max macro while windows.h is used in the project", "user": {"login": "crea7or", "id": 467357, "node_id": "MDQ6VXNlcjQ2NzM1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/467357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crea7or", "html_url": "https://github.com/crea7or", "followers_url": "https://api.github.com/users/crea7or/followers", "following_url": "https://api.github.com/users/crea7or/following{/other_user}", "gists_url": "https://api.github.com/users/crea7or/gists{/gist_id}", "starred_url": "https://api.github.com/users/crea7or/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crea7or/subscriptions", "organizations_url": "https://api.github.com/users/crea7or/orgs", "repos_url": "https://api.github.com/users/crea7or/repos", "events_url": "https://api.github.com/users/crea7or/events{/privacy}", "received_events_url": "https://api.github.com/users/crea7or/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 6, "created_at": "2017-10-01T16:34:28Z", "updated_at": "2017-10-02T19:28:00Z", "closed_at": "2017-10-02T18:38:59Z", "author_association": "NONE", "body": "In the version 2.1.1, msvc generates a few warnings about std::numeric_limits<>::max() (and min) usage. This is because windows.h have their own min/max macros definitions in the global namespace (here is [microsoft kb article about it.](https://support.microsoft.com/en-us/help/143208/prb-using-stl-in-windows-program-can-cause-min-max-conflicts).\r\nwarning exact text: warning C4003: not enough actual parameters for macro 'max'\r\n\r\npossible fixes:\r\n1)\r\n\r\n`#define NOMINMAX`\r\n\r\n2)\r\n\r\n```\r\n#ifdef max\r\n#undef max\r\n#endif\r\n\r\n#ifdef min\r\n#undef min\r\n#endif\r\n```\r\n\r\n3) use additional parenthesis\r\n\r\nstd::numeric_limits<uint8_t>::max() => (std::numeric_limits<uint8_t>::max)()\r\n\r\nFirst two methods can produce problems, due to use original windows min/max in the gdi and more.\r\nthe third method should be tested on the other compilers.\r\n\r\nSource to reproduce the problem:\r\n\r\n```\r\n#include \"stdafx.h\"\r\n#include \"windows.h\"\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main( int argc, char const *argv[] )\r\n{\r\n\tjson j;\r\n\tj[ \"test\" ] = 1;\r\n}\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/761", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/761/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/761/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/761/events", "html_url": "https://github.com/nlohmann/json/issues/761", "id": 261915208, "node_id": "MDU6SXNzdWUyNjE5MTUyMDg=", "number": 761, "title": "std::signbit ambiguous", "user": {"login": "adayoegi", "id": 15476718, "node_id": "MDQ6VXNlcjE1NDc2NzE4", "avatar_url": "https://avatars3.githubusercontent.com/u/15476718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adayoegi", "html_url": "https://github.com/adayoegi", "followers_url": "https://api.github.com/users/adayoegi/followers", "following_url": "https://api.github.com/users/adayoegi/following{/other_user}", "gists_url": "https://api.github.com/users/adayoegi/gists{/gist_id}", "starred_url": "https://api.github.com/users/adayoegi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adayoegi/subscriptions", "organizations_url": "https://api.github.com/users/adayoegi/orgs", "repos_url": "https://api.github.com/users/adayoegi/repos", "events_url": "https://api.github.com/users/adayoegi/events{/privacy}", "received_events_url": "https://api.github.com/users/adayoegi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-10-01T13:12:41Z", "updated_at": "2017-10-02T03:19:59Z", "closed_at": "2017-10-02T03:19:58Z", "author_association": "NONE", "body": "I just cloned the latest files and only copy json.hpp to my project, on Win10 with vs2015.\r\n\r\nWhile compilation, the error message C2668 states that signbit is ambiguous on line 6663,\r\n`const auto is_negative = std::signbit(x);`\r\nit seems signbit is from corecrt_math.h with 3 overloads whose inputs are float, double, long double.\r\nSince line 6663 is in dump_integer(), I guess the input x is an int so the compiler is not sure which type to convert.\r\n\r\nDoes anyone ever encountered C2668 ambiguous call to overloaded function \"signbit\" ?\r\nHow do you guys solve this?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/760", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/760/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/760/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/760/events", "html_url": "https://github.com/nlohmann/json/issues/760", "id": 261884485, "node_id": "MDU6SXNzdWUyNjE4ODQ0ODU=", "number": 760, "title": "How to use value for std::experimental::optional type?", "user": {"login": "dianambb", "id": 20344299, "node_id": "MDQ6VXNlcjIwMzQ0Mjk5", "avatar_url": "https://avatars2.githubusercontent.com/u/20344299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dianambb", "html_url": "https://github.com/dianambb", "followers_url": "https://api.github.com/users/dianambb/followers", "following_url": "https://api.github.com/users/dianambb/following{/other_user}", "gists_url": "https://api.github.com/users/dianambb/gists{/gist_id}", "starred_url": "https://api.github.com/users/dianambb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dianambb/subscriptions", "organizations_url": "https://api.github.com/users/dianambb/orgs", "repos_url": "https://api.github.com/users/dianambb/repos", "events_url": "https://api.github.com/users/dianambb/events{/privacy}", "received_events_url": "https://api.github.com/users/dianambb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-01T01:31:24Z", "updated_at": "2017-10-05T17:53:16Z", "closed_at": "2017-10-05T17:53:16Z", "author_association": "NONE", "body": "I am trying to parse the json value for a field if it exists and set it to std::experimental::nullopt if it does not.\r\n\r\n```cpp\r\n#include \"json.hpp\"\r\n#include <experimental/optional>\r\n\r\nnamespace nlohmann {\r\n    template <typename T>\r\n    struct adl_serializer<std::experimental::optional<T>> {\r\n        static void to_json(json& j, const std::experimental::optional<T>& opt) {\r\n            if (opt == std::experimental::nullopt) {\r\n                j = nullptr;\r\n            } else {\r\n                j = *opt;\r\n            }\r\n        }\r\n        \r\n        static void from_json(const json& j, std::experimental::optional<T>& opt) {\r\n            if (j.is_null()) {\r\n                opt = std::experimental::nullopt;\r\n            } else {\r\n                opt = j.get<T>();\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nnamespace my_project {\r\nstruct Person {\r\n    std::string id;\r\n    std::string name;\r\n    std::experimental::optional<std::string> company;\r\n};\r\n\r\n    void to_json(json& j, const Person& p) {\r\n        j = json {\r\n            {\"id\", p.id},\r\n            {\"name\", p.name},\r\n            {\"company\", p.company}\r\n        };\r\n    }\r\n    \r\n    void from_json(const json& j, Person& p) {\r\n        p.id = j.at(\"id\").get<std::string>();\r\n        p.name = j.at(\"name\").get<std::string>();\r\n\r\n        // This works\r\n\r\n        try {\r\n            p.company = j.at(\"company\").get<std::experimental::optional<std::string>>();\r\n        } catch(std::exception) {\r\n            p.company = std::experimental::nullopt;\r\n        }\r\n\r\n        // This does not work, but it would be nice to have it instead if using try/catch for multiple fields.\r\n\r\n        p.company = j.value(\"company\", std::experimental::nullopt);\r\n    }\r\n}\r\n\r\n\r\n```"}]