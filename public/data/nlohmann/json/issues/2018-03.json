[{"url": "https://api.github.com/repos/nlohmann/json/issues/1032", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1032/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1032/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1032/events", "html_url": "https://github.com/nlohmann/json/issues/1032", "id": 310270110, "node_id": "MDU6SXNzdWUzMTAyNzAxMTA=", "number": 1032, "title": "Some testcases fail and one never finishes", "user": {"login": "yurivict", "id": 271906, "node_id": "MDQ6VXNlcjI3MTkwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/271906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurivict", "html_url": "https://github.com/yurivict", "followers_url": "https://api.github.com/users/yurivict/followers", "following_url": "https://api.github.com/users/yurivict/following{/other_user}", "gists_url": "https://api.github.com/users/yurivict/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurivict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurivict/subscriptions", "organizations_url": "https://api.github.com/users/yurivict/orgs", "repos_url": "https://api.github.com/users/yurivict/repos", "events_url": "https://api.github.com/users/yurivict/events{/privacy}", "received_events_url": "https://api.github.com/users/yurivict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-03-31T20:34:04Z", "updated_at": "2018-07-29T08:52:27Z", "closed_at": "2018-04-05T15:50:25Z", "author_association": "NONE", "body": "```\r\n      Start 10: test-cbor_all\r\n10/78 Test #10: test-cbor_all .......................***Exception: Child aborted  9.98 sec\r\n      Start 56: test-msgpack_all\r\n56/78 Test #56: test-msgpack_all ....................***Exception: Child aborted  9.99 sec\r\n      Start 74: test-ubjson_all\r\n74/78 Test #74: test-ubjson_all .....................***Exception: Child aborted  2.96 sec\r\n      Start 78: test-unicode_all\r\n/// {never finishes}\r\n```\r\n\r\nOS: FreeBSD-11.1 amd64\r\nVersion 3.1.2 built from port, while trying to update it."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1031", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1031/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1031/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1031/events", "html_url": "https://github.com/nlohmann/json/issues/1031", "id": 309827558, "node_id": "MDU6SXNzdWUzMDk4Mjc1NTg=", "number": 1031, "title": "Can this class work with wchar_t / std::wstring?", "user": {"login": "htonus", "id": 805160, "node_id": "MDQ6VXNlcjgwNTE2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/805160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/htonus", "html_url": "https://github.com/htonus", "followers_url": "https://api.github.com/users/htonus/followers", "following_url": "https://api.github.com/users/htonus/following{/other_user}", "gists_url": "https://api.github.com/users/htonus/gists{/gist_id}", "starred_url": "https://api.github.com/users/htonus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/htonus/subscriptions", "organizations_url": "https://api.github.com/users/htonus/orgs", "repos_url": "https://api.github.com/users/htonus/repos", "events_url": "https://api.github.com/users/htonus/events{/privacy}", "received_events_url": "https://api.github.com/users/htonus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 17, "created_at": "2018-03-29T16:47:58Z", "updated_at": "2018-04-29T15:30:31Z", "closed_at": "2018-04-29T15:30:30Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nFailed to parse wchar_t string\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\njson::parse(wstring) failed\r\n- What is the expected behavior?\r\nthe string was parsed\r\n- And what is the actual behavior instead?\r\nerror\r\n- Which compiler and operating system are you using? Is it a [supported compiler]\r\nVS 2017 Community edition\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nTook from developer branch\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1030", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1030/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1030/events", "html_url": "https://github.com/nlohmann/json/issues/1030", "id": 309765443, "node_id": "MDU6SXNzdWUzMDk3NjU0NDM=", "number": 1030, "title": "Makefile: Valgrind flags have no effect", "user": {"login": "tsemaylo", "id": 6775363, "node_id": "MDQ6VXNlcjY3NzUzNjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6775363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsemaylo", "html_url": "https://github.com/tsemaylo", "followers_url": "https://api.github.com/users/tsemaylo/followers", "following_url": "https://api.github.com/users/tsemaylo/following{/other_user}", "gists_url": "https://api.github.com/users/tsemaylo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsemaylo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsemaylo/subscriptions", "organizations_url": "https://api.github.com/users/tsemaylo/orgs", "repos_url": "https://api.github.com/users/tsemaylo/repos", "events_url": "https://api.github.com/users/tsemaylo/events{/privacy}", "received_events_url": "https://api.github.com/users/tsemaylo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-03-29T13:58:10Z", "updated_at": "2018-03-29T16:45:11Z", "closed_at": "2018-03-29T16:45:10Z", "author_association": "NONE", "body": "There is the following Valgrind configuration in CMake file from test subdirectory (test/CMakeLists.txt).\r\nAnd it looks like there is a typo.\r\n\r\n```cmake\r\nif(JSON_Valgrind)\r\n    find_program(CMAKE_MEMORYCHECK_COMMAND valgrind)\r\n    message(STATUS \"Executing test suite with Valgrind (${CMAKE_MEMORYCHECK_COMMAND})\")\r\n    set(MEMORYCHECK_COMMAND_OPTIONS \"--error-exitcode=1 --leak-check=full\")\r\n    set(memcheck_command \"${CMAKE_MEMORYCHECK_COMMAND} ${CMAKE_MEMORYCHECK_COMMAND_OPTIONS}\")\r\n    separate_arguments(memcheck_command)\r\nendif()\r\n```\r\n\r\nVariable `CMAKE_MEMORYCHECK_COMMAND_OPTIONS` is not initialized instead of that we have `set(MEMORYCHECK_COMMAND_OPTIONS, ...)`. Therefore automated execution of tests will not report any memory check problem. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1029", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1029/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1029/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1029/events", "html_url": "https://github.com/nlohmann/json/issues/1029", "id": 309633320, "node_id": "MDU6SXNzdWUzMDk2MzMzMjA=", "number": 1029, "title": "\u300c==\u300d Should be \u300c>\u300d", "user": {"login": "tnie", "id": 5952845, "node_id": "MDQ6VXNlcjU5NTI4NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5952845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnie", "html_url": "https://github.com/tnie", "followers_url": "https://api.github.com/users/tnie/followers", "following_url": "https://api.github.com/users/tnie/following{/other_user}", "gists_url": "https://api.github.com/users/tnie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnie/subscriptions", "organizations_url": "https://api.github.com/users/tnie/orgs", "repos_url": "https://api.github.com/users/tnie/repos", "events_url": "https://api.github.com/users/tnie/events{/privacy}", "received_events_url": "https://api.github.com/users/tnie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-03-29T06:23:43Z", "updated_at": "2018-03-29T16:41:00Z", "closed_at": "2018-03-29T16:41:00Z", "author_association": "NONE", "body": "https://github.com/nlohmann/json/blob/develop/doc/examples/operator__greater.cpp\r\n\r\n```cpp\r\n    std::cout << array_1 << \" == \" << array_2 << \" \" << (array_1 > array_2) << '\\n';\r\n    std::cout << object_1 << \" == \" << object_2 << \" \" << (object_1 > object_2) << '\\n';\r\n    std::cout << number_1 << \" == \" << number_2 << \" \" << (number_1 > number_2) << '\\n';\r\n    std::cout << string_1 << \" == \" << string_2 << \" \" << (string_1 > string_2) << '\\n';\r\n\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1027", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1027/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1027/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1027/events", "html_url": "https://github.com/nlohmann/json/issues/1027", "id": 309074382, "node_id": "MDU6SXNzdWUzMDkwNzQzODI=", "number": 1027, "title": "HOCON reader?", "user": {"login": "abrownsword", "id": 9805159, "node_id": "MDQ6VXNlcjk4MDUxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9805159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abrownsword", "html_url": "https://github.com/abrownsword", "followers_url": "https://api.github.com/users/abrownsword/followers", "following_url": "https://api.github.com/users/abrownsword/following{/other_user}", "gists_url": "https://api.github.com/users/abrownsword/gists{/gist_id}", "starred_url": "https://api.github.com/users/abrownsword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abrownsword/subscriptions", "organizations_url": "https://api.github.com/users/abrownsword/orgs", "repos_url": "https://api.github.com/users/abrownsword/repos", "events_url": "https://api.github.com/users/abrownsword/events{/privacy}", "received_events_url": "https://api.github.com/users/abrownsword/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-03-27T18:02:58Z", "updated_at": "2018-04-02T19:55:48Z", "closed_at": "2018-04-02T19:55:48Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nSince your JSON C++ API is mature and so much nicer than cpp-hocon's (not to mention WAY fewer dependencies), it would be really nice if this project were able to read HOCON files.  I would imagine the include mechanism would be the trickiest part, whereas having the parser skip comments and cope with the format's extensions shouldn't be a big deal.  Writing would be substantially more complex (due to the need to support adding includes, comments, etc) and is substantially less interesting since HOCON's primary goal seems to be to make config files more *human* writeable.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1025", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1025/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1025/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1025/events", "html_url": "https://github.com/nlohmann/json/issues/1025", "id": 308904263, "node_id": "MDU6SXNzdWUzMDg5MDQyNjM=", "number": 1025, "title": "add json string in previous string??", "user": {"login": "Mamlesh", "id": 37332116, "node_id": "MDQ6VXNlcjM3MzMyMTE2", "avatar_url": "https://avatars1.githubusercontent.com/u/37332116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mamlesh", "html_url": "https://github.com/Mamlesh", "followers_url": "https://api.github.com/users/Mamlesh/followers", "following_url": "https://api.github.com/users/Mamlesh/following{/other_user}", "gists_url": "https://api.github.com/users/Mamlesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mamlesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mamlesh/subscriptions", "organizations_url": "https://api.github.com/users/Mamlesh/orgs", "repos_url": "https://api.github.com/users/Mamlesh/repos", "events_url": "https://api.github.com/users/Mamlesh/events{/privacy}", "received_events_url": "https://api.github.com/users/Mamlesh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-27T10:08:06Z", "updated_at": "2018-04-02T19:56:03Z", "closed_at": "2018-04-02T19:56:03Z", "author_association": "NONE", "body": "1st string..\r\n\r\n{ { \"Layer\",  },\r\n{ \"Data\",{\r\n{ { \"Type\", },{ \"Count\", },\r\n{ \"Point\",\r\n{\r\n\t\t\t\r\n}\r\n}\r\n}\r\n} },\r\n};\r\n\r\n2nd string..\r\n\r\n{ \"Point1\",\r\n{\r\n{ \"X\", },\r\n{ \"Y\", },\r\n{ \"Z\", }\r\n} },\r\n\r\n\r\nhow to add 2nd string into \"Point\" section of 1st string???"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1023", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1023/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1023/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1023/events", "html_url": "https://github.com/nlohmann/json/issues/1023", "id": 308085058, "node_id": "MDU6SXNzdWUzMDgwODUwNTg=", "number": 1023, "title": "RFC: fluent parsing interface", "user": {"login": "markand", "id": 11919008, "node_id": "MDQ6VXNlcjExOTE5MDA4", "avatar_url": "https://avatars0.githubusercontent.com/u/11919008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markand", "html_url": "https://github.com/markand", "followers_url": "https://api.github.com/users/markand/followers", "following_url": "https://api.github.com/users/markand/following{/other_user}", "gists_url": "https://api.github.com/users/markand/gists{/gist_id}", "starred_url": "https://api.github.com/users/markand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markand/subscriptions", "organizations_url": "https://api.github.com/users/markand/orgs", "repos_url": "https://api.github.com/users/markand/repos", "events_url": "https://api.github.com/users/markand/events{/privacy}", "received_events_url": "https://api.github.com/users/markand/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-23T15:55:18Z", "updated_at": "2018-04-05T15:12:39Z", "closed_at": "2018-04-05T15:12:39Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nI'm searching a convenient way for destructuring data where I can have the following requirements:\r\n\r\n  - I do not need intermediate value, result should be returned in any case\r\n  - If I require a value from a JSON object and...\r\n    - ... value is not defined: I throw a custom exception\r\n    - ... value is not the good type: I throw an exception\r\n  - If I search an optional value and...\r\n    - ... value is not defined: I return a default value given\r\n    - ... value is not the good type: I throw an exception\r\n\r\nFinal code should look like this:\r\n\r\n```cpp\r\nconst nlohmann::json json{\r\n    { \"hostname\", \"localhost\" }\r\n};\r\n\r\nconst parser ps(json);\r\n\r\n// s is a object I want to convert from JSON.\r\nserver s;\r\ns.set_host(ps.get<std::string>(\"hostname\")\r\n             .error<std::invalid_argument>(\"invalid hostname\"));\r\ns.set_port(ps.get<std::string>(\"port\")\r\n             .optional(\"irc\")\r\n             .error<std::runtime_error>(\"invalid port number\"));\r\n```\r\n\r\nIn this case, I require **hostname** property, if it's missing `std::invalid_argument(\"invalid hostname\")` will be thrown. For **port** property, if the value is not defined, I return **irc** otherwise if it's defined in the wrong type I throw `std::invalid_argument(\"invalid port number\")`.\r\n\r\nThe code is not complete yet, but you can see a simple POC in this gist:\r\n\r\nhttps://gist.github.com/markand/45c9f6a3f9239802850badd8869117e3\r\n\r\nWhat are your thoughts? How do you usually deserialize unverified input?\r\n    \r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1022", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1022/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1022/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1022/events", "html_url": "https://github.com/nlohmann/json/issues/1022", "id": 307526274, "node_id": "MDU6SXNzdWUzMDc1MjYyNzQ=", "number": 1022, "title": "Does it support chinese character?", "user": {"login": "JueLance", "id": 5292953, "node_id": "MDQ6VXNlcjUyOTI5NTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5292953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JueLance", "html_url": "https://github.com/JueLance", "followers_url": "https://api.github.com/users/JueLance/followers", "following_url": "https://api.github.com/users/JueLance/following{/other_user}", "gists_url": "https://api.github.com/users/JueLance/gists{/gist_id}", "starred_url": "https://api.github.com/users/JueLance/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JueLance/subscriptions", "organizations_url": "https://api.github.com/users/JueLance/orgs", "repos_url": "https://api.github.com/users/JueLance/repos", "events_url": "https://api.github.com/users/JueLance/events{/privacy}", "received_events_url": "https://api.github.com/users/JueLance/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-22T06:55:52Z", "updated_at": "2018-03-27T06:31:02Z", "closed_at": "2018-03-27T06:29:39Z", "author_association": "NONE", "body": "I try to input some chinese characters, the application is crashed. The code as following below:\r\n\r\njson j;\r\n\r\nj[\"chinese\"] = \"\u4e2d\u6587\";\r\n    \r\nstring s = j.dump();\r\n\r\ncout << s.c_str() << endl;\r\n\r\nCan you tell me how to make it works?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1021", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1021/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1021/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1021/events", "html_url": "https://github.com/nlohmann/json/issues/1021", "id": 307462288, "node_id": "MDU6SXNzdWUzMDc0NjIyODg=", "number": 1021, "title": "to/from_msgpack only works with standard typization", "user": {"login": "phyz777", "id": 19569239, "node_id": "MDQ6VXNlcjE5NTY5MjM5", "avatar_url": "https://avatars1.githubusercontent.com/u/19569239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phyz777", "html_url": "https://github.com/phyz777", "followers_url": "https://api.github.com/users/phyz777/followers", "following_url": "https://api.github.com/users/phyz777/following{/other_user}", "gists_url": "https://api.github.com/users/phyz777/gists{/gist_id}", "starred_url": "https://api.github.com/users/phyz777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phyz777/subscriptions", "organizations_url": "https://api.github.com/users/phyz777/orgs", "repos_url": "https://api.github.com/users/phyz777/repos", "events_url": "https://api.github.com/users/phyz777/events{/privacy}", "received_events_url": "https://api.github.com/users/phyz777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2018-03-22T00:15:47Z", "updated_at": "2018-04-08T07:29:29Z", "closed_at": "2018-04-08T07:29:29Z", "author_association": "NONE", "body": "The to/from_msgpack functions only work for standard typization of nlohmann::basic_json. \r\n\r\nUsing nlohmann::basic_json<std::map, std::vector, std::string, bool, std::int32_t, std::uint32_t, float> produces the following error: \r\n\r\nparse error at 1472: expected a MessagePack string; last byte: 0x68\r\n\r\nThe error occurs when I put an object into a msgpack, send it over the network, then reconstruct the object using from_msgpack. When I use nlohmann::json instead, everything works fine. \r\n\r\nSystem is linux, compiler is g++, version 7.2.1, nlohmann::json is version 3.1.2. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1020", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1020/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1020/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1020/events", "html_url": "https://github.com/nlohmann/json/issues/1020", "id": 307404288, "node_id": "MDU6SXNzdWUzMDc0MDQyODg=", "number": 1020, "title": "Build failure using latest clang and GCC compilers", "user": {"login": "xvitaly", "id": 966711, "node_id": "MDQ6VXNlcjk2NjcxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/966711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xvitaly", "html_url": "https://github.com/xvitaly", "followers_url": "https://api.github.com/users/xvitaly/followers", "following_url": "https://api.github.com/users/xvitaly/following{/other_user}", "gists_url": "https://api.github.com/users/xvitaly/gists{/gist_id}", "starred_url": "https://api.github.com/users/xvitaly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xvitaly/subscriptions", "organizations_url": "https://api.github.com/users/xvitaly/orgs", "repos_url": "https://api.github.com/users/xvitaly/repos", "events_url": "https://api.github.com/users/xvitaly/events{/privacy}", "received_events_url": "https://api.github.com/users/xvitaly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-03-21T20:23:00Z", "updated_at": "2018-03-27T19:54:19Z", "closed_at": "2018-03-27T19:54:19Z", "author_association": "NONE", "body": "Version:\r\n```\r\n-- The C compiler identification is Clang 6.0.0\r\n-- The CXX compiler identification is Clang 6.0.0\r\n-- Check for working C compiler: /usr/bin/clang\r\n-- Check for working C compiler: /usr/bin/clang -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/bin/clang++\r\n-- Check for working CXX compiler: /usr/bin/clang++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n```\r\n\r\nTrying to build latest commit of [matrix-structs](https://github.com/mujx/matrix-structs), but got this error:\r\n```c++\r\n[  2%] Building CXX object CMakeFiles/matrix_structs.dir/src/events.cpp.o\r\nclang-6.0: warning: argument unused during compilation: '-specs=/usr/lib/rpm/redhat/redhat-hardened-cc1' [-Wunused-command-line-argument]\r\nclang-6.0: warning: argument unused during compilation: '-specs=/usr/lib/rpm/redhat/redhat-annobin-cc1' [-Wunused-command-line-argument]\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:40:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/functional:49:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:545:9: error: redefinition of '__not_overloaded<_Tp, _Up>'\r\n        struct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:531:9: note: previous definition is here\r\n        struct __not_overloaded<_Tp, _Up, __void_t<\r\n               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:608:9: error: redefinition of '__not_overloaded<_Tp, _Up>'\r\n        struct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:594:9: note: previous definition is here\r\n        struct __not_overloaded<_Tp, _Up, __void_t<\r\n               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:671:9: error: redefinition of '__not_overloaded<_Tp, _Up>'\r\n        struct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:657:9: note: previous definition is here\r\n        struct __not_overloaded<_Tp, _Up, __void_t<\r\n               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:734:9: error: redefinition of '__not_overloaded<_Tp, _Up>'\r\n        struct __not_overloaded<_Tp, _Up> : __not_overloaded2<_Tp, _Up> { };\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:720:9: note: previous definition is here\r\n        struct __not_overloaded<_Tp, _Up, __void_t<\r\n               ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:36:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/algorithm:60:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/utility:70:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_pair.h:59:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/move.h:55:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/type_traits:149:26: error: implicit instantiation of undefined template 'std::less<void>::__not_overloaded<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, void>'\r\n    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type\r\n                         ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:564:4: note: in instantiation of template class 'std::__and_<std::less<void>::__not_overloaded<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, void>, std::is_convertible<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const volatile void *>, std::is_convertible<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const volatile void *> >' requested here\r\n                        __ptr_cmp<_Tp, _Up>{});\r\n                        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:2054:13: note: in instantiation of function template specialization 'std::less<void>::operator()<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &>' requested here\r\n          __comp = _M_impl._M_key_compare(__k, _S_key(__x));\r\n                   ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:2372:19: note: in instantiation of member function 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_get_insert_unique_pos' requested here\r\n            auto __res = _M_get_insert_unique_pos(_S_key(__z));\r\n                         ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:575:16: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_emplace_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >' requested here\r\n        { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }\r\n                      ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:3348:48: note: in instantiation of function template specialization 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::emplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >' requested here\r\n                        result.m_value.object->emplace(std::move(key), std::move(value));\r\n                                               ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:3205:9: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >::parse_internal' requested here\r\n        parse_internal(true, result);\r\n        ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:15692:74: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >::parse' requested here\r\n        parser(detail::input_adapter(first, last), cb, allow_exceptions).parse(true, result);\r\n                                                                         ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:17254:28: note: in instantiation of function template specialization 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::parse<const char *, 0>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:590:9: note: template is declared here\r\n        struct __not_overloaded;\r\n               ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:53:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/map:60:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:2065:11: error: no matching function for call to object of type 'std::less<void>'\r\n      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))\r\n          ^~~~~~~~~~~~~~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:2372:19: note: in instantiation of member function 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_get_insert_unique_pos' requested here\r\n            auto __res = _M_get_insert_unique_pos(_S_key(__z));\r\n                         ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:575:16: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_emplace_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >' requested here\r\n        { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }\r\n                      ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:3348:48: note: in instantiation of function template specialization 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::emplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >' requested here\r\n                        result.m_value.object->emplace(std::move(key), std::move(value));\r\n                                               ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:3205:9: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >::parse_internal' requested here\r\n        parse_internal(true, result);\r\n        ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:15692:74: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >::parse' requested here\r\n        parser(detail::input_adapter(first, last), cb, allow_exceptions).parse(true, result);\r\n                                                                         ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:17254:28: note: in instantiation of function template specialization 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::parse<const char *, 0>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:559:2: note: candidate template ignored: substitution failure [with _Tp = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, _Up = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &]\r\n        operator()(_Tp&& __t, _Up&& __u) const\r\n        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:569:2: note: candidate template ignored: could not match '_Tp *' against 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'\r\n        operator()(_Tp* __t, _Up* __u) const noexcept\r\n        ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:53:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/map:60:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:2317:11: error: no matching function for call to object of type 'std::less<void>'\r\n                            || _M_impl._M_key_compare(_S_key(__z),\r\n                               ^~~~~~~~~~~~~~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:2374:20: note: in instantiation of member function 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_insert_node' requested here\r\n              return _Res(_M_insert_node(__res.first, __res.second, __z), true);\r\n                          ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:575:16: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_emplace_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >' requested here\r\n        { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }\r\n                      ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:3348:48: note: in instantiation of function template specialization 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::emplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >' requested here\r\n                        result.m_value.object->emplace(std::move(key), std::move(value));\r\n                                               ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:3205:9: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >::parse_internal' requested here\r\n        parse_internal(true, result);\r\n        ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:15692:74: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >::parse' requested here\r\n        parser(detail::input_adapter(first, last), cb, allow_exceptions).parse(true, result);\r\n                                                                         ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:17254:28: note: in instantiation of function template specialization 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::parse<const char *, 0>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:559:2: note: candidate template ignored: substitution failure [with _Tp = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, _Up = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &]\r\n        operator()(_Tp&& __t, _Up&& __u) const\r\n        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:569:2: note: candidate template ignored: could not match '_Tp *' against 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'\r\n        operator()(_Tp* __t, _Up* __u) const noexcept\r\n        ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:36:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/algorithm:60:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/utility:70:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_pair.h:59:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/move.h:55:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/type_traits:149:26: error: implicit instantiation of undefined template 'std::less<void>::__not_overloaded<char const (&)[5], const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, void>'\r\n    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type\r\n                         ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:564:4: note: in instantiation of template class 'std::__and_<std::less<void>::__not_overloaded<char const (&)[5], const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, void>, std::is_convertible<char const (&)[5], const volatile void *>, std::is_convertible<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const volatile void *> >' requested here\r\n                        __ptr_cmp<_Tp, _Up>{});\r\n                        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1241:24: note: in instantiation of function template specialization 'std::less<void>::operator()<char const (&)[5], const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &>' requested here\r\n          if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))\r\n                              ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1231:25: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [5], void>' requested here\r\n          return __const_this->_M_find_tr(__k)._M_const_cast();\r\n                               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:1176:16: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [5], void>' requested here\r\n        { return _M_t._M_find_tr(__x); }\r\n                      ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:13498:59: note: in instantiation of function template specialization 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::find<char [5]>' requested here\r\n            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));\r\n                                                          ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:85:17: note: in instantiation of function template specialization 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::find<char const (&)[5]>' requested here\r\n        if (obj.find(\"type\") != obj.end())\r\n                ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:590:9: note: template is declared here\r\n        struct __not_overloaded;\r\n               ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:36:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/algorithm:60:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/utility:70:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_pair.h:59:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/move.h:55:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/type_traits:149:26: error: implicit instantiation of undefined template 'std::less<void>::__not_overloaded<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, char const (&)[5], void>'\r\n    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type\r\n                         ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:564:4: note: in instantiation of template class 'std::__and_<std::less<void>::__not_overloaded<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, char const (&)[5], void>, std::is_convertible<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const volatile void *>, std::is_convertible<char const (&)[5], const volatile void *> >' requested here\r\n                        __ptr_cmp<_Tp, _Up>{});\r\n                        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1275:11: note: in instantiation of function template specialization 'std::less<void>::operator()<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, char const (&)[5]>' requested here\r\n            if (!_M_impl._M_key_compare(_S_key(__x), __k))\r\n                 ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1240:15: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_lower_bound_tr<char [5], void>' requested here\r\n          auto __j = _M_lower_bound_tr(__k);\r\n                     ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1231:25: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [5], void>' requested here\r\n          return __const_this->_M_find_tr(__k)._M_const_cast();\r\n                               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:1176:16: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [5], void>' requested here\r\n        { return _M_t._M_find_tr(__x); }\r\n                      ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:13498:59: note: in instantiation of function template specialization 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::find<char [5]>' requested here\r\n            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));\r\n                                                          ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:85:17: note: in instantiation of function template specialization 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::find<char const (&)[5]>' requested here\r\n        if (obj.find(\"type\") != obj.end())\r\n                ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:590:9: note: template is declared here\r\n        struct __not_overloaded;\r\n               ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:53:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/map:61:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:538:22: error: no matching function for call to object of type 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::key_compare' (aka 'std::less<void>')\r\n        if (__i == end() || key_comp()(__k, (*__i).first))\r\n                            ^~~~~~~~~~\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:12639:40: note: in instantiation of member function 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::at' requested here\r\n                return m_value.object->at(key);\r\n                                       ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:86:41: note: in instantiation of member function 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::at' requested here\r\n                return getEventType(obj.at(\"type\").get<std::string>());\r\n                                        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:559:2: note: candidate template ignored: substitution failure [with _Tp = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, _Up = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &]\r\n        operator()(_Tp&& __t, _Up&& __u) const\r\n        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:569:2: note: candidate template ignored: could not match '_Tp *' against 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::key_type' (aka 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >')\r\n        operator()(_Tp* __t, _Up* __u) const noexcept\r\n        ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:53:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/map:60:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1888:7: error: no matching function for call to object of type 'std::less<void>'\r\n        if (!_M_impl._M_key_compare(_S_key(__x), __k))\r\n             ^~~~~~~~~~~~~~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1203:16: note: in instantiation of member function 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_lower_bound' requested here\r\n      { return _M_lower_bound(_M_begin(), _M_end(), __k); }\r\n               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:1240:21: note: in instantiation of member function 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::lower_bound' requested here\r\n      { return _M_t.lower_bound(__x); }\r\n                    ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:537:17: note: in instantiation of member function 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::lower_bound' requested here\r\n        iterator __i = lower_bound(__k);\r\n                       ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:12639:40: note: in instantiation of member function 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::at' requested here\r\n                return m_value.object->at(key);\r\n                                       ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:86:41: note: in instantiation of member function 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::at' requested here\r\n                return getEventType(obj.at(\"type\").get<std::string>());\r\n                                        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:559:2: note: candidate template ignored: substitution failure [with _Tp = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, _Up = const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &]\r\n        operator()(_Tp&& __t, _Up&& __u) const\r\n        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:569:2: note: candidate template ignored: could not match '_Tp *' against 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'\r\n        operator()(_Tp* __t, _Up* __u) const noexcept\r\n        ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:36:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/algorithm:60:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/utility:70:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_pair.h:59:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/move.h:55:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/type_traits:149:26: error: implicit instantiation of undefined template 'std::less<void>::__not_overloaded<char const (&)[8], const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, void>'\r\n    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type\r\n                         ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:564:4: note: in instantiation of template class 'std::__and_<std::less<void>::__not_overloaded<char const (&)[8], const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, void>, std::is_convertible<char const (&)[8], const volatile void *>, std::is_convertible<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const volatile void *> >' requested here\r\n                        __ptr_cmp<_Tp, _Up>{});\r\n                        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1241:24: note: in instantiation of function template specialization 'std::less<void>::operator()<char const (&)[8], const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &>' requested here\r\n          if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))\r\n                              ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1231:25: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [8], void>' requested here\r\n          return __const_this->_M_find_tr(__k)._M_const_cast();\r\n                               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:1176:16: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [8], void>' requested here\r\n        { return _M_t._M_find_tr(__x); }\r\n                      ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:13498:59: note: in instantiation of function template specialization 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::find<char [8]>' requested here\r\n            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));\r\n                                                          ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:120:17: note: in instantiation of function template specialization 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::find<char const (&)[8]>' requested here\r\n        if (obj.find(\"msgtype\") == obj.end())\r\n                ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:590:9: note: template is declared here\r\n        struct __not_overloaded;\r\n               ^\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:1:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/include/mtx/events.hpp:3:\r\nIn file included from /builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:36:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/algorithm:60:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/utility:70:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_pair.h:59:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/move.h:55:\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/type_traits:149:26: error: implicit instantiation of undefined template 'std::less<void>::__not_overloaded<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, char const (&)[8], void>'\r\n    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type\r\n                         ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:564:4: note: in instantiation of template class 'std::__and_<std::less<void>::__not_overloaded<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, char const (&)[8], void>, std::is_convertible<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, const volatile void *>, std::is_convertible<char const (&)[8], const volatile void *> >' requested here\r\n                        __ptr_cmp<_Tp, _Up>{});\r\n                        ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1275:11: note: in instantiation of function template specialization 'std::less<void>::operator()<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > &, char const (&)[8]>' requested here\r\n            if (!_M_impl._M_key_compare(_S_key(__x), __k))\r\n                 ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1240:15: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_lower_bound_tr<char [8], void>' requested here\r\n          auto __j = _M_lower_bound_tr(__k);\r\n                     ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_tree.h:1231:25: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [8], void>' requested here\r\n          return __const_this->_M_find_tr(__k)._M_const_cast();\r\n                               ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_map.h:1176:16: note: in instantiation of function template specialization 'std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > >, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::_M_find_tr<char [8], void>' requested here\r\n        { return _M_t._M_find_tr(__x); }\r\n                      ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/deps/json.hpp:13498:59: note: in instantiation of function template specialization 'std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::less<void>, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >::find<char [8]>' requested here\r\n            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));\r\n                                                          ^\r\n/builddir/build/BUILD/nheko-480de2d30bcd82ed3beeab5fad9b2a55d34b4990/.third-party/matrix_structs/src/events.cpp:120:17: note: in instantiation of function template specialization 'nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer>::find<char const (&)[8]>' requested here\r\n        if (obj.find(\"msgtype\") == obj.end())\r\n                ^\r\n/usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_function.h:590:9: note: template is declared here\r\n        struct __not_overloaded;\r\n               ^\r\n13 errors generated.\r\ngmake[2]: *** [CMakeFiles/matrix_structs.dir/build.make:63: CMakeFiles/matrix_structs.dir/src/events.cpp.o] Error 1\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1019", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1019/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1019/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1019/events", "html_url": "https://github.com/nlohmann/json/issues/1019", "id": 306986791, "node_id": "MDU6SXNzdWUzMDY5ODY3OTE=", "number": 1019, "title": "can two json objects be concatenated?", "user": {"login": "CheyenneForbes", "id": 8251976, "node_id": "MDQ6VXNlcjgyNTE5NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8251976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CheyenneForbes", "html_url": "https://github.com/CheyenneForbes", "followers_url": "https://api.github.com/users/CheyenneForbes/followers", "following_url": "https://api.github.com/users/CheyenneForbes/following{/other_user}", "gists_url": "https://api.github.com/users/CheyenneForbes/gists{/gist_id}", "starred_url": "https://api.github.com/users/CheyenneForbes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CheyenneForbes/subscriptions", "organizations_url": "https://api.github.com/users/CheyenneForbes/orgs", "repos_url": "https://api.github.com/users/CheyenneForbes/repos", "events_url": "https://api.github.com/users/CheyenneForbes/events{/privacy}", "received_events_url": "https://api.github.com/users/CheyenneForbes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-20T18:27:53Z", "updated_at": "2018-03-27T06:15:10Z", "closed_at": "2018-03-27T06:15:10Z", "author_association": "NONE", "body": "for example:\r\n\r\n```\r\njson j1 = {\r\n {obj1, value1},\r\n {obj2, value2}\r\n};\r\njson j2 = {\r\n {obj3, value3},\r\n {obj4, value4}\r\n};\r\n\r\njson j3 = j1 + j2;\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1018", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1018/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1018/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1018/events", "html_url": "https://github.com/nlohmann/json/issues/1018", "id": 306802507, "node_id": "MDU6SXNzdWUzMDY4MDI1MDc=", "number": 1018, "title": "Erase by integer index", "user": {"login": "zkelo", "id": 13527447, "node_id": "MDQ6VXNlcjEzNTI3NDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/13527447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkelo", "html_url": "https://github.com/zkelo", "followers_url": "https://api.github.com/users/zkelo/followers", "following_url": "https://api.github.com/users/zkelo/following{/other_user}", "gists_url": "https://api.github.com/users/zkelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkelo/subscriptions", "organizations_url": "https://api.github.com/users/zkelo/orgs", "repos_url": "https://api.github.com/users/zkelo/repos", "events_url": "https://api.github.com/users/zkelo/events{/privacy}", "received_events_url": "https://api.github.com/users/zkelo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-20T10:15:56Z", "updated_at": "2018-03-20T16:25:19Z", "closed_at": "2018-03-20T16:25:19Z", "author_association": "NONE", "body": "I have this object.\r\n\r\n`json obj = {\r\n     {\"Foo\", 1},\r\n     {\"Bar\", 2}\r\n};`\r\n\r\nIn some cases I have only integer index of `Foo` (i.e. `0`) or `Bar` (i.e. `1`), not a key like \"Foo\" or \"Bar\". And I'm need to `erase` \"Bar\" using only integer index. If I'm trying to erase \"Bar\" with using integer index, I'm getting an exception.\r\n\r\nSo, how I can (if it's possible) erase \"Bar\" using integer index? Or I need to use cycle like this `for (auto it : obj)` to find associative key by integer in first?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1017", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1017/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1017/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1017/events", "html_url": "https://github.com/nlohmann/json/issues/1017", "id": 306779553, "node_id": "MDU6SXNzdWUzMDY3Nzk1NTM=", "number": 1017, "title": "Function find overload taking a json_pointer", "user": {"login": "markand", "id": 11919008, "node_id": "MDQ6VXNlcjExOTE5MDA4", "avatar_url": "https://avatars0.githubusercontent.com/u/11919008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markand", "html_url": "https://github.com/markand", "followers_url": "https://api.github.com/users/markand/followers", "following_url": "https://api.github.com/users/markand/following{/other_user}", "gists_url": "https://api.github.com/users/markand/gists{/gist_id}", "starred_url": "https://api.github.com/users/markand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markand/subscriptions", "organizations_url": "https://api.github.com/users/markand/orgs", "repos_url": "https://api.github.com/users/markand/repos", "events_url": "https://api.github.com/users/markand/events{/privacy}", "received_events_url": "https://api.github.com/users/markand/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-20T09:05:41Z", "updated_at": "2018-06-14T16:20:04Z", "closed_at": "2018-06-14T16:20:04Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nIt looks like there is no `find` function taking a `json_pointer`. I think it could be handy to have a no-throwing find overload for it so we are able to do:\r\n\r\n```cpp\r\n#include <json.hpp>\r\n\r\nint main()\r\n{\r\n    auto json = nlohmann::json({\r\n        { \"foo\", \"true\" }\r\n    });\r\n    auto it = json.find(\"/foo\"_json_pointer);\r\n\r\n    if (it != json.end())\r\n        std::cout << it->dump(4) << std::endl;\r\n    else\r\n        std::cout << \"not found\" << std::endl;\r\n}\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1016", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1016/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1016/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1016/events", "html_url": "https://github.com/nlohmann/json/issues/1016", "id": 306195644, "node_id": "MDU6SXNzdWUzMDYxOTU2NDQ=", "number": 1016, "title": "I think should implement an parser function", "user": {"login": "mlkt", "id": 10374085, "node_id": "MDQ6VXNlcjEwMzc0MDg1", "avatar_url": "https://avatars2.githubusercontent.com/u/10374085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlkt", "html_url": "https://github.com/mlkt", "followers_url": "https://api.github.com/users/mlkt/followers", "following_url": "https://api.github.com/users/mlkt/following{/other_user}", "gists_url": "https://api.github.com/users/mlkt/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlkt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlkt/subscriptions", "organizations_url": "https://api.github.com/users/mlkt/orgs", "repos_url": "https://api.github.com/users/mlkt/repos", "events_url": "https://api.github.com/users/mlkt/events{/privacy}", "received_events_url": "https://api.github.com/users/mlkt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-17T22:24:34Z", "updated_at": "2018-03-27T19:55:58Z", "closed_at": "2018-03-27T19:55:58Z", "author_association": "NONE", "body": "I see an issue #801 \r\n\r\nI think should implement an parser function, for example:\r\n`char* data = ....; //read from network or other data source;`\r\n`size_t data_len = ....;  //known when read data.`\r\n`json j = parse_json(data, data_len);`\r\n\r\ncall **parse_json()** is zero-copy, no need to convert to std::string.\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1015", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1015/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1015/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1015/events", "html_url": "https://github.com/nlohmann/json/issues/1015", "id": 305677631, "node_id": "MDU6SXNzdWUzMDU2Nzc2MzE=", "number": 1015, "title": "Readme gif", "user": {"login": "Cyberunner23", "id": 746256, "node_id": "MDQ6VXNlcjc0NjI1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/746256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cyberunner23", "html_url": "https://github.com/Cyberunner23", "followers_url": "https://api.github.com/users/Cyberunner23/followers", "following_url": "https://api.github.com/users/Cyberunner23/following{/other_user}", "gists_url": "https://api.github.com/users/Cyberunner23/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cyberunner23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cyberunner23/subscriptions", "organizations_url": "https://api.github.com/users/Cyberunner23/orgs", "repos_url": "https://api.github.com/users/Cyberunner23/repos", "events_url": "https://api.github.com/users/Cyberunner23/events{/privacy}", "received_events_url": "https://api.github.com/users/Cyberunner23/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-15T18:50:47Z", "updated_at": "2018-03-16T14:14:53Z", "closed_at": "2018-03-16T14:14:53Z", "author_association": "NONE", "body": "Not exactly a bug report nor a feature request but an inquiry.\r\n\r\nI am rather curious as to how you made / which tool you used to make that presentation gif.\r\nIt looks really nice to say the least.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1014", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1014/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1014/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1014/events", "html_url": "https://github.com/nlohmann/json/issues/1014", "id": 305449044, "node_id": "MDU6SXNzdWUzMDU0NDkwNDQ=", "number": 1014, "title": "Python bindings", "user": {"login": "mlund", "id": 3248398, "node_id": "MDQ6VXNlcjMyNDgzOTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3248398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlund", "html_url": "https://github.com/mlund", "followers_url": "https://api.github.com/users/mlund/followers", "following_url": "https://api.github.com/users/mlund/following{/other_user}", "gists_url": "https://api.github.com/users/mlund/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlund/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlund/subscriptions", "organizations_url": "https://api.github.com/users/mlund/orgs", "repos_url": "https://api.github.com/users/mlund/repos", "events_url": "https://api.github.com/users/mlund/events{/privacy}", "received_events_url": "https://api.github.com/users/mlund/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-15T08:00:08Z", "updated_at": "2018-03-20T07:07:31Z", "closed_at": "2018-03-20T07:07:26Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nI wonder if you have considered exposing the `json` object to Python in order to convert directly between Python dictionaries and `json`? This would be extremely useful for exposing C++ functions that take `json` obejcts. The type conversion should be possible via the [pybind11](http://pybind11.readthedocs.io/en/stable/) project (for example)."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1013", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1013/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1013/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1013/events", "html_url": "https://github.com/nlohmann/json/issues/1013", "id": 305056387, "node_id": "MDU6SXNzdWUzMDUwNTYzODc=", "number": 1013, "title": "STL containers are always serialized to a nested array like [[1,2,3]]", "user": {"login": "fred777", "id": 5749774, "node_id": "MDQ6VXNlcjU3NDk3NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5749774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fred777", "html_url": "https://github.com/fred777", "followers_url": "https://api.github.com/users/fred777/followers", "following_url": "https://api.github.com/users/fred777/following{/other_user}", "gists_url": "https://api.github.com/users/fred777/gists{/gist_id}", "starred_url": "https://api.github.com/users/fred777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fred777/subscriptions", "organizations_url": "https://api.github.com/users/fred777/orgs", "repos_url": "https://api.github.com/users/fred777/repos", "events_url": "https://api.github.com/users/fred777/events{/privacy}", "received_events_url": "https://api.github.com/users/fred777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-14T08:00:30Z", "updated_at": "2018-03-14T08:18:07Z", "closed_at": "2018-03-14T08:17:23Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\nI'm using the single-header json.hpp (v3.1.1) and I am struggling with serializing stl containers:\r\n```\r\nauto tojson = nlohmann::json{ std::forward_list<double>{1,2,3} };\r\ncout << tojson;\r\n```\r\n**Expected:** [1,2,3]\r\n**Got instead:** [[1,2,3]]\r\n\r\nIt's the same for other STL containers like vector, list, initializer_list, ...\r\n\r\nDid I miss something?\r\n\r\n**Compiler:** Visual C++ 2017 (v15.6.1)\r\n**OS:** Windows 10 x64\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1012", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1012/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1012/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1012/events", "html_url": "https://github.com/nlohmann/json/issues/1012", "id": 304719546, "node_id": "MDU6SXNzdWUzMDQ3MTk1NDY=", "number": 1012, "title": "how to add two json string in single object??", "user": {"login": "Mamlesh", "id": 37332116, "node_id": "MDQ6VXNlcjM3MzMyMTE2", "avatar_url": "https://avatars1.githubusercontent.com/u/37332116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mamlesh", "html_url": "https://github.com/Mamlesh", "followers_url": "https://api.github.com/users/Mamlesh/followers", "following_url": "https://api.github.com/users/Mamlesh/following{/other_user}", "gists_url": "https://api.github.com/users/Mamlesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mamlesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mamlesh/subscriptions", "organizations_url": "https://api.github.com/users/Mamlesh/orgs", "repos_url": "https://api.github.com/users/Mamlesh/repos", "events_url": "https://api.github.com/users/Mamlesh/events{/privacy}", "received_events_url": "https://api.github.com/users/Mamlesh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-13T11:07:30Z", "updated_at": "2018-03-21T19:18:51Z", "closed_at": "2018-03-21T19:18:51Z", "author_association": "NONE", "body": "like..\r\n\r\n```js\r\n{\r\n\t\"WALL\": [\r\n\t\t{\r\n\t\t\t\"Data\": {\r\n\t\t\t\t\"Count\": 2,\r\n\t\t\t\t\"POINT\": {\r\n\t\t\t\t\t\"Point1\": {\r\n\t\t\t\t\t\t\"X\": 1942.6468505859375,\r\n\t\t\t\t\t\t\"Y\": 2344.69677734375,\r\n\t\t\t\t\t\t\"Z\": 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Point2\": {\r\n\t\t\t\t\t\t\"X\": 3313.0263671875,\r\n\t\t\t\t\t\t\"Y\": 2062.294189453125,\r\n\t\t\t\t\t\t\"Z\": 0\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"Type\": \"LINE\"\r\n\t\t\t},\r\n\t\t\t\"Layer\": \"WALL_T\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nand \r\n\r\n```js\r\n{\r\n\t\"Data\": {\r\n\t\t\"Count\": 2,\r\n\t\t\"POINT\": {\r\n\t\t\t\"Point1\": {\r\n\t\t\t\t\"X\": 2015.12353515625,\r\n\t\t\t\t\"Y\": 2028.6619873046875,\r\n\t\t\t\t\"Z\": 0\r\n\t\t\t},\r\n\t\t\t\"Point2\": {\r\n\t\t\t\t\"X\": 2967.66357421875,\r\n\t\t\t\t\"Y\": 1559.193359375,\r\n\t\t\t\t\"Z\": 0\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"Type\": \"LINE\"\r\n\t},\r\n\t\"Layer\": \"WALL_T\"\r\n}\r\n```\r\n\r\ni want to add second string in first \"wall\" array..\r\nresult be like ..\r\n\r\n```js\r\n{\r\n\t\"WALL\": [\r\n\t\t{\r\n\t\t\t\"Data\": {\r\n\t\t\t\t\"Count\": 2,\r\n\t\t\t\t\"POINT\": {\r\n\t\t\t\t\t\"Point1\": {\r\n\t\t\t\t\t\t\"X\": 1942.6468505859375,\r\n\t\t\t\t\t\t\"Y\": 2344.69677734375,\r\n\t\t\t\t\t\t\"Z\": 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Point2\": {\r\n\t\t\t\t\t\t\"X\": 3313.0263671875,\r\n\t\t\t\t\t\t\"Y\": 2062.294189453125,\r\n\t\t\t\t\t\t\"Z\": 0\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"Type\": \"LINE\"\r\n\t\t\t},\r\n\t\t\t\"Layer\": \"WALL_T\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Data\": {\r\n\t\t\t\t\"Count\": 2,\r\n\t\t\t\t\"POINT\": {\r\n\t\t\t\t\t\"Point1\": {\r\n\t\t\t\t\t\t\"X\": 2015.12353515625,\r\n\t\t\t\t\t\t\"Y\": 2028.6619873046875,\r\n\t\t\t\t\t\t\"Z\": 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Point2\": {\r\n\t\t\t\t\t\t\"X\": 2967.66357421875,\r\n\t\t\t\t\t\t\"Y\": 1559.193359375,\r\n\t\t\t\t\t\t\"Z\": 0\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"Type\": \"LINE\"\r\n\t\t\t},\r\n\t\t\t\"Layer\": \"WALL_T\"\r\n\t\t}\r\n\t]\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1011", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1011/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1011/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1011/events", "html_url": "https://github.com/nlohmann/json/issues/1011", "id": 304717290, "node_id": "MDU6SXNzdWUzMDQ3MTcyOTA=", "number": 1011, "title": "how to serialize class Object (convert data in object into json)??", "user": {"login": "Mamlesh", "id": 37332116, "node_id": "MDQ6VXNlcjM3MzMyMTE2", "avatar_url": "https://avatars1.githubusercontent.com/u/37332116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mamlesh", "html_url": "https://github.com/Mamlesh", "followers_url": "https://api.github.com/users/Mamlesh/followers", "following_url": "https://api.github.com/users/Mamlesh/following{/other_user}", "gists_url": "https://api.github.com/users/Mamlesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mamlesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mamlesh/subscriptions", "organizations_url": "https://api.github.com/users/Mamlesh/orgs", "repos_url": "https://api.github.com/users/Mamlesh/repos", "events_url": "https://api.github.com/users/Mamlesh/events{/privacy}", "received_events_url": "https://api.github.com/users/Mamlesh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-13T11:00:07Z", "updated_at": "2018-03-21T19:19:22Z", "closed_at": "2018-03-21T19:19:22Z", "author_association": "NONE", "body": "\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1010", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1010/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1010/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1010/events", "html_url": "https://github.com/nlohmann/json/issues/1010", "id": 304608382, "node_id": "MDU6SXNzdWUzMDQ2MDgzODI=", "number": 1010, "title": "The library doesn't want to insert an unordered_map", "user": {"login": "tristan957", "id": 11936772, "node_id": "MDQ6VXNlcjExOTM2Nzcy", "avatar_url": "https://avatars1.githubusercontent.com/u/11936772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tristan957", "html_url": "https://github.com/tristan957", "followers_url": "https://api.github.com/users/tristan957/followers", "following_url": "https://api.github.com/users/tristan957/following{/other_user}", "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}", "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions", "organizations_url": "https://api.github.com/users/tristan957/orgs", "repos_url": "https://api.github.com/users/tristan957/repos", "events_url": "https://api.github.com/users/tristan957/events{/privacy}", "received_events_url": "https://api.github.com/users/tristan957/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-13T02:44:26Z", "updated_at": "2018-03-13T06:39:07Z", "closed_at": "2018-03-13T06:25:19Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have? I am trying to insert an unordered_map, but it always comes out ordered in the json file.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example? \r\n```\r\nargs = {\"hello\", \"world\"};\r\njson j;\r\n// get info from file\r\nj[\"distributions\"].push_back(std::unordered_map<std::string, std::string>({{\"name\", args[1]}, {\"location\", args[2]}}));\r\n\r\n{\r\n    \"distributions\": [\r\n        {\r\n            \"location\": \"world\",\r\n            \"name\": \"hello\"\r\n        },\r\n        {\r\n            \"location\": \"there\",\r\n            \"name\": \"hi\"\r\n        },\r\n        {\r\n            \"location\": \"partin\",\r\n            \"name\": \"tristan\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n- What is the expected behavior? I want the name key, then the location key.\r\n\r\n- And what is the actual behavior instead? The location key comes before the name key.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)? G++ 7.3 Solus (Linux)\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch? Released (latest stable)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1008", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1008/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1008/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1008/events", "html_url": "https://github.com/nlohmann/json/issues/1008", "id": 304301551, "node_id": "MDU6SXNzdWUzMDQzMDE1NTE=", "number": 1008, "title": "Convert Json to uint8_t", "user": {"login": "qvs5010", "id": 491550, "node_id": "MDQ6VXNlcjQ5MTU1MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/491550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qvs5010", "html_url": "https://github.com/qvs5010", "followers_url": "https://api.github.com/users/qvs5010/followers", "following_url": "https://api.github.com/users/qvs5010/following{/other_user}", "gists_url": "https://api.github.com/users/qvs5010/gists{/gist_id}", "starred_url": "https://api.github.com/users/qvs5010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qvs5010/subscriptions", "organizations_url": "https://api.github.com/users/qvs5010/orgs", "repos_url": "https://api.github.com/users/qvs5010/repos", "events_url": "https://api.github.com/users/qvs5010/events{/privacy}", "received_events_url": "https://api.github.com/users/qvs5010/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-12T09:48:08Z", "updated_at": "2018-03-13T18:11:56Z", "closed_at": "2018-03-13T18:11:56Z", "author_association": "NONE", "body": "Hi \r\nHow can I convert my JSON to a uint8_t?\r\nis this even possible?\r\n\r\nuint8_t data[64] = theJsonData;\r\n\r\n  "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1007", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1007/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1007/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1007/events", "html_url": "https://github.com/nlohmann/json/issues/1007", "id": 304158242, "node_id": "MDU6SXNzdWUzMDQxNTgyNDI=", "number": 1007, "title": "How to compare two JSON objects?", "user": {"login": "zkelo", "id": 13527447, "node_id": "MDQ6VXNlcjEzNTI3NDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/13527447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkelo", "html_url": "https://github.com/zkelo", "followers_url": "https://api.github.com/users/zkelo/followers", "following_url": "https://api.github.com/users/zkelo/following{/other_user}", "gists_url": "https://api.github.com/users/zkelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkelo/subscriptions", "organizations_url": "https://api.github.com/users/zkelo/orgs", "repos_url": "https://api.github.com/users/zkelo/repos", "events_url": "https://api.github.com/users/zkelo/events{/privacy}", "received_events_url": "https://api.github.com/users/zkelo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-11T13:26:04Z", "updated_at": "2018-03-11T16:26:01Z", "closed_at": "2018-03-11T16:24:12Z", "author_association": "NONE", "body": "I have default app settngs in JSON object `DefaultSettings` and I'm parsing current app settings from file `Config.json` (ifstream). How to compare indexes from `Settings` with indexes in `DefaultSettings`? Does library have functions for this? I tried to compare with `iterator_wrapper` but he's deprecated."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1003", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1003/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1003/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1003/events", "html_url": "https://github.com/nlohmann/json/issues/1003", "id": 303984322, "node_id": "MDU6SXNzdWUzMDM5ODQzMjI=", "number": 1003, "title": "Syntax checking", "user": {"login": "zkelo", "id": 13527447, "node_id": "MDQ6VXNlcjEzNTI3NDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/13527447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkelo", "html_url": "https://github.com/zkelo", "followers_url": "https://api.github.com/users/zkelo/followers", "following_url": "https://api.github.com/users/zkelo/following{/other_user}", "gists_url": "https://api.github.com/users/zkelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkelo/subscriptions", "organizations_url": "https://api.github.com/users/zkelo/orgs", "repos_url": "https://api.github.com/users/zkelo/repos", "events_url": "https://api.github.com/users/zkelo/events{/privacy}", "received_events_url": "https://api.github.com/users/zkelo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-03-09T21:22:22Z", "updated_at": "2018-07-27T21:14:07Z", "closed_at": "2018-03-10T17:31:26Z", "author_association": "NONE", "body": "I'm need to read some *.json file, but this file can have invalid json format. How to check for right json format before or while parsing?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1002", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1002/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1002/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1002/events", "html_url": "https://github.com/nlohmann/json/issues/1002", "id": 303787063, "node_id": "MDU6SXNzdWUzMDM3ODcwNjM=", "number": 1002, "title": "more than one operator '=' matches these operands", "user": {"login": "balldrix", "id": 8443064, "node_id": "MDQ6VXNlcjg0NDMwNjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8443064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/balldrix", "html_url": "https://github.com/balldrix", "followers_url": "https://api.github.com/users/balldrix/followers", "following_url": "https://api.github.com/users/balldrix/following{/other_user}", "gists_url": "https://api.github.com/users/balldrix/gists{/gist_id}", "starred_url": "https://api.github.com/users/balldrix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/balldrix/subscriptions", "organizations_url": "https://api.github.com/users/balldrix/orgs", "repos_url": "https://api.github.com/users/balldrix/repos", "events_url": "https://api.github.com/users/balldrix/events{/privacy}", "received_events_url": "https://api.github.com/users/balldrix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-09T10:05:25Z", "updated_at": "2018-03-09T12:42:05Z", "closed_at": "2018-03-09T12:00:03Z", "author_association": "NONE", "body": "I'm copying data into a struct. I get this warning when I copy a std::string.\r\n\r\n```\r\n// read file\r\n\tstd::ifstream file(fileName);\r\n\r\n\t// parse data from file\r\n\tjson data = json::parse(file);\r\n\tjson animation = data[\"animation\"];\r\n\r\n\t// iterate through data and save in animation list\r\n\tfor(json::iterator it = animation.begin(); it != animation.end(); ++it)\r\n\t{\r\n\t\t// json of current it in array\r\n\t\tjson j = it.value();\r\n\r\n\t\t// data struct\r\n\t\tAnimation animationType;\r\n\t\tanimationType.name = j[\"name\"];\r\n\t\tanimationType.spriteSheetIndex = j[\"index\"];\r\n\t\tanimationType.frameCount = j[\"frameCount\"];\r\n\t\tanimationType.framesPerSecond = j[\"framesPerSecond\"];\r\n\t\tanimationType.loop = j[\"loop\"];\r\n\r\n\t\t// push data to list\r\n\t\tm_animationList.push_back(animationType);\r\n\t}\r\n```\r\n\r\nThe code works as intended but would you know why this message appears? Is there a better way for me to take the json file and put the data in a vector list?\r\n\r\nI'm using Windows 7 & Windows 10, Visual Studio 2017 v15.5.6.\r\n\r\nUsing the most recent release version of nlohmann/json.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1000", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1000/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1000/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1000/events", "html_url": "https://github.com/nlohmann/json/issues/1000", "id": 303770564, "node_id": "MDU6SXNzdWUzMDM3NzA1NjQ=", "number": 1000, "title": "How to check if key existed ", "user": {"login": "leeqicheng", "id": 6437615, "node_id": "MDQ6VXNlcjY0Mzc2MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/6437615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeqicheng", "html_url": "https://github.com/leeqicheng", "followers_url": "https://api.github.com/users/leeqicheng/followers", "following_url": "https://api.github.com/users/leeqicheng/following{/other_user}", "gists_url": "https://api.github.com/users/leeqicheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeqicheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeqicheng/subscriptions", "organizations_url": "https://api.github.com/users/leeqicheng/orgs", "repos_url": "https://api.github.com/users/leeqicheng/repos", "events_url": "https://api.github.com/users/leeqicheng/events{/privacy}", "received_events_url": "https://api.github.com/users/leeqicheng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-09T09:06:44Z", "updated_at": "2018-03-09T09:42:24Z", "closed_at": "2018-03-09T09:42:24Z", "author_association": "NONE", "body": "Hi to all is there a method to check if the key exist , \r\n\r\nwhat is the close to \r\n\r\nJava JSON \r\n\r\n> indivFB.has(\"object_id\")\r\n\r\nThanks "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/999", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/999/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/999/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/999/events", "html_url": "https://github.com/nlohmann/json/issues/999", "id": 302801028, "node_id": "MDU6SXNzdWUzMDI4MDEwMjg=", "number": 999, "title": "nlohmann::json::parse exhaust memory in go binding", "user": {"login": "sjiekak", "id": 1922047, "node_id": "MDQ6VXNlcjE5MjIwNDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjiekak", "html_url": "https://github.com/sjiekak", "followers_url": "https://api.github.com/users/sjiekak/followers", "following_url": "https://api.github.com/users/sjiekak/following{/other_user}", "gists_url": "https://api.github.com/users/sjiekak/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjiekak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjiekak/subscriptions", "organizations_url": "https://api.github.com/users/sjiekak/orgs", "repos_url": "https://api.github.com/users/sjiekak/repos", "events_url": "https://api.github.com/users/sjiekak/events{/privacy}", "received_events_url": "https://api.github.com/users/sjiekak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-06T17:47:50Z", "updated_at": "2018-03-06T19:01:38Z", "closed_at": "2018-03-06T19:00:44Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- `nlohmann::json::parse` exhaust memory inside cgo\r\n\r\n- Code : \r\n\r\nparse.hpp\r\n\r\n```cpp\r\n#ifndef PARSE_DEMO_H_\r\n#define PARSE_DEMO_H_\r\n\r\n#ifdef __cplusplus\r\nextern \"C\" {\r\n#endif\r\n    void parse(char* value);\r\n#ifdef __cplusplus\r\n}\r\n#endif\r\n\r\n#endif\r\n```\r\nparse.cpp\r\n\r\n```cpp\r\n#include \"parse.hpp\"\r\n#include \"json.hpp\"\r\n\r\nextern \"C\" void parse(char* value)\r\n{\r\n    try\r\n    {\r\n        nlohmann::json::parse(value);\r\n    }\r\n    catch (std::exception&)\r\n    {}\r\n}\r\n```\r\n\r\nleaker.go\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"unsafe\"\r\n)\r\n\r\n// #include <stdlib.h>\r\n// #include \"parse.hpp\"\r\n// #cgo LDFLAGS: -lparse -lstdc++\r\nimport \"C\"\r\n\r\nfunc main() {\r\n\tinput := \"{\\\"hello\\\": \\\"world\\\"}\";\r\n\tfor ;; {\r\n\t\tcinput := C.CString(input);\r\n\t\tdefer C.free(unsafe.Pointer(cinput))\r\n\t\tC.parse(cinput)\r\n\t}\r\n}\r\n```\r\n\r\nrun.sh\r\n```sh\r\n#!/bin/bash\r\n\r\nset -eo pipefail\r\n\r\ng++ -g -c -std=gnu++17 ./parse.cpp -o parse.o\r\nar -s -r libparse.a parse.o\r\nrm parse.o\r\nCGO_LDFLAGS=-L\"$PWD\" go run leaker.go\r\n```\r\n\r\nDockerfile\r\n```dockerfile\r\nFROM ubuntu:17.10\r\nRUN apt-get update --yes && \\\r\n    apt-get install \\\r\n    curl \\\r\n    g++ \\\r\n    --yes\r\n\r\nENV GO_VERSION=1.9 \\\r\n    GO_SHA256=d70eadefce8e160638a9a6db97f7192d8463069ab33138893ad3bf31b0650a79\r\n\r\nRUN curl https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz -o /golang.tar.gz && \\\r\n    echo \"${GO_SHA256} /golang.tar.gz\" | sha256sum -c - && \\\r\n    tar -xzf /golang.tar.gz && \\\r\n    cd /usr/local/bin && ln -s /go/bin/* . && \\\r\n    go version && \\\r\n    rm /golang.tar.gz\r\n\r\nRUN mkdir -p /usr/local/demo/\r\nCOPY /* /usr/local/demo/\r\nWORKDIR /usr/local/demo\r\n```\r\n\r\n- What is the expected behavior? \r\n\r\n**Constant memory usage**\r\n\r\n- And what is the actual behavior instead? \r\n\r\n**Increasing memory usage**\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n**g++ (Ubuntu 7.2.0-8ubuntu3.2) 7.2.0**\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nI used the latest release version to date\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/998", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/998/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/998/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/998/events", "html_url": "https://github.com/nlohmann/json/issues/998", "id": 302584464, "node_id": "MDU6SXNzdWUzMDI1ODQ0NjQ=", "number": 998, "title": "Range-based iteration over a non-array object", "user": {"login": "dvhwgumby", "id": 450612, "node_id": "MDQ6VXNlcjQ1MDYxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/450612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvhwgumby", "html_url": "https://github.com/dvhwgumby", "followers_url": "https://api.github.com/users/dvhwgumby/followers", "following_url": "https://api.github.com/users/dvhwgumby/following{/other_user}", "gists_url": "https://api.github.com/users/dvhwgumby/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvhwgumby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvhwgumby/subscriptions", "organizations_url": "https://api.github.com/users/dvhwgumby/orgs", "repos_url": "https://api.github.com/users/dvhwgumby/repos", "events_url": "https://api.github.com/users/dvhwgumby/events{/privacy}", "received_events_url": "https://api.github.com/users/dvhwgumby/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-06T06:54:20Z", "updated_at": "2018-03-06T07:54:22Z", "closed_at": "2018-03-06T07:51:51Z", "author_association": "NONE", "body": "It is possible or planned to be able to use a range-based for loop to iterate over a non-array object?\r\n\r\nThat is, you can do:\r\n\r\n    for (auto& element : j) \r\n      std::cout << element << std::endl;\r\n\r\nfor an array ```[ \"a\", \"b\" ]``` but not for ```{\"foo\": \"bar\", \"quux\":\"baaz\"}``` (well, range-based iteration works if you don't care about the key)\r\n\r\nThe json package compiles and works just fine under C++17, so I would like to be able to do:\r\n\r\n    for (auto& [key, value] : j)\r\n      std::cout << key << \" : \" << value << std::endl;\r\n\r\nI am sure there are more important feature requests (e.g. SAX read & write) but I thought I would submit this one anyway.  This package is great!  Thanks, d "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/997", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/997/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/997/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/997/events", "html_url": "https://github.com/nlohmann/json/issues/997", "id": 302569855, "node_id": "MDU6SXNzdWUzMDI1Njk4NTU=", "number": 997, "title": "Enable forward declaration of json by making json a class instead of a using declaration", "user": {"login": "pgoodman", "id": 43664, "node_id": "MDQ6VXNlcjQzNjY0", "avatar_url": "https://avatars2.githubusercontent.com/u/43664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pgoodman", "html_url": "https://github.com/pgoodman", "followers_url": "https://api.github.com/users/pgoodman/followers", "following_url": "https://api.github.com/users/pgoodman/following{/other_user}", "gists_url": "https://api.github.com/users/pgoodman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pgoodman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pgoodman/subscriptions", "organizations_url": "https://api.github.com/users/pgoodman/orgs", "repos_url": "https://api.github.com/users/pgoodman/repos", "events_url": "https://api.github.com/users/pgoodman/events{/privacy}", "received_events_url": "https://api.github.com/users/pgoodman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-03-06T05:34:34Z", "updated_at": "2018-06-06T11:51:28Z", "closed_at": "2018-04-09T20:19:12Z", "author_association": "NONE", "body": "I would like to be able to be able to declare the conversion operators in a header without having to `#include` the json.h file. I would then define the conversion operators in a source file, which actually includes json.h.\r\n\r\nHere is an example of what I want do do, but can't:\r\n\r\n```c++\r\nnamespace nlohmann {\r\nclass json;\r\nvoid to_json(json &j, const MyType &blah);\r\nvoid from_json(const json &j, MyType &blah);\r\n}  // namespace nlohmann\r\n```\r\n\r\nWhat is stopping me is `using json = basic_json<>;`. A simple fix should be `class json : public basic_json<> {};`.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/996", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/996/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/996/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/996/events", "html_url": "https://github.com/nlohmann/json/issues/996", "id": 302520726, "node_id": "MDU6SXNzdWUzMDI1MjA3MjY=", "number": 996, "title": "get<T> for types that are not default constructible", "user": {"login": "bradymadams", "id": 23110600, "node_id": "MDQ6VXNlcjIzMTEwNjAw", "avatar_url": "https://avatars1.githubusercontent.com/u/23110600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradymadams", "html_url": "https://github.com/bradymadams", "followers_url": "https://api.github.com/users/bradymadams/followers", "following_url": "https://api.github.com/users/bradymadams/following{/other_user}", "gists_url": "https://api.github.com/users/bradymadams/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradymadams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradymadams/subscriptions", "organizations_url": "https://api.github.com/users/bradymadams/orgs", "repos_url": "https://api.github.com/users/bradymadams/repos", "events_url": "https://api.github.com/users/bradymadams/events{/privacy}", "received_events_url": "https://api.github.com/users/bradymadams/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-06T00:46:24Z", "updated_at": "2018-03-06T13:19:58Z", "closed_at": "2018-03-06T13:19:58Z", "author_association": "NONE", "body": "Currently the `get<T>` method requires that T is default constructible. Might it make sense to overload `get` so that it can take variadic arguments and construct the new object with a non-default constructor? For example - below is a minor variation of `get`. Any reason why this is a bad idea?\r\n\r\n```c++\r\ntemplate<typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>,\r\n         detail::enable_if_t <\r\n             not std::is_same<basic_json_t, ValueType>::value and\r\n             detail::has_from_json<basic_json_t, ValueType>::value and\r\n             not detail::has_non_default_from_json<basic_json_t, ValueType>::value,\r\n             int> = 0, typename ...Types>\r\nValueType get(Types... args) const noexcept(noexcept(\r\n                                   JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), std::declval<ValueType&>())))\r\n{\r\n    // we cannot static_assert on ValueTypeCV being non-const, because\r\n    // there is support for get<const basic_json_t>(), which is why we\r\n    // still need the uncvref\r\n    static_assert(not std::is_reference<ValueTypeCV>::value,\r\n                  \"get() cannot be used with reference types, you might want to use get_ref()\");\r\n\r\n    ValueType ret(args...); // Allows non-default constructors to be used\r\n    JSONSerializer<ValueType>::from_json(*this, ret);\r\n    return ret;\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/995", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/995/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/995/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/995/events", "html_url": "https://github.com/nlohmann/json/issues/995", "id": 302392612, "node_id": "MDU6SXNzdWUzMDIzOTI2MTI=", "number": 995, "title": "Prevent Null values to appear in .dump()", "user": {"login": "nuno407", "id": 11352538, "node_id": "MDQ6VXNlcjExMzUyNTM4", "avatar_url": "https://avatars2.githubusercontent.com/u/11352538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nuno407", "html_url": "https://github.com/nuno407", "followers_url": "https://api.github.com/users/nuno407/followers", "following_url": "https://api.github.com/users/nuno407/following{/other_user}", "gists_url": "https://api.github.com/users/nuno407/gists{/gist_id}", "starred_url": "https://api.github.com/users/nuno407/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nuno407/subscriptions", "organizations_url": "https://api.github.com/users/nuno407/orgs", "repos_url": "https://api.github.com/users/nuno407/repos", "events_url": "https://api.github.com/users/nuno407/events{/privacy}", "received_events_url": "https://api.github.com/users/nuno407/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-05T17:32:44Z", "updated_at": "2018-03-06T16:47:00Z", "closed_at": "2018-03-06T16:47:00Z", "author_association": "NONE", "body": "Imagine that you have the following json string created by .dump()\r\n\r\n`\r\n{\"connectorId\":0,\r\n\"meterValue\": [{\"sampledValue\":[{\"context\":\"Sample.Periodic\",\"format\":null,\"location\":\"Body\",\"measurand\":null,\"phase\":\"L1\",\"unit\":\"V\",\"value\":\"18440\"},{\"context\":\"Sample.Periodic\",\"format\":null,\"location\":\"Body\",\"measurand\":null,\"phase\":\"L2\",\"unit\":\"V\",\"value\":\"46927\"},{\"context\":\"Sample.Periodic\",\"format\":null,\"location\":\"Body\",\"measurand\":null,\"phase\":\"L3\",\"unit\":\"V\",\"value\":\"44515\"}]\r\n`\r\n\r\nHow can I configure the library to not include null values in the dump? I research in the documentation by with no success. The only way I can find is to create a For loop that removes all null entries but is quite inefficient.\r\n\r\nThank you for the help,\r\nNuno\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/994", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/994/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/994/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/994/events", "html_url": "https://github.com/nlohmann/json/issues/994", "id": 302098095, "node_id": "MDU6SXNzdWUzMDIwOTgwOTU=", "number": 994, "title": "compilation error while using intel c++ compiler 2018", "user": {"login": "tomqt", "id": 37045275, "node_id": "MDQ6VXNlcjM3MDQ1Mjc1", "avatar_url": "https://avatars2.githubusercontent.com/u/37045275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomqt", "html_url": "https://github.com/tomqt", "followers_url": "https://api.github.com/users/tomqt/followers", "following_url": "https://api.github.com/users/tomqt/following{/other_user}", "gists_url": "https://api.github.com/users/tomqt/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomqt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomqt/subscriptions", "organizations_url": "https://api.github.com/users/tomqt/orgs", "repos_url": "https://api.github.com/users/tomqt/repos", "events_url": "https://api.github.com/users/tomqt/events{/privacy}", "received_events_url": "https://api.github.com/users/tomqt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 706237888, "node_id": "MDU6TGFiZWw3MDYyMzc4ODg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20icc", "name": "platform: icc", "color": "eb6420", "default": false}, {"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-04T16:13:03Z", "updated_at": "2018-04-25T17:42:28Z", "closed_at": "2018-04-09T20:19:11Z", "author_association": "NONE", "body": "Hello!\r\n\r\nI am facing an issue that maybe has been already solved but I can't find documentation regarding it.\r\nWhen trying to compile a new project that includes json.hpp with Intel C++ 18.0 compiler (as well for Intel C++ 17.0) in visual studio\r\nI get the following errors:\r\n\r\n```\r\n...\\json.hpp(428): error : type name is not allowed\r\ndetect(std::declval<typename BasicJsonType::template json_serializer<T, void>()))>::value;\r\n\r\n...\\json.hpp(446): error : type name is not allowed\r\nstd::declval<typename BasicJsonType::template json_serializer<T, void>()))>::value;\r\n\r\n...\\json.hpp(461): error : type name is not allowed\r\nstd::declval<typename BasicJsonType::template json_serializer<T, void>()))>::value;\r\n```\r\n\r\nIs it a known and solved issue?\r\n\r\nThanks!"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/993", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/993/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/993/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/993/events", "html_url": "https://github.com/nlohmann/json/issues/993", "id": 302066098, "node_id": "MDU6SXNzdWUzMDIwNjYwOTg=", "number": 993, "title": "number parsing", "user": {"login": "Yaossg", "id": 29620619, "node_id": "MDQ6VXNlcjI5NjIwNjE5", "avatar_url": "https://avatars1.githubusercontent.com/u/29620619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yaossg", "html_url": "https://github.com/Yaossg", "followers_url": "https://api.github.com/users/Yaossg/followers", "following_url": "https://api.github.com/users/Yaossg/following{/other_user}", "gists_url": "https://api.github.com/users/Yaossg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yaossg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yaossg/subscriptions", "organizations_url": "https://api.github.com/users/Yaossg/orgs", "repos_url": "https://api.github.com/users/Yaossg/repos", "events_url": "https://api.github.com/users/Yaossg/events{/privacy}", "received_events_url": "https://api.github.com/users/Yaossg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-04T08:03:01Z", "updated_at": "2018-03-05T11:21:15Z", "closed_at": "2018-03-05T11:21:09Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\nnumber literals like `\"+1\"_json` , `\".5\"_json` , `\"5.\"_json` are invalid\r\n\r\n**Feature Request**\r\n\r\nhexadecimal floating literal (like`0x1.2p3`)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/990", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/990/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/990/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/990/events", "html_url": "https://github.com/nlohmann/json/issues/990", "id": 301238885, "node_id": "MDU6SXNzdWUzMDEyMzg4ODU=", "number": 990, "title": "How to create a json variable?", "user": {"login": "miketing629", "id": 36926596, "node_id": "MDQ6VXNlcjM2OTI2NTk2", "avatar_url": "https://avatars3.githubusercontent.com/u/36926596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miketing629", "html_url": "https://github.com/miketing629", "followers_url": "https://api.github.com/users/miketing629/followers", "following_url": "https://api.github.com/users/miketing629/following{/other_user}", "gists_url": "https://api.github.com/users/miketing629/gists{/gist_id}", "starred_url": "https://api.github.com/users/miketing629/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miketing629/subscriptions", "organizations_url": "https://api.github.com/users/miketing629/orgs", "repos_url": "https://api.github.com/users/miketing629/repos", "events_url": "https://api.github.com/users/miketing629/events{/privacy}", "received_events_url": "https://api.github.com/users/miketing629/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-03-01T00:46:30Z", "updated_at": "2018-03-18T22:52:43Z", "closed_at": "2018-03-18T22:52:43Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\nThis is more of a question than an issue.  The sample code illustrates what I'm trying to do, and the included output shows it's not working the way I hope/expect.  I've tried other variations than what is in the sample - can't get anything to work.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nBuild and run this code:\r\n\r\n```cpp\r\nvoid jsonTest()\r\n{\r\n    try\r\n    {\r\n        nlohmann::json v1 = nlohmann::json::parse(\"{ \\\"a\\\":{\\\"b\\\":{\\\"c\\\":{\\\"value\\\":900}}} }\");\r\n        auto value1 = v1[\"a\"][\"b\"][\"c\"].value(\"value\", 0);\r\n\r\n        std::cout << \"value1: \" << value1 << std::endl;\r\n    }\r\n    catch (...)\r\n    {\r\n        printf(\"value1: exception\");\r\n        std::cout << \"value1: exception\" << std::endl;\r\n    }\r\n\r\n    try\r\n    {\r\n        nlohmann::json v2 =\r\n        {\r\n            \"a\",\r\n            {\r\n                \"b\",\r\n                {\r\n                    \"c\",\r\n                    {\r\n                        \"value\", 900\r\n                    }\r\n                }\r\n            } \r\n        };\r\n        auto value2 = v2[\"a\"][\"b\"][\"c\"].value(\"value\", 0);\r\n\r\n        std::cout << \"value1: \" << value2 << std::endl;\r\n    }\r\n    catch (...)\r\n    {\r\n        std::cout << \"value2: exception\" << std::endl;\r\n    }\r\n\r\n    try\r\n    {\r\n        nlohmann::json v3 =\r\n        {\r\n            {\r\n                \"a\",\r\n                {\r\n                    \"b\",\r\n                    {\r\n                        \"c\",\r\n                        {\r\n                            \"value\", 900\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        auto value3 = v3[\"a\"][\"b\"][\"c\"].value(\"value\", 0);\r\n\r\n        std::cout << \"value3: \" << value3 << std::endl;\r\n    }\r\n    catch (...)\r\n    {\r\n        std::cout << \"value3: exception\" << std::endl;\r\n    }\r\n}\r\n```\r\n\r\n- What is the expected behavior?\r\n\r\nAll cases print the value 900.\r\n- And what is the actual behavior instead?\r\n\r\nThis is the output of the code:\r\n\r\nvalue1: 900\r\nvalue2 : exception\r\nvalue3 : exception\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nVisual Studio 2017, Windows 10\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nReleased version 3.1.1.\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\n- Include sample usage where appropriate.\r\n"}]