[{"url": "https://api.github.com/repos/nlohmann/json/issues/857", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/857/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/857/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/857/events", "html_url": "https://github.com/nlohmann/json/issues/857", "id": 279456873, "node_id": "MDU6SXNzdWUyNzk0NTY4NzM=", "number": 857, "title": "MSVC2017, 15.5 new issues.  ", "user": {"login": "aj664", "id": 11025345, "node_id": "MDQ6VXNlcjExMDI1MzQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/11025345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aj664", "html_url": "https://github.com/aj664", "followers_url": "https://api.github.com/users/aj664/followers", "following_url": "https://api.github.com/users/aj664/following{/other_user}", "gists_url": "https://api.github.com/users/aj664/gists{/gist_id}", "starred_url": "https://api.github.com/users/aj664/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aj664/subscriptions", "organizations_url": "https://api.github.com/users/aj664/orgs", "repos_url": "https://api.github.com/users/aj664/repos", "events_url": "https://api.github.com/users/aj664/events{/privacy}", "received_events_url": "https://api.github.com/users/aj664/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 13, "created_at": "2017-12-05T17:12:15Z", "updated_at": "2017-12-07T21:09:02Z", "closed_at": "2017-12-07T21:09:02Z", "author_association": "NONE", "body": "yesterday 2017.12.05  using MSVC2017, 15.4.4   was compiling v.2.1.1 fine.\r\ntoday, upgraded to MSVC2017 15.5..  now v2.1.1 has lots of std::allocator warnings/errors.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/856", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/856/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/856/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/856/events", "html_url": "https://github.com/nlohmann/json/pull/856", "id": 279342108, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU2NDM4Njky", "number": 856, "title": "Std allocator conformance cpp17", "user": {"login": "bogemic", "id": 26283467, "node_id": "MDQ6VXNlcjI2MjgzNDY3", "avatar_url": "https://avatars0.githubusercontent.com/u/26283467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bogemic", "html_url": "https://github.com/bogemic", "followers_url": "https://api.github.com/users/bogemic/followers", "following_url": "https://api.github.com/users/bogemic/following{/other_user}", "gists_url": "https://api.github.com/users/bogemic/gists{/gist_id}", "starred_url": "https://api.github.com/users/bogemic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bogemic/subscriptions", "organizations_url": "https://api.github.com/users/bogemic/orgs", "repos_url": "https://api.github.com/users/bogemic/repos", "events_url": "https://api.github.com/users/bogemic/events{/privacy}", "received_events_url": "https://api.github.com/users/bogemic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 5, "created_at": "2017-12-05T11:33:00Z", "updated_at": "2017-12-06T20:53:00Z", "closed_at": "2017-12-06T20:52:53Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/856", "html_url": "https://github.com/nlohmann/json/pull/856", "diff_url": "https://github.com/nlohmann/json/pull/856.diff", "patch_url": "https://github.com/nlohmann/json/pull/856.patch"}, "body": "improved conformance with C++17, some members of std::allocator are deprecated and should be used via std::allocator_traits\r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\n- [ ]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [ ]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [ ]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src).\r\n\r\n## Please don't\r\n\r\n- The C++11 support varies between different **compilers** and versions. Please note the [list of supported compilers](https://github.com/nlohmann/json/blob/master/README.md#supported-compilers). Some compilers like GCC 4.8 (and earlier), Clang 3.3 (and earlier), or Microsoft Visual Studio 13.0 and earlier are known not to work due to missing or incomplete C++11 support. Please refrain from proposing changes that work around these compiler's limitations with `#ifdef`s or other means.\r\n- Specifically, I am aware of compilation problems with **Microsoft Visual Studio** (there even is an [issue label](https://github.com/nlohmann/json/issues?utf8=\u2713&q=label%3A%22visual+studio%22+) for these kind of bugs). I understand that even in 2016, complete C++11 support isn't there yet. But please also understand that I do not want to drop features or uglify the code just to make Microsoft's sub-standard compiler happy. The past has shown that there are ways to express the functionality such that the code compiles with the most recent MSVC - unfortunately, this is not the main objective of the project.\r\n- Please refrain from proposing changes that would **break [JSON](http://json.org) conformance**. If you propose a conformant extension of JSON to be supported by the library, please motivate this extension.\r\n- Please do not open pull requests that address **multiple issues**.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/855", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/855/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/855/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/855/events", "html_url": "https://github.com/nlohmann/json/pull/855", "id": 279323089, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU2NDI0NzE0", "number": 855, "title": "cmake: use BUILD_INTERFACE/INSTALL_INTERFACE", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 3, "created_at": "2017-12-05T10:30:46Z", "updated_at": "2018-07-02T13:20:00Z", "closed_at": "2017-12-06T19:47:39Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/855", "html_url": "https://github.com/nlohmann/json/pull/855", "diff_url": "https://github.com/nlohmann/json/pull/855.diff", "patch_url": "https://github.com/nlohmann/json/pull/855.patch"}, "body": "Fixes #741\r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\n- [x]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [x]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [x]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src)."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/854", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/854/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/854/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/854/events", "html_url": "https://github.com/nlohmann/json/pull/854", "id": 279312798, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU2NDE3Mjk2", "number": 854, "title": "to/from_json: add a MSVC-specific static_assert to force a stacktrace", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 5, "created_at": "2017-12-05T09:58:54Z", "updated_at": "2017-12-05T18:45:59Z", "closed_at": "2017-12-05T18:36:32Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/854", "html_url": "https://github.com/nlohmann/json/pull/854", "diff_url": "https://github.com/nlohmann/json/pull/854.diff", "patch_url": "https://github.com/nlohmann/json/pull/854.patch"}, "body": "Hi,\r\n\r\nThis PR add a `static_assert` inside `from_json_fn/to_json_fn` to help users understand the following message:\r\n\r\n> could not find to_json in T's namespace\r\n\r\nSometimes Visual Studio does not show the stacktrace, thus making it tricky to know which type is `T`.\r\n\r\n## Pull request checklist\r\n\r\n- [x]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [x]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [x]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src).\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/853", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/853/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/853/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/853/events", "html_url": "https://github.com/nlohmann/json/issues/853", "id": 278828647, "node_id": "MDU6SXNzdWUyNzg4Mjg2NDc=", "number": 853, "title": "very basic: fetching string value/content without quotes", "user": {"login": "rnsanchez", "id": 87608, "node_id": "MDQ6VXNlcjg3NjA4", "avatar_url": "https://avatars0.githubusercontent.com/u/87608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rnsanchez", "html_url": "https://github.com/rnsanchez", "followers_url": "https://api.github.com/users/rnsanchez/followers", "following_url": "https://api.github.com/users/rnsanchez/following{/other_user}", "gists_url": "https://api.github.com/users/rnsanchez/gists{/gist_id}", "starred_url": "https://api.github.com/users/rnsanchez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rnsanchez/subscriptions", "organizations_url": "https://api.github.com/users/rnsanchez/orgs", "repos_url": "https://api.github.com/users/rnsanchez/repos", "events_url": "https://api.github.com/users/rnsanchez/events{/privacy}", "received_events_url": "https://api.github.com/users/rnsanchez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 5, "created_at": "2017-12-03T22:38:54Z", "updated_at": "2017-12-06T20:43:12Z", "closed_at": "2017-12-06T20:43:07Z", "author_association": "NONE", "body": "This is kind of a usage issue and not a bug/feature request.  I could be overlooking something trivial as I am very new to the library; if this is the case, please point in the right direcion/documentation.\r\n\r\n- What is the issue you have?\r\n\r\nWhen printing/using a value from a string element, the string is quoted:\r\n\r\n    $ ./test \r\n    \"value\"\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n```\r\n    #include <iostream>\r\n    #include \"json.hpp\"\r\n    using json = nlohmann::json;\r\n    int main(int argc, char *argv[])\r\n    {\r\n        json j = R\"({\"one\": \"value\"})\"_json;\r\n        std::cout << j[\"one\"] << '\\n';\r\n    }\r\n```\r\n\r\n- What is the expected behavior?\r\n\r\nPrinting/fetching `value` as opposed to `\"value\"`.\r\n\r\nI understand that this could be a simple matter of picking out a substring, but searching in the documentation and existing issues (closed and open), I didn't find an idiomatic way of simply extracting the original string (no quotes as quotes are not escaped in the JSON blob).\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nGCC (7.2.0).\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nGit master, cc937deaf6430a5a02d366bb3cb7140693f20c0e\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/852", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/852/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/852/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/852/events", "html_url": "https://github.com/nlohmann/json/issues/852", "id": 278705873, "node_id": "MDU6SXNzdWUyNzg3MDU4NzM=", "number": 852, "title": "Ambiguous function call to get with pointer type and constant json object in VS2015 (15.4.4)", "user": {"login": "MaxSavenkov", "id": 11957018, "node_id": "MDQ6VXNlcjExOTU3MDE4", "avatar_url": "https://avatars3.githubusercontent.com/u/11957018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaxSavenkov", "html_url": "https://github.com/MaxSavenkov", "followers_url": "https://api.github.com/users/MaxSavenkov/followers", "following_url": "https://api.github.com/users/MaxSavenkov/following{/other_user}", "gists_url": "https://api.github.com/users/MaxSavenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaxSavenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaxSavenkov/subscriptions", "organizations_url": "https://api.github.com/users/MaxSavenkov/orgs", "repos_url": "https://api.github.com/users/MaxSavenkov/repos", "events_url": "https://api.github.com/users/MaxSavenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/MaxSavenkov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-02T18:29:29Z", "updated_at": "2017-12-05T18:26:49Z", "closed_at": "2017-12-05T18:26:49Z", "author_association": "NONE", "body": "This code will not compile in Visual Studio 2015 (15.4.4) with the latest nlohmann::json code:\r\n```\r\n    const nlohmann::json test;\r\n    const auto *s = test.get<const std::string*>();\r\n```\r\nThe error message is:\r\n\r\n```\r\n1>F:\\rolecraft2\\prj\\rolecraft\\ui\\ui_view_character.cpp(13): error C2668: 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get': ambiguous call to overloaded function\r\n1>F:\\rolecraft2\\ext\\nlohmann\\json.hpp(9669): note: could be 'const PointerType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get<const std::string*,0>(void) noexcept const'\r\n1>        with\r\n1>        [\r\n1>            PointerType=const std::string *\r\n1>        ]\r\n1>F:\\rolecraft2\\ext\\nlohmann\\json.hpp(9657): note: or       'PointerType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get<const std::string*,0>(void) noexcept'\r\n1>        with\r\n1>        [\r\n1>            PointerType=const std::string *\r\n1>        ]\r\n1>F:\\rolecraft2\\ext\\nlohmann\\json.hpp(9567): note: or       'ValueType nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::get<const std::string*,const std::string*,0>(void) noexcept(<expr>) const'\r\n1>        with\r\n1>        [\r\n1>            ValueType=const std::string *\r\n1>        ]\r\n```\r\n\r\nSeems like Visual Studio's compiler can't decide whether to use ValueType version of get(), or PointerType one. The issue is easily worked around by using get_ptr() instead, but I still would like to report it, as it was working in older versions of the library (2.0.5, for example).\r\n\r\nThe issue can be fixed by adding \r\n```\r\n            not std::is_pointer<ValueType>::value and\r\n```\r\nto enable_if template of ValueType get() const noexcept method."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/851", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/851/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/851/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/851/events", "html_url": "https://github.com/nlohmann/json/issues/851", "id": 278454519, "node_id": "MDU6SXNzdWUyNzg0NTQ1MTk=", "number": 851, "title": "Sequential reading of JSON arrays", "user": {"login": "gjgiezeman", "id": 32670530, "node_id": "MDQ6VXNlcjMyNjcwNTMw", "avatar_url": "https://avatars2.githubusercontent.com/u/32670530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gjgiezeman", "html_url": "https://github.com/gjgiezeman", "followers_url": "https://api.github.com/users/gjgiezeman/followers", "following_url": "https://api.github.com/users/gjgiezeman/following{/other_user}", "gists_url": "https://api.github.com/users/gjgiezeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/gjgiezeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gjgiezeman/subscriptions", "organizations_url": "https://api.github.com/users/gjgiezeman/orgs", "repos_url": "https://api.github.com/users/gjgiezeman/repos", "events_url": "https://api.github.com/users/gjgiezeman/events{/privacy}", "received_events_url": "https://api.github.com/users/gjgiezeman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-12-01T12:40:17Z", "updated_at": "2018-01-29T18:12:35Z", "closed_at": "2018-01-29T18:12:35Z", "author_association": "NONE", "body": "I have an application that logs events as an array of JSON objects. The objects are written one by one to some network stream. I would like to process them when they arrive, not after the application has closed and the array is complete. \r\n\r\nSo, I would like to have (or be able to write) a class with an interface like this:\r\n```cpp\r\nclass SeqJsonReader {\r\n  public:\r\n    void append(std::string const &str);\r\n    void append(char const *str);\r\n    void append(char const *begin, char const *end);\r\n    bool has_value() const;\r\n    nlohmann::json next_value();\r\n    bool at_end() const; // true if closing ']' of array is processed.\r\n};\r\n```\r\n\r\nUsage could be like this:\r\n\r\n```cpp\r\nbool reader_loop(vector<string> const &msgs)\r\n{\r\n    SeqJsonReader reader;\r\n    auto cur = msgs.begin();\r\n    while (!reader.at_end() && cur!=msgs.end()) {\r\n        try {\r\n            reader.append(*cur++);\r\n            while (reader.has_value()) {\r\n                nlohmann::json val = reader.next_value();\r\n                // do something with val\r\n            }\r\n        } catch (...) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nint main()\r\n{\r\n    vector<string> msgs;\r\n    msgs.push_back(R\"([{\"product\":\"apple\",\"amount\":\"512\",\"unit\":\"gram\"})\");\r\n    msgs.push_back(R\"(,{\"product\":\"pear\")\");\r\n    msgs.push_back(R\"(},42,{\"product\":\"orange\",\"amount\":\"402\",\"unit\":\"gram\"}])\");\r\n    reader_loop(msgs);\r\n}\r\n```\r\n\r\nIn practice the strings (msgs) would come from a recv call of a socket or something like that.\r\n\r\nAm I right that currently this is hard to implement? It seems that I can't parse partial JSON input."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/850", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/850/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/850/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/850/events", "html_url": "https://github.com/nlohmann/json/issues/850", "id": 278041093, "node_id": "MDU6SXNzdWUyNzgwNDEwOTM=", "number": 850, "title": "How to put  object in the array as a member?", "user": {"login": "PuddingPengChen", "id": 8456152, "node_id": "MDQ6VXNlcjg0NTYxNTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8456152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PuddingPengChen", "html_url": "https://github.com/PuddingPengChen", "followers_url": "https://api.github.com/users/PuddingPengChen/followers", "following_url": "https://api.github.com/users/PuddingPengChen/following{/other_user}", "gists_url": "https://api.github.com/users/PuddingPengChen/gists{/gist_id}", "starred_url": "https://api.github.com/users/PuddingPengChen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PuddingPengChen/subscriptions", "organizations_url": "https://api.github.com/users/PuddingPengChen/orgs", "repos_url": "https://api.github.com/users/PuddingPengChen/repos", "events_url": "https://api.github.com/users/PuddingPengChen/events{/privacy}", "received_events_url": "https://api.github.com/users/PuddingPengChen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-30T08:51:53Z", "updated_at": "2017-11-30T11:18:22Z", "closed_at": "2017-11-30T11:18:22Z", "author_association": "NONE", "body": "This not a bug report. I read the example, but not find the way to put an object as the array's member.\r\nI hope to use this . Thank you !\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/849", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/849/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/849/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/849/events", "html_url": "https://github.com/nlohmann/json/issues/849", "id": 278007178, "node_id": "MDU6SXNzdWUyNzgwMDcxNzg=", "number": 849, "title": "misclick, please ignore", "user": {"login": "WikiWikiWang", "id": 1289671, "node_id": "MDQ6VXNlcjEyODk2NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1289671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WikiWikiWang", "html_url": "https://github.com/WikiWikiWang", "followers_url": "https://api.github.com/users/WikiWikiWang/followers", "following_url": "https://api.github.com/users/WikiWikiWang/following{/other_user}", "gists_url": "https://api.github.com/users/WikiWikiWang/gists{/gist_id}", "starred_url": "https://api.github.com/users/WikiWikiWang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WikiWikiWang/subscriptions", "organizations_url": "https://api.github.com/users/WikiWikiWang/orgs", "repos_url": "https://api.github.com/users/WikiWikiWang/repos", "events_url": "https://api.github.com/users/WikiWikiWang/events{/privacy}", "received_events_url": "https://api.github.com/users/WikiWikiWang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-30T05:58:36Z", "updated_at": "2017-11-30T05:59:59Z", "closed_at": "2017-11-30T05:59:20Z", "author_association": "NONE", "body": "misclick, please ignore"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/848", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/848/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/848/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/848/events", "html_url": "https://github.com/nlohmann/json/pull/848", "id": 277996640, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU1NTE3ODcz", "number": 848, "title": " simple .each/.forEach extension", "user": {"login": "sfinktah", "id": 4650770, "node_id": "MDQ6VXNlcjQ2NTA3NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4650770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfinktah", "html_url": "https://github.com/sfinktah", "followers_url": "https://api.github.com/users/sfinktah/followers", "following_url": "https://api.github.com/users/sfinktah/following{/other_user}", "gists_url": "https://api.github.com/users/sfinktah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfinktah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfinktah/subscriptions", "organizations_url": "https://api.github.com/users/sfinktah/orgs", "repos_url": "https://api.github.com/users/sfinktah/repos", "events_url": "https://api.github.com/users/sfinktah/events{/privacy}", "received_events_url": "https://api.github.com/users/sfinktah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-11-30T04:42:11Z", "updated_at": "2017-12-21T12:51:42Z", "closed_at": "2017-12-21T12:51:41Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/848", "html_url": "https://github.com/nlohmann/json/pull/848", "diff_url": "https://github.com/nlohmann/json/pull/848.diff", "patch_url": "https://github.com/nlohmann/json/pull/848.patch"}, "body": "This is more of a nascent idea, than a ready-to-pull addition.  Although it did work perfectly for me, I am not at all sure it would behave well while iterating through a container of mixed data types.\r\n\r\nThe idea is pretty simple... I do some work on an underscore/c++ fork https://github.com/sfinktah/lodash-cpp which implements the `.each` method (badly).\r\n\r\nI am going to assume you are familiar with underscore/lodash/JavaScript's .forEach, since JSON derived from JavaScript, but I could be wrong.\r\n\r\nI'm not at all sure you wish to extend your library in this direction, I only did so because it was beyond my ability to properly handle JSON containers in an external library.\r\n\r\nThis is what I wanted to achieve, and it worked perfectly for what I required.\r\n\r\n```cpp\r\n        // json j;\r\n        // std::vector<std::string> loadedIpls;\r\n\r\n        if (j[\"unloadScenery\"].is_array()) {\r\n            j[\"unloadScenery\"].each([&](std::string ipl, auto, auto) {\r\n                if (IS_IPL_ACTIVE(ipl))\r\n                    REMOVE_IPL(ipl);\r\n                _::pull(loadedIpls, ipl);\r\n                _::each(loadedIpls, [](std::string ipl) { REMOVE_IPL(ipl); });\r\n            });\r\n        }\r\n```\r\n\r\nTo me (eye of the beholder) this is beautiful code, so very close to the simplicity of manipulating arrays in JavaScript (using underscore/lodash for extra \"simplicity\"), expressed succinctly in C++.\r\n\r\nIf you're not familiar with underscore/lodash, then this probably look horrendous. \r\n\r\nThe `.each` method I propose also handles `objects` (associative containers) with the same ease, something which JavaScript's internal `.forEach` function never managed, but could be achieved with underscore/lodash.\r\n\r\nI'm not sure how it will fare with your CI tests, and obviously it's not worth me pursuing the possibly issues to achieve full functionality, if this simply isn't something you want to add to your library."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/847", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/847/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/847/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/847/events", "html_url": "https://github.com/nlohmann/json/issues/847", "id": 277992340, "node_id": "MDU6SXNzdWUyNzc5OTIzNDA=", "number": 847, "title": "Make XML great again.", "user": {"login": "sfinktah", "id": 4650770, "node_id": "MDQ6VXNlcjQ2NTA3NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4650770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfinktah", "html_url": "https://github.com/sfinktah", "followers_url": "https://api.github.com/users/sfinktah/followers", "following_url": "https://api.github.com/users/sfinktah/following{/other_user}", "gists_url": "https://api.github.com/users/sfinktah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfinktah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfinktah/subscriptions", "organizations_url": "https://api.github.com/users/sfinktah/orgs", "repos_url": "https://api.github.com/users/sfinktah/repos", "events_url": "https://api.github.com/users/sfinktah/events{/privacy}", "received_events_url": "https://api.github.com/users/sfinktah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-30T04:09:25Z", "updated_at": "2017-12-06T21:21:48Z", "closed_at": "2017-12-06T21:21:48Z", "author_association": "NONE", "body": "Firstly, sincere apologies, this is not an issue with your excellent JSON library, and should probably be tagged \"Wishful Thinking\" or some-such.\r\n\r\nHowever, I will post it anyway, and if I knew how, but regrettably can't cross-post it to the zenxml where it probably belong, since they're on sourceforge. (ikr).\r\n\r\ntl;dr - in your (no doubt) abundance of free time, would you consider \"fixing\" xen::xml (which I thought was the XML equiv. of your lovely library) to actually **be** as good as your library.\r\n\r\n```cpp\r\n    // Example struct\r\n    struct S {\r\n        float get_value()        { return externalFunctionGet(); }\r\n        void  set_value(float _) { externalFunctionSet(_);       }\r\n\r\n        // MSVC prototype extension\r\n        __declspec(property(get = get_value, put = set_value)) float value;\r\n    } s;\r\n\r\n    // JSON - lovely, works perfectly, of course.\r\n\r\n    json j;               // empty XML document\r\n    j[\"value\"] = s.value; // write property\r\n    s.value = j[\"value\"]; // read  property\r\n\r\n\r\n    // zen::Xml\r\n\r\n    zen::XmlDoc doc;       //empty XML document\r\n    zen::XmlOut out(doc);  // data output proxy\r\n    out[\"value\"](s.value); // so far so good, thought not very attractive syntax\r\n    \r\n    zen::XmlIn in(doc);    // data input proxy\r\n    in[\"value\"])(s.value); // **fails** because it requires a reference.\r\n```\r\n\r\nAt this point, you can probably see how zen::xml is at a major disadvantage, not having the (pretty magical) ability of nlohmann::json to automatically determine and convert types via assignment.\r\n\r\nThe problem wouldn't be insurmountable, if the struct just returned member values, one could simply change the getter and setter to use references.\r\n\r\nTechnically, this can actually be done anyway, but only in MSVC (love that standards compliance).\r\n\r\n```cpp\r\n    // shoddy \"fix\" - make functions return references (which will be temporary, though MSVC allows it)\r\n    // unknown whether it will actually function correctly, but it does compile.\r\n\r\n    struct S2 {\r\n        float& get_value()        { return externalFunctionGet(); }\r\n        void  set_value(float& _) { externalFunctionSet(_);       }\r\n\r\n        // MSVC prototype extension\r\n        __declspec(property(get = get_value, put = set_value)) float value;\r\n    } s2;\r\n\r\n    // zen::Xml example works fine\r\n\r\n    // JSON, not so much.\r\n\r\n    j[\"value\"] = s2.value; // write property\r\n    s2.value = j[\"value\"]; // **fails** (can't convert basic_json to float&)\r\n```\r\n\r\nNote: this is not a complaint that JSON fails in this instance...  I don't think it's the fault of your library -\r\n it's more likely to be a quirk of MSVC's property implemention - since it handles this fine: \r\n\r\n```cpp\r\n    auto fn = []() -> float& { static float f = 1.0f;  return f;  };\r\n    s2.value = fn();\r\n```\r\n\r\nAnyway, if any other readers have any suggestions for a solution, or perhaps **any** XML library that would accept something like this example from zen::Xml\r\n\r\n```cpp\r\n//write a value into one deeply nested XML element - note the different types used seamlessly: char[], wchar_t[], char, wchar_t, int\r\nzen::XmlOut out(doc);\r\nout[\"elemento1\"][L\"\u044d\u043b\u0435\u043c\u0435\u043d\u04422\"][L\"\u8981\u7d203\"][L\"\u03c3\u03c4\u03bf\u03b9\u03c7\u03b5\u03af\u03bf4\"][\"elem5\"][L\"\u5143\u7d206\"][L'\u5143']['z'](-1234);```\r\n```\r\n\r\nWhich is very nice, but wholly unusable because it requires the same `&argument`.... \r\n\r\n... well any ideas at all would be appreciated.\r\n\r\nAnd again, I apologise."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/846", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/846/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/846/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/846/events", "html_url": "https://github.com/nlohmann/json/issues/846", "id": 277618234, "node_id": "MDU6SXNzdWUyNzc2MTgyMzQ=", "number": 846, "title": "Allow setting JSON_BuildTests=OFF from parent CMakeLists.txt", "user": {"login": "FDUdannychen", "id": 2918557, "node_id": "MDQ6VXNlcjI5MTg1NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2918557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FDUdannychen", "html_url": "https://github.com/FDUdannychen", "followers_url": "https://api.github.com/users/FDUdannychen/followers", "following_url": "https://api.github.com/users/FDUdannychen/following{/other_user}", "gists_url": "https://api.github.com/users/FDUdannychen/gists{/gist_id}", "starred_url": "https://api.github.com/users/FDUdannychen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FDUdannychen/subscriptions", "organizations_url": "https://api.github.com/users/FDUdannychen/orgs", "repos_url": "https://api.github.com/users/FDUdannychen/repos", "events_url": "https://api.github.com/users/FDUdannychen/events{/privacy}", "received_events_url": "https://api.github.com/users/FDUdannychen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/17", "html_url": "https://github.com/nlohmann/json/milestone/17", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/17/labels", "id": 2256017, "node_id": "MDk6TWlsZXN0b25lMjI1NjAxNw==", "number": 17, "title": "Release 3.0.1", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "closed", "created_at": "2017-01-16T19:53:23Z", "updated_at": "2017-12-29T19:16:17Z", "due_on": "2017-12-29T08:00:00Z", "closed_at": "2017-12-29T19:16:17Z"}, "comments": 9, "created_at": "2017-11-29T03:32:54Z", "updated_at": "2017-12-23T10:10:13Z", "closed_at": "2017-12-23T10:10:05Z", "author_association": "NONE", "body": "I think a standard BUILD_TESTING option is better in this case?\r\n\r\nMeanwhile, setting JSON_BuildTests=ON prevents the user from disabling the unit test build from parent CMakeLists.txt.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/845", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/845/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/845/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/845/events", "html_url": "https://github.com/nlohmann/json/issues/845", "id": 277408075, "node_id": "MDU6SXNzdWUyNzc0MDgwNzU=", "number": 845, "title": "Unit test fails for local-independent str-to-num", "user": {"login": "nadiasvertex", "id": 2034108, "node_id": "MDQ6VXNlcjIwMzQxMDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2034108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nadiasvertex", "html_url": "https://github.com/nadiasvertex", "followers_url": "https://api.github.com/users/nadiasvertex/followers", "following_url": "https://api.github.com/users/nadiasvertex/following{/other_user}", "gists_url": "https://api.github.com/users/nadiasvertex/gists{/gist_id}", "starred_url": "https://api.github.com/users/nadiasvertex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nadiasvertex/subscriptions", "organizations_url": "https://api.github.com/users/nadiasvertex/orgs", "repos_url": "https://api.github.com/users/nadiasvertex/repos", "events_url": "https://api.github.com/users/nadiasvertex/events{/privacy}", "received_events_url": "https://api.github.com/users/nadiasvertex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-28T14:39:29Z", "updated_at": "2017-12-19T22:45:12Z", "closed_at": "2017-12-19T22:45:12Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\nTests fail\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nI am using the released version of 2.1.1\r\n\r\n```\r\n2017/11/28 09:27:46 -----------------------------------------------------------\r\n2017/11/28 09:27:46 | Configuration: debug\r\n2017/11/28 09:27:46 -----------------------------------------------------------\r\n2017/11/28 09:27:46 === Building json ===\r\n-- The CXX compiler identification is Clang 6.0.0\r\n-- Check for working CXX compiler using: Ninja\r\n-- Check for working CXX compiler using: Ninja -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- cotire 1.7.9 loaded.\r\n-- CXX target json_unit cotired without unity build.\r\n-- Configuring done\r\n-- Generating done\r\nCMake Warning:\r\n  Manually-specified variables were not used by the project:\r\n\r\n    MM_PACKAGE_VERSION\r\n\r\n\r\n-- Build files have been written to: /home/csnelson/meps/projects/mf/toolchain/.build/json/linux/amd64/debug\r\n[35/40] Building CXX object test/CMakeFiles/json_unit.dir/src/unit-constructor1.cpp.o\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-constructor1.cpp:1282:18: warning: 'basic_json' is deprecated [-Wdeprecated-declarations]\r\n            json j(ss);\r\n                 ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/src/json.hpp:2395:5: note: 'basic_json' has been explicitly marked deprecated here\r\n    JSON_DEPRECATED\r\n    ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/src/json.hpp:85:44: note: expanded from macro 'JSON_DEPRECATED'\r\n    #define JSON_DEPRECATED __attribute__((deprecated))\r\n                                           ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-constructor1.cpp:1290:18: warning: 'basic_json' is deprecated [-Wdeprecated-declarations]\r\n            json j(ss, [](int, json::parse_event_t, const json & val)\r\n                 ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/src/json.hpp:2395:5: note: 'basic_json' has been explicitly marked deprecated here\r\n    JSON_DEPRECATED\r\n    ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/src/json.hpp:85:44: note: expanded from macro 'JSON_DEPRECATED'\r\n    #define JSON_DEPRECATED __attribute__((deprecated))\r\n                                           ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-constructor1.cpp:1308:18: warning: 'basic_json' is deprecated [-Wdeprecated-declarations]\r\n            json j(f);\r\n                 ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/src/json.hpp:2395:5: note: 'basic_json' has been explicitly marked deprecated here\r\n    JSON_DEPRECATED\r\n    ^\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/src/json.hpp:85:44: note: expanded from macro 'JSON_DEPRECATED'\r\n    #define JSON_DEPRECATED __attribute__((deprecated))\r\n                                           ^\r\n3 warnings generated.\r\n[40/40] Linking CXX executable test/json_unit\r\nTest project /home/csnelson/meps/projects/mf/toolchain/.build/json/linux/amd64/debug\r\n    Start 1: json_unit_default\r\n    Start 2: json_unit_all\r\n1/2 Test #1: json_unit_default ................***Failed   10.01 sec\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\njson_unit is a Catch v1.7.2 host application.\r\nRun with -? for options\r\n\r\n-------------------------------------------------------------------------------\r\nregression tests\r\n  issue #378 - locale-independent num-to-str\r\n-------------------------------------------------------------------------------\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:424\r\n...............................................................................\r\n\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:434: FAILED:\r\n  CHECK( strcmp(buf.data(), \"12345,67\") == 0 )\r\nwith expansion:\r\n  2 == 0\r\n\r\n-------------------------------------------------------------------------------\r\nregression tests\r\n  issue #379 - locale-independent str-to-num\r\n-------------------------------------------------------------------------------\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:444\r\n...............................................................................\r\n\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:453: FAILED:\r\n  CHECK( std::strtod(\"3,14\", nullptr) == 3.14 )\r\nwith expansion:\r\n  3.0 == 3.14\r\n\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:456: FAILED:\r\n  CHECK( std::strtod(\"3.14\", nullptr) == 3 )\r\nwith expansion:\r\n  3.14 == 3\r\n\r\n===============================================================================\r\ntest cases:      49 |      48 passed | 1 failed\r\nassertions: 2305562 | 2305559 passed | 3 failed\r\n\r\n\r\n2/2 Test #2: json_unit_all ....................***Failed   64.71 sec\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\njson_unit is a Catch v1.7.2 host application.\r\nRun with -? for options\r\n\r\n-------------------------------------------------------------------------------\r\nregression tests\r\n  issue #378 - locale-independent num-to-str\r\n-------------------------------------------------------------------------------\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:424\r\n...............................................................................\r\n\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:434: FAILED:\r\n  CHECK( strcmp(buf.data(), \"12345,67\") == 0 )\r\nwith expansion:\r\n  2 == 0\r\n\r\n-------------------------------------------------------------------------------\r\nregression tests\r\n  issue #379 - locale-independent str-to-num\r\n-------------------------------------------------------------------------------\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:444\r\n...............................................................................\r\n\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:453: FAILED:\r\n  CHECK( std::strtod(\"3,14\", nullptr) == 3.14 )\r\nwith expansion:\r\n  3.0 == 3.14\r\n\r\n/home/csnelson/meps/projects/mf/toolchain/json-2.1.1/test/src/unit-regression.cpp:456: FAILED:\r\n  CHECK( std::strtod(\"3.14\", nullptr) == 3 )\r\nwith expansion:\r\n  3.14 == 3\r\n\r\n===============================================================================\r\ntest cases:       53 |       52 passed | 1 failed\r\nassertions: 11202643 | 11202640 passed | 3 failed\r\n\r\n\r\n\r\n0% tests passed, 2 tests failed out of 2\r\n\r\nTotal Test time (real) =  64.71 sec\r\n\r\nThe following tests FAILED:\r\n          1 - json_unit_default (Failed)\r\n          2 - json_unit_all (Failed)\r\nErrors while running CTest\r\nUnable to build project.\r\n```\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/844", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/844/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/844/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/844/events", "html_url": "https://github.com/nlohmann/json/pull/844", "id": 276813006, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU0NjcyMjAx", "number": 844, "title": "Add .natvis for MSVC debug view", "user": {"login": "TinyTinni", "id": 18199235, "node_id": "MDQ6VXNlcjE4MTk5MjM1", "avatar_url": "https://avatars3.githubusercontent.com/u/18199235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TinyTinni", "html_url": "https://github.com/TinyTinni", "followers_url": "https://api.github.com/users/TinyTinni/followers", "following_url": "https://api.github.com/users/TinyTinni/following{/other_user}", "gists_url": "https://api.github.com/users/TinyTinni/gists{/gist_id}", "starred_url": "https://api.github.com/users/TinyTinni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TinyTinni/subscriptions", "organizations_url": "https://api.github.com/users/TinyTinni/orgs", "repos_url": "https://api.github.com/users/TinyTinni/repos", "events_url": "https://api.github.com/users/TinyTinni/events{/privacy}", "received_events_url": "https://api.github.com/users/TinyTinni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 10, "created_at": "2017-11-26T10:01:22Z", "updated_at": "2017-12-04T20:43:28Z", "closed_at": "2017-12-04T20:43:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/844", "html_url": "https://github.com/nlohmann/json/pull/844", "diff_url": "https://github.com/nlohmann/json/pull/844.diff", "patch_url": "https://github.com/nlohmann/json/pull/844.patch"}, "body": "This PR adds a .natvis improving the debug view of `nlohmann::basic_json` in the MSVC GUI.\r\nAlso, included the ..natvis file into CMake install process.\r\n\r\nThe supported container types for the template arguments `object `and `array` are generic and the container's .natvis will be shown (if declared).\r\n\r\nHere is an example view from the readme test (MSVC2017): [![example_view.png](https://s18.postimg.org/woqxdlihl/example_view.png)](https://postimg.org/image/a01qe113p/)\r\n\r\nThere is also a name bug in the CMakeLists for tests. I did not created a second issue, since it's just the name-prefix which is missing.\r\n I can create a new pull request if you want or you can fix it on your own. (its the first commit).\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/843", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/843/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/843/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/843/events", "html_url": "https://github.com/nlohmann/json/issues/843", "id": 276726133, "node_id": "MDU6SXNzdWUyNzY3MjYxMzM=", "number": 843, "title": "Converting to array not working", "user": {"login": "hsdk123", "id": 4100142, "node_id": "MDQ6VXNlcjQxMDAxNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4100142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsdk123", "html_url": "https://github.com/hsdk123", "followers_url": "https://api.github.com/users/hsdk123/followers", "following_url": "https://api.github.com/users/hsdk123/following{/other_user}", "gists_url": "https://api.github.com/users/hsdk123/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsdk123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsdk123/subscriptions", "organizations_url": "https://api.github.com/users/hsdk123/orgs", "repos_url": "https://api.github.com/users/hsdk123/repos", "events_url": "https://api.github.com/users/hsdk123/events{/privacy}", "received_events_url": "https://api.github.com/users/hsdk123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-25T04:58:18Z", "updated_at": "2017-11-28T21:00:30Z", "closed_at": "2017-11-28T21:00:30Z", "author_association": "NONE", "body": "Converting from an std array to json works fine.\r\nHowever, the other way round gives errors.\r\n\r\n```\r\njson j;\r\nstd::array<int, 4> ar = {1, 1, 1, 1};\r\nj = ar; // works fine\r\nar = j; // breaks\r\n```\r\n\r\nI'm given the error that 'insert' doesn't exist for array.\r\nConsidering we're given j.size(), I believe this shouldn't be something that should be breaking. \r\n(since I can already work around this by creating a loop that adds individual elements)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/842", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/842/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/842/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/842/events", "html_url": "https://github.com/nlohmann/json/issues/842", "id": 276435802, "node_id": "MDU6SXNzdWUyNzY0MzU4MDI=", "number": 842, "title": "Iteration weirdness", "user": {"login": "Exaeta", "id": 2097010, "node_id": "MDQ6VXNlcjIwOTcwMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2097010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Exaeta", "html_url": "https://github.com/Exaeta", "followers_url": "https://api.github.com/users/Exaeta/followers", "following_url": "https://api.github.com/users/Exaeta/following{/other_user}", "gists_url": "https://api.github.com/users/Exaeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/Exaeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Exaeta/subscriptions", "organizations_url": "https://api.github.com/users/Exaeta/orgs", "repos_url": "https://api.github.com/users/Exaeta/repos", "events_url": "https://api.github.com/users/Exaeta/events{/privacy}", "received_events_url": "https://api.github.com/users/Exaeta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-11-23T16:56:03Z", "updated_at": "2017-12-14T19:08:36Z", "closed_at": "2017-12-14T19:08:36Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nIt seems that right now iterating over a `json` object iterates over it as though it was an array, which is counter intuitive from the C++ perspective, which you would expect to be iterated like a `std::map`.\r\n\r\nI suggest `json::as_map()` and `json::as_array()` so that one can do:\r\n\r\n```C++\r\nvoid foobar (nlohmann::json js1, nlohmann::json js2)\r\n{\r\n  for (auto & x : js2.as_map())\r\n  {\r\n    foo(x.first, x.second);\r\n  }\r\n\r\n  for (auto & x : js2.as_array())\r\n  {\r\n    bar(x);\r\n  }\r\n}\r\n```\r\n\r\nBoth would return proxy objects (objects that contain a reference to the original, and different `begin()` and `end()` functions.)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/841", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/841/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/841/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/841/events", "html_url": "https://github.com/nlohmann/json/issues/841", "id": 275775025, "node_id": "MDU6SXNzdWUyNzU3NzUwMjU=", "number": 841, "title": "Use reference or pointer as Object value", "user": {"login": "go2sh", "id": 150886, "node_id": "MDQ6VXNlcjE1MDg4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/150886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/go2sh", "html_url": "https://github.com/go2sh", "followers_url": "https://api.github.com/users/go2sh/followers", "following_url": "https://api.github.com/users/go2sh/following{/other_user}", "gists_url": "https://api.github.com/users/go2sh/gists{/gist_id}", "starred_url": "https://api.github.com/users/go2sh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/go2sh/subscriptions", "organizations_url": "https://api.github.com/users/go2sh/orgs", "repos_url": "https://api.github.com/users/go2sh/repos", "events_url": "https://api.github.com/users/go2sh/events{/privacy}", "received_events_url": "https://api.github.com/users/go2sh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-21T16:25:11Z", "updated_at": "2017-11-27T07:45:05Z", "closed_at": "2017-11-27T07:45:05Z", "author_association": "NONE", "body": "Hi there,\r\n\r\nI have a small question. Is it possible to set the value of an object element to a reference or point without copying it?\r\nWhat I like to achieve is the following\r\n```\r\njson data, result, response;\r\nbool hasError = calcResult(data, result);\r\nif (hasError) {\r\nresponse[\"error\"] = result; // no copy\r\n} else {\r\nresponse[\"result\"] = result; // nocopy\r\n}\r\n```\r\nThanks for your help. :)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/840", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/840/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/840/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/840/events", "html_url": "https://github.com/nlohmann/json/issues/840", "id": 275577029, "node_id": "MDU6SXNzdWUyNzU1NzcwMjk=", "number": 840, "title": "Ambiguity in parsing nested maps", "user": {"login": "quicknir", "id": 10457096, "node_id": "MDQ6VXNlcjEwNDU3MDk2", "avatar_url": "https://avatars3.githubusercontent.com/u/10457096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quicknir", "html_url": "https://github.com/quicknir", "followers_url": "https://api.github.com/users/quicknir/followers", "following_url": "https://api.github.com/users/quicknir/following{/other_user}", "gists_url": "https://api.github.com/users/quicknir/gists{/gist_id}", "starred_url": "https://api.github.com/users/quicknir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quicknir/subscriptions", "organizations_url": "https://api.github.com/users/quicknir/orgs", "repos_url": "https://api.github.com/users/quicknir/repos", "events_url": "https://api.github.com/users/quicknir/events{/privacy}", "received_events_url": "https://api.github.com/users/quicknir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-11-21T03:51:32Z", "updated_at": "2017-11-26T09:14:31Z", "closed_at": "2017-11-25T21:34:03Z", "author_association": "NONE", "body": "This is considered ambiguous and a compile time error:\r\n\r\n```cpp\r\n#include \"json.hpp\"\r\n\r\n#include <iostream>\r\n#include <unordered_map>\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    std::cerr << \"foo\";\r\n    try {\r\n        auto j = json::parse(R\"(\r\n                         { \"m\": {\"one\": int}}\r\n                         )\");\r\n\r\n        using T = std::unordered_map<std::string, std::unordered_map<std::string, int>>;\r\n\r\n         auto m = j.at(\"m\").get<T>();\r\n    }\r\n    catch (...) {}\r\n    return 0;\r\n}\r\n```\r\n\r\nThe error is a bit long but I can paste it here if desired. I don't see why this is ambiguous, seems like given the input and the types I specified there is only one possible output. Is this considered a bug? Either way, is there a workaround?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/839", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/839/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/839/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/839/events", "html_url": "https://github.com/nlohmann/json/issues/839", "id": 275545891, "node_id": "MDU6SXNzdWUyNzU1NDU4OTE=", "number": 839, "title": "could not find from_json() method in T's namespace", "user": {"login": "BrunoLogan", "id": 5592955, "node_id": "MDQ6VXNlcjU1OTI5NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5592955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrunoLogan", "html_url": "https://github.com/BrunoLogan", "followers_url": "https://api.github.com/users/BrunoLogan/followers", "following_url": "https://api.github.com/users/BrunoLogan/following{/other_user}", "gists_url": "https://api.github.com/users/BrunoLogan/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrunoLogan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrunoLogan/subscriptions", "organizations_url": "https://api.github.com/users/BrunoLogan/orgs", "repos_url": "https://api.github.com/users/BrunoLogan/repos", "events_url": "https://api.github.com/users/BrunoLogan/events{/privacy}", "received_events_url": "https://api.github.com/users/BrunoLogan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-21T00:33:23Z", "updated_at": "2017-11-21T01:51:59Z", "closed_at": "2017-11-21T01:51:59Z", "author_association": "NONE", "body": "Using the code from the develop branch. I get the error \"could not find from_json() method in T's namespace\" even when the functions are declared and implemented.\r\n\r\nHere's an example:\r\nthe error occurs on this line:\r\n\r\n`vector<Serial::serial_chunk> chunks = curr[\"serialChunks\"].get<vector<Serial::serial_chunk>>();`\r\n\r\nthe struct is:\r\n\r\n```\r\nstruct serial_chunk {\r\n\r\n        int start;\r\n        int length;\r\n        MeaningType meaning;\r\n\r\n        void to_json(json& j, const serial_chunk& sc) {\r\n            j = json{{\"start\", sc.start}, {\"length\", sc.length}, {\"meaning\", sc.meaning}};\r\n        }\r\n        \r\n        void from_json(const json& j, serial_chunk& sc) {\r\n            sc.start = j.at(\"start\").get<int>();\r\n            sc.length = j.at(\"length\").get<int>();\r\n            sc.meaning = j.at(\"meaning\").get<MeaningType>();\r\n        }\r\n    };\r\n```\r\nMeaningType is an enum.\r\nThis struct declaration occurs inside the header file of a class as a public member.\r\nI tried define the methods in a class as well and I get the same error. I'm using Xcode 9.1.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/838", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/838/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/838/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/838/events", "html_url": "https://github.com/nlohmann/json/issues/838", "id": 275422047, "node_id": "MDU6SXNzdWUyNzU0MjIwNDc=", "number": 838, "title": "Incorrect parse error with binary data in keys?", "user": {"login": "charlie-ht", "id": 14251608, "node_id": "MDQ6VXNlcjE0MjUxNjA4", "avatar_url": "https://avatars2.githubusercontent.com/u/14251608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlie-ht", "html_url": "https://github.com/charlie-ht", "followers_url": "https://api.github.com/users/charlie-ht/followers", "following_url": "https://api.github.com/users/charlie-ht/following{/other_user}", "gists_url": "https://api.github.com/users/charlie-ht/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlie-ht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlie-ht/subscriptions", "organizations_url": "https://api.github.com/users/charlie-ht/orgs", "repos_url": "https://api.github.com/users/charlie-ht/repos", "events_url": "https://api.github.com/users/charlie-ht/events{/privacy}", "received_events_url": "https://api.github.com/users/charlie-ht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 10, "created_at": "2017-11-20T16:44:29Z", "updated_at": "2017-12-13T05:35:29Z", "closed_at": "2017-12-13T05:35:29Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nI get a parse error after deserializing a map<string, string>, the serialised message was created by same version of library. The key is binary data. The error message is not helpful to find what went wrong.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nm_message below contains the data to parse, the library seems to have done some escaping of my data but a quick inspection of the data suggests it's valid.\r\n```\r\nm_message is {\"g\\u0007\\r\\\"(G&\u07c6\":\"KeyUsable\",\"{\\u0013(T[\\u001e>\":\"KeyUsable\",\"x R\\u0000W}UF\":\"KeyUsable\",\"u000e\\u0012]=_\":\"KeyUsable\"}\r\n00000000 7b 22 67 5c 75 30 30 30 37 5c 72 d7 7e d6 5f 5c |{\"g\\u0007\\r.~._\\|\r\n00000010 22 ae 28 47 26 df 86 f7 7f 22 3a 22 4b 65 79 55 |\".(G&....\":\"KeyU|\r\n00000020 73 61 62 6c 65 22 2c 22 7b 5c 75 30 30 31 33 28 |sable\",\"{\\u0013(|\r\n00000030 eb 61 b5 54 e2 93 f7 5b 5c 75 30 30 31 65 3e 94 |.a.T...[\\u001e>.|\r\n00000040 cc 3b 22 3a 22 4b 65 79 55 73 61 62 6c 65 22 2c |.;\":\"KeyUsable\",|\r\n00000050 22 93 78 99 20 e8 d6 52 5c 75 30 30 30 30 98 57 |\".x....R\\u0000.W|\r\n00000060 7d f8 f2 dd 55 46 22 3a 22 4b 65 79 55 73 61 62 |}...UF\":\"KeyUsab|\r\n00000070 6c 65 22 2c 22 f0 92 9b 5c 75 30 30 30 65 5c 75 |le\",\"...\\u000e\\u|\r\n00000080 30 30 31 32 c8 5e 5d 95 fe 3d 5f da e6 fb a8 22 |0012.^]..=_....\"|\r\n00000090 3a 22 4b 65 79 55 73 61 62 6c 65 22 7d          |:\"KeyUsable\"}   |\r\nterminate called after throwing an instance of 'std::invalid_argument'\r\n  what():  parse error - unexpected '\"'; expected string literal\r\n```\r\nI provide hexdump of message above the given error. That error isn't enough for me to understand what went wrong.\r\n- What is the expected behavior?\r\n```\r\n-{\r\n\"g\\u0007\\r\\\"(G&\u07c6\" : KeyUsable,\r\n\"{\\u0013(T[\\u001e>\" : KeyUsable,\r\n\"x R\\u0000W}UF\" : KeyUsable,\r\n\"u000e\\u0012]=_\" : KeyUsable\r\n}\r\n```\r\n- And what is the actual behavior instead?\r\nA crash, please see above\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\narm-buildroot-linux-gnueabihf-g++.br_real (Buildroot 2017.05-git-13055-g71f35cff8-dirty) 5.4.0\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nersion 2.1.1\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\nNo compilation error\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/837", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/837/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/837/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/837/events", "html_url": "https://github.com/nlohmann/json/issues/837", "id": 275329351, "node_id": "MDU6SXNzdWUyNzUzMjkzNTE=", "number": 837, "title": "json_pointer public push_back, pop_back", "user": {"login": "HugoLopata", "id": 33831327, "node_id": "MDQ6VXNlcjMzODMxMzI3", "avatar_url": "https://avatars0.githubusercontent.com/u/33831327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HugoLopata", "html_url": "https://github.com/HugoLopata", "followers_url": "https://api.github.com/users/HugoLopata/followers", "following_url": "https://api.github.com/users/HugoLopata/following{/other_user}", "gists_url": "https://api.github.com/users/HugoLopata/gists{/gist_id}", "starred_url": "https://api.github.com/users/HugoLopata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HugoLopata/subscriptions", "organizations_url": "https://api.github.com/users/HugoLopata/orgs", "repos_url": "https://api.github.com/users/HugoLopata/repos", "events_url": "https://api.github.com/users/HugoLopata/events{/privacy}", "received_events_url": "https://api.github.com/users/HugoLopata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-11-20T11:52:27Z", "updated_at": "2018-06-06T09:58:46Z", "closed_at": "2018-06-06T09:58:46Z", "author_association": "NONE", "body": "**Feature Request**\r\nI am generating some json pointers. It would be handy using push_back instead of composing string with slashes, which is subsequently broken to vector of strings by json_pointer.\r\n\r\nAccess to internal data may be handy too:\r\n`const vector<string>& json_pointer::impl() const;`"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/836", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/836/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/836/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/836/events", "html_url": "https://github.com/nlohmann/json/issues/836", "id": 275303953, "node_id": "MDU6SXNzdWUyNzUzMDM5NTM=", "number": 836, "title": "using dump() when std::wstring is StringType with VS2017", "user": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars3.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-20T10:23:47Z", "updated_at": "2017-11-22T06:26:27Z", "closed_at": "2017-11-22T06:26:17Z", "author_association": "NONE", "body": "I may be doing something stupid, but I'm trying to use std::wstring as my string type. If I call json::dump on my wstring'ed json object, it seems to not be able to convert from char to wchar_t if I correctly understand an error message that is too verbose to not be opaque.  I quote the errors at the bottom.  This is with VisualStudio 2017. I cloned the git repo a few weeks ago, and haven't tried with the latest version, but I didn't see any pertinent checkins in the meantime. I may have missed them of course.  Likewise for examples that use a different string type, I also didn't find any closed issues referring to wchar_t or std::wstring.\r\n\r\nMy declarations look like:\r\n```\r\n        namespace utility { typedef string_t std::wstring; }\r\n        nlohmann::basic_json<std::map, std::vector, utility::string_t> j = njson::parse(wbody); // here wbody is of type std::wstring\r\n```\r\nand the call to dump is\r\n      `       utility::string_t dump = j.dump(0); // again utility::string_t is std::wstring.`\r\n\r\nIs this expected?\r\n\r\nThank you for your good work. The library has really made my life a lot easier.\r\n\r\n(The first warning always appears when including the header, and is unrelated.)\r\n```\r\n1>C:\\tobi\\Source\\json/json.hpp(5961): warning C4819: The file contains a character that cannot be represented in the current code page (932). Save the file in Unicode format to prevent data loss\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): error C2440: '<function-style-cast>': cannot convert from 'std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>' to 'nlohmann::detail::output_adapter<char>'\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): note: No constructor could take the source type, or constructor overload resolution was ambiguous\r\n1>C:\\tobi\\Source\\json/json.hpp(8997): note: while compiling class template member function 'std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::dump(const int,const char,const bool) const'\r\n1>C:\\tobi\\Source\\source.cpp(57): note: see reference to function template instantiation 'std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::dump(const int,const char,const bool) const' being compiled\r\n1>C:\\tobi\\Source\\source.cpp(34): note: see reference to class template instantiation 'nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>' being compiled\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): error C2664: 'nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>>::serializer(const nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>> &)': cannot convert argument 1 from 'const char' to 'const nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>> &'\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): note: Reason: cannot convert from 'const char' to 'const nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,utility::string_t,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>>'\r\n1>C:\\tobi\\Source\\json/json.hpp(8999): note: No constructor could take the source type, or constructor overload resolution was ambiguous\r\n\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/835", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/835/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/835/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/835/events", "html_url": "https://github.com/nlohmann/json/issues/835", "id": 275289408, "node_id": "MDU6SXNzdWUyNzUyODk0MDg=", "number": 835, "title": "Show the path of the currently parsed value when an error occurs", "user": {"login": "santilin", "id": 6593992, "node_id": "MDQ6VXNlcjY1OTM5OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6593992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santilin", "html_url": "https://github.com/santilin", "followers_url": "https://api.github.com/users/santilin/followers", "following_url": "https://api.github.com/users/santilin/following{/other_user}", "gists_url": "https://api.github.com/users/santilin/gists{/gist_id}", "starred_url": "https://api.github.com/users/santilin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santilin/subscriptions", "organizations_url": "https://api.github.com/users/santilin/orgs", "repos_url": "https://api.github.com/users/santilin/repos", "events_url": "https://api.github.com/users/santilin/events{/privacy}", "received_events_url": "https://api.github.com/users/santilin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-20T09:35:32Z", "updated_at": "2017-11-25T08:35:00Z", "closed_at": "2017-11-25T08:35:00Z", "author_association": "NONE", "body": "**Feature Request**\r\nIt would be nice to get the path of the json file when an error occurs. Currently, only the type of the error is printed, with no way to know where in the json tree it happend, so it is very difficult to find the error.\r\n\r\nFor parse errors, I have implemented a way to show the place of the error:\r\n\r\n```cpp\r\n\ttry {\r\n\t\treturn json::parse(f);\r\n\t} catch( nlohmann::detail::parse_error &e ) {\r\n\t\tXtring err = e.what();\r\n\t\tstd::cout << err << std::endl;\r\n\t\tif (e.byte > 1 )\r\n\t\t\tf.seekg(e.byte - 2);\r\n\t\telse \r\n\t\t\tf.seekg(0);\r\n\t\tchar text[121];\r\n\t\tf.read(text, 120);\r\n\t\tstd::cout << text << std::endl;\r\n\t\texit(1);\r\n\t}\r\n    }\r\n```\r\n\r\nAnd for type errors, I have tweaked the code for every JSON_THROW so that I get a dump of the value being parsed. But as I can not get the parent nor the name, only the value, I don't know where the error in the parse tree es:\r\n\r\n```cpp\r\n        JSON_THROW(type_error::create(302, \"type must be string, but is \" + std::string(j.type_name()) + j.dump() ));\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/834", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/834/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/834/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/834/events", "html_url": "https://github.com/nlohmann/json/issues/834", "id": 275237697, "node_id": "MDU6SXNzdWUyNzUyMzc2OTc=", "number": 834, "title": "Using input_adapter in a slightly unexpected way", "user": {"login": "chetmurthy", "id": 1755771, "node_id": "MDQ6VXNlcjE3NTU3NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1755771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetmurthy", "html_url": "https://github.com/chetmurthy", "followers_url": "https://api.github.com/users/chetmurthy/followers", "following_url": "https://api.github.com/users/chetmurthy/following{/other_user}", "gists_url": "https://api.github.com/users/chetmurthy/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetmurthy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetmurthy/subscriptions", "organizations_url": "https://api.github.com/users/chetmurthy/orgs", "repos_url": "https://api.github.com/users/chetmurthy/repos", "events_url": "https://api.github.com/users/chetmurthy/events{/privacy}", "received_events_url": "https://api.github.com/users/chetmurthy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 30, "created_at": "2017-11-20T04:58:45Z", "updated_at": "2018-04-27T21:25:09Z", "closed_at": "2018-04-27T21:25:09Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nI'm trying to use input_adapter to wrap an Apache Thrift Transport (the details aren't really relevant).  To that end, I need to provide the json::parse() function my own subclass of input_adapter_protocol, instead of an input_adapter.  I'm happy to send a PR, but figured I should at least first check that this isn't something foolish, or something that can be achieved in another way?  It was *extremely* straightforward to make my own subclass of input_adapter_protocol, btw.\r\n```diff\r\nmodified   src/lib/cpp/json.hpp\r\n@@ -1562,6 +1562,8 @@ class input_adapter\r\n   public:\r\n     // native support\r\n \r\n+  explicit input_adapter(input_adapter_t arg_ia) : ia(arg_ia) { }\r\n+\r\n     /// input adapter for input stream\r\n     input_adapter(std::istream& i)\r\n         : ia(std::make_shared<cached_input_stream_adapter<16384>>(i)) {}\r\n\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/833", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/833/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/833/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/833/events", "html_url": "https://github.com/nlohmann/json/issues/833", "id": 275212366, "node_id": "MDU6SXNzdWUyNzUyMTIzNjY=", "number": 833, "title": "Repetitive data type while reading", "user": {"login": "pompex", "id": 4152201, "node_id": "MDQ6VXNlcjQxNTIyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4152201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pompex", "html_url": "https://github.com/pompex", "followers_url": "https://api.github.com/users/pompex/followers", "following_url": "https://api.github.com/users/pompex/following{/other_user}", "gists_url": "https://api.github.com/users/pompex/gists{/gist_id}", "starred_url": "https://api.github.com/users/pompex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pompex/subscriptions", "organizations_url": "https://api.github.com/users/pompex/orgs", "repos_url": "https://api.github.com/users/pompex/repos", "events_url": "https://api.github.com/users/pompex/events{/privacy}", "received_events_url": "https://api.github.com/users/pompex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-20T01:21:01Z", "updated_at": "2017-11-21T09:02:53Z", "closed_at": "2017-11-21T09:02:53Z", "author_association": "NONE", "body": "Is this possible to get a value with auto data type detection?\r\n\r\nConsider following:\r\n\r\n```\r\nstruct Test {\r\n       std::string value;\r\n       int32_t index;\r\n       std::vector<int32_t> acro;\r\n}\r\n```\r\n\r\nTo parse these, we need to do the following:\r\n\r\n```\r\nvoid from_json(const json& j, Files::Chapters::Test& p) {\r\n    p.value = j.at(\"value\").get<std::string>();\r\n    p.index = j.at(\"index\").get<int32_t>();\r\n    p.acro = j.at(\"acro\").get<std::vector<int32_t>>();\r\n}\r\n```\r\nThats quite a boilerplate.\r\n\r\nWe can also do this:\r\n\r\n```\r\nvoid from_json(const json& j, Files::Chapters::Test& p) {\r\n    p.value = j.at(\"value\").get<typeof(p.value)>();\r\n    p.index = j.at(\"index\").get<typeof(p.index)>();\r\n    p.acro = j.at(\"acro\").get<typeof(p.acro)>();\r\n}\r\n```\r\n\r\nAs you can see, this is repetitive thus redudant. Can't we simply get value with the data type of a object we assign to?\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/832", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/832/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/832/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/832/events", "html_url": "https://github.com/nlohmann/json/issues/832", "id": 274605103, "node_id": "MDU6SXNzdWUyNzQ2MDUxMDM=", "number": 832, "title": "Stack-overflow (OSS-Fuzz 4234)", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2017-11-16T17:47:17Z", "updated_at": "2018-06-26T14:28:40Z", "closed_at": "2018-06-26T14:28:39Z", "author_association": "OWNER", "body": "```\r\nDetailed report: https://oss-fuzz.com/testcase?key=5854339613589504\r\n\r\nProject: json\r\nFuzzer: libFuzzer_json_parse_cbor_fuzzer\r\nJob Type: libfuzzer_asan_json\r\nPlatform Id: linux\r\n\r\nCrash Type: Stack-overflow\r\nCrash Address: 0x7ffc55e22ce8\r\nCrash State:\r\nnlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<cha\r\nnlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::ve\r\nnlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<cha\r\n\r\nSanitizer: address (ASAN)\r\n\r\nRegressed: https://oss-fuzz.com/revisions?job=libfuzzer_asan_json&range=201701031958:201701032147\r\n\r\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=5854339613589504\r\n\r\nIssue filed automatically.\r\n\r\nSee https://github.com/google/oss-fuzz/blob/master/docs/reproducing.md for more information.\r\n\r\nThis bug is subject to a 90 day disclosure deadline. If 90 days elapse\r\nwithout an upstream patch, then the bug report will automatically\r\nbecome visible to the public.\r\n```\r\n\r\n[clusterfuzz-testcase-minimized-5854339613589504.dms.zip](https://github.com/nlohmann/json/files/1479599/clusterfuzz-testcase-minimized-5854339613589504.dms.zip)\r\n\r\nStack trace:\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n--\r\n\u00a0 | =================================================================\r\n\u00a0 | ==1==ERROR: AddressSanitizer: stack-overflow on address 0x7ffc55e22ce8 (pc 0x000000515f22 bp 0x7ffc55e23530 sp 0x7ffc55e22cd0 T0)\r\n\u00a0 | SCARINESS: 10 (stack-overflow)\r\n\u00a0 | #0 0x515f21 in operator new(unsigned long) _asan_rtl_\r\n\u00a0 | #1 0x5a6470 in __allocate /usr/local/include/c++/v1/new:226:10\r\n\u00a0 | #2 0x5a6470 in allocate /usr/local/include/c++/v1/memory:1747\r\n\u00a0 | #3 0x5a6470 in std::__1::vector<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> > >* nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>::create<std::__1::vector<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> > >>() json/src/json.hpp:7939\r\n\u00a0 | #4 0x5a5fcf in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>::json_value::json_value(nlohmann::detail::value_t) json/src/json.hpp:8013:29\r\n\u00a0 | #5 0x5a0061 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer>::basic_json(nlohmann::detail::value_t) json/src/json.hpp:8249:22\r\n\u00a0 | #6 0x59ed6a in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5374:32\r\n\u00a0 | #7 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n\u00a0 | #8 0x5a4bd0 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int)::{lambda()#1}::operator()() const json/src/json.hpp:5377:20\r\n\u00a0 | #9 0x59ee2e in generate_n<std::__1::back_insert_iterator<std::__1::vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >, int, (lambda at ../src/json.hpp:5375:73)> /usr/local/include/c++/v1/algorithm:2186:20\r\n\u00a0 | #10 0x59ee2e in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5375\r\n\u00a0 | #11 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n\u00a0 | #12 0x5a4bd0 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int)::{lambda()#1}::operator()() const json/src/json.hpp:5377:20\r\n\u00a0 | #13 0x59ee2e in generate_n<std::__1::back_insert_iterator<std::__1::vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >, int, (lambda at ../src/json.hpp:5375:73)> /usr/local/include/c++/v1/algorithm:2186:20\r\n\u00a0 | #14 0x59ee2e in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5375\r\n\u00a0 | #15 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n\u00a0 | #16 0x5a4bd0 in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int)::{lambda()#1}::operator()() const json/src/json.hpp:5377:20\r\n\u00a0 | #17 0x59ee2e in generate_n<std::__1::back_insert_iterator<std::__1::vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long, unsigned long, double, std::allocator, adl_serializer> > > >, int, (lambda at ../src/json.hpp:5375:73)> /usr/local/include/c++/v1/algorithm:2186:20\r\n\u00a0 | #18 0x59ee2e in nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::get_cbor_array<int>(int) json/src/json.hpp:5375\r\n\u00a0 | #19 0x59bd2e in nlohmann::detail::binary_reader<nlohmann::basic_json<std::__1::map, std::__1::vector, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, long, unsigned long, double, std::__1::allocator, nlohmann::adl_serializer> >::parse_cbor_internal(bool) json/src/json.hpp:4717:24\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/831", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/831/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/831/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/831/events", "html_url": "https://github.com/nlohmann/json/issues/831", "id": 274474099, "node_id": "MDU6SXNzdWUyNzQ0NzQwOTk=", "number": 831, "title": "Storing multiple types inside map", "user": {"login": "pompex", "id": 4152201, "node_id": "MDQ6VXNlcjQxNTIyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4152201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pompex", "html_url": "https://github.com/pompex", "followers_url": "https://api.github.com/users/pompex/followers", "following_url": "https://api.github.com/users/pompex/following{/other_user}", "gists_url": "https://api.github.com/users/pompex/gists{/gist_id}", "starred_url": "https://api.github.com/users/pompex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pompex/subscriptions", "organizations_url": "https://api.github.com/users/pompex/orgs", "repos_url": "https://api.github.com/users/pompex/repos", "events_url": "https://api.github.com/users/pompex/events{/privacy}", "received_events_url": "https://api.github.com/users/pompex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-11-16T10:56:38Z", "updated_at": "2017-11-26T10:26:04Z", "closed_at": "2017-11-25T21:43:31Z", "author_association": "NONE", "body": "Hello. Recently I have discovered this library and decided to give it a try. It looks really promising.\r\n\r\nI have faced my first issue however. While performing JSON file loading I would like to parse and store some values by id in a map.\r\n\r\nLike this:\r\n```\r\nm_loadedFile = json::parse(rdbuf);\r\n\r\n// My map\r\nenum jsonVar_t {\r\n    UNIQUE_NUMBER,\r\n    MESSAGE,\r\n    INTERVAL,\r\n};\r\n\r\nstd::map<jsonVar_t, json> test;\r\n\r\ntest.insert(std::make_pair(UNIQUE_NUMBER, m_loadedFile.at(\"uniqueNumber\").get<int32_t>()));\r\ntest.insert(std::make_pair(MESSAGE, m_loadedFile.at(\"message\").get<std::string>()));\r\ntest.insert(std::make_pair(INTERVAL, m_loadedFile.at(\"interval\").get<float>()));\r\n\r\n// Then I would like to access it like:\r\n\r\ntest[MESSAGE];\r\n```\r\n\r\nBasically it's working. However, when I'm printing `test[MESSAGE]` I get the message being quoted: \"My Message\". Similar issue for integers, which are not even integers (need to cast them in order).\r\n\r\n**How can I properly parse and store my data and then retrieve it with correct data type?**"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/830", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/830/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/830/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/830/events", "html_url": "https://github.com/nlohmann/json/issues/830", "id": 274226237, "node_id": "MDU6SXNzdWUyNzQyMjYyMzc=", "number": 830, "title": "Application terminating", "user": {"login": "pompex", "id": 4152201, "node_id": "MDQ6VXNlcjQxNTIyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4152201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pompex", "html_url": "https://github.com/pompex", "followers_url": "https://api.github.com/users/pompex/followers", "following_url": "https://api.github.com/users/pompex/following{/other_user}", "gists_url": "https://api.github.com/users/pompex/gists{/gist_id}", "starred_url": "https://api.github.com/users/pompex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pompex/subscriptions", "organizations_url": "https://api.github.com/users/pompex/orgs", "repos_url": "https://api.github.com/users/pompex/repos", "events_url": "https://api.github.com/users/pompex/events{/privacy}", "received_events_url": "https://api.github.com/users/pompex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-15T16:46:28Z", "updated_at": "2017-11-15T22:09:54Z", "closed_at": "2017-11-15T22:09:35Z", "author_association": "NONE", "body": "When I'm trying to run compiled application with simple parse code it fails with an exception:\r\n\r\n> [json.exception.parse_error.101] parse error at 73: syntax error - unexpected '}'; expected string literal\r\n\r\nCode:\r\n\r\n```\r\nint main() {\r\n    std::ifstream     file(\"test.json\");\r\n    std::stringstream buffer;\r\n    buffer << file.rdbuf();\r\n\r\n    json config;\r\n\r\n    try {\r\n        config = json::parse(buffer);\r\n    } catch (const json::exception& e) {\r\n        std::cout << \"Loading error: \" << e.what() << \"\\n\";\r\n        exit(-1);\r\n    }\r\n\r\n    try {\r\n        std::cout << \"Name: \" << config[\"name\"] << \"\\n\";\r\n    } catch (const json::exception& e) {\r\n        std::cout << \"Couldnt parse: \" << e.what() << \"\\n\";\r\n        exit(-1);\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\nJSON file is indeed valid:\r\n\r\n```\r\n{\r\n  \"pi\": 3.141,\r\n  \"happy\": true,\r\n  \"name\": \"Niels\",\r\n  \"nothing\": null,\r\n}\r\n```\r\n\r\nCompiler:\r\n\r\nThread model: win32\r\ngcc version 6.3.0 (MinGW.org GCC-6.3.0-1)\r\n\r\nBug or something I'm doing wrong?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/829", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/829/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/829/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/829/events", "html_url": "https://github.com/nlohmann/json/pull/829", "id": 274063619, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUyNzA1NTUy", "number": 829, "title": "Updated hunter package links", "user": {"login": "jowr", "id": 769593, "node_id": "MDQ6VXNlcjc2OTU5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/769593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jowr", "html_url": "https://github.com/jowr", "followers_url": "https://api.github.com/users/jowr/followers", "following_url": "https://api.github.com/users/jowr/following{/other_user}", "gists_url": "https://api.github.com/users/jowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jowr/subscriptions", "organizations_url": "https://api.github.com/users/jowr/orgs", "repos_url": "https://api.github.com/users/jowr/repos", "events_url": "https://api.github.com/users/jowr/events{/privacy}", "received_events_url": "https://api.github.com/users/jowr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 4, "created_at": "2017-11-15T07:49:32Z", "updated_at": "2017-11-19T12:27:19Z", "closed_at": "2017-11-18T12:35:22Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/829", "html_url": "https://github.com/nlohmann/json/pull/829", "diff_url": "https://github.com/nlohmann/json/pull/829.diff", "patch_url": "https://github.com/nlohmann/json/pull/829.patch"}, "body": "The broken links to the hunter package confused me, but I found the package now. This fixes #828. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/828", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/828/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/828/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/828/events", "html_url": "https://github.com/nlohmann/json/issues/828", "id": 273906714, "node_id": "MDU6SXNzdWUyNzM5MDY3MTQ=", "number": 828, "title": "Missing CMake hunter package?", "user": {"login": "jowr", "id": 769593, "node_id": "MDQ6VXNlcjc2OTU5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/769593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jowr", "html_url": "https://github.com/jowr", "followers_url": "https://api.github.com/users/jowr/followers", "following_url": "https://api.github.com/users/jowr/following{/other_user}", "gists_url": "https://api.github.com/users/jowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/jowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jowr/subscriptions", "organizations_url": "https://api.github.com/users/jowr/orgs", "repos_url": "https://api.github.com/users/jowr/repos", "events_url": "https://api.github.com/users/jowr/events{/privacy}", "received_events_url": "https://api.github.com/users/jowr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-14T19:05:16Z", "updated_at": "2017-11-18T12:35:22Z", "closed_at": "2017-11-18T12:35:22Z", "author_association": "CONTRIBUTOR", "body": "Hi, I am looking for the hunter package mentioned in the README.md, but I cannot find it. Was the package removed from hunter? Would you be interested in having it added again? "}]