[{"url": "https://api.github.com/repos/nlohmann/json/issues/827", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/827/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/827/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/827/events", "html_url": "https://github.com/nlohmann/json/issues/827", "id": 273435782, "node_id": "MDU6SXNzdWUyNzM0MzU3ODI=", "number": 827, "title": "std::map<std::string, std::string> from json object yields C2665: 'std::pair<const _Kty,_Ty>::pair': none of the 2 overloads could convert all the argument types", "user": {"login": "na-n", "id": 15941240, "node_id": "MDQ6VXNlcjE1OTQxMjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/15941240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/na-n", "html_url": "https://github.com/na-n", "followers_url": "https://api.github.com/users/na-n/followers", "following_url": "https://api.github.com/users/na-n/following{/other_user}", "gists_url": "https://api.github.com/users/na-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/na-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/na-n/subscriptions", "organizations_url": "https://api.github.com/users/na-n/orgs", "repos_url": "https://api.github.com/users/na-n/repos", "events_url": "https://api.github.com/users/na-n/events{/privacy}", "received_events_url": "https://api.github.com/users/na-n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-13T13:50:11Z", "updated_at": "2017-11-14T06:12:55Z", "closed_at": "2017-11-14T06:12:55Z", "author_association": "NONE", "body": "please close me, I am a duplicate of #734."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/826", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/826/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/826/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/826/events", "html_url": "https://github.com/nlohmann/json/issues/826", "id": 272956787, "node_id": "MDU6SXNzdWUyNzI5NTY3ODc=", "number": 826, "title": "object.dump gives quoted string, want to use .dump() to generate javascripts.", "user": {"login": "na-n", "id": 15941240, "node_id": "MDQ6VXNlcjE1OTQxMjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/15941240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/na-n", "html_url": "https://github.com/na-n", "followers_url": "https://api.github.com/users/na-n/followers", "following_url": "https://api.github.com/users/na-n/following{/other_user}", "gists_url": "https://api.github.com/users/na-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/na-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/na-n/subscriptions", "organizations_url": "https://api.github.com/users/na-n/orgs", "repos_url": "https://api.github.com/users/na-n/repos", "events_url": "https://api.github.com/users/na-n/events{/privacy}", "received_events_url": "https://api.github.com/users/na-n/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-11-10T14:52:36Z", "updated_at": "2017-12-06T20:47:33Z", "closed_at": "2017-12-06T20:47:33Z", "author_association": "NONE", "body": "**Feature Request**\r\n\r\nFirst up, amazing library. Love it. Definitely going to play well with V8 and V8PP, so well done.\r\n\r\n- What is the issue you have?\r\nMy issue is that j.dump() returns a string in quotes for objects, and I have no way to disable this. I'd like to .dump() something I can build strings with using boost::format without having to write my own dequoting method and suddenly thinking about complexity of string ops. That's your job! ;P\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nSimplifying to Pseudo-esque code:\r\n\r\n```cpp\r\nstatic auto matic= boost::format(\"var fn = function() { return %s };\");\r\n\r\nauto j = R\"({ \"some_object\": {\"happy\": true, \"pi\": 3.141 } })\"_json;\r\nauto dumped_j = j.at(\"some_object\").dump();\r\nauto formatted = boost::str(matic % dumped_j ); \r\n// formatted == \"var fn = function() { return \\\"<some_object_here>\\\"; }\".\r\n// ^^^^ formatted[0] and formatted[len-1] are '\\\"'\r\n```\r\n\r\n- What is the expected behavior?\r\nI don't want the quotes on my string-dumped object (others probably do).. I'd like dump to be extended with default parameter bool bQuoted=true so I can set it false.\r\nauto formatted = boost::str(matic% j.at(\"some_object\").dump(false)); //formatted == \"var fn = function() { return <some_object_here>; }\".\r\n// no quotes\r\n\r\n- And what is the actual behavior instead?\r\nI get the quotes, see above. see line 8505 in the header of 2.11\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nMSVC 2015 on Win10 Pro\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\nI'm using 2.11 from the releases page\r\n\r\n- Describe the feature in as much detail as possible.\r\n make quotes surrounding dumped objects an option\r\n\r\n- Include sample usage where appropriate.\r\nauto str =  j.dump(-1, false);\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/825", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/825/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/825/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/825/events", "html_url": "https://github.com/nlohmann/json/issues/825", "id": 272309142, "node_id": "MDU6SXNzdWUyNzIzMDkxNDI=", "number": 825, "title": "Assertion failed on [\"NoExistKey\"] of an not existing key of const json&", "user": {"login": "dcube9", "id": 10657031, "node_id": "MDQ6VXNlcjEwNjU3MDMx", "avatar_url": "https://avatars0.githubusercontent.com/u/10657031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcube9", "html_url": "https://github.com/dcube9", "followers_url": "https://api.github.com/users/dcube9/followers", "following_url": "https://api.github.com/users/dcube9/following{/other_user}", "gists_url": "https://api.github.com/users/dcube9/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcube9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcube9/subscriptions", "organizations_url": "https://api.github.com/users/dcube9/orgs", "repos_url": "https://api.github.com/users/dcube9/repos", "events_url": "https://api.github.com/users/dcube9/events{/privacy}", "received_events_url": "https://api.github.com/users/dcube9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-08T18:53:02Z", "updated_at": "2017-11-09T07:13:35Z", "closed_at": "2017-11-09T07:13:35Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nIf you try to assign a key (that dosnt exist) from a const json& to const json& or json an assert is fire :\r\n\"Assertion `m_value.object->find(key) != m_value.object->end()' failed\"\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n``\r\n\r\n    #include <iostream>\r\n    #include <string>\r\n    #include <sstream>\r\n    #include <json.hpp>\r\n\r\n    using json = nlohmann::json;\r\n\r\n    int main(){\r\n    \r\n    json dummy = R\"({\r\n      \"OggetoUno\": {\r\n        \"Numero\": 1510161606\r\n      },\r\n      \"OggettoDue\": {\r\n      }\r\n    })\"_json;\r\n    \r\n    const json& dummyRef = dummy;\r\n\r\n    const json& a = dummyRef[\"OggetoUno\"][\"Numero\"];\r\n    std::cout << std::setw(4) << a.is_null() << '\\n';\r\n    std::cout << std::setw(4) << a.empty() << '\\n';\r\n    \r\n    const json& b = dummyRef[\"OggettoDue\"][\"Numero\"];\r\n    std::cout << std::setw(4) << b.is_null() << '\\n';\r\n    std::cout << std::setw(4) << b.empty() << '\\n';\r\n    \r\n    return 99;\r\n    }\r\n``\r\n- What is the expected behavior?\r\nIf 'b' is const json& a reference to.\r\nIf 'b' is json a copy of x, in that case a null json.\r\n\r\n- And what is the actual behavior instead?\r\n\"Assertion `m_value.object->find(key) != m_value.object->end()' failed\"\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n- VS2015 on W10\r\n- https://wandbox.org/\r\n\r\n\r\nBest regards\r\nPaolo\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/824", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/824/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/824/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/824/events", "html_url": "https://github.com/nlohmann/json/issues/824", "id": 272150859, "node_id": "MDU6SXNzdWUyNzIxNTA4NTk=", "number": 824, "title": "vs2015 error : static member will remain uninitialized at runtime but use in constant-expressions is supported", "user": {"login": "xtythansky", "id": 16535256, "node_id": "MDQ6VXNlcjE2NTM1MjU2", "avatar_url": "https://avatars3.githubusercontent.com/u/16535256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xtythansky", "html_url": "https://github.com/xtythansky", "followers_url": "https://api.github.com/users/xtythansky/followers", "following_url": "https://api.github.com/users/xtythansky/following{/other_user}", "gists_url": "https://api.github.com/users/xtythansky/gists{/gist_id}", "starred_url": "https://api.github.com/users/xtythansky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xtythansky/subscriptions", "organizations_url": "https://api.github.com/users/xtythansky/orgs", "repos_url": "https://api.github.com/users/xtythansky/repos", "events_url": "https://api.github.com/users/xtythansky/events{/privacy}", "received_events_url": "https://api.github.com/users/xtythansky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-08T10:38:49Z", "updated_at": "2017-11-13T06:57:42Z", "closed_at": "2017-11-13T06:57:42Z", "author_association": "NONE", "body": "on some vs2015 occurs \r\n`json.hpp(887): error C4579: 'nlohmann::detail::static_const<nlohmann::detail::to_json_fn>::value': in-class initialization for type 'const T' is not yet implemented; static member will remain uninitialized at runtime but use in constant-expressions is supported\r\n with\r\n        [\r\n            T=nlohmann::detail::to_json_fn\r\n        ]\r\n\r\n`"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/823", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/823/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/823/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/823/events", "html_url": "https://github.com/nlohmann/json/pull/823", "id": 271822277, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUxMTA2NDMw", "number": 823, "title": "Added forward declaration header json_forward.hpp. Minimise build times.", "user": {"login": "zerodefect", "id": 26778249, "node_id": "MDQ6VXNlcjI2Nzc4MjQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/26778249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zerodefect", "html_url": "https://github.com/zerodefect", "followers_url": "https://api.github.com/users/zerodefect/followers", "following_url": "https://api.github.com/users/zerodefect/following{/other_user}", "gists_url": "https://api.github.com/users/zerodefect/gists{/gist_id}", "starred_url": "https://api.github.com/users/zerodefect/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zerodefect/subscriptions", "organizations_url": "https://api.github.com/users/zerodefect/orgs", "repos_url": "https://api.github.com/users/zerodefect/repos", "events_url": "https://api.github.com/users/zerodefect/events{/privacy}", "received_events_url": "https://api.github.com/users/zerodefect/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-07T12:57:30Z", "updated_at": "2017-12-14T17:17:58Z", "closed_at": "2017-12-14T17:17:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/823", "html_url": "https://github.com/nlohmann/json/pull/823", "diff_url": "https://github.com/nlohmann/json/pull/823.diff", "patch_url": "https://github.com/nlohmann/json/pull/823.patch"}, "body": "\r\nThis pull request aims to reduce compile time by the introduction of a header dedicated to providing forward declaration of nlohmann::json.\r\n\r\nOne of the great merits of the this library is that it is header only.  Unfortunately, that does also come with some disadvantages, namely the compile times are often higher with such code dependencies.\r\n\r\nThis pull request introduces a 'json_forward.hpp' header file (similar to how Boost offer forward header files) in an attempt to try reduce build times.  \r\n\r\nThings to note (and some of these come down to personal preference):\r\n- json.hpp includes json_forward.hpp to minimise code replication\r\n- json.hpp includes some of same std library headers as json_forward.hpp (technically these could be removed) but with #include guards, I don't feel this is much of an issue. Discuss.\r\n\r\nPoints to consider:\r\n- Code change is small.\r\n- It reduces build times (at least what I've seen).\r\n\r\nSo I tried integrating these code changes with my own project and ran a comparison test.\r\n\r\nBuild time without forward declaration header:\r\n> real\t10m7.981s\r\n> user\t36m40.768s\r\n> sys\t2m1.432s\r\n\r\n\r\nBuild time making extensive use of forward declaration header (where possible):\r\n> real\t9m21.282s\r\n> user\t33m53.744s\r\n> sys\t1m52.880s\r\n\r\nPlease note that this test was _not_ wholly scientific. I imagine mileage will vary across environments/compilers and the level of use of this library in the said project.\r\n\r\n\r\nTested with cmake and gcc 6.3 running on Ubuntu's 17.04 (Zesty).\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/822", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/822/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/822/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/822/events", "html_url": "https://github.com/nlohmann/json/pull/822", "id": 271546003, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUwOTA0NTM2", "number": 822, "title": "Fix Compile warning in Visual Studio", "user": {"login": "AraHaan", "id": 15173749, "node_id": "MDQ6VXNlcjE1MTczNzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/15173749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AraHaan", "html_url": "https://github.com/AraHaan", "followers_url": "https://api.github.com/users/AraHaan/followers", "following_url": "https://api.github.com/users/AraHaan/following{/other_user}", "gists_url": "https://api.github.com/users/AraHaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AraHaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AraHaan/subscriptions", "organizations_url": "https://api.github.com/users/AraHaan/orgs", "repos_url": "https://api.github.com/users/AraHaan/repos", "events_url": "https://api.github.com/users/AraHaan/events{/privacy}", "received_events_url": "https://api.github.com/users/AraHaan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-06T16:55:28Z", "updated_at": "2017-11-07T01:21:01Z", "closed_at": "2017-11-06T20:58:24Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/822", "html_url": "https://github.com/nlohmann/json/pull/822", "diff_url": "https://github.com/nlohmann/json/pull/822.diff", "patch_url": "https://github.com/nlohmann/json/pull/822.patch"}, "body": "In issue #821 I found that on the latest (since version 2.0.7) there are now min and max warnings. This PR now removes those warnings on the source and hopefully should work on all platforms without degrading anything. This only disables the min and max macros if defined.\r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\n- [x]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [x]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [x]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src).\r\n\r\n## Please don't\r\n\r\n- The C++11 support varies between different **compilers** and versions. Please note the [list of supported compilers](https://github.com/nlohmann/json/blob/master/README.md#supported-compilers). Some compilers like GCC 4.8 (and earlier), Clang 3.3 (and earlier), or Microsoft Visual Studio 13.0 and earlier are known not to work due to missing or incomplete C++11 support. Please refrain from proposing changes that work around these compiler's limitations with `#ifdef`s or other means.\r\n- Specifically, I am aware of compilation problems with **Microsoft Visual Studio** (there even is an [issue label](https://github.com/nlohmann/json/issues?utf8=\u2713&q=label%3A%22visual+studio%22+) for these kind of bugs). I understand that even in 2016, complete C++11 support isn't there yet. But please also understand that I do not want to drop features or uglify the code just to make Microsoft's sub-standard compiler happy. The past has shown that there are ways to express the functionality such that the code compiles with the most recent MSVC - unfortunately, this is not the main objective of the project.\r\n- Please refrain from proposing changes that would **break [JSON](http://json.org) conformance**. If you propose a conformant extension of JSON to be supported by the library, please motivate this extension.\r\n- Please do not open pull requests that address **multiple issues**.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/821", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/821/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/821/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/821/events", "html_url": "https://github.com/nlohmann/json/issues/821", "id": 271535636, "node_id": "MDU6SXNzdWUyNzE1MzU2MzY=", "number": 821, "title": "Code Checking Warnings from json.hpp on VS2017 Community", "user": {"login": "AraHaan", "id": 15173749, "node_id": "MDQ6VXNlcjE1MTczNzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/15173749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AraHaan", "html_url": "https://github.com/AraHaan", "followers_url": "https://api.github.com/users/AraHaan/followers", "following_url": "https://api.github.com/users/AraHaan/following{/other_user}", "gists_url": "https://api.github.com/users/AraHaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AraHaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AraHaan/subscriptions", "organizations_url": "https://api.github.com/users/AraHaan/orgs", "repos_url": "https://api.github.com/users/AraHaan/repos", "events_url": "https://api.github.com/users/AraHaan/events{/privacy}", "received_events_url": "https://api.github.com/users/AraHaan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-11-06T16:26:27Z", "updated_at": "2017-12-13T05:28:10Z", "closed_at": "2017-12-13T05:28:10Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nA lot of warnings from code checking in Visual Studio 2017.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\nNo annoying warnigns from json.hpp\r\n\r\n- And what is the actual behavior instead?\r\nWarnings right after another on json.hpp.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nThe latest Visual Studio 2017 Community compiler.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nRelease I think of version 2.0.7\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nHere are the warnings that are emmited on json.hpp when including and using it:\r\n```\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(10768): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(2204): warning C26409: Avoid calling new and delete explicitly, use std::make_unique<T> instead. (r.11 http://go.microsoft.com/fwlink/?linkid=845485)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(2223): warning C26424: Failing to delete or assign ownership of allocation at line 2204.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6883): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6877): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6846): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6840): warning C26499: Could not find any lifetime tracking information for '**this'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6398): warning C26499: Could not find any lifetime tracking information for '*return of ->'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6400): warning C26499: Could not find any lifetime tracking information for '*return of ->'\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(843): warning C26495: Variable 'nlohmann::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool,__int64,unsigned __int64,double,std::allocator>::json_value::object' is uninitialized. Always initialize a member variable. (type.6: http://go.microsoft.com/fwlink/p/?LinkID=620422)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6326): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(6327): warning C26412: Do not dereference a invalid pointer (lifetimes rule 1). '<range>$L1' was invalidated by 'end of scope for allotemp.2, allotemp.3'.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(5938): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(785): warning C26412: Do not dereference a invalid pointer (lifetimes rule 1). 'return of create' was invalidated by 'end of scope for allotemp.2'.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9167): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7614): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9065): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9074): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9055): warning C26494: Variable 'max' is uninitialized. Always initialize an object. (type.5: http://go.microsoft.com/fwlink/p/?LinkID=620421)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9058): warning C26494: Variable 'type' is uninitialized. Always initialize an object. (type.5: http://go.microsoft.com/fwlink/p/?LinkID=620421)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8862): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8862): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8868): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8918): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8925): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8925): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8925): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8931): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8935): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8947): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8862): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8957): warning C26412: Do not dereference an invalid pointer (lifetimes rule 1). 'i' was invalidated at line 8862 by 'no initialization'.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8918): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8931): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8793): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7842): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7966): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7972): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7953): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7981): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8140): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8208): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8214): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8463): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8577): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8631): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8672): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8309): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8341): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8357): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8373): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8389): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8325): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8293): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8133): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8000): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8006): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8022): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8048): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8054): warning C26482: Only index into arrays using constant expressions. (bounds.2: http://go.microsoft.com/fwlink/p/?LinkID=620414)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8405): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8499): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8416): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8530): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8540): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8079): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8085): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8091): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8098): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8442): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8556): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8612): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8666): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8106): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8449): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8563): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8619): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8114): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8456): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8570): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8625): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8121): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8127): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7959): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7841): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7971): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7981): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8219): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8468): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8582): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8636): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8677): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8314): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8346): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8362): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8378): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8394): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8330): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8298): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8138): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8022): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8053): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8504): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8545): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8098): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8106): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8114): warning C26413: Do not dereference nullptr (lifetimes rule 2). '*this' was pointed to nullptr at line 7792.\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(7800): warning C26494: Variable 'yych' is uninitialized. Always initialize an object. (type.5: http://go.microsoft.com/fwlink/p/?LinkID=620421)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9001): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8758): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8784): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8785): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8786): warning C26481: Don't use pointer arithmetic. Use span instead. (bounds.1: http://go.microsoft.com/fwlink/p/?LinkID=620413)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8754): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(8781): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\nj:\\14.4 gb usb\\vbtrpdet\\libs\\json.hpp(9182): warning C26490: Don't use reinterpret_cast. (type.1: http://go.microsoft.com/fwlink/p/?LinkID=620417)\r\n```\r\n\r\nFor some reason it looks like in a few places it does not like the use of ``reinterpret_cast`` even when things like ``const_cast``, ``static_cast``, or ``dynamic_cast`` does not compile or fails.\r\n\r\nNot sure if a newer version has the warnings fixed or not so made this issue in case they have not been addressed (or suppressed).\r\n\r\nEdit: After updating to latest release the warnings increased as well as these while processing my code that includes this before the Code Check:\r\n\r\n```\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6683): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6689): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6695): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6701): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6715): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6715): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6721): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6721): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6727): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6727): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6733): warning C4003: not enough actual parameters for macro 'min'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6733): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6750): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6756): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6762): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6768): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6925): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6931): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6937): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6959): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6965): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(6971): warning C4003: not enough actual parameters for macro 'max'\r\n1>J:\\14.4 GB USB\\vbtrpdet\\libs\\json.hpp(7184): warning C4003: not enough actual parameters for macro 'max'\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/820", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/820/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/820/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/820/events", "html_url": "https://github.com/nlohmann/json/issues/820", "id": 271316284, "node_id": "MDU6SXNzdWUyNzEzMTYyODQ=", "number": 820, "title": "Missing iostream in try online", "user": {"login": "alexNeto", "id": 13910110, "node_id": "MDQ6VXNlcjEzOTEwMTEw", "avatar_url": "https://avatars2.githubusercontent.com/u/13910110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexNeto", "html_url": "https://github.com/alexNeto", "followers_url": "https://api.github.com/users/alexNeto/followers", "following_url": "https://api.github.com/users/alexNeto/following{/other_user}", "gists_url": "https://api.github.com/users/alexNeto/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexNeto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexNeto/subscriptions", "organizations_url": "https://api.github.com/users/alexNeto/orgs", "repos_url": "https://api.github.com/users/alexNeto/repos", "events_url": "https://api.github.com/users/alexNeto/events{/privacy}", "received_events_url": "https://api.github.com/users/alexNeto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 1, "created_at": "2017-11-05T21:34:29Z", "updated_at": "2017-11-06T19:35:45Z", "closed_at": "2017-11-06T19:35:14Z", "author_association": "NONE", "body": "In the try online, the `#include <iostream>` is missing so they give a error when try to run\r\n\r\n```\r\nprog.cc:35:5: error: 'cout' is not a member of 'std'\r\n     std::cout << std::setw(4) << j << '\\n';\r\n     ^\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/819", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/819/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/819/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/819/events", "html_url": "https://github.com/nlohmann/json/pull/819", "id": 271308523, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUwNzM5MDQ3", "number": 819, "title": "Adds get_to", "user": {"login": "arcanis", "id": 1037931, "node_id": "MDQ6VXNlcjEwMzc5MzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1037931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcanis", "html_url": "https://github.com/arcanis", "followers_url": "https://api.github.com/users/arcanis/followers", "following_url": "https://api.github.com/users/arcanis/following{/other_user}", "gists_url": "https://api.github.com/users/arcanis/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcanis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcanis/subscriptions", "organizations_url": "https://api.github.com/users/arcanis/orgs", "repos_url": "https://api.github.com/users/arcanis/repos", "events_url": "https://api.github.com/users/arcanis/events{/privacy}", "received_events_url": "https://api.github.com/users/arcanis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-11-05T19:54:20Z", "updated_at": "2018-01-09T01:24:10Z", "closed_at": "2018-01-09T01:24:10Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/819", "html_url": "https://github.com/nlohmann/json/pull/819", "diff_url": "https://github.com/nlohmann/json/pull/819.diff", "patch_url": "https://github.com/nlohmann/json/pull/819.patch"}, "body": "This PR adds a `get_to` method that does exactly the same thing as `get`, except that it doesn't create a new value to store the final result (it takes a reference instead).\r\n\r\nIt's a convenience function that can be easily implemented in userland (which is also true for `get`), but I felt like it was simple and useful enough to be added into the core.\r\n\r\nA few things have to be fixed before this PR can be merged, I plan to work on them if this API is accepted:\r\n\r\n  - [ ] Fixes the documentation\r\n  - [ ] Adds tests\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/818", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/818/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/818/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/818/events", "html_url": "https://github.com/nlohmann/json/issues/818", "id": 271244739, "node_id": "MDU6SXNzdWUyNzEyNDQ3Mzk=", "number": 818, "title": "Floating point value loses decimal point during dump", "user": {"login": "kishorenc", "id": 782073, "node_id": "MDQ6VXNlcjc4MjA3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/782073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kishorenc", "html_url": "https://github.com/kishorenc", "followers_url": "https://api.github.com/users/kishorenc/followers", "following_url": "https://api.github.com/users/kishorenc/following{/other_user}", "gists_url": "https://api.github.com/users/kishorenc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kishorenc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kishorenc/subscriptions", "organizations_url": "https://api.github.com/users/kishorenc/orgs", "repos_url": "https://api.github.com/users/kishorenc/repos", "events_url": "https://api.github.com/users/kishorenc/events{/privacy}", "received_events_url": "https://api.github.com/users/kishorenc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-05T03:13:50Z", "updated_at": "2017-11-05T03:17:42Z", "closed_at": "2017-11-05T03:17:42Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\nLet's say I've a floating point value \"4.0\". When it's dumped to disk using `.dump()` it's being written as just \"4\". So, the type of the value goes from `float` to `int` when I read the data back using `parse()`.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n```cpp\r\nstd::string json_str = \"{\\\"average_rating\\\": 4.0 }\";\r\nnlohmann::json document = nlohmann::json::parse(json_str);\r\nstd::cout << \"Float? \" << document[\"average_rating\"].is_number_float() << std::endl;\r\nstd::string json_serialized = document.dump();\r\nstd::cout << \"json_serialized: \" << json_serialized << std::endl;\r\ndocument = nlohmann::json::parse(json_serialized);\r\nstd::cout << \"Float? \" << document[\"average_rating\"].is_number_float() << std::endl;\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nFloat? 1\r\njson_serialized: {\"average_rating\":4}\r\nFloat? 0\r\n```\r\n- What is the expected behavior?\r\n\r\nThe `.dump()` should not drop the trailing \".0\". \r\n\r\n- And what is the actual behavior instead?\r\n\r\nThe `.dump()` drops the trailing `.0`.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n`Apple LLVM version 7.3.0 (clang-703.0.31)`\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nRelease version."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/817", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/817/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/817/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/817/events", "html_url": "https://github.com/nlohmann/json/issues/817", "id": 271105436, "node_id": "MDU6SXNzdWUyNzExMDU0MzY=", "number": 817, "title": "Conan package for the library", "user": {"login": "ZaMaZaN4iK", "id": 7355383, "node_id": "MDQ6VXNlcjczNTUzODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7355383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZaMaZaN4iK", "html_url": "https://github.com/ZaMaZaN4iK", "followers_url": "https://api.github.com/users/ZaMaZaN4iK/followers", "following_url": "https://api.github.com/users/ZaMaZaN4iK/following{/other_user}", "gists_url": "https://api.github.com/users/ZaMaZaN4iK/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZaMaZaN4iK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZaMaZaN4iK/subscriptions", "organizations_url": "https://api.github.com/users/ZaMaZaN4iK/orgs", "repos_url": "https://api.github.com/users/ZaMaZaN4iK/repos", "events_url": "https://api.github.com/users/ZaMaZaN4iK/events{/privacy}", "received_events_url": "https://api.github.com/users/ZaMaZaN4iK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-03T20:12:21Z", "updated_at": "2017-11-04T11:54:01Z", "closed_at": "2017-11-04T11:54:01Z", "author_association": "NONE", "body": "Hello,\r\nDo you know about Conan package manager? Can you add Conan package for the library and maintain it? Here you can find example of my conan recipe for libpng: https://github.com/ZaMaZaN4iK/conan-libpng"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/816", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/816/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/816/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/816/events", "html_url": "https://github.com/nlohmann/json/issues/816", "id": 270850420, "node_id": "MDU6SXNzdWUyNzA4NTA0MjA=", "number": 816, "title": "Idea: Handle Multimaps Better", "user": {"login": "Exaeta", "id": 2097010, "node_id": "MDQ6VXNlcjIwOTcwMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2097010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Exaeta", "html_url": "https://github.com/Exaeta", "followers_url": "https://api.github.com/users/Exaeta/followers", "following_url": "https://api.github.com/users/Exaeta/following{/other_user}", "gists_url": "https://api.github.com/users/Exaeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/Exaeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Exaeta/subscriptions", "organizations_url": "https://api.github.com/users/Exaeta/orgs", "repos_url": "https://api.github.com/users/Exaeta/repos", "events_url": "https://api.github.com/users/Exaeta/events{/privacy}", "received_events_url": "https://api.github.com/users/Exaeta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-03T00:35:40Z", "updated_at": "2018-01-13T00:14:47Z", "closed_at": "2018-01-13T00:14:47Z", "author_association": "NONE", "body": "My understanding is that currently:\r\n\r\n```\r\nstd::multimap<std::string,  std::string> a = { {\"a\", \"1\"}, {\"a\", \"2\"}, {\"b\", \"3\"} };\r\n```\r\n\r\nMight map to:\r\n`{ \"a\": \"1\", \"b\": \"3\" }`\r\n\r\nBut this does not preserve equality of the conversion back and forth. Thus I suggest a different way to convert multi-maps:\r\n`{ \"a\": [\"1\", \"2\"], \"b\": [\"3\"] }`\r\nThis preserves equality."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/815", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/815/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/815/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/815/events", "html_url": "https://github.com/nlohmann/json/issues/815", "id": 270792033, "node_id": "MDU6SXNzdWUyNzA3OTIwMzM=", "number": 815, "title": "stream error ", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-11-02T20:13:10Z", "updated_at": "2018-07-10T12:35:53Z", "closed_at": "2017-11-07T19:23:55Z", "author_association": "NONE", "body": "I've been trying to implement this solution and I have been consistently getting the same stream error, regardless of the json file or example I use/follow. I know I'm probably doing something silly but I'm a lowly junior in my CS degree. Here is my code:\r\n\r\n```cpp\r\n#include \"json.hpp\"\r\n\r\n#include <fstream>\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main() {\r\n    std::ifstream ifs{\"file.json\"};\r\n    json parsed_json = json::parse(ifs);\r\n    return 0;\r\n}\r\n``` \r\n\r\nand here is the json I've been using:\r\n```js\r\n[\r\n  {\r\n    \"stringKey\": \"Nathen\",\r\n    \"intKey\": 236\r\n  },\r\n  {\r\n    \"stringKey\": \"Emerald\",\r\n    \"intKey\": 739\r\n  },\r\n  {\r\n    \"stringKey\": \"Franco\",\r\n    \"intKey\": 544\r\n  }\r\n]\r\n```\r\n\r\nand here is the error:\r\n`/home/bry/CLionProjects/jsonexample/cmake-build-debug/jsonexample\r\nterminate called after throwing an instance of 'std::invalid_argument'\r\n  what():  stream error\r\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT)`"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/814", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/814/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/814/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/814/events", "html_url": "https://github.com/nlohmann/json/issues/814", "id": 270721950, "node_id": "MDU6SXNzdWUyNzA3MjE5NTA=", "number": 814, "title": "Link error when using find() on the latest commit", "user": {"login": "dianambb", "id": 20344299, "node_id": "MDQ6VXNlcjIwMzQ0Mjk5", "avatar_url": "https://avatars2.githubusercontent.com/u/20344299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dianambb", "html_url": "https://github.com/dianambb", "followers_url": "https://api.github.com/users/dianambb/followers", "following_url": "https://api.github.com/users/dianambb/following{/other_user}", "gists_url": "https://api.github.com/users/dianambb/gists{/gist_id}", "starred_url": "https://api.github.com/users/dianambb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dianambb/subscriptions", "organizations_url": "https://api.github.com/users/dianambb/orgs", "repos_url": "https://api.github.com/users/dianambb/repos", "events_url": "https://api.github.com/users/dianambb/events{/privacy}", "received_events_url": "https://api.github.com/users/dianambb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-02T16:34:27Z", "updated_at": "2017-12-09T21:06:54Z", "closed_at": "2017-12-09T21:06:54Z", "author_association": "NONE", "body": "I am working on the develop branch. \r\n\r\nI have a class defining the Json field constants. \r\n\r\n```c++\r\n// Class defining Json Fields\r\nclass JsonFields {\r\n    public:\r\n        static constexpr const char* ID = \"id\";\r\n};\r\n```\r\n\r\nI pass in the constant value into find which throws the link error.\r\n```c++\r\nvoid MyClass::check_fields(json::basic_json j) {\r\n        // Throws link error\r\n        if (j.find(JsonFields::ID) != json_parsed.end()) {\r\n        ....\r\n        }\r\n }\r\n```\r\n\r\nHowever it works if I wrap the name in std::forward eg\r\n`j.find(std::forward<std::string>(JsonFields::ID))`\r\n\r\nThis worked in commit 1b1bd0e3e63ab66720fef5d30b7c16177c0d6e17 but is broken in later commits. The change that introduced this issue is commit 6c9a401ebc680199cdcacfbe60d5dd8f51724a48 .\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/813", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/813/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/813/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/813/events", "html_url": "https://github.com/nlohmann/json/issues/813", "id": 270586489, "node_id": "MDU6SXNzdWUyNzA1ODY0ODk=", "number": 813, "title": "ABI issue with json object between 2 shared libraries", "user": {"login": "ayounes-nviso", "id": 28561380, "node_id": "MDQ6VXNlcjI4NTYxMzgw", "avatar_url": "https://avatars2.githubusercontent.com/u/28561380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayounes-nviso", "html_url": "https://github.com/ayounes-nviso", "followers_url": "https://api.github.com/users/ayounes-nviso/followers", "following_url": "https://api.github.com/users/ayounes-nviso/following{/other_user}", "gists_url": "https://api.github.com/users/ayounes-nviso/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayounes-nviso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayounes-nviso/subscriptions", "organizations_url": "https://api.github.com/users/ayounes-nviso/orgs", "repos_url": "https://api.github.com/users/ayounes-nviso/repos", "events_url": "https://api.github.com/users/ayounes-nviso/events{/privacy}", "received_events_url": "https://api.github.com/users/ayounes-nviso/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-02T09:33:21Z", "updated_at": "2017-12-09T11:46:03Z", "closed_at": "2017-12-09T11:46:03Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\nCrash somtimes, not always\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n1) main application uses 1 shared libraries a.so that uses another library b.so.\r\n2) \"json\" object J is instanciated by a.so\r\n3) J is passed by const reference to b.so\r\n\r\n- What is the expected behavior?\r\n\r\npassed json object J can be used throughout b.so\r\n\r\n- And what is the actual behavior instead?\r\n\r\nSometimes it works, sometimes it crashes, ex:\r\n\r\n0x00007ffff7b3bd24 in nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::basic_json(nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) ()\r\n\r\n\r\nI tried to pass the json object by copy instead but eventually it will crash elsewhere down the road.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\ngcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) \r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n`develop` branch\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\nRight now the only way to work around the issue is to remove json from the shared library interface and just serialize/deserialize with string.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/812", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/812/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/812/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/812/events", "html_url": "https://github.com/nlohmann/json/issues/812", "id": 270235887, "node_id": "MDU6SXNzdWUyNzAyMzU4ODc=", "number": 812, "title": "scan_string() return token_type::parse_error; when parse ansi file", "user": {"login": "sdhongjun", "id": 4033209, "node_id": "MDQ6VXNlcjQwMzMyMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4033209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdhongjun", "html_url": "https://github.com/sdhongjun", "followers_url": "https://api.github.com/users/sdhongjun/followers", "following_url": "https://api.github.com/users/sdhongjun/following{/other_user}", "gists_url": "https://api.github.com/users/sdhongjun/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdhongjun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdhongjun/subscriptions", "organizations_url": "https://api.github.com/users/sdhongjun/orgs", "repos_url": "https://api.github.com/users/sdhongjun/repos", "events_url": "https://api.github.com/users/sdhongjun/events{/privacy}", "received_events_url": "https://api.github.com/users/sdhongjun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-11-01T08:45:14Z", "updated_at": "2017-12-06T20:47:54Z", "closed_at": "2017-12-06T20:47:54Z", "author_association": "NONE", "body": "With VS2015 IDE  when I run below demo code to read json file, scan_string function return `token_type::parse_error` at line 2186.\r\n{\r\n        ofstream out_json(\"C:\\\\test.json\");\r\n\r\n        json jsDefault = json();\r\n        jsDefault[\"name\"] = \"\u9ed8\u8ba4\";\r\n        jsDefault[\"param\"] = json();\r\n        json jsArray = json::array({ jsDefault });\r\n\r\n        json jsObj = json();\r\n        jsObj[\"select\"] = \"\u9ed8\u8ba4\";\r\n        jsObj[\"items\"] = jsArray;\r\n\r\n        out_json << std::setw(4) << jsObj;\r\n\r\n        out_json.close();\r\n\r\n        ifstream in_json(\"C:\\\\test.json\");\r\n        json jsNewObj = json();\r\n        in_json >> jsNewObj;\r\n    }\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/811", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/811/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/811/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/811/events", "html_url": "https://github.com/nlohmann/json/pull/811", "id": 270004606, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ5ODIwNTky", "number": 811, "title": "Typos README", "user": {"login": "Itja", "id": 11618623, "node_id": "MDQ6VXNlcjExNjE4NjIz", "avatar_url": "https://avatars3.githubusercontent.com/u/11618623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Itja", "html_url": "https://github.com/Itja", "followers_url": "https://api.github.com/users/Itja/followers", "following_url": "https://api.github.com/users/Itja/following{/other_user}", "gists_url": "https://api.github.com/users/Itja/gists{/gist_id}", "starred_url": "https://api.github.com/users/Itja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Itja/subscriptions", "organizations_url": "https://api.github.com/users/Itja/orgs", "repos_url": "https://api.github.com/users/Itja/repos", "events_url": "https://api.github.com/users/Itja/events{/privacy}", "received_events_url": "https://api.github.com/users/Itja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 2, "created_at": "2017-10-31T15:32:11Z", "updated_at": "2017-11-02T10:54:09Z", "closed_at": "2017-10-31T17:23:42Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/811", "html_url": "https://github.com/nlohmann/json/pull/811", "diff_url": "https://github.com/nlohmann/json/pull/811.diff", "patch_url": "https://github.com/nlohmann/json/pull/811.patch"}, "body": "Hey, thanks for this great library which I've used in many occasions now. I know it's not much, but I wanted to contribute at least a tiny bit back to you by this PR :-) Keep up the good work!\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/810", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/810/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/810/events", "html_url": "https://github.com/nlohmann/json/issues/810", "id": 269988596, "node_id": "MDU6SXNzdWUyNjk5ODg1OTY=", "number": 810, "title": "segfault when using fifo_map with json", "user": {"login": "jllansford", "id": 33156649, "node_id": "MDQ6VXNlcjMzMTU2NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/33156649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jllansford", "html_url": "https://github.com/jllansford", "followers_url": "https://api.github.com/users/jllansford/followers", "following_url": "https://api.github.com/users/jllansford/following{/other_user}", "gists_url": "https://api.github.com/users/jllansford/gists{/gist_id}", "starred_url": "https://api.github.com/users/jllansford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jllansford/subscriptions", "organizations_url": "https://api.github.com/users/jllansford/orgs", "repos_url": "https://api.github.com/users/jllansford/repos", "events_url": "https://api.github.com/users/jllansford/events{/privacy}", "received_events_url": "https://api.github.com/users/jllansford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-31T14:52:00Z", "updated_at": "2017-11-03T12:04:36Z", "closed_at": "2017-11-02T20:37:48Z", "author_association": "NONE", "body": "This bug was discovered by a coworker, I cleaned up the test program a bit and am posting it here.\r\n\r\nI wasn't sure if I should post this under the fifo_map project or here, ultimately because the fifo_map integration workaround posted on the documentation was used I decided to post here.  If you'd rather I post it under fifo_map instead I can.\r\n\r\nPlease note that without the fifo_map this code does not segfault and works fine.\r\n\r\n```cpp\r\n#include <iostream>\r\n#include \"fifo_map.hpp\"\r\n#include \"json.hpp\"\r\n\r\n// A workaround to give to use fifo_map as map, we are just ignoring the 'less' compare\r\ntemplate<class K, class V, class dummy_compare, class A>\r\nusing my_workaround_fifo_map = nlohmann::fifo_map<K, V, nlohmann::fifo_map_compare<K>, A>;\r\nusing my_json = nlohmann::basic_json<my_workaround_fifo_map>;\r\n\r\nint main(int argc, char* argv[]) {\r\n\tusing namespace std;\r\n\r\n\tmy_json a {\r\n\t\t{\"obj\", {\r\n\t\t\t{\"one\", 1},\r\n\t\t\t{\"two\", 2}\r\n\t\t}}\t\r\n\t};  \r\n\r\n\tcout << a << endl;\r\n\r\n\t//won't segfault until 2nd time through the loop\r\n\tfor(int i = 0; i < 3; i++) {\r\n\t\tmy_json d = a;\r\n       \t\tmy_json c = d[\"obj\"];\r\n       \t\ta = d;\r\n\t\tcout << i << \" - \" << a << endl;\r\n        }\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\nHere is the stack trace I'm getting from gdb:\r\n\r\n```\r\n#0  0x000000000040f21e in std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const ()\r\n#1  0x000000000040dfc2 in std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const ()\r\n#2  0x000000000040c876 in std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Defau---Type <return> to continue, or q <return> to quit---\r\nlt_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > > const&, std::integral_constant<bool, true>) ()\r\n#3  0x000000000040af06 in std::__detail::_Insert_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&) ()\r\n#4  0x0000000000408ff5 in std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> const&) ()\r\n#5  0x0000000000406ca8 in nlohmann::fifo_map_compare<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::add_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\r\n#6  0x0000000000406355 in nlohmann::fifo_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::fifo_map_compare<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) ()\r\n#7  0x000000000040440a in nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>& nlohmann::basic_json<my_workaround_fifo_map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::operator[]<char const>(char const*) ()\r\n#8  0x0000000000402baf in main ()\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/809", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/809/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/809/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/809/events", "html_url": "https://github.com/nlohmann/json/issues/809", "id": 269382149, "node_id": "MDU6SXNzdWUyNjkzODIxNDk=", "number": 809, "title": "This shit is shit ", "user": {"login": "reijpower", "id": 19877049, "node_id": "MDQ6VXNlcjE5ODc3MDQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/19877049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reijpower", "html_url": "https://github.com/reijpower", "followers_url": "https://api.github.com/users/reijpower/followers", "following_url": "https://api.github.com/users/reijpower/following{/other_user}", "gists_url": "https://api.github.com/users/reijpower/gists{/gist_id}", "starred_url": "https://api.github.com/users/reijpower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reijpower/subscriptions", "organizations_url": "https://api.github.com/users/reijpower/orgs", "repos_url": "https://api.github.com/users/reijpower/repos", "events_url": "https://api.github.com/users/reijpower/events{/privacy}", "received_events_url": "https://api.github.com/users/reijpower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-29T08:53:11Z", "updated_at": "2017-10-29T19:46:19Z", "closed_at": "2017-10-29T08:53:40Z", "author_association": "NONE", "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/808", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/808/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/808/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/808/events", "html_url": "https://github.com/nlohmann/json/issues/808", "id": 269332832, "node_id": "MDU6SXNzdWUyNjkzMzI4MzI=", "number": 808, "title": "_finite and _isnan are no members of \"std\"", "user": {"login": "SimonNitzsche", "id": 6717311, "node_id": "MDQ6VXNlcjY3MTczMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6717311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonNitzsche", "html_url": "https://github.com/SimonNitzsche", "followers_url": "https://api.github.com/users/SimonNitzsche/followers", "following_url": "https://api.github.com/users/SimonNitzsche/following{/other_user}", "gists_url": "https://api.github.com/users/SimonNitzsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonNitzsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonNitzsche/subscriptions", "organizations_url": "https://api.github.com/users/SimonNitzsche/orgs", "repos_url": "https://api.github.com/users/SimonNitzsche/repos", "events_url": "https://api.github.com/users/SimonNitzsche/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonNitzsche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-10-28T17:00:12Z", "updated_at": "2017-10-31T14:27:40Z", "closed_at": "2017-10-31T14:27:40Z", "author_association": "NONE", "body": "![image](https://user-images.githubusercontent.com/6717311/32136669-0df2b9b6-bc12-11e7-8f34-06cd875aa217.png)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/807", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/807/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/807/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/807/events", "html_url": "https://github.com/nlohmann/json/pull/807", "id": 269313582, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ5MzMzNDA0", "number": 807, "title": "add forwarding references to json_ref constructor", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-28T12:27:06Z", "updated_at": "2017-10-28T20:16:44Z", "closed_at": "2017-10-28T13:33:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/807", "html_url": "https://github.com/nlohmann/json/pull/807", "diff_url": "https://github.com/nlohmann/json/pull/807.diff", "patch_url": "https://github.com/nlohmann/json/pull/807.patch"}, "body": "fixes #805\r\n\r\nOne funny thing I've discovered: You cannot use `friend void to_json()` with a local class (class/struct defined inside a function). I'll investigate later, I remember seeing something in the standard about that.\r\n\r\nAnyway it's not a very asked feature :) "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/806", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/806/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/806/events", "html_url": "https://github.com/nlohmann/json/issues/806", "id": 269274048, "node_id": "MDU6SXNzdWUyNjkyNzQwNDg=", "number": 806, "title": "how to print out the line which causing exception?", "user": {"login": "todatamining", "id": 4322386, "node_id": "MDQ6VXNlcjQzMjIzODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4322386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/todatamining", "html_url": "https://github.com/todatamining", "followers_url": "https://api.github.com/users/todatamining/followers", "following_url": "https://api.github.com/users/todatamining/following{/other_user}", "gists_url": "https://api.github.com/users/todatamining/gists{/gist_id}", "starred_url": "https://api.github.com/users/todatamining/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/todatamining/subscriptions", "organizations_url": "https://api.github.com/users/todatamining/orgs", "repos_url": "https://api.github.com/users/todatamining/repos", "events_url": "https://api.github.com/users/todatamining/events{/privacy}", "received_events_url": "https://api.github.com/users/todatamining/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-28T01:35:14Z", "updated_at": "2017-10-28T11:17:31Z", "closed_at": "2017-10-28T11:17:31Z", "author_association": "NONE", "body": "Something wrong with my json, but it just print out:\r\n\r\n[json.exception.type_error.302] type must be array, but is null\r\n\r\nFrom the error, it is hard to tell which line is wrong in the json file or my code, is there a way to print out the line causing exception?\r\n\r\n\r\n\r\n\r\nupdate:\r\nI check the json, the error is causing by the following line:\r\n\r\n{\r\n       \"email\": [....]\r\n}\r\n\r\nin the code, there is a typo\r\n\r\nvector<string> emails =  info[\"emails\"]; //should be \"email\"\r\n\r\nis it possible to print out the line#?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/805", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/805/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/805/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/805/events", "html_url": "https://github.com/nlohmann/json/issues/805", "id": 269125804, "node_id": "MDU6SXNzdWUyNjkxMjU4MDQ=", "number": 805, "title": "{} uses copy constructor, while = does not", "user": {"login": "jllansford", "id": 33156649, "node_id": "MDQ6VXNlcjMzMTU2NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/33156649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jllansford", "html_url": "https://github.com/jllansford", "followers_url": "https://api.github.com/users/jllansford/followers", "following_url": "https://api.github.com/users/jllansford/following{/other_user}", "gists_url": "https://api.github.com/users/jllansford/gists{/gist_id}", "starred_url": "https://api.github.com/users/jllansford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jllansford/subscriptions", "organizations_url": "https://api.github.com/users/jllansford/orgs", "repos_url": "https://api.github.com/users/jllansford/repos", "events_url": "https://api.github.com/users/jllansford/events{/privacy}", "received_events_url": "https://api.github.com/users/jllansford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-27T14:26:36Z", "updated_at": "2017-10-31T13:45:10Z", "closed_at": "2017-10-28T13:33:23Z", "author_association": "NONE", "body": "Just a little annoyance I encountered while writing to_json functions for a large number of in house classes.  Ideally I'd like it if the {} operator behaved the same as the = operator.\r\n\r\nGiven the following code:\r\n```cpp\r\nusing json = nlohmann::json;\r\n\r\nclass A {\r\nprivate:\r\n\tstd::string          _val;\r\n\r\n\t// by including the mutex we've implicitly deleted our copy constructor \r\n\tstd::recursive_mutex _mutex;\r\n\r\npublic:\r\n\tA() : _val(\"Hello World\") {};\r\n\r\n\tfriend void to_json(json &j, const A &a) {\r\n\t\tj = {\r\n\t\t\t{\"val\", a._val}\r\n\t\t};\r\n\t}\r\n};\r\n\r\n\r\n\r\nint main(int argc, char* argv[]) {\r\n\r\n\tjson j = {};\r\n\tA a;\r\n\r\n        // This line compiles and runs completely fine.\r\n        j[\"data\"][\"A\"] =  a;\r\n\r\n        //this line will fail to compile, due to the implicitly deleted A::A(const A&)\r\n\tj[\"data\"] = {{\"A\", a}};\r\n\t\r\n        std::cout << j.dump() << std::endl;\r\n\treturn 0;\r\n}\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/804", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/804/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/804/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/804/events", "html_url": "https://github.com/nlohmann/json/issues/804", "id": 269065821, "node_id": "MDU6SXNzdWUyNjkwNjU4MjE=", "number": 804, "title": "json.hpp:8955: multiple definition of function that is not defined twice or more.", "user": {"login": "NeverMine17", "id": 23419131, "node_id": "MDQ6VXNlcjIzNDE5MTMx", "avatar_url": "https://avatars2.githubusercontent.com/u/23419131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeverMine17", "html_url": "https://github.com/NeverMine17", "followers_url": "https://api.github.com/users/NeverMine17/followers", "following_url": "https://api.github.com/users/NeverMine17/following{/other_user}", "gists_url": "https://api.github.com/users/NeverMine17/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeverMine17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeverMine17/subscriptions", "organizations_url": "https://api.github.com/users/NeverMine17/orgs", "repos_url": "https://api.github.com/users/NeverMine17/repos", "events_url": "https://api.github.com/users/NeverMine17/events{/privacy}", "received_events_url": "https://api.github.com/users/NeverMine17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-10-27T10:49:49Z", "updated_at": "2017-10-27T12:08:26Z", "closed_at": "2017-10-27T12:08:26Z", "author_association": "NONE", "body": "## Json version 2.1.1\r\nAny code in this form:\r\n```cpp\r\n// This file called \"lib.hpp\"\r\nusing json = nlohmann::json;\r\n\r\nnamespace someNS {\r\n    someType someFunction(json file) {\r\n        // ...\r\n    }\r\n}\r\n```\r\n...Returns this error:\r\n```\r\nlib.hpp.o: In function `std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)':\r\njson.hpp:8955: multiple definition of `someNS::someFunction(nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>)'\r\nmain.cpp.o:lib.hpp:7: first defined here\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/803", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/803/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/803/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/803/events", "html_url": "https://github.com/nlohmann/json/issues/803", "id": 269060713, "node_id": "MDU6SXNzdWUyNjkwNjA3MTM=", "number": 803, "title": "[question] to_json for base and derived class", "user": {"login": "bluehazzard", "id": 5720389, "node_id": "MDQ6VXNlcjU3MjAzODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5720389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluehazzard", "html_url": "https://github.com/bluehazzard", "followers_url": "https://api.github.com/users/bluehazzard/followers", "following_url": "https://api.github.com/users/bluehazzard/following{/other_user}", "gists_url": "https://api.github.com/users/bluehazzard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluehazzard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluehazzard/subscriptions", "organizations_url": "https://api.github.com/users/bluehazzard/orgs", "repos_url": "https://api.github.com/users/bluehazzard/repos", "events_url": "https://api.github.com/users/bluehazzard/events{/privacy}", "received_events_url": "https://api.github.com/users/bluehazzard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-27T10:29:24Z", "updated_at": "2017-10-27T13:00:21Z", "closed_at": "2017-10-27T12:59:36Z", "author_association": "NONE", "body": "Hi,\r\nthis is not a bug report but a question. I have a base class and a derived class, both with some members. Now i would like to store them in a json object:\r\n```c++\r\nclass A\r\n{\r\n   private:\r\n    std::string m_base;\r\n}\r\n\r\nclass B : public A\r\n{\r\n   private:\r\n     std::string m_derived;\r\n}\r\n\r\nvoid to_json(nlohmann::json& j,const A el)\r\n{\r\n   j = nlohmann::json{\r\n      {\"base\", el.m_base},\r\n   }\r\n}\r\n\r\nvoid to_json(nlohmann::json& j,const B el)\r\n{\r\n   j = nlohmann::json{\r\n     static_cast<A>(el),   // insert the \"base\" element\r\n     {\"derived\", el.m_derived}\r\n   }\r\n}\r\n```\r\ni would like to have a resulting json element like this\r\n```json\r\n{\r\n  \"base\" : \"content base\",\r\n  \"derived\" : \"content derived\"\r\n}\r\n```\r\n\r\nwith the provided code this does not work... Any idea?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/802", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/802/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/802/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/802/events", "html_url": "https://github.com/nlohmann/json/issues/802", "id": 269029886, "node_id": "MDU6SXNzdWUyNjkwMjk4ODY=", "number": 802, "title": "Misleading error message - unexpected '\"' - on incorrect utf-8 symbol", "user": {"login": "stgrzeszczak", "id": 12528958, "node_id": "MDQ6VXNlcjEyNTI4OTU4", "avatar_url": "https://avatars0.githubusercontent.com/u/12528958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stgrzeszczak", "html_url": "https://github.com/stgrzeszczak", "followers_url": "https://api.github.com/users/stgrzeszczak/followers", "following_url": "https://api.github.com/users/stgrzeszczak/following{/other_user}", "gists_url": "https://api.github.com/users/stgrzeszczak/gists{/gist_id}", "starred_url": "https://api.github.com/users/stgrzeszczak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stgrzeszczak/subscriptions", "organizations_url": "https://api.github.com/users/stgrzeszczak/orgs", "repos_url": "https://api.github.com/users/stgrzeszczak/repos", "events_url": "https://api.github.com/users/stgrzeszczak/events{/privacy}", "received_events_url": "https://api.github.com/users/stgrzeszczak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-27T08:41:52Z", "updated_at": "2017-10-27T13:18:19Z", "closed_at": "2017-10-27T13:17:27Z", "author_association": "NONE", "body": "Hi,\r\nI was recently confounded by this error and spent quite a while looking for unmached quotation marks, only to find out that my JSON had incorrect utf-8 data. Please take a look at the code sample below. I have a wrapper file for your library that looks like this:\r\n\r\n```cpp\r\nnamespace json {\r\nusing uint_t = std::uint64_t;\r\nusing int_t = std::int64_t;\r\nusing string_t = std::string;\r\ntemplate <typename T, typename... Args> using array_t = std::vector<T>;\r\ntemplate <typename K, typename T, typename... Args> using object_t = std::map<K, T>;\r\nusing bool_t = bool;\r\nusing float_t = double;\r\n\r\nusing Json = nlohmann::basic_json<object_t, array_t, string_t, bool_t, int_t, uint_t, float_t>;\r\n}\r\n```\r\n\r\nand here's an example program showing the issue:\r\n\r\n```cpp\r\n#include \"json-wrapper/json-wrapper.hpp\"\r\n\r\nint main(void) {\r\n    std::string data{};\r\n    data += char(0xff);   // 'data' string is not UTF-8 compliant\r\n\r\n    json::Json message{};\r\n    message[\"data\"] = data;\r\n\r\n    std::string raw_message = message.dump();\r\n\r\n    try {\r\n        json::Json parsed = json::Json::parse(raw_message);\r\n    }\r\n    catch (const std::exception& e) {\r\n        std::cout << e.what() << '\\n';\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThe output is `parse error - unexpected '\"'`. It should say that there was a problem parsing unicode characters."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/801", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/801/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/801/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/801/events", "html_url": "https://github.com/nlohmann/json/issues/801", "id": 268984768, "node_id": "MDU6SXNzdWUyNjg5ODQ3Njg=", "number": 801, "title": "json data = std::string_view(\"hi\"); doesn't work?", "user": {"login": "lethe555", "id": 8001254, "node_id": "MDQ6VXNlcjgwMDEyNTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8001254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lethe555", "html_url": "https://github.com/lethe555", "followers_url": "https://api.github.com/users/lethe555/followers", "following_url": "https://api.github.com/users/lethe555/following{/other_user}", "gists_url": "https://api.github.com/users/lethe555/gists{/gist_id}", "starred_url": "https://api.github.com/users/lethe555/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lethe555/subscriptions", "organizations_url": "https://api.github.com/users/lethe555/orgs", "repos_url": "https://api.github.com/users/lethe555/repos", "events_url": "https://api.github.com/users/lethe555/events{/privacy}", "received_events_url": "https://api.github.com/users/lethe555/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-27T04:26:46Z", "updated_at": "2018-06-23T15:11:25Z", "closed_at": "2017-10-31T13:30:00Z", "author_association": "NONE", "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/800", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/800/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/800/events", "html_url": "https://github.com/nlohmann/json/issues/800", "id": 268817503, "node_id": "MDU6SXNzdWUyNjg4MTc1MDM=", "number": 800, "title": "Thread safety of parse()", "user": {"login": "tanaynv", "id": 33129354, "node_id": "MDQ6VXNlcjMzMTI5MzU0", "avatar_url": "https://avatars0.githubusercontent.com/u/33129354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanaynv", "html_url": "https://github.com/tanaynv", "followers_url": "https://api.github.com/users/tanaynv/followers", "following_url": "https://api.github.com/users/tanaynv/following{/other_user}", "gists_url": "https://api.github.com/users/tanaynv/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanaynv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanaynv/subscriptions", "organizations_url": "https://api.github.com/users/tanaynv/orgs", "repos_url": "https://api.github.com/users/tanaynv/repos", "events_url": "https://api.github.com/users/tanaynv/events{/privacy}", "received_events_url": "https://api.github.com/users/tanaynv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-26T15:57:41Z", "updated_at": "2017-10-31T16:10:14Z", "closed_at": "2017-10-31T16:10:14Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI plan to use this library to parse JSON files in a multithreaded environment. Specifically I am concerned about thread safety with respect to the behaviour of parse() when called simultaneously from different threads. I would appreciate any help or input on this matter. \r\n\r\nThanks, \r\nTanay"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/799", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/799/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/799/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/799/events", "html_url": "https://github.com/nlohmann/json/issues/799", "id": 268321574, "node_id": "MDU6SXNzdWUyNjgzMjE1NzQ=", "number": 799, "title": "Numbers as strings", "user": {"login": "tomba", "id": 51776, "node_id": "MDQ6VXNlcjUxNzc2", "avatar_url": "https://avatars1.githubusercontent.com/u/51776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomba", "html_url": "https://github.com/tomba", "followers_url": "https://api.github.com/users/tomba/followers", "following_url": "https://api.github.com/users/tomba/following{/other_user}", "gists_url": "https://api.github.com/users/tomba/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomba/subscriptions", "organizations_url": "https://api.github.com/users/tomba/orgs", "repos_url": "https://api.github.com/users/tomba/repos", "events_url": "https://api.github.com/users/tomba/events{/privacy}", "received_events_url": "https://api.github.com/users/tomba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-25T09:10:49Z", "updated_at": "2017-10-28T13:34:41Z", "closed_at": "2017-10-28T13:34:41Z", "author_association": "NONE", "body": "Hi,\r\n\r\nIs there a way to get the json data in its original string format? The problem is that the following code:\r\n\r\n```\r\n\tauto j = json::parse(\"[ 0.1 ]\");\r\n\r\n\tauto& v = j.at(0);\r\n\r\n\tstringstream ss;\r\n\tss << fixed << setprecision(50) << v.get<double>();\r\n\tstring str = ss.str();\r\n```\r\nproduces:\r\n\r\n`\"0.10000000000000000555111512312578270211815834045410\"`\r\n\r\nBeing able to get the original string data would fix the floating point problems and also allow handling of integer numbers larger than 64 bit.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/798", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/798/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/798/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/798/events", "html_url": "https://github.com/nlohmann/json/pull/798", "id": 267950181, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ4MzM1MjQ2", "number": 798, "title": "Add no thrown exception support to parse", "user": {"login": "jseward", "id": 1309841, "node_id": "MDQ6VXNlcjEzMDk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1309841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseward", "html_url": "https://github.com/jseward", "followers_url": "https://api.github.com/users/jseward/followers", "following_url": "https://api.github.com/users/jseward/following{/other_user}", "gists_url": "https://api.github.com/users/jseward/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseward/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseward/subscriptions", "organizations_url": "https://api.github.com/users/jseward/orgs", "repos_url": "https://api.github.com/users/jseward/repos", "events_url": "https://api.github.com/users/jseward/events{/privacy}", "received_events_url": "https://api.github.com/users/jseward/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-24T08:58:05Z", "updated_at": "2017-12-04T15:12:27Z", "closed_at": "2017-12-04T11:43:53Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/798", "html_url": "https://github.com/nlohmann/json/pull/798", "diff_url": "https://github.com/nlohmann/json/pull/798.diff", "patch_url": "https://github.com/nlohmann/json/pull/798.patch"}, "body": "This PR adds support for parse to not throw exceptions.  Use similar pattern as `std::experimental::filesystem` where overload that takes in `std::error_code&` does not throw an exception.\r\n\r\nDid not add new tests as changes to existing tests provide full coverage of new codepath.\r\n\r\nNOTE: accidentally branched from https://github.com/nlohmann/json/pull/795, ignore that for now.\r\n"}]