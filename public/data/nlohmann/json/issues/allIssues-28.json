[{"url": "https://api.github.com/repos/nlohmann/json/issues/377", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/377/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/377/events", "html_url": "https://github.com/nlohmann/json/issues/377", "id": 193413603, "node_id": "MDU6SXNzdWUxOTM0MTM2MDM=", "number": 377, "title": "A unique name to mention the library?", "user": {"login": "intijk", "id": 740501, "node_id": "MDQ6VXNlcjc0MDUwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/740501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/intijk", "html_url": "https://github.com/intijk", "followers_url": "https://api.github.com/users/intijk/followers", "following_url": "https://api.github.com/users/intijk/following{/other_user}", "gists_url": "https://api.github.com/users/intijk/gists{/gist_id}", "starred_url": "https://api.github.com/users/intijk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/intijk/subscriptions", "organizations_url": "https://api.github.com/users/intijk/orgs", "repos_url": "https://api.github.com/users/intijk/repos", "events_url": "https://api.github.com/users/intijk/events{/privacy}", "received_events_url": "https://api.github.com/users/intijk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-12-05T05:17:14Z", "updated_at": "2017-03-10T09:30:07Z", "closed_at": "2016-12-06T21:55:32Z", "author_association": "NONE", "body": "I am asking a non tech question, is there a better name to name the library?\r\n\r\njsonmc?\r\nneilsjson?\r\n\r\nI mean, 'json' basically is the format, if we still call the library the same name, it would cause chaos. I hope there could be a short but quick name to refer to the library without any ambiguity, if currently people is using 'json for modern c++' , how about just call it jsonmc?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/376", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/376/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/376/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/376/events", "html_url": "https://github.com/nlohmann/json/issues/376", "id": 193254940, "node_id": "MDU6SXNzdWUxOTMyNTQ5NDA=", "number": 376, "title": "Support for comments.", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-03T01:19:04Z", "updated_at": "2018-04-07T11:20:50Z", "closed_at": "2016-12-03T07:27:39Z", "author_association": "NONE", "body": "One of the biggest gripes people have with json format is the lack of support for comments.\r\nE.g. see this [reddit thread](https://www.reddit.com/r/programming/comments/4v6chu/why_json_doesnt_support_comments_douglas_crockford/).\r\n\r\nMany libraries, including jsoncpp and RapidJSON have support for comments in spite of the RFC.\r\nAdditionally, RapidJSON allows further relaxations to grammar, e.g. trailing commas and nan/infinity for fp-numbers.\r\n\r\nIf we want to be user-friendly, perhaps we shouldn't alienate users that have need for comments in their config files?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/375", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/375/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/375/events", "html_url": "https://github.com/nlohmann/json/issues/375", "id": 193254131, "node_id": "MDU6SXNzdWUxOTMyNTQxMzE=", "number": 375, "title": "Non-unique keys in objects.", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2016-12-03T01:09:30Z", "updated_at": "2018-02-07T18:50:19Z", "closed_at": "2016-12-03T14:29:56Z", "author_association": "NONE", "body": "JSON RFC allows (quite unfortunately, IMHO) non-unique keys in objects.\r\nThe current implementation only keeps the last one. I know this is mentioned in the doc in the example where json is constructed from a multimap. In this scenario if the user had put non-unique keys in there - well that's their fault.\r\n\r\nIn general case, however, when we're deserializing an unknown input and silently discarding duplicate keys, that doesn't seem like the most correct thing to do - this looks more like a silent failure. Perhaps this should throw instead?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/374", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/374/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/374/events", "html_url": "https://github.com/nlohmann/json/issues/374", "id": 193044699, "node_id": "MDU6SXNzdWUxOTMwNDQ2OTk=", "number": 374, "title": "Reading from file", "user": {"login": "codeWonderland", "id": 22084929, "node_id": "MDQ6VXNlcjIyMDg0OTI5", "avatar_url": "https://avatars1.githubusercontent.com/u/22084929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeWonderland", "html_url": "https://github.com/codeWonderland", "followers_url": "https://api.github.com/users/codeWonderland/followers", "following_url": "https://api.github.com/users/codeWonderland/following{/other_user}", "gists_url": "https://api.github.com/users/codeWonderland/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeWonderland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeWonderland/subscriptions", "organizations_url": "https://api.github.com/users/codeWonderland/orgs", "repos_url": "https://api.github.com/users/codeWonderland/repos", "events_url": "https://api.github.com/users/codeWonderland/events{/privacy}", "received_events_url": "https://api.github.com/users/codeWonderland/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-02T06:34:34Z", "updated_at": "2016-12-02T17:04:54Z", "closed_at": "2016-12-02T17:04:54Z", "author_association": "NONE", "body": "I don't see any capability offhand for this to read a .json file. Is this a feature? If so, what is the syntax? If not, can this be made a feature?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/373", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/373/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/373/events", "html_url": "https://github.com/nlohmann/json/issues/373", "id": 192652118, "node_id": "MDU6SXNzdWUxOTI2NTIxMTg=", "number": 373, "title": "Optimize memory usage of json objects in combination with binary serialization", "user": {"login": "mwittgen", "id": 24278210, "node_id": "MDQ6VXNlcjI0Mjc4MjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/24278210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwittgen", "html_url": "https://github.com/mwittgen", "followers_url": "https://api.github.com/users/mwittgen/followers", "following_url": "https://api.github.com/users/mwittgen/following{/other_user}", "gists_url": "https://api.github.com/users/mwittgen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwittgen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwittgen/subscriptions", "organizations_url": "https://api.github.com/users/mwittgen/orgs", "repos_url": "https://api.github.com/users/mwittgen/repos", "events_url": "https://api.github.com/users/mwittgen/events{/privacy}", "received_events_url": "https://api.github.com/users/mwittgen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-11-30T19:09:33Z", "updated_at": "2017-03-28T21:59:34Z", "closed_at": "2017-01-04T12:01:29Z", "author_association": "NONE", "body": "With binary serialization being implemented by  msgpack and cbor I wonder if some of the binary format optimizations can be extended to json object memory representation by introducing more specific storage types for floating point numbers and integers by extinguishing between uint_8/16/32/64, int_8/16/32/64, float32  and float64. I am aware this does not reduce the size of a JSON object but would retain the additional type information from the binary formats. For optimizing memory size, what about introducing the concept of ArrayType<uint8_t> and so on and allow the optimized storage for arrays consisting of one specific type? The json object would store a pointer to the optimized array. On a 64-bit system one element in an array of uint8_t uses 16 bytes instead of one byte.  A downside is sacrificing the indexing capability  j[\"some_array\"][0] would not work if j[\"some_array\"] if it maps to a pointer to an array object."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/372", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/372/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/372/events", "html_url": "https://github.com/nlohmann/json/issues/372", "id": 192419544, "node_id": "MDU6SXNzdWUxOTI0MTk1NDQ=", "number": 372, "title": "Compiler warnings?", "user": {"login": "davidbernstein", "id": 12040444, "node_id": "MDQ6VXNlcjEyMDQwNDQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/12040444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbernstein", "html_url": "https://github.com/davidbernstein", "followers_url": "https://api.github.com/users/davidbernstein/followers", "following_url": "https://api.github.com/users/davidbernstein/following{/other_user}", "gists_url": "https://api.github.com/users/davidbernstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbernstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbernstein/subscriptions", "organizations_url": "https://api.github.com/users/davidbernstein/orgs", "repos_url": "https://api.github.com/users/davidbernstein/repos", "events_url": "https://api.github.com/users/davidbernstein/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbernstein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-11-29T22:23:59Z", "updated_at": "2016-11-30T23:24:26Z", "closed_at": "2016-11-30T23:24:26Z", "author_association": "NONE", "body": "Hi, When I include json.hpp I get many compiler warnings like\r\n\r\n//usr/local/include/nlohmann/json.hpp(3006): warning: type qualifier is meaningless on cast type\r\n\r\nIs there a way to suppress these? I'm on OS X with Xcode 7.2 (stuck on that version for other reasons).\r\n\r\nThanks,\r\nDave"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/371", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/371/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/371/events", "html_url": "https://github.com/nlohmann/json/issues/371", "id": 191825307, "node_id": "MDU6SXNzdWUxOTE4MjUzMDc=", "number": 371, "title": "docs: how to release a json object in memory?", "user": {"login": "Fonger", "id": 5862369, "node_id": "MDQ6VXNlcjU4NjIzNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5862369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fonger", "html_url": "https://github.com/Fonger", "followers_url": "https://api.github.com/users/Fonger/followers", "following_url": "https://api.github.com/users/Fonger/following{/other_user}", "gists_url": "https://api.github.com/users/Fonger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fonger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fonger/subscriptions", "organizations_url": "https://api.github.com/users/Fonger/orgs", "repos_url": "https://api.github.com/users/Fonger/repos", "events_url": "https://api.github.com/users/Fonger/events{/privacy}", "received_events_url": "https://api.github.com/users/Fonger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-26T20:33:05Z", "updated_at": "2016-12-01T14:13:56Z", "closed_at": "2016-12-01T14:13:55Z", "author_association": "NONE", "body": "If I have a huge json object and each json has reference to sub json object.\r\nIs there a  way to completly free the huge json object with all it's child json object?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/370", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/370/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/370/events", "html_url": "https://github.com/nlohmann/json/issues/370", "id": 191783433, "node_id": "MDU6SXNzdWUxOTE3ODM0MzM=", "number": 370, "title": "crash in dump", "user": {"login": "user1095108", "id": 8299348, "node_id": "MDQ6VXNlcjgyOTkzNDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8299348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/user1095108", "html_url": "https://github.com/user1095108", "followers_url": "https://api.github.com/users/user1095108/followers", "following_url": "https://api.github.com/users/user1095108/following{/other_user}", "gists_url": "https://api.github.com/users/user1095108/gists{/gist_id}", "starred_url": "https://api.github.com/users/user1095108/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/user1095108/subscriptions", "organizations_url": "https://api.github.com/users/user1095108/orgs", "repos_url": "https://api.github.com/users/user1095108/repos", "events_url": "https://api.github.com/users/user1095108/events{/privacy}", "received_events_url": "https://api.github.com/users/user1095108/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-11-26T03:02:45Z", "updated_at": "2016-11-26T17:24:09Z", "closed_at": "2016-11-26T17:24:09Z", "author_association": "NONE", "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/369", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/369/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/369/events", "html_url": "https://github.com/nlohmann/json/issues/369", "id": 191625113, "node_id": "MDU6SXNzdWUxOTE2MjUxMTM=", "number": 369, "title": "Conversion operators not considered", "user": {"login": "popizdeh", "id": 1608656, "node_id": "MDQ6VXNlcjE2MDg2NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1608656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popizdeh", "html_url": "https://github.com/popizdeh", "followers_url": "https://api.github.com/users/popizdeh/followers", "following_url": "https://api.github.com/users/popizdeh/following{/other_user}", "gists_url": "https://api.github.com/users/popizdeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/popizdeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popizdeh/subscriptions", "organizations_url": "https://api.github.com/users/popizdeh/orgs", "repos_url": "https://api.github.com/users/popizdeh/repos", "events_url": "https://api.github.com/users/popizdeh/events{/privacy}", "received_events_url": "https://api.github.com/users/popizdeh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2016-11-25T04:57:33Z", "updated_at": "2017-01-22T13:29:25Z", "closed_at": "2017-01-03T21:41:31Z", "author_association": "NONE", "body": "```cpp\r\nstruct Test\r\n{\r\n    int x;\r\n    operator int() { return x; }\r\n};\r\n\r\nTest t = { 0 };\r\nnlohmann::json j;\r\nj[\"test\"] = t;\r\n```\r\n\r\nThis doesn't compile, I was hoping it would use the conversion operator."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/368", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/368/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/368/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/368/events", "html_url": "https://github.com/nlohmann/json/issues/368", "id": 191510856, "node_id": "MDU6SXNzdWUxOTE1MTA4NTY=", "number": 368, "title": "Coverity issue (FORWARD_NULL) in lexer(std::istream& s)", "user": {"login": "darklukee", "id": 5106588, "node_id": "MDQ6VXNlcjUxMDY1ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5106588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darklukee", "html_url": "https://github.com/darklukee", "followers_url": "https://api.github.com/users/darklukee/followers", "following_url": "https://api.github.com/users/darklukee/following{/other_user}", "gists_url": "https://api.github.com/users/darklukee/gists{/gist_id}", "starred_url": "https://api.github.com/users/darklukee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darklukee/subscriptions", "organizations_url": "https://api.github.com/users/darklukee/orgs", "repos_url": "https://api.github.com/users/darklukee/repos", "events_url": "https://api.github.com/users/darklukee/events{/privacy}", "received_events_url": "https://api.github.com/users/darklukee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2016-11-24T12:40:19Z", "updated_at": "2016-11-24T21:16:31Z", "closed_at": "2016-11-24T21:16:31Z", "author_association": "NONE", "body": "Coverity found an issue in lexer(std::istream& s):\r\n\r\n> 1. assign_zero: Assigning: this->m_start = NULL.\r\n\r\n```\r\n7618        explicit lexer(std::istream& s)\r\n7619            : m_stream(&s), m_line_buffer()\r\n7620        {\r\n7621            // fill buffer\r\n```\r\n> CID 1077412 (#1 of 3): Explicit null dereferenced (FORWARD_NULL)\r\n> 2. var_deref_model: fill_line_buffer dereferences null this->m_start. \r\n\r\n`7622            fill_line_buffer();`"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/367", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/367/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/367/events", "html_url": "https://github.com/nlohmann/json/issues/367", "id": 191383970, "node_id": "MDU6SXNzdWUxOTEzODM5NzA=", "number": 367, "title": "Behavior of operator>> should more closely resemble that of built-in overloads.", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 52, "created_at": "2016-11-23T21:30:35Z", "updated_at": "2017-06-13T07:01:53Z", "closed_at": "2017-06-13T06:42:08Z", "author_association": "NONE", "body": "Basically:\r\n* eat up leading blanks or newlines\r\n* leave the stream where the parsing ended, allowing for more data downstream, which may or may not be json. \r\n\r\n```c++\r\n#include \"json.hpp\"\r\n    \r\ntemplate<typename T>\r\nstatic void test(const std::string& s)\r\n{\r\n    T val{999};\r\n    std::stringstream sstr(s);\r\n    //sstr.exceptions(std::ifstream::failbit | std::ifstream::badbit);\r\n\r\n    try {\r\n        size_t i = 0;\r\n        while(sstr >> val) {\r\n            std::cerr << \"    result[\" << i++ << \"]=\" << val \r\n                      << \"; streampos=\" << sstr.tellg() << std::endl;\r\n        }   \r\n\r\n        std::cerr << \"    final values: result=\" << val \r\n                  << \" i=\" << i\r\n                  << \" streampos=\" << sstr.tellg()\r\n                  << \" streamflags=\" << sstr.flags() \r\n                  << std::endl;\r\n    } catch(std::exception& e) {\r\n        std::cerr << \"    std::exception:\" << e.what() << std::endl;\r\n    }   \r\n\r\n    std::cerr << std::endl;\r\n}\r\n\r\nint main()\r\n{\r\n    using json = nlohmann::json;\r\n    size_t i = 0;\r\n\r\n    for(std::string s : { \r\n        \"\", \r\n        \"   \",\r\n        \"111\",\r\n        \"222 \\t\\n\",\r\n        \"\\n\\t 333\", \r\n        \" 111 \\n222\\n \\n  333\" })\r\n    {   \r\n        std::cerr << \"\\nTest-case[\" << i++ << \"]: '\" << s << \"'\" << std::endl;\r\n    \r\n        std::cerr << \"With int:\" << std::endl;\r\n        test<int>(s);\r\n\r\n        std::cerr << \"With json:\" << std::endl;\r\n        test<json>(s);\r\n\r\n        std::cerr << \"----\" << std::endl;\r\n    }   \r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n```\r\nTest-case[0]: ''\r\nWith int:\r\n    final values: result=999 i=0 streampos=-1 streamflags=4098\r\n\r\nWith json:\r\n    std::exception:parse error - unexpected end of input\r\n\r\n----\r\n\r\nTest-case[1]: '   '\r\nWith int:\r\n    final values: result=999 i=0 streampos=-1 streamflags=4098\r\n\r\nWith json:\r\n    std::exception:parse error - unexpected end of input\r\n\r\n----\r\n\r\nTest-case[2]: '111'\r\nWith int:\r\n    result[0]=111; streampos=-1\r\n    final values: result=111 i=1 streampos=-1 streamflags=4098\r\n\r\nWith json:\r\n    result[0]=111; streampos=-1\r\n    std::exception:basic_string::append\r\n\r\n----\r\n\r\nTest-case[3]: '222 \t\r\n'\r\nWith int:\r\n    result[0]=222; streampos=3\r\n    final values: result=222 i=1 streampos=-1 streamflags=4098\r\n\r\nWith json:\r\n    final values: result=222 i=0 streampos=-1 streamflags=4098\r\n\r\n----\r\n\r\nTest-case[4]: '\r\n\t 333'\r\nWith int:\r\n    result[0]=333; streampos=-1\r\n    final values: result=333 i=1 streampos=-1 streamflags=4098\r\n\r\nWith json:\r\n    result[0]=333; streampos=-1\r\n    std::exception:basic_string::append\r\n\r\n----\r\n\r\nTest-case[5]: ' 111 \r\n222\r\n \r\n  333'\r\nWith int:\r\n    result[0]=111; streampos=4\r\n    result[1]=222; streampos=9\r\n    result[2]=333; streampos=-1\r\n    final values: result=333 i=3 streampos=-1 streamflags=4098\r\n\r\nWith json:\r\n    std::exception:parse error - unexpected number literal; expected end of input\r\n\r\n----\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/366", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/366/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/366/events", "html_url": "https://github.com/nlohmann/json/issues/366", "id": 191165658, "node_id": "MDU6SXNzdWUxOTExNjU2NTg=", "number": 366, "title": "json::parse on failed stream gets stuck", "user": {"login": "popizdeh", "id": 1608656, "node_id": "MDQ6VXNlcjE2MDg2NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1608656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popizdeh", "html_url": "https://github.com/popizdeh", "followers_url": "https://api.github.com/users/popizdeh/followers", "following_url": "https://api.github.com/users/popizdeh/following{/other_user}", "gists_url": "https://api.github.com/users/popizdeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/popizdeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popizdeh/subscriptions", "organizations_url": "https://api.github.com/users/popizdeh/orgs", "repos_url": "https://api.github.com/users/popizdeh/repos", "events_url": "https://api.github.com/users/popizdeh/events{/privacy}", "received_events_url": "https://api.github.com/users/popizdeh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/13", "html_url": "https://github.com/nlohmann/json/milestone/13", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/13/labels", "id": 2110088, "node_id": "MDk6TWlsZXN0b25lMjExMDA4OA==", "number": 13, "title": "Release 2.0.8", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2016-11-02T16:36:13Z", "updated_at": "2016-12-02T19:10:24Z", "due_on": "2016-12-02T08:00:00Z", "closed_at": "2016-12-02T19:10:24Z"}, "comments": 4, "created_at": "2016-11-23T01:00:01Z", "updated_at": "2016-11-25T16:44:47Z", "closed_at": "2016-11-25T04:48:35Z", "author_association": "NONE", "body": "Creating a file stream for file that doesn't exist results in stream object whose fail() method returns true. json::parse never returns when called on such a stream. Adding a check for m_stream.fail() (in addition to eof()) in fill_line_buffer seems to do the trick, invalid_argument exception gets thrown. Not sure if this is the right fix, it might also make sense checking that stream isn't 'bad' (not sure what causes this to happen as bad() for missing file stream returns false)."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/365", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/365/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/365/events", "html_url": "https://github.com/nlohmann/json/issues/365", "id": 190883397, "node_id": "MDU6SXNzdWUxOTA4ODMzOTc=", "number": 365, "title": "Performance improvements", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/13", "html_url": "https://github.com/nlohmann/json/milestone/13", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/13/labels", "id": 2110088, "node_id": "MDk6TWlsZXN0b25lMjExMDA4OA==", "number": 13, "title": "Release 2.0.8", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2016-11-02T16:36:13Z", "updated_at": "2016-12-02T19:10:24Z", "due_on": "2016-12-02T08:00:00Z", "closed_at": "2016-12-02T19:10:24Z"}, "comments": 30, "created_at": "2016-11-22T01:26:22Z", "updated_at": "2016-11-29T06:47:36Z", "closed_at": "2016-11-29T06:47:30Z", "author_association": "NONE", "body": "I propose some minor changes that yield substantial performance improvements.\r\n\r\n```patch\r\ndiff --git a/src/json.hpp b/src/json.hpp\r\nindex a302bb0..0a8ab78 100644\r\n--- a/src/json.hpp\r\n+++ b/src/json.hpp\r\n@@ -8755,10 +8755,10 @@ basic_json_parser_66:\r\n                 {\r\n                     // copy unprocessed characters to line buffer\r\n                     m_line_buffer.clear();\r\n-                    for (m_cursor = m_start; m_cursor != m_limit; ++m_cursor)\r\n-                    {\r\n-                        m_line_buffer.append(1, static_cast<const char>(*m_cursor));\r\n-                    }\r\n+                    m_line_buffer.append(\r\n+                            reinterpret_cast<const typename string_t::value_type*>(m_start),\r\n+                            static_cast<size_t>(m_limit - m_start));\r\n+                    m_cursor = m_limit;\r\n                 }\r\n\r\n                 // append n characters to make sure that there is sufficient\r\n@@ -8770,11 +8770,13 @@ basic_json_parser_66:\r\n             {\r\n                 // delete processed characters from line buffer\r\n                 m_line_buffer.erase(0, static_cast<size_t>(offset_start));\r\n+\r\n                 // read next line from input stream\r\n-                std::string line;\r\n-                std::getline(*m_stream, line, '\\n');\r\n+                m_line_buffer_tmp.clear();\r\n+                std::getline(*m_stream, m_line_buffer_tmp, '\\n');\r\n                 // add line with newline symbol to the line buffer\r\n-                m_line_buffer += line + \"\\n\";\r\n+                m_line_buffer += m_line_buffer_tmp;\r\n+                m_line_buffer.push_back('\\n');\r\n             }\r\n\r\n             // set pointers\r\n@@ -8861,9 +8863,15 @@ basic_json_parser_66:\r\n             // iterate the result between the quotes\r\n             for (const lexer_char_t* i = m_start + 1; i < m_cursor - 1; ++i)\r\n             {\r\n-                // process escaped characters\r\n-                if (*i == '\\\\')\r\n-                {\r\n+                // number of non-escaped characters\r\n+                const size_t n = static_cast<size_t>(std::find(i, m_cursor - 1, '\\\\') - i);\r\n+\r\n+                if(n != 0) {\r\n+                    result.append(reinterpret_cast<const typename string_t::value_type*>(i), n);\r\n+                    i += n-1; // -1 because will ++i\r\n+                } else {\r\n+                    // processing escaped character\r\n+\r\n                     // read next character\r\n                     ++i;\r\n\r\n@@ -8950,12 +8958,6 @@ basic_json_parser_66:\r\n                         }\r\n                     }\r\n                 }\r\n-                else\r\n-                {\r\n-                    // all other characters are just copied to the end of the\r\n-                    // string\r\n-                    result.append(1, static_cast<typename string_t::value_type>(*i));\r\n-                }\r\n             }\r\n\r\n             return result;\r\n@@ -9139,6 +9141,8 @@ basic_json_parser_66:\r\n         std::istream* m_stream = nullptr;\r\n         /// line buffer buffer for m_stream\r\n         string_t m_line_buffer {};\r\n+        /// used for filling m_line_buffer\r\n+        string_t m_line_buffer_tmp {};\r\n         /// the buffer pointer\r\n         const lexer_char_t* m_content = nullptr;\r\n         /// pointer to the beginning of the current symbol\r\n```\r\n```\r\nBefore\r\nparse jeopardy.json                           1  1746079858 ns/op\r\nparse canada.json                            50    49808100 ns/op\r\nparse citm_catalog.json                      50    30050798 ns/op\r\nparse twitter.json                          100    15523826 ns/op\r\nparse numbers/floats.json                     5   539260495 ns/op\r\nparse numbers/signed_ints.json                5   346619225 ns/op\r\nparse numbers/unsigned_ints.json              5   348103862 ns/op\r\ndump jeopardy.json                            1  1882424034 ns/op\r\ndump jeopardy.json with indent                1  2333816314 ns/op\r\n\r\nAfter:\r\nparse jeopardy.json                           1  1392954141 ns/op\r\nparse canada.json                            50    47828487 ns/op\r\nparse citm_catalog.json                     100    19988139 ns/op\r\nparse twitter.json                          100    10175643 ns/op\r\nparse numbers/floats.json                     5   428099836 ns/op\r\nparse numbers/signed_ints.json                5   232719693 ns/op\r\nparse numbers/unsigned_ints.json              5   234741840 ns/op\r\ndump jeopardy.json                            1  1871500322 ns/op\r\ndump jeopardy.json with indent                1  2512231626 ns/op\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/364", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/364/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/364/events", "html_url": "https://github.com/nlohmann/json/issues/364", "id": 190801389, "node_id": "MDU6SXNzdWUxOTA4MDEzODk=", "number": 364, "title": "'to_string' is not a member of 'std' ", "user": {"login": "joshuagahan", "id": 901540, "node_id": "MDQ6VXNlcjkwMTU0MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/901540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshuagahan", "html_url": "https://github.com/joshuagahan", "followers_url": "https://api.github.com/users/joshuagahan/followers", "following_url": "https://api.github.com/users/joshuagahan/following{/other_user}", "gists_url": "https://api.github.com/users/joshuagahan/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshuagahan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshuagahan/subscriptions", "organizations_url": "https://api.github.com/users/joshuagahan/orgs", "repos_url": "https://api.github.com/users/joshuagahan/repos", "events_url": "https://api.github.com/users/joshuagahan/events{/privacy}", "received_events_url": "https://api.github.com/users/joshuagahan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 486186748, "node_id": "MDU6TGFiZWw0ODYxODY3NDg=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20mingw", "name": "platform: mingw", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-21T18:40:05Z", "updated_at": "2016-12-01T14:13:32Z", "closed_at": "2016-12-01T14:13:32Z", "author_association": "NONE", "body": "added json.hpp to project and imported, set \"g++ follow c++ ISO C++ language standard [-std=c++11] and get compiler errors for to_strong and stoi.  I'm using GNU GCC Compiler, Codeblocks 16.01 IDE, on windows.  \r\n\r\nIf this is something I'm doing wrong, vice an issue, I'm unaware.  I'm a very very new CS major and don't honestly know much about compilers, includes, well pretty much anything.  "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/363", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/363/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/363/events", "html_url": "https://github.com/nlohmann/json/issues/363", "id": 190537604, "node_id": "MDU6SXNzdWUxOTA1Mzc2MDQ=", "number": 363, "title": "Optional comment support.", "user": {"login": "qis", "id": 5030897, "node_id": "MDQ6VXNlcjUwMzA4OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5030897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qis", "html_url": "https://github.com/qis", "followers_url": "https://api.github.com/users/qis/followers", "following_url": "https://api.github.com/users/qis/following{/other_user}", "gists_url": "https://api.github.com/users/qis/gists{/gist_id}", "starred_url": "https://api.github.com/users/qis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qis/subscriptions", "organizations_url": "https://api.github.com/users/qis/orgs", "repos_url": "https://api.github.com/users/qis/repos", "events_url": "https://api.github.com/users/qis/events{/privacy}", "received_events_url": "https://api.github.com/users/qis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-20T03:48:23Z", "updated_at": "2016-11-20T19:47:28Z", "closed_at": "2016-11-20T12:26:38Z", "author_association": "NONE", "body": "Here are two `basic_json` functions that allow parsing JSON input with comments. This implementation is not very efficient and I would love to see this functionality implemented (either this way or properly) in nlohmann/json.\r\n\r\n```cpp\r\n    /*!\r\n    @copydoc parse(std::istream&, parser_callback_t)\r\n    */\r\n    static basic_json parse_relaxed(std::istream& i, parser_callback_t cb = nullptr)\r\n    {\r\n        std::stringstream ss;\r\n        for (std::string line; std::getline(i, line);) {\r\n            enum class state { none, escape, escape_u, escape_0, escape_1, escape_2, string, slash, end };\r\n            state s = state::none;\r\n            std::size_t size = 0;\r\n            for (auto it = line.begin(), end = line.end(); s != state::end && it != end; ++it) {\r\n                switch (s) {\r\n                case state::none:\r\n                    switch (*it) {\r\n                    case '\"': s = state::string; break;\r\n                    case '/': s = state::slash; break;\r\n                    }\r\n                    break;\r\n                case state::string:\r\n                    switch (*it) {\r\n                    case '\"': s = state::none; break;\r\n                    case '\\\\': s = state::escape; break;\r\n                    }\r\n                    break;\r\n                case state::escape:\r\n                    switch (*it) {\r\n                    case 'u': s = state::escape_u; break;\r\n                    default: s = state::string; break;\r\n                    }\r\n                    break;\r\n                case state::escape_u:\r\n                case state::escape_0:\r\n                case state::escape_1:\r\n                case state::escape_2:\r\n                    if (*it < '0' || *it > '9') {\r\n                        throw std::domain_error(\"invalid unicode escape sequence\");\r\n                    }\r\n                    s = static_cast<state>(static_cast<int>(s) + 1);\r\n                    break;\r\n                case state::slash:\r\n                    if (*it != '/') {\r\n                        throw std::domain_error(\"invalid comment syntax\");\r\n                    }\r\n                    size--;\r\n                    s = state::end;\r\n                    continue;\r\n                case state::end:\r\n                    break;\r\n                }\r\n                size++;\r\n            }\r\n            ss.write(line.data(), size);\r\n        }\r\n        return parse(ss, cb);\r\n    }\r\n\r\n    /*!\r\n    @copydoc parse_relaxed(std::istream&, parser_callback_t)\r\n    */\r\n    static basic_json parse_relaxed(const string_t& s, parser_callback_t cb = nullptr)\r\n    {\r\n        return parse_relaxed(std::istringstream(s), cb);\r\n    }\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/362", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/362/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/362/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/362/events", "html_url": "https://github.com/nlohmann/json/issues/362", "id": 190513330, "node_id": "MDU6SXNzdWUxOTA1MTMzMzA=", "number": 362, "title": "Append \".0\" to serialized floating_point values that are digits-only.", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/18", "html_url": "https://github.com/nlohmann/json/milestone/18", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/18/labels", "id": 2298442, "node_id": "MDk6TWlsZXN0b25lMjI5ODQ0Mg==", "number": 18, "title": "Release 2.1.1", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 19, "state": "closed", "created_at": "2017-02-03T17:22:21Z", "updated_at": "2017-02-25T16:10:15Z", "due_on": "2017-02-25T08:00:00Z", "closed_at": "2017-02-25T16:10:15Z"}, "comments": 2, "created_at": "2016-11-19T18:52:54Z", "updated_at": "2017-02-19T19:56:44Z", "closed_at": "2017-01-05T01:35:19Z", "author_association": "NONE", "body": "The code is already smart enough to parse \"123.0\" as floating-point type.\r\nThe problem is that this does not round-trip, as the value serializes as \"123\", so now it is indistinguishable from pure-integer, and the floating-point-ness information is lost.\r\n\r\nProposed implementation for serializing numeric values below.\r\n\r\n```c++\r\n    // Convert floating-point type to string in POSIX locale.\r\n    // If result is composed entirely of digits or minus-sign,\r\n    // append \".0\" to preserve the type information.\r\n    template<typename T>\r\n    static std::string as_str(const T x, /*is_integral=*/std::false_type)\r\n    {\r\n        static thread_local std::unique_ptr<std::stringstream> sstr;\r\n        // reusing sstr per-thread as construction of stringstream\r\n        // and ::imbue are both expensive.\r\n        if(!sstr) {\r\n            sstr.reset(new std::stringstream);\r\n            sstr->imbue(std::locale::classic());\r\n        }\r\n\r\n        sstr->precision(std::numeric_limits<T>::digits10);\r\n\r\n        *sstr << x;\r\n        std::string s = sstr->str();\r\n        sstr->str(std::string()); // clear the data\r\n\r\n        if(s.find_first_not_of(\"0123456789-\") == std::string::npos) {\r\n            s += \".0\";\r\n        }\r\n\r\n        return s;\r\n    };\r\n\r\n    // Convert any integral type to base-10 representation,\r\n    // using POSIX locale (no grouping characters are used).\r\n    //\r\n    // This is simple-enough so we can bypass using\r\n    // the posix-locale-imbued stream and do it \"manually\"\r\n    template<typename T>\r\n    static std::string as_str(T x, /*is_integral=*/std::true_type)\r\n    {\r\n        std::string s;\r\n        const bool is_neg = x < 0;\r\n\r\n        while(x) {\r\n            s.push_back('0' + abs(x % 10));\r\n            x /= 10;\r\n        }\r\n\r\n        if(s.empty()) {\r\n            s.push_back('0');\r\n        }\r\n\r\n        if(is_neg) {\r\n            s.push_back('-');\r\n        }\r\n\r\n        reverse(s.begin(), s.end());\r\n        return s;\r\n    }\r\n\r\n    // Dispatcher to as_str variants dealing with integral vs floating-point types\r\n    template<typename T, typename = typename std::enable_if<std::is_arithmetic<T>::value>::type >\r\n    static std::string as_str(const T x)\r\n    {\r\n        return as_str(x, std::is_integral<T>());\r\n    }\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/361", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/361/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/361/events", "html_url": "https://github.com/nlohmann/json/issues/361", "id": 190367380, "node_id": "MDU6SXNzdWUxOTAzNjczODA=", "number": 361, "title": "Check if library can be used with ETL", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-18T16:51:44Z", "updated_at": "2016-12-22T11:55:53Z", "closed_at": "2016-12-22T11:55:53Z", "author_association": "OWNER", "body": "The Embedded Template Library (http://www.etlcpp.com) seems to be a reasonable idea, and it would be nice to know to what extend the library can be used with the type provided by the ETL."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/360", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/360/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/360/events", "html_url": "https://github.com/nlohmann/json/issues/360", "id": 190084647, "node_id": "MDU6SXNzdWUxOTAwODQ2NDc=", "number": 360, "title": "Loss of precision when serializing <double>", "user": {"login": "matspetter", "id": 703136, "node_id": "MDQ6VXNlcjcwMzEzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/703136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matspetter", "html_url": "https://github.com/matspetter", "followers_url": "https://api.github.com/users/matspetter/followers", "following_url": "https://api.github.com/users/matspetter/following{/other_user}", "gists_url": "https://api.github.com/users/matspetter/gists{/gist_id}", "starred_url": "https://api.github.com/users/matspetter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matspetter/subscriptions", "organizations_url": "https://api.github.com/users/matspetter/orgs", "repos_url": "https://api.github.com/users/matspetter/repos", "events_url": "https://api.github.com/users/matspetter/events{/privacy}", "received_events_url": "https://api.github.com/users/matspetter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/20", "html_url": "https://github.com/nlohmann/json/milestone/20", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/20/labels", "id": 2984335, "node_id": "MDk6TWlsZXN0b25lMjk4NDMzNQ==", "number": 20, "title": "Release 3.1.0", "description": "The next release when backwards compatible features are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 30, "state": "closed", "created_at": "2017-12-17T10:12:33Z", "updated_at": "2018-02-01T23:09:13Z", "due_on": "2018-02-01T08:00:00Z", "closed_at": "2018-02-01T23:09:13Z"}, "comments": 35, "created_at": "2016-11-17T15:50:53Z", "updated_at": "2018-01-27T16:50:37Z", "closed_at": "2018-01-27T16:50:24Z", "author_association": "NONE", "body": "It seems that precision is lost when serializing a double. I cannot say why since\r\nstd::numeric_limits<double>::digits10 should provide enough digits !?\r\nbut if I change that to:\r\nstd::numeric_limits<long double>::digits10 then I'm not loosing anything.\r\nI'm NOT using and \"long double\" types. Only \"double\"."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/359", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/359/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/359/events", "html_url": "https://github.com/nlohmann/json/issues/359", "id": 189706553, "node_id": "MDU6SXNzdWUxODk3MDY1NTM=", "number": 359, "title": "Crash in dump() from a static object", "user": {"login": "palacaze", "id": 1309100, "node_id": "MDQ6VXNlcjEzMDkxMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1309100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palacaze", "html_url": "https://github.com/palacaze", "followers_url": "https://api.github.com/users/palacaze/followers", "following_url": "https://api.github.com/users/palacaze/following{/other_user}", "gists_url": "https://api.github.com/users/palacaze/gists{/gist_id}", "starred_url": "https://api.github.com/users/palacaze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palacaze/subscriptions", "organizations_url": "https://api.github.com/users/palacaze/orgs", "repos_url": "https://api.github.com/users/palacaze/repos", "events_url": "https://api.github.com/users/palacaze/events{/privacy}", "received_events_url": "https://api.github.com/users/palacaze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/13", "html_url": "https://github.com/nlohmann/json/milestone/13", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/13/labels", "id": 2110088, "node_id": "MDk6TWlsZXN0b25lMjExMDA4OA==", "number": 13, "title": "Release 2.0.8", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2016-11-02T16:36:13Z", "updated_at": "2016-12-02T19:10:24Z", "due_on": "2016-12-02T08:00:00Z", "closed_at": "2016-12-02T19:10:24Z"}, "comments": 19, "created_at": "2016-11-16T13:39:52Z", "updated_at": "2016-11-22T06:01:23Z", "closed_at": "2016-11-22T06:01:23Z", "author_association": "NONE", "body": "Change 29c5f32d4287a49f59fcd65b7ffacd7f154b03aa from the performance regression bug #272 introduces a potential crash in dump(). This has to do with deinitialization order of static objects.\r\n\r\nThe following code (not json specific) reproduces the problem (tested on GNU/Linux 64 bits with GCC 5.4):\r\n\r\n```cpp\r\n#include <locale>\r\n#include <sstream>\r\n#include <iostream>\r\n\r\nnamespace {\r\nstruct DecimalSeparator : std::numpunct<char> {\r\n    char do_decimal_point() const { return '.'; }\r\n};\r\n}\r\n\r\nstruct test {\r\n    void dump() {\r\n        std::stringstream ss;\r\n        const static std::locale loc(std::locale(), new DecimalSeparator);\r\n        ss.imbue(loc);\r\n        ss << \"test \" << 1.0;\r\n        std::cout << ss.str() << std::endl;\r\n    }\r\n    ~test() {\r\n        dump();\r\n    }\r\n};\r\n\r\nstatic test t;\r\n\r\nint main() {\r\n    t.dump();\r\n    return 0;\r\n}\r\n```\r\n\r\nWhat happens here it that the static test is initialized first, then the first call to dump() creates the static locale object. When we leave main(), the static locale gets destroyed first (reversed initialization order), then the static test object is destructed, thus calling the destructor, which so happens to call dump() whose static object is no longer valid.\r\n\r\nRemoving the static keyword introduced in commit 29c5f32d4287a49f59fcd65b7ffacd7f154b03aa fixes the crash."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/358", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/358/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/358/events", "html_url": "https://github.com/nlohmann/json/issues/358", "id": 188291472, "node_id": "MDU6SXNzdWUxODgyOTE0NzI=", "number": 358, "title": "Request: binary serialization/deserialization", "user": {"login": "CyberBrainX", "id": 23361938, "node_id": "MDQ6VXNlcjIzMzYxOTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/23361938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CyberBrainX", "html_url": "https://github.com/CyberBrainX", "followers_url": "https://api.github.com/users/CyberBrainX/followers", "following_url": "https://api.github.com/users/CyberBrainX/following{/other_user}", "gists_url": "https://api.github.com/users/CyberBrainX/gists{/gist_id}", "starred_url": "https://api.github.com/users/CyberBrainX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CyberBrainX/subscriptions", "organizations_url": "https://api.github.com/users/CyberBrainX/orgs", "repos_url": "https://api.github.com/users/CyberBrainX/repos", "events_url": "https://api.github.com/users/CyberBrainX/events{/privacy}", "received_events_url": "https://api.github.com/users/CyberBrainX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 344572510, "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed", "name": "state: help needed", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/14", "html_url": "https://github.com/nlohmann/json/milestone/14", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/14/labels", "id": 2171959, "node_id": "MDk6TWlsZXN0b25lMjE3MTk1OQ==", "number": 14, "title": "Release 2.0.9", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 11, "state": "closed", "created_at": "2016-12-02T19:10:33Z", "updated_at": "2016-12-16T20:36:42Z", "due_on": "2016-12-16T08:00:00Z", "closed_at": "2016-12-16T20:36:42Z"}, "comments": 35, "created_at": "2016-11-09T16:32:17Z", "updated_at": "2017-03-28T21:59:47Z", "closed_at": "2016-12-11T15:14:06Z", "author_association": "NONE", "body": "Wouldn\u2019t it be useful to have the possibility to serialize the json object to a more compact form? \r\nThis would make sense for storing the container or sending it over an internet connection.\r\n\r\nThe  MessagePack (http://msgpack.org/) format or some proprietary format directly derived from your internal representation would be fine. \r\nOr could you probably just provide some generic interface for the binary serialization/deserialization?\r\n\r\nI think this approach could be more useable than just gzipping the whole JSON data.\r\n\r\nAs an example this library did implement some alternative representations of a json container: http://greatpanic.com/progdocs/UniversalContainer.html\r\n(But this library doesn\u2019t work properly and doesn\u2019t use C++ 11)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/357", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/357/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/357/events", "html_url": "https://github.com/nlohmann/json/issues/357", "id": 188249741, "node_id": "MDU6SXNzdWUxODgyNDk3NDE=", "number": 357, "title": "json::parse(...) vs json j; j.parse(...)", "user": {"login": "oneill1979", "id": 4069961, "node_id": "MDQ6VXNlcjQwNjk5NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4069961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oneill1979", "html_url": "https://github.com/oneill1979", "followers_url": "https://api.github.com/users/oneill1979/followers", "following_url": "https://api.github.com/users/oneill1979/following{/other_user}", "gists_url": "https://api.github.com/users/oneill1979/gists{/gist_id}", "starred_url": "https://api.github.com/users/oneill1979/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oneill1979/subscriptions", "organizations_url": "https://api.github.com/users/oneill1979/orgs", "repos_url": "https://api.github.com/users/oneill1979/repos", "events_url": "https://api.github.com/users/oneill1979/events{/privacy}", "received_events_url": "https://api.github.com/users/oneill1979/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-09T13:39:50Z", "updated_at": "2016-11-09T13:49:09Z", "closed_at": "2016-11-09T13:49:09Z", "author_association": "NONE", "body": "I was wondering if there is a reason that a call to parse on a json object just returns a null json object? The same input seems to parse without issue using the jason::parse call.\r\n\r\nFor example the following program:\r\n```cpp\r\n{\r\n    std::string input(\"{\\\"happy\\\":true,\\\"pi\\\":3.141}\");\r\n    json j;\r\n    j.parse(input);\r\n    std::cout << j.dump() << std::endl;\r\n    j=json::parse(input);\r\n    std::cout << j.dump() << std::endl;\r\n}\r\n```\r\nResults in (osx):\r\n```js\r\nnull\r\n{\"happy\":true,\"pi\":3.141}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/356", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/356/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/356/events", "html_url": "https://github.com/nlohmann/json/issues/356", "id": 187895119, "node_id": "MDU6SXNzdWUxODc4OTUxMTk=", "number": 356, "title": "Hi, is there any method to dump  json to string with the insert order rather than alphabets", "user": {"login": "ostack", "id": 16473628, "node_id": "MDQ6VXNlcjE2NDczNjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/16473628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ostack", "html_url": "https://github.com/ostack", "followers_url": "https://api.github.com/users/ostack/followers", "following_url": "https://api.github.com/users/ostack/following{/other_user}", "gists_url": "https://api.github.com/users/ostack/gists{/gist_id}", "starred_url": "https://api.github.com/users/ostack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ostack/subscriptions", "organizations_url": "https://api.github.com/users/ostack/orgs", "repos_url": "https://api.github.com/users/ostack/repos", "events_url": "https://api.github.com/users/ostack/events{/privacy}", "received_events_url": "https://api.github.com/users/ostack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-08T03:48:17Z", "updated_at": "2016-11-11T16:26:53Z", "closed_at": "2016-11-11T16:26:53Z", "author_association": "NONE", "body": "Hi, is there any method to dump  json to string with the insert order rather than alphabets"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/355", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/355/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/355/events", "html_url": "https://github.com/nlohmann/json/pull/355", "id": 187847690, "node_id": "MDExOlB1bGxSZXF1ZXN0OTI2Nzc2MjU=", "number": 355, "title": "Feature/user defined types bis", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 85, "created_at": "2016-11-07T22:27:05Z", "updated_at": "2017-01-23T09:41:06Z", "closed_at": "2017-01-23T09:41:06Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/355", "html_url": "https://github.com/nlohmann/json/pull/355", "diff_url": "https://github.com/nlohmann/json/pull/355.diff", "patch_url": "https://github.com/nlohmann/json/pull/355.patch"}, "body": "WIP: This PR is *NOT* ready to be merged, its purpose is to facilitate review and discussion."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/354", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/354/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/354/events", "html_url": "https://github.com/nlohmann/json/issues/354", "id": 187477063, "node_id": "MDU6SXNzdWUxODc0NzcwNjM=", "number": 354, "title": "Provide an example of reading from an json with only a key that has an array of strings.", "user": {"login": "AraHaan", "id": 15173749, "node_id": "MDQ6VXNlcjE1MTczNzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/15173749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AraHaan", "html_url": "https://github.com/AraHaan", "followers_url": "https://api.github.com/users/AraHaan/followers", "following_url": "https://api.github.com/users/AraHaan/following{/other_user}", "gists_url": "https://api.github.com/users/AraHaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/AraHaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AraHaan/subscriptions", "organizations_url": "https://api.github.com/users/AraHaan/orgs", "repos_url": "https://api.github.com/users/AraHaan/repos", "events_url": "https://api.github.com/users/AraHaan/events{/privacy}", "received_events_url": "https://api.github.com/users/AraHaan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-05T04:58:29Z", "updated_at": "2016-11-08T08:47:31Z", "closed_at": "2016-11-08T08:47:31Z", "author_association": "NONE", "body": "So, I have a json that is somewhat like this:\r\n\r\n```json\r\n{\r\n\t\"detectlist\": [\r\n\t\t\"Cheat Engine 0.1\",\r\n\t\t\"Cheat Engine 0.2\",\r\n\t\t\"Cheat Engine 0.3\",\r\n\t\t\"Cheat Engine 0.4\",\r\n\t\t\"Cheat Engine 0.5\",\r\n\t\t\"Cheat Engine 0.6\",\r\n\t\t\"Cheat Engine 0.7\",\r\n\t\t\"Cheat Engine 0.8\",\r\n\t\t\"Cheat Engine 0.9\",\r\n\t\t\"Cheat Engine 1.0\",\r\n\t\t\"Cheat Engine 1.1\",\r\n\t\t\"Cheat Engine 1.2\",\r\n\t\t\"Cheat Engine 1.3\",\r\n\t\t\"Cheat Engine 1.4\",\r\n\t\t\"Cheat Engine 1.5\",\r\n\t\t\"Cheat Engine 1.6\",\r\n\t\t\"Cheat Engine 1.7\",\r\n\t\t\"Cheat Engine 1.8\",\r\n\t\t\"Cheat Engine 1.9\",\r\n\t\t\"Cheat Engine 2.0\",\r\n\t\t\"Cheat Engine 2.1\",\r\n\t\t\"Cheat Engine 2.2\",\r\n\t\t\"Cheat Engine 2.3\",\r\n\t\t\"Cheat Engine 2.4\",\r\n\t\t\"Cheat Engine 2.5\",\r\n\t\t\"Cheat Engine 2.6\",\r\n\t\t\"Cheat Engine 2.7\",\r\n\t\t\"Cheat Engine 2.8\",\r\n\t\t\"Cheat Engine 2.9\",\r\n\t\t\"Cheat Engine 3.0\",\r\n\t\t\"Cheat Engine 3.1\",\r\n\t\t\"Cheat Engine 3.2\",\r\n\t\t\"Cheat Engine 3.3\",\r\n\t\t\"Cheat Engine 3.4\",\r\n\t\t\"Cheat Engine 3.5\",\r\n\t\t\"Cheat Engine 3.6\",\r\n\t\t\"Cheat Engine 3.7\",\r\n\t\t\"Cheat Engine 3.8\",\r\n\t\t\"Cheat Engine 3.9\",\r\n\t\t\"Cheat Engine 4.0\",\r\n\t\t\"Cheat Engine 4.1\",\r\n\t\t\"Cheat Engine 4.2\",\r\n\t\t\"Cheat Engine 4.3\",\r\n\t\t\"Cheat Engine 4.4\",\r\n\t\t\"Cheat Engine 4.5\",\r\n\t\t\"Cheat Engine 4.6\",\r\n\t\t\"Cheat Engine 4.7\",\r\n\t\t\"Cheat Engine 4.8\",\r\n\t\t\"Cheat Engine 4.9\",\r\n\t\t\"Cheat Engine 5.0\",\r\n\t\t\"Cheat Engine 5.1\",\r\n\t\t\"Cheat Engine 5.2\",\r\n\t\t\"Cheat Engine 5.3\",\r\n\t\t\"Cheat Engine 5.4\",\r\n\t\t\"Cheat Engine 5.5\",\r\n\t\t\"Cheat Engine 5.6\",\r\n\t\t\"Cheat Engine 5.7\",\r\n\t\t\"Cheat Engine 5.8\",\r\n\t\t\"Cheat Engine 5.9\",\r\n\t\t\"Cheat Engine 6.0\",\r\n\t\t\"Cheat Engine 6.1\",\r\n\t\t\"Cheat Engine 6.2\",\r\n\t\t\"Cheat Engine 6.3\",\r\n\t\t\"Cheat Engine 6.4\",\r\n\t\t\"Cheat Engine 6.5\",\r\n\t\t\"Cheat Engine 6.6\",\r\n\t\t\"Cheat Engine 6.7\",\r\n\t\t\"Cheat Engine 6.8\",\r\n\t\t\"Cheat Engine 6.9\",\r\n\t\t\"Cheat Engine 7.0\",\r\n\t\t\"OllyDBG\",\r\n\t\t\"PEiD v0.95\"\r\n\t]\r\n}\r\n```\r\n\r\nWhat I want to do is iterate through that list and with each string in it I want to use the ``FindWindow`` function from ``kernel32.dll`` to check if a window with a string in the list is open or not.\r\n\r\nHere is how I would like the strings to look like if output to a console (with new lines after each one):\r\n\r\n\tCheat Engine 0.1\r\n\tCheat Engine 0.2\r\n\tCheat Engine 0.3\r\n\tCheat Engine 0.4\r\n\tCheat Engine 0.5\r\n\tCheat Engine 0.6\r\n\tCheat Engine 0.7\r\n\tCheat Engine 0.8\r\n\tCheat Engine 0.9\r\n\tCheat Engine 1.0\r\n\tCheat Engine 1.1\r\n\tCheat Engine 1.2\r\n\tCheat Engine 1.3\r\n\tCheat Engine 1.4\r\n\tCheat Engine 1.5\r\n\tCheat Engine 1.6\r\n\tCheat Engine 1.7\r\n\tCheat Engine 1.8\r\n\tCheat Engine 1.9\r\n\tCheat Engine 2.0\r\n\tCheat Engine 2.1\r\n\tCheat Engine 2.2\r\n\tCheat Engine 2.3\r\n\tCheat Engine 2.4\r\n\tCheat Engine 2.5\r\n\tCheat Engine 2.6\r\n\tCheat Engine 2.7\r\n\tCheat Engine 2.8\r\n\tCheat Engine 2.9\r\n\tCheat Engine 3.0\r\n\tCheat Engine 3.1\r\n\tCheat Engine 3.2\r\n\tCheat Engine 3.3\r\n\tCheat Engine 3.4\r\n\tCheat Engine 3.5\r\n\tCheat Engine 3.6\r\n\tCheat Engine 3.7\r\n\tCheat Engine 3.8\r\n\tCheat Engine 3.9\r\n\tCheat Engine 4.0\r\n\tCheat Engine 4.1\r\n\tCheat Engine 4.2\r\n\tCheat Engine 4.3\r\n\tCheat Engine 4.4\r\n\tCheat Engine 4.5\r\n\tCheat Engine 4.6\r\n\tCheat Engine 4.7\r\n\tCheat Engine 4.8\r\n\tCheat Engine 4.9\r\n\tCheat Engine 5.0\r\n\tCheat Engine 5.1\r\n\tCheat Engine 5.2\r\n\tCheat Engine 5.3\r\n\tCheat Engine 5.4\r\n\tCheat Engine 5.5\r\n\tCheat Engine 5.6\r\n\tCheat Engine 5.7\r\n\tCheat Engine 5.8\r\n\tCheat Engine 5.9\r\n\tCheat Engine 6.0\r\n\tCheat Engine 6.1\r\n\tCheat Engine 6.2\r\n\tCheat Engine 6.3\r\n\tCheat Engine 6.4\r\n\tCheat Engine 6.5\r\n\tCheat Engine 6.6\r\n\tCheat Engine 6.7\r\n\tCheat Engine 6.8\r\n\tCheat Engine 6.9\r\n\tCheat Engine 7.0\r\n\tOllyDBG\r\n\tPEiD v0.95\r\n\r\nAny idea what I can do to anchieve this? I have the following code so far:\r\n\r\n```cpp\r\nnlohmann::json GetJsonData()\r\n{\r\n\tstd::ifstream in(\"VB-Trap\\\\checkwindow.json\");\r\n\t//error when loading Window data.\r\n\tif(!in.is_open())\r\n\t{\r\n\t\treturn nullptr;\r\n\t}\r\n\tnlohmann::json file;\r\n\tfile << in;\r\n\tin.close();\r\n\treturn file;\r\n}\r\n\r\nVBTREXTERN int __cdecl DetectWithJSONDB()\r\n{\r\n\tnlohmann::json jsondb = GetJsonData();\r\n\tif (jsondb != nullptr)\r\n\t{\r\n\t\t//TODO: Iterate through this data somehow.\r\n\t\t//TODO: Within the iteration for each string in the Array invoke the ``Window_Scan`` function to check for if the Window(s) are open.\r\n\t\t/*\r\n\t\t\tNote: If NULL is returned from the iterator list then the function will return NULL.\r\n\t\t\tOtherwise the function Will return -1 when any of the Windows in the list are open.\r\n\t\t\t\r\n\t\t\tIf The File cannot be opened then -3 is returned.\r\n\t\t*/\r\n\t\treturn NULL;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn -3;\r\n\t}\r\n\treturn NULL;\r\n}\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/353", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/353/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/353/events", "html_url": "https://github.com/nlohmann/json/issues/353", "id": 187468212, "node_id": "MDU6SXNzdWUxODc0NjgyMTI=", "number": 353, "title": "Request: access with default value.", "user": {"login": "SmoofBullet", "id": 8692359, "node_id": "MDQ6VXNlcjg2OTIzNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8692359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SmoofBullet", "html_url": "https://github.com/SmoofBullet", "followers_url": "https://api.github.com/users/SmoofBullet/followers", "following_url": "https://api.github.com/users/SmoofBullet/following{/other_user}", "gists_url": "https://api.github.com/users/SmoofBullet/gists{/gist_id}", "starred_url": "https://api.github.com/users/SmoofBullet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SmoofBullet/subscriptions", "organizations_url": "https://api.github.com/users/SmoofBullet/orgs", "repos_url": "https://api.github.com/users/SmoofBullet/repos", "events_url": "https://api.github.com/users/SmoofBullet/events{/privacy}", "received_events_url": "https://api.github.com/users/SmoofBullet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-11-05T01:20:45Z", "updated_at": "2016-11-15T22:38:33Z", "closed_at": "2016-11-15T22:38:33Z", "author_association": "NONE", "body": "Hi everyone!\r\n\r\nI would suggest to provide new member functions\r\n\r\n        template <typename T>\r\n        T operator ()(const typename object_t::key_type& key, const T &fallback) const\r\n        {\r\n            const auto it = find(key);\r\n            if (it == end() || it.value().is_null())\r\n            {\r\n                return fallback;\r\n            }\r\n            else\r\n            {\r\n                return at(key);\r\n            }\r\n        }\r\n\r\n        string_t operator ()(const typename object_t::key_type& key, const string_t &fallback) const \r\n        {\r\n            return operator()<string_t>(key, fallback);\r\n        }\r\n\r\n        template <typename T>\r\n        T operator ()(const typename object_t::key_type& key, const T &fallback)\r\n        {\r\n            const auto it = find(key);\r\n            if (it == end() || it.value().is_null())\r\n            {\r\n                return (*this)[key] = fallback;\r\n            }\r\n            else\r\n            {\r\n                return (*this)[key];\r\n            }\r\n        }\r\n\r\n        string_t operator ()(const typename object_t::key_type& key, const string_t &fallback)\r\n        {\r\n            return operator()<string_t>(key, fallback);\r\n        }\r\n\r\nI use those for convenient accesses to numbers, strings, vectors and maps in a json object with default values.\r\n\r\nFurther, i use\r\n\r\n        reference operator()(const typename object_t::key_type& key)\r\n        {\r\n            return (*this)[key];\r\n        }\r\n\r\n        value_type operator()(const typename object_t::key_type& key) const\r\n        {\r\n            if (find(key) == end())\r\n            {\r\n                return value_type();\r\n            }\r\n            else\r\n            {\r\n                return (*this)[key];\r\n            }\r\n        }\r\n\r\nfor more consistent code look when using the functions above.\r\n\r\nWhat do you think?\r\n\r\nGreetings"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/352", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/352/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/352/events", "html_url": "https://github.com/nlohmann/json/issues/352", "id": 187467209, "node_id": "MDU6SXNzdWUxODc0NjcyMDk=", "number": 352, "title": "{} and [] causes parser error.", "user": {"login": "SmoofBullet", "id": 8692359, "node_id": "MDQ6VXNlcjg2OTIzNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8692359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SmoofBullet", "html_url": "https://github.com/SmoofBullet", "followers_url": "https://api.github.com/users/SmoofBullet/followers", "following_url": "https://api.github.com/users/SmoofBullet/following{/other_user}", "gists_url": "https://api.github.com/users/SmoofBullet/gists{/gist_id}", "starred_url": "https://api.github.com/users/SmoofBullet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SmoofBullet/subscriptions", "organizations_url": "https://api.github.com/users/SmoofBullet/orgs", "repos_url": "https://api.github.com/users/SmoofBullet/repos", "events_url": "https://api.github.com/users/SmoofBullet/events{/privacy}", "received_events_url": "https://api.github.com/users/SmoofBullet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-05T01:03:32Z", "updated_at": "2016-11-14T15:09:00Z", "closed_at": "2016-11-14T15:09:00Z", "author_association": "NONE", "body": "Hey there!\r\n\r\n{} and [] should be a valid empty JSON object/array. Instead, it creates - parse error - unexpected end of input.\r\n\r\nExample:\r\n\r\nnlohmann::json j;\r\n\r\nstd::stringstream ss(\"{}\");\r\n\r\nss >> j;\r\n\r\nGreetings"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/351", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/351/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/351/events", "html_url": "https://github.com/nlohmann/json/issues/351", "id": 186926848, "node_id": "MDU6SXNzdWUxODY5MjY4NDg=", "number": 351, "title": "Reading a JSON file into a JSON object", "user": {"login": "AbdallaGomaa7", "id": 18082173, "node_id": "MDQ6VXNlcjE4MDgyMTcz", "avatar_url": "https://avatars3.githubusercontent.com/u/18082173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdallaGomaa7", "html_url": "https://github.com/AbdallaGomaa7", "followers_url": "https://api.github.com/users/AbdallaGomaa7/followers", "following_url": "https://api.github.com/users/AbdallaGomaa7/following{/other_user}", "gists_url": "https://api.github.com/users/AbdallaGomaa7/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdallaGomaa7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdallaGomaa7/subscriptions", "organizations_url": "https://api.github.com/users/AbdallaGomaa7/orgs", "repos_url": "https://api.github.com/users/AbdallaGomaa7/repos", "events_url": "https://api.github.com/users/AbdallaGomaa7/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdallaGomaa7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-02T21:36:29Z", "updated_at": "2016-11-08T16:10:08Z", "closed_at": "2016-11-08T16:10:08Z", "author_association": "NONE", "body": "Hey, I am trying to read a json file into a json object, what is the best way to do this? "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/350", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/350/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/350/events", "html_url": "https://github.com/nlohmann/json/issues/350", "id": 186924570, "node_id": "MDU6SXNzdWUxODY5MjQ1NzA=", "number": 350, "title": "Request: range-based-for over a json-object to expose .first/.second", "user": {"login": "jaredgrubb", "id": 1256381, "node_id": "MDQ6VXNlcjEyNTYzODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1256381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaredgrubb", "html_url": "https://github.com/jaredgrubb", "followers_url": "https://api.github.com/users/jaredgrubb/followers", "following_url": "https://api.github.com/users/jaredgrubb/following{/other_user}", "gists_url": "https://api.github.com/users/jaredgrubb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaredgrubb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaredgrubb/subscriptions", "organizations_url": "https://api.github.com/users/jaredgrubb/orgs", "repos_url": "https://api.github.com/users/jaredgrubb/repos", "events_url": "https://api.github.com/users/jaredgrubb/events{/privacy}", "received_events_url": "https://api.github.com/users/jaredgrubb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/5", "html_url": "https://github.com/nlohmann/json/milestone/5", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/5/labels", "id": 1836708, "node_id": "MDk6TWlsZXN0b25lMTgzNjcwOA==", "number": 5, "title": "Release 3.0.0", "description": "The next release when backwards incompatible changes are introduced to the public API", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 131, "state": "closed", "created_at": "2016-06-19T16:09:34Z", "updated_at": "2017-12-17T10:11:43Z", "due_on": "2017-12-17T08:00:00Z", "closed_at": "2017-12-17T10:11:43Z"}, "comments": 21, "created_at": "2016-11-02T21:25:51Z", "updated_at": "2017-06-16T17:36:36Z", "closed_at": "2017-06-16T17:36:36Z", "author_association": "CONTRIBUTOR", "body": "I would love to have the ability to iterate over a JSON object type in exactly the same way I would iterate over a std::map:\r\n\r\n`for(auto& i : map) {\r\n    i.first; \r\n    i.second;\r\n}`\r\n\r\nWould it be possible to have a free function (or member) that would allow me to do something like:\r\n`for(auto& i : as_map(jsonObj)) {...}`\r\nsuch that the iterator exposed here works more like map::iterator (.first,.second) than the current iterator type (.key,.value)."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/349", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/349/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/349/events", "html_url": "https://github.com/nlohmann/json/issues/349", "id": 186923444, "node_id": "MDU6SXNzdWUxODY5MjM0NDQ=", "number": 349, "title": "Request: 'emplace_back'", "user": {"login": "jaredgrubb", "id": 1256381, "node_id": "MDQ6VXNlcjEyNTYzODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1256381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaredgrubb", "html_url": "https://github.com/jaredgrubb", "followers_url": "https://api.github.com/users/jaredgrubb/followers", "following_url": "https://api.github.com/users/jaredgrubb/following{/other_user}", "gists_url": "https://api.github.com/users/jaredgrubb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaredgrubb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaredgrubb/subscriptions", "organizations_url": "https://api.github.com/users/jaredgrubb/orgs", "repos_url": "https://api.github.com/users/jaredgrubb/repos", "events_url": "https://api.github.com/users/jaredgrubb/events{/privacy}", "received_events_url": "https://api.github.com/users/jaredgrubb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/13", "html_url": "https://github.com/nlohmann/json/milestone/13", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/13/labels", "id": 2110088, "node_id": "MDk6TWlsZXN0b25lMjExMDA4OA==", "number": 13, "title": "Release 2.0.8", "description": "The next release if backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2016-11-02T16:36:13Z", "updated_at": "2016-12-02T19:10:24Z", "due_on": "2016-12-02T08:00:00Z", "closed_at": "2016-12-02T19:10:24Z"}, "comments": 10, "created_at": "2016-11-02T21:20:54Z", "updated_at": "2016-12-01T20:24:09Z", "closed_at": "2016-12-01T20:24:06Z", "author_association": "CONTRIBUTOR", "body": "Out of habit, I tend to use 'emplace_back' instead of 'push_back' and I was surprised basic_json didn't support this. Can we add it?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/348", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/348/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/348/events", "html_url": "https://github.com/nlohmann/json/issues/348", "id": 186465887, "node_id": "MDU6SXNzdWUxODY0NjU4ODc=", "number": 348, "title": "JSON5", "user": {"login": "zumm", "id": 10081538, "node_id": "MDQ6VXNlcjEwMDgxNTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/10081538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zumm", "html_url": "https://github.com/zumm", "followers_url": "https://api.github.com/users/zumm/followers", "following_url": "https://api.github.com/users/zumm/following{/other_user}", "gists_url": "https://api.github.com/users/zumm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zumm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zumm/subscriptions", "organizations_url": "https://api.github.com/users/zumm/orgs", "repos_url": "https://api.github.com/users/zumm/repos", "events_url": "https://api.github.com/users/zumm/events{/privacy}", "received_events_url": "https://api.github.com/users/zumm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-01T06:07:03Z", "updated_at": "2016-11-13T22:37:59Z", "closed_at": "2016-11-01T06:34:50Z", "author_association": "NONE", "body": "What about support of JSON5? I mean comments, single-quoted objects, trailing commas and other wonderful things."}]