[{"url": "https://api.github.com/repos/nlohmann/json/issues/1129", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1129/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1129/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1129/events", "html_url": "https://github.com/nlohmann/json/issues/1129", "id": 331686657, "node_id": "MDU6SXNzdWUzMzE2ODY2NTc=", "number": 1129, "title": "CBOR byte string support", "user": {"login": "Lusitanian", "id": 1907815, "node_id": "MDQ6VXNlcjE5MDc4MTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1907815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lusitanian", "html_url": "https://github.com/Lusitanian", "followers_url": "https://api.github.com/users/Lusitanian/followers", "following_url": "https://api.github.com/users/Lusitanian/following{/other_user}", "gists_url": "https://api.github.com/users/Lusitanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lusitanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lusitanian/subscriptions", "organizations_url": "https://api.github.com/users/Lusitanian/orgs", "repos_url": "https://api.github.com/users/Lusitanian/repos", "events_url": "https://api.github.com/users/Lusitanian/events{/privacy}", "received_events_url": "https://api.github.com/users/Lusitanian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 571470316, "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=", "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats", "name": "aspect: binary formats", "color": "5319e7", "default": false}, {"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-06-12T17:41:14Z", "updated_at": "2018-08-04T09:13:53Z", "closed_at": null, "author_association": "NONE", "body": "Currently, the CBOR feature of the library only supports writing strings out as UTF-8 and doesn't support byte arrays as described in the CBOR standard. I'd like to implement COSE on top of this library, but in order to do that, byte string support is needed.\r\n\r\nI'm happy to submit a pull request for this, but I wanted to check in advance if this is something you'd be open to"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1128", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1128/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1128/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1128/events", "html_url": "https://github.com/nlohmann/json/pull/1128", "id": 331645803, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk0MzI1Mjgy", "number": 1128, "title": "Add support for workarounds for non-compliant C++11 compilers", "user": {"login": "TedLyngmo", "id": 2361158, "node_id": "MDQ6VXNlcjIzNjExNTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2361158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TedLyngmo", "html_url": "https://github.com/TedLyngmo", "followers_url": "https://api.github.com/users/TedLyngmo/followers", "following_url": "https://api.github.com/users/TedLyngmo/following{/other_user}", "gists_url": "https://api.github.com/users/TedLyngmo/gists{/gist_id}", "starred_url": "https://api.github.com/users/TedLyngmo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TedLyngmo/subscriptions", "organizations_url": "https://api.github.com/users/TedLyngmo/orgs", "repos_url": "https://api.github.com/users/TedLyngmo/repos", "events_url": "https://api.github.com/users/TedLyngmo/events{/privacy}", "received_events_url": "https://api.github.com/users/TedLyngmo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2018-06-12T15:43:06Z", "updated_at": "2018-06-26T20:59:01Z", "closed_at": "2018-06-26T14:39:07Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1128", "html_url": "https://github.com/nlohmann/json/pull/1128", "diff_url": "https://github.com/nlohmann/json/pull/1128.diff", "patch_url": "https://github.com/nlohmann/json/pull/1128.patch"}, "body": "Include example for Borland C++ Builder (RAD Studio)'s clang (3.3.1) based compiler (bcc32c).\r\n\r\nI know this goes against the Contribution Guidelines and I will keep my fork rebased separately if this is unacceptable. I would nevertheless like your input please.\r\n\r\nWhat I've done is to add a macro (_NLOHMANN_JSON_SKIP_COMPILER_CHECK_) to be able override the compiler check and one macro (_NLOHMANN_JSON_FIX_CONSTEXPR_FOR_CHAR_TRAITS_EOF_) to let a porter define a constexpr instead of using std::char_traits<char>::eof(). I couldn't find a way to override the built in definition unfortunately. If you know of a way that this could be done, I'd be glad to use that way instead.\r\n\r\nThe file \"include/nlohmann/detail/workarounds/borland.hpp\" will not be included in the amalgamated json.hpp - so any user will have to manually include it before json.hpp. I'll happily remove this file if the other changes would be acceptable."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1127", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1127/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1127/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1127/events", "html_url": "https://github.com/nlohmann/json/issues/1127", "id": 331348694, "node_id": "MDU6SXNzdWUzMzEzNDg2OTQ=", "number": 1127, "title": "Add a way to get a key reference from the iterator", "user": {"login": "GTValentine", "id": 11280818, "node_id": "MDQ6VXNlcjExMjgwODE4", "avatar_url": "https://avatars1.githubusercontent.com/u/11280818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GTValentine", "html_url": "https://github.com/GTValentine", "followers_url": "https://api.github.com/users/GTValentine/followers", "following_url": "https://api.github.com/users/GTValentine/following{/other_user}", "gists_url": "https://api.github.com/users/GTValentine/gists{/gist_id}", "starred_url": "https://api.github.com/users/GTValentine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GTValentine/subscriptions", "organizations_url": "https://api.github.com/users/GTValentine/orgs", "repos_url": "https://api.github.com/users/GTValentine/repos", "events_url": "https://api.github.com/users/GTValentine/events{/privacy}", "received_events_url": "https://api.github.com/users/GTValentine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-11T21:01:05Z", "updated_at": "2018-06-11T21:18:43Z", "closed_at": "2018-06-11T21:18:43Z", "author_association": "NONE", "body": "I may be missing something but I think when I am iterating over all keys in an object I have no way to access they key without actually copying them:\r\n\r\n```cpp\r\nbool foo(const std::string&)\r\n{\r\n...\r\n}\r\n\r\njson j = {...};\r\nfor (auto it = j.begin(); it != j.end(); ++it)\r\n{\r\n\t//it.key() copies the entire std::string\r\n\tif(foo(it.key()))\r\n\t{\r\n\t\tbar(it.value());\r\n\t}\r\n}\r\n```\r\n\r\nIf my keys are large strings, I'd like to avoid copying them for perf reasons. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1126", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1126/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1126/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1126/events", "html_url": "https://github.com/nlohmann/json/pull/1126", "id": 331287584, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk0MDU1NzMy", "number": 1126, "title": "test (non)equality for alt_string implementation", "user": {"login": "agrianius", "id": 37244280, "node_id": "MDQ6VXNlcjM3MjQ0Mjgw", "avatar_url": "https://avatars0.githubusercontent.com/u/37244280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agrianius", "html_url": "https://github.com/agrianius", "followers_url": "https://api.github.com/users/agrianius/followers", "following_url": "https://api.github.com/users/agrianius/following{/other_user}", "gists_url": "https://api.github.com/users/agrianius/gists{/gist_id}", "starred_url": "https://api.github.com/users/agrianius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agrianius/subscriptions", "organizations_url": "https://api.github.com/users/agrianius/orgs", "repos_url": "https://api.github.com/users/agrianius/repos", "events_url": "https://api.github.com/users/agrianius/events{/privacy}", "received_events_url": "https://api.github.com/users/agrianius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-11T17:52:03Z", "updated_at": "2018-06-13T16:53:05Z", "closed_at": "2018-06-13T16:41:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1126", "html_url": "https://github.com/nlohmann/json/pull/1126", "diff_url": "https://github.com/nlohmann/json/pull/1126.diff", "patch_url": "https://github.com/nlohmann/json/pull/1126.patch"}, "body": "Add a bit more tests for alt_string implementation"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1125", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1125/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1125/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1125/events", "html_url": "https://github.com/nlohmann/json/pull/1125", "id": 331254846, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk0MDMxMzk4", "number": 1125, "title": " test (non)equality for alt_string implementation ", "user": {"login": "agrianius", "id": 37244280, "node_id": "MDQ6VXNlcjM3MjQ0Mjgw", "avatar_url": "https://avatars0.githubusercontent.com/u/37244280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agrianius", "html_url": "https://github.com/agrianius", "followers_url": "https://api.github.com/users/agrianius/followers", "following_url": "https://api.github.com/users/agrianius/following{/other_user}", "gists_url": "https://api.github.com/users/agrianius/gists{/gist_id}", "starred_url": "https://api.github.com/users/agrianius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agrianius/subscriptions", "organizations_url": "https://api.github.com/users/agrianius/orgs", "repos_url": "https://api.github.com/users/agrianius/repos", "events_url": "https://api.github.com/users/agrianius/events{/privacy}", "received_events_url": "https://api.github.com/users/agrianius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-11T16:11:34Z", "updated_at": "2018-06-11T19:19:02Z", "closed_at": "2018-06-11T17:51:20Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1125", "html_url": "https://github.com/nlohmann/json/pull/1125", "diff_url": "https://github.com/nlohmann/json/pull/1125.diff", "patch_url": "https://github.com/nlohmann/json/pull/1125.patch"}, "body": "Add a bit more tests for alt_string implementation"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1124", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1124/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1124/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1124/events", "html_url": "https://github.com/nlohmann/json/pull/1124", "id": 331229473, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk0MDExOTU0", "number": 1124, "title": "test (non)equality for alt_string implementation", "user": {"login": "agrianius", "id": 37244280, "node_id": "MDQ6VXNlcjM3MjQ0Mjgw", "avatar_url": "https://avatars0.githubusercontent.com/u/37244280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agrianius", "html_url": "https://github.com/agrianius", "followers_url": "https://api.github.com/users/agrianius/followers", "following_url": "https://api.github.com/users/agrianius/following{/other_user}", "gists_url": "https://api.github.com/users/agrianius/gists{/gist_id}", "starred_url": "https://api.github.com/users/agrianius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agrianius/subscriptions", "organizations_url": "https://api.github.com/users/agrianius/orgs", "repos_url": "https://api.github.com/users/agrianius/repos", "events_url": "https://api.github.com/users/agrianius/events{/privacy}", "received_events_url": "https://api.github.com/users/agrianius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-11T15:06:23Z", "updated_at": "2018-06-11T16:37:37Z", "closed_at": "2018-06-11T16:08:48Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1124", "html_url": "https://github.com/nlohmann/json/pull/1124", "diff_url": "https://github.com/nlohmann/json/pull/1124.diff", "patch_url": "https://github.com/nlohmann/json/pull/1124.patch"}, "body": "Add a bit more tests for alt_string implementation"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1123", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1123/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1123/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1123/events", "html_url": "https://github.com/nlohmann/json/issues/1123", "id": 330111994, "node_id": "MDU6SXNzdWUzMzAxMTE5OTQ=", "number": 1123, "title": "can't not parse \"\\\\\u201c string", "user": {"login": "wony-zheng", "id": 5218603, "node_id": "MDQ6VXNlcjUyMTg2MDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5218603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wony-zheng", "html_url": "https://github.com/wony-zheng", "followers_url": "https://api.github.com/users/wony-zheng/followers", "following_url": "https://api.github.com/users/wony-zheng/following{/other_user}", "gists_url": "https://api.github.com/users/wony-zheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/wony-zheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wony-zheng/subscriptions", "organizations_url": "https://api.github.com/users/wony-zheng/orgs", "repos_url": "https://api.github.com/users/wony-zheng/repos", "events_url": "https://api.github.com/users/wony-zheng/events{/privacy}", "received_events_url": "https://api.github.com/users/wony-zheng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-07T04:22:28Z", "updated_at": "2018-06-18T20:04:47Z", "closed_at": "2018-06-18T20:04:47Z", "author_association": "NONE", "body": "`json::parse(\"{\\\"c\\\": \\\"a\\\\a\\\"}\")` throw std::invalid_argument, msg: parse error - unexpected '\"'\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1122", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1122/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1122/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1122/events", "html_url": "https://github.com/nlohmann/json/issues/1122", "id": 329787382, "node_id": "MDU6SXNzdWUzMjk3ODczODI=", "number": 1122, "title": " if  json file  contain Internationalization   chars   ,  get  exception", "user": {"login": "tan00", "id": 13514056, "node_id": "MDQ6VXNlcjEzNTE0MDU2", "avatar_url": "https://avatars0.githubusercontent.com/u/13514056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tan00", "html_url": "https://github.com/tan00", "followers_url": "https://api.github.com/users/tan00/followers", "following_url": "https://api.github.com/users/tan00/following{/other_user}", "gists_url": "https://api.github.com/users/tan00/gists{/gist_id}", "starred_url": "https://api.github.com/users/tan00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tan00/subscriptions", "organizations_url": "https://api.github.com/users/tan00/orgs", "repos_url": "https://api.github.com/users/tan00/repos", "events_url": "https://api.github.com/users/tan00/events{/privacy}", "received_events_url": "https://api.github.com/users/tan00/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-06T09:25:27Z", "updated_at": "2018-06-07T07:12:58Z", "closed_at": "2018-06-07T06:21:45Z", "author_association": "NONE", "body": "```\r\n\tjson j;\r\n\tj[\"name\"] = \"\u4e2d\u6587\";\r\n\r\n\tstd::cout << j.dump() << std::endl;\r\n\tstd::ofstream ofs;\r\n\tofs.open(\"test.json\");\r\n\tofs << j;\r\n\tofs.close();\r\n\r\n\tstd::ifstream ifs(\"test.json\");\r\n\tif (!ifs.is_open())\r\n\t{\r\n\t\tstd::cout << \"open error\" << std::endl;\r\n\t\treturn -1;\r\n\t}\r\n\tjson j2;\r\n\tj2 << ifs;\r\n\tstd::cout << j2.dump() << std::endl;\r\n```\r\nexception at  ```j2 << ifs;```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1121", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1121/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1121/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1121/events", "html_url": "https://github.com/nlohmann/json/pull/1121", "id": 329735030, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkyOTE3MDcz", "number": 1121, "title": "WIP/RFC: Flexible pretty printing formatting", "user": {"login": "EvanED", "id": 508945, "node_id": "MDQ6VXNlcjUwODk0NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/508945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EvanED", "html_url": "https://github.com/EvanED", "followers_url": "https://api.github.com/users/EvanED/followers", "following_url": "https://api.github.com/users/EvanED/following{/other_user}", "gists_url": "https://api.github.com/users/EvanED/gists{/gist_id}", "starred_url": "https://api.github.com/users/EvanED/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EvanED/subscriptions", "organizations_url": "https://api.github.com/users/EvanED/orgs", "repos_url": "https://api.github.com/users/EvanED/repos", "events_url": "https://api.github.com/users/EvanED/events{/privacy}", "received_events_url": "https://api.github.com/users/EvanED/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304694104, "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss", "name": "state: please discuss", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-06-06T06:58:35Z", "updated_at": "2018-07-30T12:55:24Z", "closed_at": "2018-07-23T17:49:37Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1121", "html_url": "https://github.com/nlohmann/json/pull/1121", "diff_url": "https://github.com/nlohmann/json/pull/1121.diff", "patch_url": "https://github.com/nlohmann/json/pull/1121.patch"}, "body": "This is a pretty massive pull request, and is not really ready to be merged yet; there are still a couple things on my to do list. However, I was hoping to open a discussion about the design of this and what you think before completely finishing it out. I'm hoping it's like 70% there. Inspired by #229, #457, maybe others, and of course my own needs/wants. (Almost everything in here is something that is useful to me.) I'm not sure how you want to work; I'm open to instructions otherwise, and I also fully expect to iterate on this at least a couple times.\r\n\r\nLet me emphasize that I am primarily focused on feedback on the design, with an eye toward whether you want this in your library. I think the [tests](https://github.com/EvanED/json/blob/fancy-serialization/test/src/unit-fancy-serialization.cpp) and [documentation](https://github.com/EvanED/json/blob/fancy-serialization/doc/StyledPrettyPrinting.md) are likely to be the most useful for that, but I don't know how you work. If everything looks great then feel free to take a look at the implementation, but at least for me, that wouldn't be my first stop.\r\n\r\nThere are a few conceptual groups of changes. I can break these into separate pull requests if you like. I don't know how related or unrelated they should be before they become a \"separate issue.\" Here are changes I made to the stock code, not counting my additions:\r\n\r\n* At least for me, when I ran `make pretty` on a clean `develop` checkout, I got changes. (`Artistic Style Version 2.05.1`) So there's one commit cleaning that up. Several files have those changes.\r\n* During this, I discovered an extreme edge case bug -- if the indent width ever grew to >512, it would ignore the provided indent character. (1c1c78908424)\r\n* I added accessors into `json_pointer` -- though I'm not thrilled with it. See my documentation document for more thoughts on that. (Those are the `json_pointer.hpp` and `unit-json-pointer.cpp`)\r\n* I split off everything for rendering strings and numbers from `serializer` to a new `primitve_serializer`. This change also spawned the `unit-convenience.cpp` and `unit-coversion.cpp` changes. (It became a little more obnoxious to test internals, but I'm thinking this doesn't matter.)\r\n\r\nThen there are my additions:\r\n* `fancy_serializer.hpp` holds the actual code\r\n* `unit-fancy-serialization.cpp` has the tests (I guess now that I'm writing this I'm not sure if I have 100% coverage, but I'd think I'm at least close if not there -- this is a design RFC anyway)\r\n* `json.hpp` has a couple trivial changes to make my thing a friend\r\n* `StyledPrettyPrinting.md` has documentation of the new capabilities. :exclamation: indicates a couple things I have TODO, and :question:  calls out items I specifically think feedback would be valuable on. If you're a top-down person, this is probably where to start for my additions.\r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\nRead the [Contribution Guidelines](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md) for detailed information.\r\n\r\n- [x]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [x]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error. *Tested with GCC 5, Ubuntu 16, with and without ASan*\r\n- [ ]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src). *How do I get coverage metrics?*\r\n- [x]  The source code is amalgamated; that is, after making changes to the sources in the `include/nlohmann` directory, run `make amalgamate` to create the single-header file `single_include/nlohmann/json.hpp`. The whole process is described [here](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md#files-to-change).\r\n\r\n## Please don't\r\n\r\n- The C++11 support varies between different **compilers** and versions. Please note the [list of supported compilers](https://github.com/nlohmann/json/blob/master/README.md#supported-compilers). Some compilers like GCC 4.8 (and earlier), Clang 3.3 (and earlier), or Microsoft Visual Studio 13.0 and earlier are known not to work due to missing or incomplete C++11 support. Please refrain from proposing changes that work around these compiler's limitations with `#ifdef`s or other means.\r\n- Specifically, I am aware of compilation problems with **Microsoft Visual Studio** (there even is an [issue label](https://github.com/nlohmann/json/issues?utf8=\u2713&q=label%3A%22visual+studio%22+) for these kind of bugs). I understand that even in 2016, complete C++11 support isn't there yet. But please also understand that I do not want to drop features or uglify the code just to make Microsoft's sub-standard compiler happy. The past has shown that there are ways to express the functionality such that the code compiles with the most recent MSVC - unfortunately, this is not the main objective of the project.\r\n- Please refrain from proposing changes that would **break [JSON](http://json.org) conformance**. If you propose a conformant extension of JSON to be supported by the library, please motivate this extension.\r\n- Please do not open pull requests that address **multiple issues**.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1120", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1120/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1120/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1120/events", "html_url": "https://github.com/nlohmann/json/issues/1120", "id": 329551583, "node_id": "MDU6SXNzdWUzMjk1NTE1ODM=", "number": 1120, "title": "How to use a json::iterator dereferenced value in code?", "user": {"login": "d223chen", "id": 27775959, "node_id": "MDQ6VXNlcjI3Nzc1OTU5", "avatar_url": "https://avatars1.githubusercontent.com/u/27775959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d223chen", "html_url": "https://github.com/d223chen", "followers_url": "https://api.github.com/users/d223chen/followers", "following_url": "https://api.github.com/users/d223chen/following{/other_user}", "gists_url": "https://api.github.com/users/d223chen/gists{/gist_id}", "starred_url": "https://api.github.com/users/d223chen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d223chen/subscriptions", "organizations_url": "https://api.github.com/users/d223chen/orgs", "repos_url": "https://api.github.com/users/d223chen/repos", "events_url": "https://api.github.com/users/d223chen/events{/privacy}", "received_events_url": "https://api.github.com/users/d223chen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-05T17:21:57Z", "updated_at": "2018-06-07T19:39:47Z", "closed_at": "2018-06-07T19:39:47Z", "author_association": "NONE", "body": "I am trying to do something like this - it involves taking a json::iterator through some json objects, and getting their keys and values for entries. I want to use the values (i.e. it.value() and mit.value()) as arguments to other functions...\r\n\r\n        json result;\r\n        json inboundMessage = ...;//determined at runtime\r\n        json savedMessage = ...; //determined at runtime\r\n        for (json::iterator it = inboundMessage.begin(), mit = savedMessage.begin(); it != inboundMessage.end() && mit != savedMessage.end(); ++it, ++mit) {\r\n\t\tjson pair;\r\n\t\tpair.emplace_back(\"log\", it.value());\r\n\t        pair.emplace_back(\"data\", mit.value());\r\n\t\tresult.emplace_back(it.key(), pair);\r\n        }\r\n        return result;\r\n\r\nWhen I build, I get the following error:            \r\n` 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::basic_json(nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer> &&) noexcept': cannot convert argument 1 from 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' to 'std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>>>'\t`\r\n\r\nWhat is the correct way to access the value referenced by an iterator such that the value can be used by code?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1119", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1119/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1119/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1119/events", "html_url": "https://github.com/nlohmann/json/issues/1119", "id": 329496070, "node_id": "MDU6SXNzdWUzMjk0OTYwNzA=", "number": 1119, "title": "clang compiler: error : unknown type name 'not'", "user": {"login": "d223chen", "id": 27775959, "node_id": "MDQ6VXNlcjI3Nzc1OTU5", "avatar_url": "https://avatars1.githubusercontent.com/u/27775959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d223chen", "html_url": "https://github.com/d223chen", "followers_url": "https://api.github.com/users/d223chen/followers", "following_url": "https://api.github.com/users/d223chen/following{/other_user}", "gists_url": "https://api.github.com/users/d223chen/gists{/gist_id}", "starred_url": "https://api.github.com/users/d223chen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d223chen/subscriptions", "organizations_url": "https://api.github.com/users/d223chen/orgs", "repos_url": "https://api.github.com/users/d223chen/repos", "events_url": "https://api.github.com/users/d223chen/events{/privacy}", "received_events_url": "https://api.github.com/users/d223chen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-05T14:57:41Z", "updated_at": "2018-08-04T21:55:34Z", "closed_at": "2018-08-04T21:55:34Z", "author_association": "NONE", "body": "I am building json.hpp with a project using the Clang/LLVM toolset in Visual Studio 2017 Community Edition (version 15.7.2)and getting these errors (and then some):\r\n\r\n\r\n                  1>------ Build started: Project: SampleProject, Configuration: Debug Win32 ------\r\n                  1>clang-cl.exe : warning : argument unused during compilation: '/ZI' [-Wunused-command-line-argument]\r\n                  1>clang-cl.exe : warning : argument unused during compilation: '/Gm' [-Wunused-command-line-argument]\r\n                  1>In file included from Source.cpp:2:\r\n                  1>C:\\Program Files\\vcpkg\\installed\\x86-windows\\include\\nlohmann\\json.hpp(322,66): error : unknown type name 'not'\r\n                  1>template<class B> struct negation : std::integral_constant<bool, not B::value> {};\r\n                  1>                                                                 ^\r\n                  1>C:\\Program Files\\vcpkg\\installed\\x86-windows\\include\\nlohmann\\json.hpp(322,80): error : expected class name\r\n                  1>template<class B> struct negation : std::integral_constant<bool, not B::value> {};\r\n\r\n(and many more errors).\r\n\r\nHere is the compiler version:\r\n\r\n            C:\\Program Files\\LLVM\\bin>clang-cl.exe --version\r\n            clang version 6.0.0 (tags/RELEASE_600/final)\r\n            Target: x86_64-pc-windows-msvc\r\n            Thread model: posix\r\n            InstalledDir: C:\\Program Files\\LLVM\\bin\r\n\r\nI highly suspect this is a compiler issue. I successfully compiled the project when using the Microsoft Visual C++ compiler (MSVC) version 19.14. \r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1118", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1118/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1118/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1118/events", "html_url": "https://github.com/nlohmann/json/issues/1118", "id": 328229583, "node_id": "MDU6SXNzdWUzMjgyMjk1ODM=", "number": 1118, "title": "Disable implicit conversions from json to std::initializer_list<T> for any T", "user": {"login": "tlemo", "id": 13824553, "node_id": "MDQ6VXNlcjEzODI0NTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/13824553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlemo", "html_url": "https://github.com/tlemo", "followers_url": "https://api.github.com/users/tlemo/followers", "following_url": "https://api.github.com/users/tlemo/following{/other_user}", "gists_url": "https://api.github.com/users/tlemo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlemo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlemo/subscriptions", "organizations_url": "https://api.github.com/users/tlemo/orgs", "repos_url": "https://api.github.com/users/tlemo/repos", "events_url": "https://api.github.com/users/tlemo/events{/privacy}", "received_events_url": "https://api.github.com/users/tlemo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-31T17:29:19Z", "updated_at": "2018-07-08T20:58:55Z", "closed_at": "2018-07-08T20:58:55Z", "author_association": "NONE", "body": "This is a cherry pick for from #1116: I suspect most ambiguities related to implicit conversions from json to standard containers (and not only) can be avoided by expanding the SFINAE around basic_json::operator ValueType() to explicitly exclude conversions to any std::initializer_list specialization. \r\n\r\nIt should be an quick, easy and safe fix (even if it doesn't fully address the full range of issues described in #1116). I'd be happy to prepare a patch if it helps.\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1117", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1117/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1117/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1117/events", "html_url": "https://github.com/nlohmann/json/pull/1117", "id": 328107038, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkxNzI5Mjky", "number": 1117, "title": "remove stringstream dependency", "user": {"login": "TinyTinni", "id": 18199235, "node_id": "MDQ6VXNlcjE4MTk5MjM1", "avatar_url": "https://avatars3.githubusercontent.com/u/18199235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TinyTinni", "html_url": "https://github.com/TinyTinni", "followers_url": "https://api.github.com/users/TinyTinni/followers", "following_url": "https://api.github.com/users/TinyTinni/following{/other_user}", "gists_url": "https://api.github.com/users/TinyTinni/gists{/gist_id}", "starred_url": "https://api.github.com/users/TinyTinni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TinyTinni/subscriptions", "organizations_url": "https://api.github.com/users/TinyTinni/orgs", "repos_url": "https://api.github.com/users/TinyTinni/repos", "events_url": "https://api.github.com/users/TinyTinni/events{/privacy}", "received_events_url": "https://api.github.com/users/TinyTinni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-05-31T11:50:08Z", "updated_at": "2018-06-01T06:05:46Z", "closed_at": "2018-06-01T06:05:46Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1117", "html_url": "https://github.com/nlohmann/json/pull/1117", "diff_url": "https://github.com/nlohmann/json/pull/1117.diff", "patch_url": "https://github.com/nlohmann/json/pull/1117.patch"}, "body": "Hi,\r\nthis PR replaces the  `stringstream` conversions with `snprintf` ones and removes all stringstream dependencies.\r\n`snprintf` is already use in the project.\r\n\r\nIssue reference: #1111 \r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1116", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1116/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1116/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1116/events", "html_url": "https://github.com/nlohmann/json/issues/1116", "id": 327923303, "node_id": "MDU6SXNzdWUzMjc5MjMzMDM=", "number": 1116, "title": "Implicit conversions to complex types can lead to surprising and confusing errors", "user": {"login": "tlemo", "id": 13824553, "node_id": "MDQ6VXNlcjEzODI0NTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/13824553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlemo", "html_url": "https://github.com/tlemo", "followers_url": "https://api.github.com/users/tlemo/followers", "following_url": "https://api.github.com/users/tlemo/following{/other_user}", "gists_url": "https://api.github.com/users/tlemo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlemo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlemo/subscriptions", "organizations_url": "https://api.github.com/users/tlemo/orgs", "repos_url": "https://api.github.com/users/tlemo/repos", "events_url": "https://api.github.com/users/tlemo/events{/privacy}", "received_events_url": "https://api.github.com/users/tlemo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-30T22:33:54Z", "updated_at": "2018-07-08T09:58:55Z", "closed_at": "2018-07-08T09:58:55Z", "author_association": "NONE", "body": "Using std::vector<T> as an example (since it's likely a popular scenario) illustrates how the implicit conversions (json::operator ValueType() const) result in a potentially frustrating errors:\r\n\r\nNote that the assignment operator case (the last one) could be fixed by \"more SFINAE\": ignore any specializations of std::initializer_list. I don't see a generic solution for the other cases (this is just an example)\r\n\r\nMy suggestion is to scale back on the implicit conversions:\r\n1. A moderate solution is to exclude any implicit conversions to non-scalar types (easy to implement)\r\n2. The more radical, but the right solution long term IMO, would be to:\r\n  - add a \"strict\" compile time mode, where all the implicit conversions are disabled (operator ValueType and all the json constructors made explicit)\r\n  - deprecate and gradually remove the non-strict variant.\r\n\r\nI realize that the 2nd choice seems a drastic departure and that some people are attracted to the initial convenience of implicit conversions (for large, complex project this short term convenience is likely a liability though).\r\n\r\nThank you!\r\n\r\n```\r\njson j = { 1, 2, 3 };\r\n\r\n// works as advertised\r\nstd::vector<float> v = j;\r\n\r\n// compiles, but likely not as intended:\r\n// resolves to explicit vector( size_type count )\r\nstd::vector<float> v2{j};\r\n\r\n// error: call to constructor of 'vector<float>' is ambiguous\r\n// note: candidate constructors:\r\n//   vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT\r\n//   vector(size_type __n, const allocator_type& __a = allocator_type())\r\n//   vector(vector&& __x) noexcept\r\n//   vector(const vector& __x)\r\n//   vector(initializer_list<value_type> __l,\r\nstd::vector<float> v3(j);\r\n\r\n// error: use of overloaded operator '=' is ambiguous (with operand types 'vector<float>' and 'json' (aka 'basic_json<>'))\r\n// note: candidate functions:\r\n//  operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\r\n//  operator=(const vector& __x);\r\n//  operator=(initializer_list<value_type> __l)\r\nv = j;\r\n```\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1115", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1115/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1115/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1115/events", "html_url": "https://github.com/nlohmann/json/issues/1115", "id": 327873372, "node_id": "MDU6SXNzdWUzMjc4NzMzNzI=", "number": 1115, "title": "How can I write from_json for a complex datatype that is not default constructible?", "user": {"login": "shikhartanwar", "id": 6910192, "node_id": "MDQ6VXNlcjY5MTAxOTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6910192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shikhartanwar", "html_url": "https://github.com/shikhartanwar", "followers_url": "https://api.github.com/users/shikhartanwar/followers", "following_url": "https://api.github.com/users/shikhartanwar/following{/other_user}", "gists_url": "https://api.github.com/users/shikhartanwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shikhartanwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shikhartanwar/subscriptions", "organizations_url": "https://api.github.com/users/shikhartanwar/orgs", "repos_url": "https://api.github.com/users/shikhartanwar/repos", "events_url": "https://api.github.com/users/shikhartanwar/events{/privacy}", "received_events_url": "https://api.github.com/users/shikhartanwar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-30T19:47:03Z", "updated_at": "2018-05-31T05:03:01Z", "closed_at": "2018-05-30T22:18:13Z", "author_association": "NONE", "body": "Hi. This is more of a question rather than a issue. \r\n\r\nI have a requirement where I need to create objects from serialized json (serialized using this library only) but those types are not default constructible. I went through the section [regarding get() for non-default constructible/non-copyable types](https://github.com/nlohmann/json#how-can-i-use-get-for-non-default-constructiblenon-copyable-types) but wasn't sure as to how am I supposed to use it for a complex datatype.\r\n\r\nCan you please help?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1114", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1114/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1114/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1114/events", "html_url": "https://github.com/nlohmann/json/issues/1114", "id": 327583092, "node_id": "MDU6SXNzdWUzMjc1ODMwOTI=", "number": 1114, "title": "Compile error in VS2015 when compiling unit-conversions.cpp", "user": {"login": "sonulohani", "id": 2958681, "node_id": "MDQ6VXNlcjI5NTg2ODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2958681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonulohani", "html_url": "https://github.com/sonulohani", "followers_url": "https://api.github.com/users/sonulohani/followers", "following_url": "https://api.github.com/users/sonulohani/following{/other_user}", "gists_url": "https://api.github.com/users/sonulohani/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonulohani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonulohani/subscriptions", "organizations_url": "https://api.github.com/users/sonulohani/orgs", "repos_url": "https://api.github.com/users/sonulohani/repos", "events_url": "https://api.github.com/users/sonulohani/events{/privacy}", "received_events_url": "https://api.github.com/users/sonulohani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 296080787, "node_id": "MDU6TGFiZWwyOTYwODA3ODc=", "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio", "name": "platform: visual studio", "color": "eb6420", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 14, "created_at": "2018-05-30T05:52:01Z", "updated_at": "2018-06-29T11:49:53Z", "closed_at": "2018-06-29T07:04:11Z", "author_association": "CONTRIBUTOR", "body": "When i compile unit-conversions.cpp with VS 2015 compiler, I get this error:-\r\n\r\n\"unit-conversions.cpp : fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj\" . \r\n\r\nI think we should configure this in cmake to compile this file with /bigobj. \r\n\r\nVS 2015 configuration:-\r\nDebug mode\r\nPlatform :- x64\r\n\r\nHere is the screenshot of the same:-\r\n![issue ss](https://user-images.githubusercontent.com/2958681/40701563-03bc0438-63fc-11e8-89a6-915b08282308.PNG)\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1113", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1113/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1113/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1113/events", "html_url": "https://github.com/nlohmann/json/issues/1113", "id": 327356954, "node_id": "MDU6SXNzdWUzMjczNTY5NTQ=", "number": 1113, "title": "ADL Serializer for std::any / boost::any", "user": {"login": "anthonygclark", "id": 59702, "node_id": "MDQ6VXNlcjU5NzAy", "avatar_url": "https://avatars0.githubusercontent.com/u/59702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anthonygclark", "html_url": "https://github.com/anthonygclark", "followers_url": "https://api.github.com/users/anthonygclark/followers", "following_url": "https://api.github.com/users/anthonygclark/following{/other_user}", "gists_url": "https://api.github.com/users/anthonygclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/anthonygclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anthonygclark/subscriptions", "organizations_url": "https://api.github.com/users/anthonygclark/orgs", "repos_url": "https://api.github.com/users/anthonygclark/repos", "events_url": "https://api.github.com/users/anthonygclark/events{/privacy}", "received_events_url": "https://api.github.com/users/anthonygclark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-29T14:52:42Z", "updated_at": "2018-05-29T17:16:57Z", "closed_at": "2018-05-29T17:15:57Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nI can't figure out how to specialize the `adl_serializer` for `std::any/boost::any`.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n```cpp\r\n#include <vector>\r\n#include <iostream>\r\n\r\n#include <boost/any.hpp>\r\n\r\n#include \"nlohmann/json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nnamespace nlohmann {\r\n    \r\n    template<>\r\n    struct adl_serializer<boost::any>\r\n    {\r\n        static void from_json(const json& j, boost::any & opt)\r\n        {\r\n            opt = j.get<boost::any>();\r\n        }\r\n    };\r\n}\r\n\r\nint main() {\r\n    auto doc = json::parse(\"{\\\"params\\\" : [1,2,3,4]}\");\r\n    std::cout << doc.dump(4) << std::endl;\r\n    \r\n    auto aot = doc[\"params\"].get<std::vector<boost::any>>();\r\n}\r\n```\r\n\r\n- What is the expected behavior?\r\n\r\nI guess I expected any parsed value to be assigned to a `boost::any`.\r\n\r\n- And what is the actual behavior instead?\r\n\r\nSegfault\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n`g++ (GCC) 8.1.0` \r\n\r\nand \r\n\r\n`clang version 6.0.0 (tags/RELEASE_600/final)\r\nTarget: x86_64-pc-linux-gnu`\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nRelease\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nNo compilation errors and no warnings with `-Wall -Wextra`\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1112", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1112/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1112/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1112/events", "html_url": "https://github.com/nlohmann/json/issues/1112", "id": 327015572, "node_id": "MDU6SXNzdWUzMjcwMTU1NzI=", "number": 1112, "title": "Unexpected behaviour of is_null", "user": {"login": "phyz777", "id": 19569239, "node_id": "MDQ6VXNlcjE5NTY5MjM5", "avatar_url": "https://avatars1.githubusercontent.com/u/19569239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phyz777", "html_url": "https://github.com/phyz777", "followers_url": "https://api.github.com/users/phyz777/followers", "following_url": "https://api.github.com/users/phyz777/following{/other_user}", "gists_url": "https://api.github.com/users/phyz777/gists{/gist_id}", "starred_url": "https://api.github.com/users/phyz777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phyz777/subscriptions", "organizations_url": "https://api.github.com/users/phyz777/orgs", "repos_url": "https://api.github.com/users/phyz777/repos", "events_url": "https://api.github.com/users/phyz777/events{/privacy}", "received_events_url": "https://api.github.com/users/phyz777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-28T12:49:01Z", "updated_at": "2018-05-28T14:15:00Z", "closed_at": "2018-05-28T14:15:00Z", "author_association": "NONE", "body": "The following code produces unexpected output (which is, _all_ four statements being printed): \r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#include \"json.hpp\"\r\n\r\nint main()\r\n{\r\n    nlohmann::json j;\r\n\r\n    if (j.empty()) {\r\n        std::cout << \"Object is empty\" << std::endl;\r\n    }\r\n\r\n    if (j.is_null()) {\r\n        std::cout << \"Object is null\" << std::endl;\r\n    }\r\n\r\n    nlohmann::json k;\r\n\r\n    j[\"aminull\"] = k;\r\n\r\n    if (j[\"aminull\"].empty()) {\r\n        std::cout << \"Object under key is empty\" << std::endl;\r\n    }\r\n\r\n    if (j[\"aminull\"].is_null()) {\r\n        std::cout << \"Object under key is null\" << std::endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```\r\nI am not entirely sure whether or not this is the expected behaviour, but I think it would be more intuitive to have only the empty() conditions evaluate to true and the others to false? \r\n\r\nBest wishes and thanks for the great work!\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1111", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1111/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1111/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1111/events", "html_url": "https://github.com/nlohmann/json/issues/1111", "id": 326820887, "node_id": "MDU6SXNzdWUzMjY4MjA4ODc=", "number": 1111, "title": "How to resolve  \" undefined reference to `std::__throw_bad_cast()'\"", "user": {"login": "TridentTD", "id": 15370479, "node_id": "MDQ6VXNlcjE1MzcwNDc5", "avatar_url": "https://avatars1.githubusercontent.com/u/15370479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TridentTD", "html_url": "https://github.com/TridentTD", "followers_url": "https://api.github.com/users/TridentTD/followers", "following_url": "https://api.github.com/users/TridentTD/following{/other_user}", "gists_url": "https://api.github.com/users/TridentTD/gists{/gist_id}", "starred_url": "https://api.github.com/users/TridentTD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TridentTD/subscriptions", "organizations_url": "https://api.github.com/users/TridentTD/orgs", "repos_url": "https://api.github.com/users/TridentTD/repos", "events_url": "https://api.github.com/users/TridentTD/events{/privacy}", "received_events_url": "https://api.github.com/users/TridentTD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2018-05-27T14:29:09Z", "updated_at": "2018-07-28T12:46:46Z", "closed_at": "2018-07-28T12:46:46Z", "author_association": "NONE", "body": "- What is the issue you have?\r\n\r\nI can compile well on ESP8266's xtensa_gcc  compiler version5.1.0, \r\nhowever when I want to receive string by dump() function .\r\nIt occurs some errors. How to resolve it?\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nFirst I try this code \r\n```\r\njson j = {  {\"pi\", 3.141}, {\"happy\", true}, {\"name\", \"testtest\"}, \r\n                    {\"nothing\", nullptr}, { \"answer\", { {\"everything\", 42} } },\r\n                    {\"list\", {1, 0, 2}}, { \"object\", { {\"currency\", \"USD\"}, {\"value\", 42.99} } } };\r\n\r\nSerial.println((float) j[\"pi\"],3);     // print to Serial Monitor\r\n```\r\nThe result  can print well on Serial Monitor -->  3.141   \r\nHowever when I want to dump like the following.\r\n\r\n```\r\nstd::string dump_string =  j.dump();\r\n```\r\n\r\nIt occurs error like this\r\n\r\n```\r\nlibstdc++.a(ostream-inst.o): In function `std::ostream& std::ostream::_M_insert<long>(long)':\r\nlibstdc++-v3/include/ostream:544: undefined reference to `std::__throw_bad_cast()'\r\nlibstdc++.a(wlocale-inst.o): In function `std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)':\r\nlibstdc++-v3/include/bits/locale_facets_nonio.tcc:1173: undefined reference to `std::__throw_bad_cast()'\r\n...\r\n```\r\n\r\nHow to resolve   \"undefined reference to `std::__throw_bad_cast()' \" error ?\r\n\r\nThank you.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1110", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1110/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1110/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1110/events", "html_url": "https://github.com/nlohmann/json/issues/1110", "id": 326775715, "node_id": "MDU6SXNzdWUzMjY3NzU3MTU=", "number": 1110, "title": "cannot compile on ubuntu 18.04 and 16.04", "user": {"login": "chakpongchung", "id": 8110904, "node_id": "MDQ6VXNlcjgxMTA5MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8110904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chakpongchung", "html_url": "https://github.com/chakpongchung", "followers_url": "https://api.github.com/users/chakpongchung/followers", "following_url": "https://api.github.com/users/chakpongchung/following{/other_user}", "gists_url": "https://api.github.com/users/chakpongchung/gists{/gist_id}", "starred_url": "https://api.github.com/users/chakpongchung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chakpongchung/subscriptions", "organizations_url": "https://api.github.com/users/chakpongchung/orgs", "repos_url": "https://api.github.com/users/chakpongchung/repos", "events_url": "https://api.github.com/users/chakpongchung/events{/privacy}", "received_events_url": "https://api.github.com/users/chakpongchung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}, {"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-26T23:55:39Z", "updated_at": "2018-06-14T16:19:45Z", "closed_at": "2018-06-14T16:19:45Z", "author_association": "NONE", "body": "- What is the issue you have?\r\n```\r\n\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n// #include <json.hpp>\r\n#include <nlohmann/json.hpp>\r\nusing json = nlohmann::json;  // for convenience\r\n\r\nint main() { cout << 0; }\r\n```\r\n```\r\nsudo apt install nlohmann-json-dev  \r\n\r\ng++ -std=c++11 main.cpp\r\n```\r\n```\r\n\r\n\r\nIn file included from test_json.cpp:6:0:\r\n/usr/include/nlohmann/json.hpp: In function \u2018bool nlohmann::operator<(nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::const_reference, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::const_reference)\u2019:\r\n/usr/include/nlohmann/json.hpp:6057:62: error: wrong number of template arguments (1, should be 2)\r\n                     return *lhs.m_value.array < *rhs.m_value.array;\r\n                                                              ^~~~~\r\nIn file included from /usr/include/nlohmann/json.hpp:33:0,\r\n                 from test_json.cpp:6:\r\n/usr/include/c++/7/array:94:12: note: provided for \u2018template<class _Tp, long unsigned int _Nm> struct std::array\u2019\r\n     struct array\r\n            ^~~~~\r\n\r\n```\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\n\r\n- And what is the actual behavior instead?\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n`\r\nLinux ubuntu 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n`\r\n```\r\nUsing built-in specs.\r\nCOLLECT_GCC=g++\r\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper\r\nOFFLOAD_TARGET_NAMES=nvptx-none\r\nOFFLOAD_TARGET_DEFAULT=1\r\nTarget: x86_64-linux-gnu\r\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-16ubuntu3' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --with-as=/usr/bin/x86_64-linux-gnu-as --with-ld=/usr/bin/x86_64-linux-gnu-ld --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\r\nThread model: posix\r\ngcc version 7.3.0 (Ubuntu 7.3.0-16ubuntu3) \r\n\r\n```\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1109", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1109/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1109/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1109/events", "html_url": "https://github.com/nlohmann/json/issues/1109", "id": 326633335, "node_id": "MDU6SXNzdWUzMjY2MzMzMzU=", "number": 1109, "title": "JSON representation for floating point values has too many digits", "user": {"login": "grebenyukaa", "id": 8776486, "node_id": "MDQ6VXNlcjg3NzY0ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8776486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grebenyukaa", "html_url": "https://github.com/grebenyukaa", "followers_url": "https://api.github.com/users/grebenyukaa/followers", "following_url": "https://api.github.com/users/grebenyukaa/following{/other_user}", "gists_url": "https://api.github.com/users/grebenyukaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/grebenyukaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grebenyukaa/subscriptions", "organizations_url": "https://api.github.com/users/grebenyukaa/orgs", "repos_url": "https://api.github.com/users/grebenyukaa/repos", "events_url": "https://api.github.com/users/grebenyukaa/events{/privacy}", "received_events_url": "https://api.github.com/users/grebenyukaa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-25T19:09:08Z", "updated_at": "2018-06-07T19:39:07Z", "closed_at": "2018-06-07T19:39:07Z", "author_association": "NONE", "body": "The values of type \"float\" seem to be internally treated as values of type \"double\". This leads to an issue with their text representation. For example, the snippet below: \r\n```\r\njson j;\r\nj[\"test\"] = 0.42f;\r\nstd::cout << j.dump() << std::endl;\r\n```\r\nproduces this json output:\r\n>{\"test\":0.41999998688697815}\r\n\r\n\r\nI experimented a bit with float values, and found out, that a workaround, like that:\r\n```\r\nnamespace nlohmann\r\n{\r\n    namespace detail\r\n   {\r\n        template<>\r\n        inline char* to_chars<json::number_float_t>(char* first, char* last, json::number_float_t value)\r\n        {\r\n            std::ostringstream s;\r\n            s << value;\r\n            std::string buf = oss.str();\r\n            return std::copy(buf.begin(), buf.end(), first);\r\n        }\r\n    }\r\n}\r\n```\r\ncan impove floats' representation, and produce the following json:\r\n>{\"test\":0.42}\r\n\r\n\r\nI know, that floating point arithmetics is a sensitive topic, but I think, floats' representation in human-readable format should be improved, if possible.\r\n\r\n- Compiler: Microsoft Visual C++ 2015\r\n- Release: 3.1.2\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1108", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1108/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1108/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1108/events", "html_url": "https://github.com/nlohmann/json/issues/1108", "id": 326604723, "node_id": "MDU6SXNzdWUzMjY2MDQ3MjM=", "number": 1108, "title": "Not working for classes containing \"_declspec(dllimport)\" in their declaration", "user": {"login": "shikhartanwar", "id": 6910192, "node_id": "MDQ6VXNlcjY5MTAxOTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6910192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shikhartanwar", "html_url": "https://github.com/shikhartanwar", "followers_url": "https://api.github.com/users/shikhartanwar/followers", "following_url": "https://api.github.com/users/shikhartanwar/following{/other_user}", "gists_url": "https://api.github.com/users/shikhartanwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shikhartanwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shikhartanwar/subscriptions", "organizations_url": "https://api.github.com/users/shikhartanwar/orgs", "repos_url": "https://api.github.com/users/shikhartanwar/repos", "events_url": "https://api.github.com/users/shikhartanwar/events{/privacy}", "received_events_url": "https://api.github.com/users/shikhartanwar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 14, "created_at": "2018-05-25T17:23:20Z", "updated_at": "2018-05-28T16:16:06Z", "closed_at": "2018-05-28T16:16:06Z", "author_association": "NONE", "body": "Hi,\r\n\r\nI have a 3rd party SDK included in my project that has class declarations like below -\r\nLet's assume the class name as Person (simplified the code for reporting purposes) -\r\n```c++\r\nclass _declspec(dllimport) Person \r\n{\r\n       public std::string name;\r\n}\r\n```\r\n\r\nI am trying to serialize the class using the below `to_json` function as mentioned in the documentation -\r\n```c++\r\n#include <Person.h>\r\n#include <nlohmann/json.hpp>\r\nusing json = nlohmann::json;\r\nvoid to_json(json& j, Person & o)\r\n{\r\n\tj = json{ { \"value\", o.name } };\r\n}\r\n\r\nPerson p = new Person();\r\np.name = \"Test\";\r\njson j = p;\r\n```\r\n\r\nHowever even though everything is syntactically correct, I am getting the below errors on building my project -\r\n\r\n1. `could not find to_json() method in T's namespace`\r\n2. `'force_msvc_stacktrace': is not a member of 'Person'`\r\n3. `'force_msvc_stacktrace': undeclared identifier`\r\n4. `forcing MSVC stacktrace to show which T we're talking about.`\r\n\r\nI have also tried creating a simple class **without** the `_declspec(dllimport)` and that works like a charm. \r\n\r\nCan someone please help in this regard?\r\n\r\n**Details:**\r\n1. Compiler: Visual Studio 2017\r\n2. Operating System: Windows"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1107", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1107/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1107/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1107/events", "html_url": "https://github.com/nlohmann/json/issues/1107", "id": 326391070, "node_id": "MDU6SXNzdWUzMjYzOTEwNzA=", "number": 1107, "title": "Get keys from json object", "user": {"login": "Radmir2015", "id": 21173382, "node_id": "MDQ6VXNlcjIxMTczMzgy", "avatar_url": "https://avatars3.githubusercontent.com/u/21173382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Radmir2015", "html_url": "https://github.com/Radmir2015", "followers_url": "https://api.github.com/users/Radmir2015/followers", "following_url": "https://api.github.com/users/Radmir2015/following{/other_user}", "gists_url": "https://api.github.com/users/Radmir2015/gists{/gist_id}", "starred_url": "https://api.github.com/users/Radmir2015/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Radmir2015/subscriptions", "organizations_url": "https://api.github.com/users/Radmir2015/orgs", "repos_url": "https://api.github.com/users/Radmir2015/repos", "events_url": "https://api.github.com/users/Radmir2015/events{/privacy}", "received_events_url": "https://api.github.com/users/Radmir2015/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-25T05:57:53Z", "updated_at": "2018-05-26T15:13:35Z", "closed_at": "2018-05-26T15:13:35Z", "author_association": "NONE", "body": "Is it possible to get all keys from json object (like on picture)?\r\n![screenshot_181](https://user-images.githubusercontent.com/21173382/40528398-96257f0e-5ff9-11e8-9f8d-2f20e9fc3057.png)\r\n![screenshot_182](https://user-images.githubusercontent.com/21173382/40528399-9657a2b8-5ff9-11e8-9ff8-67eb4d084421.png)\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1106", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1106/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1106/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1106/events", "html_url": "https://github.com/nlohmann/json/issues/1106", "id": 326146050, "node_id": "MDU6SXNzdWUzMjYxNDYwNTA=", "number": 1106, "title": "dump() without alphabetical order", "user": {"login": "berte", "id": 922696, "node_id": "MDQ6VXNlcjkyMjY5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/922696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berte", "html_url": "https://github.com/berte", "followers_url": "https://api.github.com/users/berte/followers", "following_url": "https://api.github.com/users/berte/following{/other_user}", "gists_url": "https://api.github.com/users/berte/gists{/gist_id}", "starred_url": "https://api.github.com/users/berte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berte/subscriptions", "organizations_url": "https://api.github.com/users/berte/orgs", "repos_url": "https://api.github.com/users/berte/repos", "events_url": "https://api.github.com/users/berte/events{/privacy}", "received_events_url": "https://api.github.com/users/berte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374232, "node_id": "MDU6TGFiZWw0NjM3NDIzMg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate", "name": "solution: duplicate", "color": "cccccc", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-24T14:24:00Z", "updated_at": "2018-05-26T12:13:22Z", "closed_at": "2018-05-26T12:13:22Z", "author_association": "NONE", "body": "Hi,\r\n\r\nis it possible to use dump without alphabetical order?\r\n\r\ncheers,"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1105", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1105/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1105/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1105/events", "html_url": "https://github.com/nlohmann/json/issues/1105", "id": 325743051, "node_id": "MDU6SXNzdWUzMjU3NDMwNTE=", "number": 1105, "title": "Cannot deserialize types using std::ratio", "user": {"login": "GabrielDav", "id": 6910086, "node_id": "MDQ6VXNlcjY5MTAwODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6910086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabrielDav", "html_url": "https://github.com/GabrielDav", "followers_url": "https://api.github.com/users/GabrielDav/followers", "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}", "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions", "organizations_url": "https://api.github.com/users/GabrielDav/orgs", "repos_url": "https://api.github.com/users/GabrielDav/repos", "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}", "received_events_url": "https://api.github.com/users/GabrielDav/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-23T14:52:08Z", "updated_at": "2018-05-23T17:02:40Z", "closed_at": "2018-05-23T16:22:41Z", "author_association": "NONE", "body": "Given\r\n`void from_json(const json& j, std::ratio<60>& r)\r\n\t{\r\n            // parsing\r\n\t}`\r\nI expect to get parsed value back when used like this:\r\n`auto data = j.at(\"Data\").get<std::ratio<60>>()`\r\nHowever, instead I'm getting a compilation error:\r\n\r\n> could not find from_json() method in T's namespace\r\n\r\nThis problem impacts usage of std::chrono::duration and std::crhono::time_point\r\n\r\nThis is really weird, because I copied implementation of std::ratio and renamed struct to rat\r\n\r\n```\r\ntemplate<intmax_t _Nx,\r\n\t\tintmax_t _Dx = 1>\r\n\t\tstruct rat\r\n\t{\t// holds the ratio of _Nx to _Dx\r\n\t\tstatic_assert(_Dx != 0,\r\n\t\t\t\"zero denominator\");\r\n\t\tstatic_assert(-INTMAX_MAX <= _Nx,\r\n\t\t\t\"numerator too negative\");\r\n\t\tstatic_assert(-INTMAX_MAX <= _Dx,\r\n\t\t\t\"denominator too negative\");\r\n\r\n\t\tstatic constexpr intmax_t num = _Sign_of<_Nx>::value\r\n\t\t\t* _Sign_of<_Dx>::value * _Abs<_Nx>::value / _Gcd<_Nx, _Dx>::value;\r\n\r\n\t\tstatic constexpr intmax_t den = _Abs<_Dx>::value / _Gcd<_Nx, _Dx>::value;\r\n\r\n\t\ttypedef rat<num, den> type;\r\n\t};\r\n\r\nvoid from_json(const json& j, rat<60>& r)\r\n\t{\r\n            // parsing\r\n\t}\r\n\r\nauto data = j.at(\"Data\").get<rat<60>>();\r\n```\r\nSurprisingly this works as expected.\r\nI'm using Visual Studio 2017 msvc compiler. Project uses std::chrono across solution without any issues."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1104", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1104/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1104/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1104/events", "html_url": "https://github.com/nlohmann/json/issues/1104", "id": 325494338, "node_id": "MDU6SXNzdWUzMjU0OTQzMzg=", "number": 1104, "title": " i want to learn json", "user": {"login": "wenhuancai", "id": 20059816, "node_id": "MDQ6VXNlcjIwMDU5ODE2", "avatar_url": "https://avatars1.githubusercontent.com/u/20059816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenhuancai", "html_url": "https://github.com/wenhuancai", "followers_url": "https://api.github.com/users/wenhuancai/followers", "following_url": "https://api.github.com/users/wenhuancai/following{/other_user}", "gists_url": "https://api.github.com/users/wenhuancai/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenhuancai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenhuancai/subscriptions", "organizations_url": "https://api.github.com/users/wenhuancai/orgs", "repos_url": "https://api.github.com/users/wenhuancai/repos", "events_url": "https://api.github.com/users/wenhuancai/events{/privacy}", "received_events_url": "https://api.github.com/users/wenhuancai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-22T23:10:00Z", "updated_at": "2018-05-27T15:30:21Z", "closed_at": "2018-05-27T15:30:21Z", "author_association": "NONE", "body": "Hi, I want to learn about this json library.Json [key] = values.I think it's a cool thing to do, but I don't know how to read the source code.Is there any good documentation for me to join this project quickly?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1103", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1103/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1103/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1103/events", "html_url": "https://github.com/nlohmann/json/issues/1103", "id": 325016956, "node_id": "MDU6SXNzdWUzMjUwMTY5NTY=", "number": 1103, "title": "Type checking during compile", "user": {"login": "trivigy", "id": 3146062, "node_id": "MDQ6VXNlcjMxNDYwNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3146062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trivigy", "html_url": "https://github.com/trivigy", "followers_url": "https://api.github.com/users/trivigy/followers", "following_url": "https://api.github.com/users/trivigy/following{/other_user}", "gists_url": "https://api.github.com/users/trivigy/gists{/gist_id}", "starred_url": "https://api.github.com/users/trivigy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trivigy/subscriptions", "organizations_url": "https://api.github.com/users/trivigy/orgs", "repos_url": "https://api.github.com/users/trivigy/repos", "events_url": "https://api.github.com/users/trivigy/events{/privacy}", "received_events_url": "https://api.github.com/users/trivigy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-21T18:38:24Z", "updated_at": "2018-05-23T05:39:48Z", "closed_at": "2018-05-23T05:39:48Z", "author_association": "NONE", "body": "Sorry for the naive question in case this is really rudimentary but is there a way to type check the json instance during compile time? The basic use case in my situation is that I am passing a json object as a function argument and I want to ensure that only `json::object` is passed. Was hoping it could be check done during compile time."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1102", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1102/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1102/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1102/events", "html_url": "https://github.com/nlohmann/json/issues/1102", "id": 324950111, "node_id": "MDU6SXNzdWUzMjQ5NTAxMTE=", "number": 1102, "title": "Iterate through sub items", "user": {"login": "johnroper100", "id": 9782943, "node_id": "MDQ6VXNlcjk3ODI5NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9782943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnroper100", "html_url": "https://github.com/johnroper100", "followers_url": "https://api.github.com/users/johnroper100/followers", "following_url": "https://api.github.com/users/johnroper100/following{/other_user}", "gists_url": "https://api.github.com/users/johnroper100/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnroper100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnroper100/subscriptions", "organizations_url": "https://api.github.com/users/johnroper100/orgs", "repos_url": "https://api.github.com/users/johnroper100/repos", "events_url": "https://api.github.com/users/johnroper100/events{/privacy}", "received_events_url": "https://api.github.com/users/johnroper100/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-21T15:04:38Z", "updated_at": "2018-06-03T17:33:16Z", "closed_at": "2018-06-03T17:33:16Z", "author_association": "NONE", "body": "I have a json file that looks like this:\r\n\r\n```json\r\n{\r\n    \"name\": \"Generic Dimmer\",\r\n    \"shortName\": \"Dimmer\",\r\n    \"manufacturer\": \"Generic\",\r\n    \"channels\": [\r\n        {\r\n            \"type\": \"intensity\",\r\n            \"name\": \"Intensity\",\r\n            \"max\": 255,\r\n            \"min\": 0,\r\n            \"displayMax\": 100,\r\n            \"displayMin\": 0,\r\n            \"default\": 0,\r\n            \"dmxAddress\": 0,\r\n            \"value\": 0,\r\n            \"displayValue\": 0\r\n        }\r\n    ]\r\n}\r\n```\r\nI was able to import the file and access props such as `name`, `shortName`, and `manufacturer`, but I'm having trouble looping through the `channel` array.\r\n\r\nThis is what I've tried so far:\r\n```cpp\r\n    ifstream i(\"../fixtures/\"+fixtureName+\".json\");\r\n    json f;\r\n    i >> f;\r\n\r\n    // Create a new fixture from the fixture spec and save it to the fixtures list\r\n    fixture newFixture;\r\n    newFixture.id = randomString();\r\n    newFixture.name = f[\"name\"];\r\n    newFixture.shortName = f[\"shortName\"];\r\n    newFixture.manufacturer = f[\"manufacturer\"];\r\n    newFixture.startDMXAddress = j[\"startDMXAddress\"];\r\n    channel newChannel;\r\n    for (auto& x : json::iterator_wrapper(f[\"channels\"]))\r\n    {\r\n        newChannel.id = randomString();\r\n        newChannel.type = x.value()[\"type\"];\r\n        cout << \"key: \" << x.key() << \", value: \" << x.value() << '\\n';\r\n    }\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1101", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1101/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1101/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1101/events", "html_url": "https://github.com/nlohmann/json/issues/1101", "id": 324664396, "node_id": "MDU6SXNzdWUzMjQ2NjQzOTY=", "number": 1101, "title": "cppcheck failing for version 3.1.2", "user": {"login": "psalvaggio", "id": 13050294, "node_id": "MDQ6VXNlcjEzMDUwMjk0", "avatar_url": "https://avatars0.githubusercontent.com/u/13050294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psalvaggio", "html_url": "https://github.com/psalvaggio", "followers_url": "https://api.github.com/users/psalvaggio/followers", "following_url": "https://api.github.com/users/psalvaggio/following{/other_user}", "gists_url": "https://api.github.com/users/psalvaggio/gists{/gist_id}", "starred_url": "https://api.github.com/users/psalvaggio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psalvaggio/subscriptions", "organizations_url": "https://api.github.com/users/psalvaggio/orgs", "repos_url": "https://api.github.com/users/psalvaggio/repos", "events_url": "https://api.github.com/users/psalvaggio/events{/privacy}", "received_events_url": "https://api.github.com/users/psalvaggio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232252782, "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=", "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed", "name": "confirmed", "color": "e11d21", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 11, "created_at": "2018-05-19T22:14:52Z", "updated_at": "2018-05-30T04:58:04Z", "closed_at": "2018-05-27T10:31:36Z", "author_association": "NONE", "body": "- What is the issue you have?\r\n\r\nThe \"make cppcheck\" test is failing on version 3.1.2\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nDownload the .tar.gz for the version, run \"make cppcheck\"\r\n\r\n- What is the expected behavior?\r\n\r\nPassing\r\n\r\n- And what is the actual behavior instead?\r\n\r\n```\r\n[json-3.1.2]$ make cppcheck\r\ncppcheck --enable=warning --inconclusive --force --std=c++11 single_include/nlohmann/json.hpp --error-exitcode=1\r\nChecking single_include/nlohmann/json.hpp ...\r\n[single_include/nlohmann/json.hpp:72]: (error) syntax error\r\nChecking single_include/nlohmann/json.hpp: JSON_CATCH_USER...\r\nChecking single_include/nlohmann/json.hpp: JSON_NOEXCEPTION;_CPPUNWIND;__EXCEPTIONS;__cpp_exceptions...\r\nChecking single_include/nlohmann/json.hpp: JSON_THROW_USER...\r\nChecking single_include/nlohmann/json.hpp: JSON_TRY_USER...\r\nChecking single_include/nlohmann/json.hpp: _HAS_CXX14...\r\nChecking single_include/nlohmann/json.hpp: _HAS_CXX17...\r\nChecking single_include/nlohmann/json.hpp: _MSC_VER...\r\nChecking single_include/nlohmann/json.hpp: _WIN32...\r\nChecking single_include/nlohmann/json.hpp: __APPLE__...\r\nChecking single_include/nlohmann/json.hpp: __GNUC__...\r\nChecking single_include/nlohmann/json.hpp: __GNUC__;__GNUG__...\r\nChecking single_include/nlohmann/json.hpp: __GNUC__;__GNUG__;__clang__...\r\nChecking single_include/nlohmann/json.hpp: __HP_aCC;__HP_cc...\r\nChecking single_include/nlohmann/json.hpp: __IBMCPP__...\r\nChecking single_include/nlohmann/json.hpp: __ICC;__INTEL_COMPILER...\r\nChecking single_include/nlohmann/json.hpp: __PGI...\r\nChecking single_include/nlohmann/json.hpp: __SUNPRO_CC...\r\nChecking single_include/nlohmann/json.hpp: __clang__...\r\nChecking single_include/nlohmann/json.hpp: __linux__...\r\nChecking single_include/nlohmann/json.hpp: __unix__...\r\nmake: *** [Makefile:259: cppcheck] Error 1\r\n```\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nGCC 7.3.1 on Fedora 27\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nReleased\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nUnit tests are all passing.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1100", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1100/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1100/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1100/events", "html_url": "https://github.com/nlohmann/json/issues/1100", "id": 324377051, "node_id": "MDU6SXNzdWUzMjQzNzcwNTE=", "number": 1100, "title": "Deserializing std::map", "user": {"login": "RolandasV", "id": 17047859, "node_id": "MDQ6VXNlcjE3MDQ3ODU5", "avatar_url": "https://avatars0.githubusercontent.com/u/17047859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RolandasV", "html_url": "https://github.com/RolandasV", "followers_url": "https://api.github.com/users/RolandasV/followers", "following_url": "https://api.github.com/users/RolandasV/following{/other_user}", "gists_url": "https://api.github.com/users/RolandasV/gists{/gist_id}", "starred_url": "https://api.github.com/users/RolandasV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RolandasV/subscriptions", "organizations_url": "https://api.github.com/users/RolandasV/orgs", "repos_url": "https://api.github.com/users/RolandasV/repos", "events_url": "https://api.github.com/users/RolandasV/events{/privacy}", "received_events_url": "https://api.github.com/users/RolandasV/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2018-05-18T11:41:53Z", "updated_at": "2018-07-04T10:59:41Z", "closed_at": "2018-05-28T09:14:12Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nWhen trying to deserialize a std::map which has a int/Enum as a key I'm getting compilation error.\r\nError\tC2166\tl-value specifies const object\r\n\r\nWhen i try to deserialize a std::map with a key as a string for example, it compiles fine.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nSerialize a std::map having int/enum as a key. Try to deserialize it.\r\n\r\n`json.at(_materialTypeByFaceSelectionJson).get<map<MaterialTypeEnum, FaceSelectionEnum>>();`\r\n\r\n- What is the expected behavior?\r\nIt should compile.\r\n\r\n- And what is the actual behavior instead?\r\nIt doesn't.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nI'm using windows 10 and Visual Studio 2017.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nI'm using released version.\r\n"}]