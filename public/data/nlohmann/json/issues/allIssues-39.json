[{"url": "https://api.github.com/repos/nlohmann/json/issues/45", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/45/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/45/events", "html_url": "https://github.com/nlohmann/json/issues/45", "id": 60506866, "node_id": "MDU6SXNzdWU2MDUwNjg2Ng==", "number": 45, "title": "Add count member function", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2015-03-10T14:23:22Z", "updated_at": "2016-11-13T22:38:09Z", "closed_at": "2015-03-22T18:07:48Z", "author_association": "NONE", "body": "A typical operation is to find if a `json` object has a given key, this is typically done like:\n\n``` c++\njson j;\nbool has_key = j.find(\"key\") != j.end();\n```\n\nThe standard containers (`std::map`, `std::set`,...) offer a `count` member function that counts the number of occurrences of a key, such that one can:\n\n``` c++\nstd::map<std::string, int> m;\nbool has_key = m.count(\"key\");  // -> count == 0? false : true\n```\n\nIt would be nice to have something similar since this is a very common operation.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/44", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/44/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/44/events", "html_url": "https://github.com/nlohmann/json/issues/44", "id": 59815590, "node_id": "MDU6SXNzdWU1OTgxNTU5MA==", "number": 44, "title": "Problem getting vector (array) of strings", "user": {"login": "amirmasoudabdol", "id": 1290841, "node_id": "MDQ6VXNlcjEyOTA4NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1290841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirmasoudabdol", "html_url": "https://github.com/amirmasoudabdol", "followers_url": "https://api.github.com/users/amirmasoudabdol/followers", "following_url": "https://api.github.com/users/amirmasoudabdol/following{/other_user}", "gists_url": "https://api.github.com/users/amirmasoudabdol/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirmasoudabdol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirmasoudabdol/subscriptions", "organizations_url": "https://api.github.com/users/amirmasoudabdol/orgs", "repos_url": "https://api.github.com/users/amirmasoudabdol/repos", "events_url": "https://api.github.com/users/amirmasoudabdol/events{/privacy}", "received_events_url": "https://api.github.com/users/amirmasoudabdol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2015-03-04T15:44:35Z", "updated_at": "2015-04-09T08:02:49Z", "closed_at": "2015-04-08T20:31:55Z", "author_association": "NONE", "body": "Considering the JSON below,\n\n``` json\n{\n     \"names\": [\"Tim\", \"Tom\"],\n     \"num\": [1, 2]\n}\n```\n\n I want to get a vector of string. I realized that I could only use `auto a = json[\"name\"]` and then process it using for-range loop. However, if I want to explicitly define the return type then I will get an error. For instance, both `vector<string> names = j[\"names\"]` and `vector<string> names = j[\"names\"].get<vector<string>>()` will give me an error:\n\n```\n./json.hpp:829:24: error: no matching constructor for initialization of 'std::__1::vector<std::__1::basic_string<char>,\n      std::__1::allocator<std::__1::basic_string<char> > >'\n                return T(m_value.array->begin(), m_value.array->end());\n```\n\nI can see that json library couldn't cast to `vector<string>`; however, it will work if I want to get `num` even explicitly like this: `vector<float> f = j[\"num\"].get<vector<float>>()`.\n\nNow, I'm wondering if I am doing it wrong or it's not implemented?\n\nThanks,\nAmir.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/43", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/43/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/43/events", "html_url": "https://github.com/nlohmann/json/issues/43", "id": 59796735, "node_id": "MDU6SXNzdWU1OTc5NjczNQ==", "number": 43, "title": "Compilation error due to assuming that private=public", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2015-03-04T13:23:53Z", "updated_at": "2015-03-22T18:18:25Z", "closed_at": "2015-03-22T18:18:25Z", "author_association": "NONE", "body": "The snippet to reproduce the error:\n\n``` c++\n  struct A {\n    nlohmann::json j;\n    auto has_entry(std::string n) {\n      return j.find(n) != j.end() ? true : false;\n    }\n  };\n```\n\nwhat the error looks like:\n\n``` shell\nsrc/json.hpp:1073:20: error: 'm_it' is a private member of 'nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long,\n      double, std::allocator>::const_iterator'\n            result.m_it.object_iterator = m_value.object->find(key);\n                   ^\n```\n\nThis is not catched by the unit tests because they are compiled by defining `private=public`. \n\nA \"better\" way to do that could be  to have a separate file only for those tests that \"need\" `private=public`.\n\nThis _might be_ clang 3.6 specific, since I'm the only one who seems to be having problems. \n\nI worked around this issue by including the library as follows:\n\n``` c++\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wfloat-equal\"\n#pragma clang diagnostic ignored \"-Wdeprecated\"\n#define private public\n#include <json.hpp>\n#define private private\n#pragma clang diagnostic pop\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/42", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/42/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/42/events", "html_url": "https://github.com/nlohmann/json/issues/42", "id": 59792155, "node_id": "MDU6SXNzdWU1OTc5MjE1NQ==", "number": 42, "title": "Use of deprecated implicit copy constructor", "user": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2015-03-04T12:38:15Z", "updated_at": "2015-03-23T22:04:07Z", "closed_at": "2015-03-23T22:03:54Z", "author_association": "NONE", "body": "Appears when `-Wdeprecated` is enabled on clang.\n\n``` shell\nsrc/json.hpp:2076:26: warning: definition of implicit copy constructor for 'iterator' is deprecated because it has a user-declared copy assignment\n      operator [-Wdeprecated]\n        inline iterator& operator=(const iterator& other) noexcept\n                         ^\ntest/unit.cpp:2471:37: note: implicit copy constructor for 'iterator' first required here\n                json::iterator it = j.begin();\n\nIn file included from test/unit.cpp:13:\nsrc/json.hpp:2579:32: warning: definition of implicit copy constructor for 'const_iterator' is deprecated because it has a user-declared copy\n      assignment operator [-Wdeprecated]\n        inline const_iterator& operator=(const const_iterator& other) noexcept\n                               ^\ntest/unit.cpp:2496:38: note: implicit copy constructor for 'const_iterator' first required here\n                json::const_iterator it = j_const.begin();\n                                     ^\n```\n\nThere are also some warnings involving floating point comparisons when `Wfloat-equal` is enabled:\n\n``` shell\nsrc/json.hpp:1567:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]\n                    return lhs.m_value.number_float == static_cast<number_float_t>(rhs.m_value.number_integer);\n                           ~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntest/unit.cpp:127:21: note: in instantiation of member function 'nlohmann::operator==' requested here\n            CHECK(j == j_reference);\n                    ^\ntest/catch.hpp:8925:44: note: expanded from macro 'CHECK'\n#define CHECK( expr ) INTERNAL_CATCH_TEST( expr, Catch::ResultDisposition::ContinueOnFailure, \"CHECK\" )\n                                           ^\ntest/catch.hpp:1484:39: note: expanded from macro 'INTERNAL_CATCH_TEST'\n    } while( Catch::isTrue( false && (expr) ) ) // expr here is never evaluated at runtime but it forces the compiler to give it a look\n                                      ^\nIn file included from test/unit.cpp:13:\nsrc/json.hpp:1571:53: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]\n                    return lhs.m_value.number_float == rhs.m_value.number_float;\n                           ~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/json.hpp:4235:35: warning: comparing floating point with == or != is unsafe [-Wfloat-equal]\n                    if (float_val == int_val)\n                        ~~~~~~~~~ ^  ~~~~~~~\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/41", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/41/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/41/events", "html_url": "https://github.com/nlohmann/json/pull/41", "id": 59564873, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAzMjkxMzM=", "number": 41, "title": "Add parser callback with the ability to filter results.", "user": {"login": "aburgh", "id": 191582, "node_id": "MDQ6VXNlcjE5MTU4Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/191582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aburgh", "html_url": "https://github.com/aburgh", "followers_url": "https://api.github.com/users/aburgh/followers", "following_url": "https://api.github.com/users/aburgh/following{/other_user}", "gists_url": "https://api.github.com/users/aburgh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aburgh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aburgh/subscriptions", "organizations_url": "https://api.github.com/users/aburgh/orgs", "repos_url": "https://api.github.com/users/aburgh/repos", "events_url": "https://api.github.com/users/aburgh/events{/privacy}", "received_events_url": "https://api.github.com/users/aburgh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 14, "created_at": "2015-03-02T22:49:01Z", "updated_at": "2015-05-10T21:47:51Z", "closed_at": "2015-05-06T17:51:03Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/41", "html_url": "https://github.com/nlohmann/json/pull/41", "diff_url": "https://github.com/nlohmann/json/pull/41.diff", "patch_url": "https://github.com/nlohmann/json/pull/41.patch"}, "body": "This request builds on the \"incremental\" pull request. I separated the two in case you find this change objectionable. The changes implement a callback to a user-provided function (which can be a closure) to notify the user of key parser events: entering object and array elements, closing object and array elements, parsing an object key, and parsing a value. This enables processing elements as they are parsed, for example to provide progress feedback. More importantly, the user function returns a bool to indicate whether to keep the value. This can be used to filter the accumulated elements to reduce memory consumption. There is a default callback provided, so it existing code should compile and work as before.\n\nBelow is an example use case. It parses a JSON file that consists of an array (which is inside a simple object) of a large number of objects. The example just pretty-prints the result, discarding all dictionaries at a depth of 2, but it could do more interesting processing. Without the callback, a 4.1 MB test file uses 12.5 MB of memory. With the callback, it peaks at around 680 KB, most of which is process overhead.\n\n``` C++\nusing namespace std;\nusing json = nlohmann::json;\n\nstatic const auto tab = '\\t';\nifstream stream(\"/tmp/test/json/data.json\");\n\n...\n{\n        bool keyed = false;\n\n        json j = json::parse(stream, [&keyed] (int depth, json::parse_event_t event, const json& element) -> bool {\n\n            switch (event) {\n                case json::parse_event_t::object_start:\n                    if (not keyed)\n                        for (int i = 0; i < depth; i++) cout << tab;\n                    cout << '{' << endl;\n                    keyed = false;\n                    break;\n\n                case json::parse_event_t::object_end:\n                    for (int i = 0; i < depth; i++) cout << tab;\n                    cout << '}' << endl;\n                    if (depth == 2) return false;\n                    break;\n\n                case json::parse_event_t::array_start:\n                    if (not keyed)\n                        for (int i = 0; i < depth; i++) cout << tab;\n                    cout << '[' << endl;\n                    keyed = false;\n                    break;\n\n                case json::parse_event_t::array_end:\n                    for (int i = 0; i < depth; i++) cout << tab;\n                    cout << ']' << endl;\n                    break;\n\n                case json::parse_event_t::key:\n                    for (int i = 0; i < depth; i++) cout << tab;\n                    cout << element << \" = \";\n                    keyed = true;\n                    break;\n\n                case json::parse_event_t::value:\n                    if (keyed) {\n                        cout << element << endl;\n                    }\n                    else {\n                        for (int i = 0; i < depth; i++) cout << tab;\n                        cout << element << endl;\n                    }\n                    keyed = false;\n                    break;\n\n                default:\n                    break;\n            }\n            return true;\n        });\n    }\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/40", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/40/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/40/events", "html_url": "https://github.com/nlohmann/json/pull/40", "id": 59393102, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAyNDA4ODA=", "number": 40, "title": "Parse streams incrementally.", "user": {"login": "aburgh", "id": 191582, "node_id": "MDQ6VXNlcjE5MTU4Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/191582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aburgh", "html_url": "https://github.com/aburgh", "followers_url": "https://api.github.com/users/aburgh/followers", "following_url": "https://api.github.com/users/aburgh/following{/other_user}", "gists_url": "https://api.github.com/users/aburgh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aburgh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aburgh/subscriptions", "organizations_url": "https://api.github.com/users/aburgh/orgs", "repos_url": "https://api.github.com/users/aburgh/repos", "events_url": "https://api.github.com/users/aburgh/events{/privacy}", "received_events_url": "https://api.github.com/users/aburgh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-03-01T11:48:49Z", "updated_at": "2015-05-10T21:47:52Z", "closed_at": "2015-03-24T16:57:40Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/40", "html_url": "https://github.com/nlohmann/json/pull/40", "diff_url": "https://github.com/nlohmann/json/pull/40.diff", "patch_url": "https://github.com/nlohmann/json/pull/40.patch"}, "body": "I did not update `src/json.hpp` because I get different indentation results than the existing version.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/39", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/39/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/39/events", "html_url": "https://github.com/nlohmann/json/issues/39", "id": 59371044, "node_id": "MDU6SXNzdWU1OTM3MTA0NA==", "number": 39, "title": "Printing attribute names", "user": {"login": "luxe", "id": 1312081, "node_id": "MDQ6VXNlcjEzMTIwODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1312081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luxe", "html_url": "https://github.com/luxe", "followers_url": "https://api.github.com/users/luxe/followers", "following_url": "https://api.github.com/users/luxe/following{/other_user}", "gists_url": "https://api.github.com/users/luxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/luxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luxe/subscriptions", "organizations_url": "https://api.github.com/users/luxe/orgs", "repos_url": "https://api.github.com/users/luxe/repos", "events_url": "https://api.github.com/users/luxe/events{/privacy}", "received_events_url": "https://api.github.com/users/luxe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2015-03-01T01:44:00Z", "updated_at": "2016-11-13T22:38:20Z", "closed_at": "2015-03-26T17:01:31Z", "author_association": "CONTRIBUTOR", "body": "What would be the best way to iterate over a json object and print the attribute names?  \nMy goal would be to have something like this:  \n\n**example json:**  \n\n``` json\n{\n\"example\": {\n    \"a\": \"hello\",\n    \"b\": \"world\",\n    \"c\": \"text\"\n  }\n}\n```\n\n**example printing code:**  \n\n``` cpp\nauto j = nlohmann::json::parse(Read_Entire_File_Into_String(\"example.json\"));\nauto element = j[\"example\"];\nfor (auto const& it: element) {\n    std::cout << it.attribute_name() << std::endl;\n}\n// I made up 'Read_Entire_File_Into_String', but it does what you'd expect.\n// the attribute_name() method doesn't exist, but I wish that it had.\n```\n\n**example results:**  \n\n```\na\nb\nc\n```\n\nNot everything has an attribute name, in which case, it could return an empty string, throw an exception, or return std::optional.  \n\nI thought this might be easy to implement, but it appears that all of the attribute names are stored in the parent object, which means that when we iterate over an object, each iterator points to an object that has no way of finding out its own attribute name.  \n\nfor example, if I were to edit `json.hpp` and give the `basic_json` class this public member function:  \n\n``` cpp\n    inline string_t attribute_name() const noexcept\n    {\n        std::string str;\n        if (m_type == value_t::object){\n            for (auto i = m_value.object->cbegin(); i != m_value.object->cend(); ++i){\n                str += escape_string(i->first) + \" \";\n            }\n        }\n\n        return str;\n    }\n```\n\nand run client code like this:  \n\n``` cpp\n#include \"json.hpp\"\n#include <iostream>\n\nvoid Recursive_Print(nlohmann::json const& element, unsigned int depth);\n\nint main(){\n  auto element = nlohmann::json::parse(Read_Entire_File_Into_String(\"changelog.json\"));\n\n  if (element.is_null()){ std::cout << \"null \" << element.attribute_name() << std::endl;}\n  if (element.is_boolean()){std::cout << \"bool \" << element.attribute_name() << std::endl;}\n  if (element.is_number()){std::cout << \"number \" << element.attribute_name() << std::endl;}\n  if (element.is_object()){std::cout << \"object \" << element.attribute_name() << std::endl;}\n  if (element.is_array()){std::cout << \"array \" << element.attribute_name() << std::endl;}\n  if (element.is_string()){std::cout << \"string \" << element.attribute_name() << std::endl;}\n}\nvoid Recursive_Print(nlohmann::json const& element, unsigned int depth){\n  for (auto const& it: element) {\n    Print_Character_N_Times('-',depth); \n    if (it.is_null()){ std::cout << \"null \" << it.attribute_name() << std::endl;}\n    if (it.is_boolean()){std::cout << \"bool \" << it.attribute_name() << std::endl;}\n    if (it.is_number()){std::cout << \"number \" << it.attribute_name() << std::endl;}\n    if (it.is_object()){std::cout << \"object \" << it.attribute_name() << std::endl; Recursive_Print(it,++depth);}\n    if (it.is_array()){std::cout << \"array \" << it.attribute_name() << std::endl; Recursive_Print(it,++depth);}\n    if (it.is_string()){std::cout << \"string \" << it.attribute_name() << std::endl;}\n  }\n}\n//PRETTY MESSY.  BUT YOU GET THE GIST\n```\n\n**it would result in the following**:  \n\n```\nobject example \n-object a b c \n--string \n--string \n--string\n```\n\nI think that illustrates my point about attribute names being stored in the parents.\n\nAnyway, do you have any thoughts on how I could accomplish this?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/38", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/38/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/38/events", "html_url": "https://github.com/nlohmann/json/pull/38", "id": 59349361, "node_id": "MDExOlB1bGxSZXF1ZXN0MzAyMjcyNTc=", "number": 38, "title": "Feature/small float serialization", "user": {"login": "jrandall", "id": 458361, "node_id": "MDQ6VXNlcjQ1ODM2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/458361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrandall", "html_url": "https://github.com/jrandall", "followers_url": "https://api.github.com/users/jrandall/followers", "following_url": "https://api.github.com/users/jrandall/following{/other_user}", "gists_url": "https://api.github.com/users/jrandall/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrandall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrandall/subscriptions", "organizations_url": "https://api.github.com/users/jrandall/orgs", "repos_url": "https://api.github.com/users/jrandall/repos", "events_url": "https://api.github.com/users/jrandall/events{/privacy}", "received_events_url": "https://api.github.com/users/jrandall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-28T17:20:15Z", "updated_at": "2015-03-23T19:28:18Z", "closed_at": "2015-03-23T19:15:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/38", "html_url": "https://github.com/nlohmann/json/pull/38", "diff_url": "https://github.com/nlohmann/json/pull/38.diff", "patch_url": "https://github.com/nlohmann/json/pull/38.patch"}, "body": "Adds a test for small floats (which previously failed) along with a fix \nfor dump() that makes the test pass. \n\nNow uses std::snprintf() to generate a \"%.15g\" formatted string\nfor JSON values of type number_float. 15 decimals digits are\nenough to round-trip an IEEE 754 double from string->double->string\nand get an identical result.\n\nstd::snprintf is called twice. Once to determine the required\nbuffer size and then again after allocating a buffer of that\nsize.\n\nNote that the buffer size _could_ be hardcoded for better\nperformance. \"%.15g\" should result in strings of maximum length\n23, plus one character for the terminating null for a buffer size\nof 24. Let me know if you'd like me to switch to a fixed buffer \nsize to avoid the extra call to snprintf and the overhead of \ndynamic memory allocation. \n\nFixes #37 \n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/37", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/37/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/37/events", "html_url": "https://github.com/nlohmann/json/issues/37", "id": 59345378, "node_id": "MDU6SXNzdWU1OTM0NTM3OA==", "number": 37, "title": "dumping a small number_float just outputs 0.000000", "user": {"login": "jrandall", "id": 458361, "node_id": "MDQ6VXNlcjQ1ODM2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/458361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrandall", "html_url": "https://github.com/jrandall", "followers_url": "https://api.github.com/users/jrandall/followers", "following_url": "https://api.github.com/users/jrandall/following{/other_user}", "gists_url": "https://api.github.com/users/jrandall/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrandall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrandall/subscriptions", "organizations_url": "https://api.github.com/users/jrandall/orgs", "repos_url": "https://api.github.com/users/jrandall/repos", "events_url": "https://api.github.com/users/jrandall/events{/privacy}", "received_events_url": "https://api.github.com/users/jrandall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-28T15:27:34Z", "updated_at": "2015-03-23T19:15:50Z", "closed_at": "2015-03-23T19:15:50Z", "author_association": "CONTRIBUTOR", "body": "I expected that small doubles would be represented in dumped JSON as a javascript number in scientific notation, but instead it just appears as `0.000000` \n\nExample:\n\n``` c++\n#include <iostream>\n\n#include \"json.hpp\"\nusing json = nlohmann::json;\n\nmain() {\n  double d = 1.23456e-89;\n  json j = d;\n\n  std::cout << \"d=\" << d << \" j=\" << j << std::endl;\n}\n```\n\nExpected output: `d=1.23456e-89 j=1.23456e-89`\n\nActual output: `d=1.23456e-89 j=0.000000`\n\nLooking at the json code, it appears this is due to using `std::to_string()` for all numbers, which is equivalent to `sprintf(\"%f\", ...)` whereas `sprintf(\"%g\", ...)` would be more appropriate. To fix this, the dump function would need to use something other than to_string to format floating point numbers. I'll try to put together a PR for this although C++ is far from my best language. \n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/36", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/36/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/36/events", "html_url": "https://github.com/nlohmann/json/pull/36", "id": 58142748, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk1NzIwOTA=", "number": 36, "title": "template version with re2c scanner", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-18T22:57:37Z", "updated_at": "2015-02-18T23:04:59Z", "closed_at": "2015-02-18T23:04:28Z", "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/36", "html_url": "https://github.com/nlohmann/json/pull/36", "diff_url": "https://github.com/nlohmann/json/pull/36.diff", "patch_url": "https://github.com/nlohmann/json/pull/36.patch"}, "body": "- _Changed:_ In the generic class `basic_json`, all JSON value types (array, object, string, bool, integer number, and floating-point) are now **templated**. That is, you can choose whether you like a `std::list` for your arrays or an `std::unordered_map` for your objects. The specialization `json` sets some reasonable defaults.\n- _Changed:_ The library now consists of a single header, called `json.hpp`. Consequently, build systems such as Automake or CMake are not any longer required.\n- _Changed:_ The **deserialization** is now supported by a lexer generated with [re2c](http://re2c.org) from file [`src/json.hpp.re2c`](https://github.com/nlohmann/json/blob/master/src/json.hpp.re2c). As a result, we follow the JSON specification more strictly. Note neither the tool re2c nor its input are required to use the class.\n- _Added:_ The library now satisfies the [**ReversibleContainer**](http://en.cppreference.com/w/cpp/concept/ReversibleContainer) requirement. It hence provides four different iterators (`iterator`, `const_iterator`, `reverse_iterator`, and `const_reverse_iterator`), comparison functions, `swap()`, `size()`, `max_size()`, and `empty()` member functions.\n- _Added_: The class uses **user-defined allocators** which default to `std::allocator`, but can be templated via parameter `Allocator`.\n- _Added:_ To simplify pretty-printing, the `std::setw` **stream manipulator** has been overloaded to set the desired indentation. Pretty-printing a JSON object `j` is as simple as `std::cout << std::setw(4) << j << '\\n'.\n- _Changed_: The type `json::value_t::number` is now called `json::value_t::number_integer` to be more symmetric compared to `json::value_t::number_float`.\n- _Removed:_ The `key()` and `value()` member functions for object iterators were nonstandard and yielded more problems than benefits. They were removed from the library.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/35", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/35/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/35/events", "html_url": "https://github.com/nlohmann/json/pull/35", "id": 56656371, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg3MTU5MDE=", "number": 35, "title": "fixed duplicate symbols errors on header-only version. issue #16", "user": {"login": "mnpk", "id": 6612387, "node_id": "MDQ6VXNlcjY2MTIzODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6612387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mnpk", "html_url": "https://github.com/mnpk", "followers_url": "https://api.github.com/users/mnpk/followers", "following_url": "https://api.github.com/users/mnpk/following{/other_user}", "gists_url": "https://api.github.com/users/mnpk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mnpk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mnpk/subscriptions", "organizations_url": "https://api.github.com/users/mnpk/orgs", "repos_url": "https://api.github.com/users/mnpk/repos", "events_url": "https://api.github.com/users/mnpk/events{/privacy}", "received_events_url": "https://api.github.com/users/mnpk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-05T11:07:40Z", "updated_at": "2015-02-05T18:16:58Z", "closed_at": "2015-02-05T18:16:58Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/35", "html_url": "https://github.com/nlohmann/json/pull/35", "diff_url": "https://github.com/nlohmann/json/pull/35.diff", "patch_url": "https://github.com/nlohmann/json/pull/35.patch"}, "body": "I got duplicate symbols errors when include header-only version in more than one cpp files.\nSo I just add inline keyword before method defines to fix this. Link errors disappeared. Is this enough to close #16?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/34", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/34/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/34/events", "html_url": "https://github.com/nlohmann/json/pull/34", "id": 56527389, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg2Mzg4OTk=", "number": 34, "title": "(partial) msvc support", "user": {"login": "Zoadian", "id": 880071, "node_id": "MDQ6VXNlcjg4MDA3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/880071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoadian", "html_url": "https://github.com/Zoadian", "followers_url": "https://api.github.com/users/Zoadian/followers", "following_url": "https://api.github.com/users/Zoadian/following{/other_user}", "gists_url": "https://api.github.com/users/Zoadian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoadian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoadian/subscriptions", "organizations_url": "https://api.github.com/users/Zoadian/orgs", "repos_url": "https://api.github.com/users/Zoadian/repos", "events_url": "https://api.github.com/users/Zoadian/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoadian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-04T13:42:30Z", "updated_at": "2015-02-05T18:31:42Z", "closed_at": "2015-02-05T18:21:09Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/34", "html_url": "https://github.com/nlohmann/json/pull/34", "diff_url": "https://github.com/nlohmann/json/pull/34.diff", "patch_url": "https://github.com/nlohmann/json/pull/34.patch"}, "body": "some changes to support compilation with msvc120\nI used .h and .cc files directly without cmake.\n\nalso line 2374 is probably wrong\n\nso this is just the first step to support msvc.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/33", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/33/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/33/events", "html_url": "https://github.com/nlohmann/json/pull/33", "id": 55440022, "node_id": "MDExOlB1bGxSZXF1ZXN0MjgwMDI0Njc=", "number": 33, "title": "more descriptive documentation in example", "user": {"login": "luxe", "id": 1312081, "node_id": "MDQ6VXNlcjEzMTIwODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1312081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luxe", "html_url": "https://github.com/luxe", "followers_url": "https://api.github.com/users/luxe/followers", "following_url": "https://api.github.com/users/luxe/following{/other_user}", "gists_url": "https://api.github.com/users/luxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/luxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luxe/subscriptions", "organizations_url": "https://api.github.com/users/luxe/orgs", "repos_url": "https://api.github.com/users/luxe/repos", "events_url": "https://api.github.com/users/luxe/events{/privacy}", "received_events_url": "https://api.github.com/users/luxe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-26T02:00:36Z", "updated_at": "2015-01-26T06:51:55Z", "closed_at": "2015-01-26T06:51:40Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/33", "html_url": "https://github.com/nlohmann/json/pull/33", "diff_url": "https://github.com/nlohmann/json/pull/33.diff", "patch_url": "https://github.com/nlohmann/json/pull/33.patch"}, "body": "I wasn't sure what that parameter was at first glance\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/32", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/32/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/32/events", "html_url": "https://github.com/nlohmann/json/issues/32", "id": 54837983, "node_id": "MDU6SXNzdWU1NDgzNzk4Mw==", "number": 32, "title": "find is error", "user": {"login": "lonerwolf", "id": 514169, "node_id": "MDQ6VXNlcjUxNDE2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/514169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lonerwolf", "html_url": "https://github.com/lonerwolf", "followers_url": "https://api.github.com/users/lonerwolf/followers", "following_url": "https://api.github.com/users/lonerwolf/following{/other_user}", "gists_url": "https://api.github.com/users/lonerwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/lonerwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lonerwolf/subscriptions", "organizations_url": "https://api.github.com/users/lonerwolf/orgs", "repos_url": "https://api.github.com/users/lonerwolf/repos", "events_url": "https://api.github.com/users/lonerwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/lonerwolf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2015-01-20T02:55:34Z", "updated_at": "2015-01-24T19:43:08Z", "closed_at": "2015-01-24T19:43:08Z", "author_association": "NONE", "body": "json o;\no[\"foo\"] = 23;\no[\"bar\"] = false;\no[\"baz\"] = 3.141;\n\n// find an entry\nif (o.find(\"foo\") != o.end()) {\n  // there is an entry with key \"foo\"\n}\n\nin my example\n\nkey:\"Heart_COL\"\ntype:\"HEX\"\nval:\"DF01140234340000\"\n\nauto it = jsonData.find(\"type\");\nstd::cout << *it << '\\n';\nthe printf data is \"Heart_COL\"\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/31", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/31/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/31/events", "html_url": "https://github.com/nlohmann/json/issues/31", "id": 54680644, "node_id": "MDU6SXNzdWU1NDY4MDY0NA==", "number": 31, "title": "Avoid using spaces when encoding without pretty print", "user": {"login": "alvarolb", "id": 1141353, "node_id": "MDQ6VXNlcjExNDEzNTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1141353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvarolb", "html_url": "https://github.com/alvarolb", "followers_url": "https://api.github.com/users/alvarolb/followers", "following_url": "https://api.github.com/users/alvarolb/following{/other_user}", "gists_url": "https://api.github.com/users/alvarolb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvarolb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvarolb/subscriptions", "organizations_url": "https://api.github.com/users/alvarolb/orgs", "repos_url": "https://api.github.com/users/alvarolb/repos", "events_url": "https://api.github.com/users/alvarolb/events{/privacy}", "received_events_url": "https://api.github.com/users/alvarolb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-01-18T00:09:10Z", "updated_at": "2017-09-11T13:34:51Z", "closed_at": "2015-01-18T09:58:51Z", "author_association": "NONE", "body": "When encoding the JSON string with the dump method, it will insert some spaces (after \":\" or \",\") even without pretty print active. It will add some undesired extra bytes when the data is just going over the wire. In my case it is important as I am encoding JSON Web Tokens (JWT), and every byte its important as the token is being transmitted in every request.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/30", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/30/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/30/events", "html_url": "https://github.com/nlohmann/json/issues/30", "id": 54678992, "node_id": "MDU6SXNzdWU1NDY3ODk5Mg==", "number": 30, "title": "Cannot encode long numbers", "user": {"login": "alvarolb", "id": 1141353, "node_id": "MDQ6VXNlcjExNDEzNTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1141353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvarolb", "html_url": "https://github.com/alvarolb", "followers_url": "https://api.github.com/users/alvarolb/followers", "following_url": "https://api.github.com/users/alvarolb/following{/other_user}", "gists_url": "https://api.github.com/users/alvarolb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvarolb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvarolb/subscriptions", "organizations_url": "https://api.github.com/users/alvarolb/orgs", "repos_url": "https://api.github.com/users/alvarolb/repos", "events_url": "https://api.github.com/users/alvarolb/events{/privacy}", "received_events_url": "https://api.github.com/users/alvarolb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-17T23:04:02Z", "updated_at": "2016-11-13T22:38:20Z", "closed_at": "2015-01-21T16:45:33Z", "author_association": "NONE", "body": "I cannot encode a unsigned long or unsigned long long value without casting it to int, with its corresponding overflow. It is required, i.e., for storing a timestamp in milliseconds from epoch.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/29", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/29/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/29/events", "html_url": "https://github.com/nlohmann/json/pull/29", "id": 54648036, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjc1NTA3NzM=", "number": 29, "title": "support visual studio compilers (2013 & 2014) on windows", "user": {"login": "kirkshoop", "id": 982716, "node_id": "MDQ6VXNlcjk4MjcxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/982716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirkshoop", "html_url": "https://github.com/kirkshoop", "followers_url": "https://api.github.com/users/kirkshoop/followers", "following_url": "https://api.github.com/users/kirkshoop/following{/other_user}", "gists_url": "https://api.github.com/users/kirkshoop/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirkshoop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirkshoop/subscriptions", "organizations_url": "https://api.github.com/users/kirkshoop/orgs", "repos_url": "https://api.github.com/users/kirkshoop/repos", "events_url": "https://api.github.com/users/kirkshoop/events{/privacy}", "received_events_url": "https://api.github.com/users/kirkshoop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-01-17T02:47:24Z", "updated_at": "2015-01-26T20:18:12Z", "closed_at": "2015-01-26T20:18:12Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/29", "html_url": "https://github.com/nlohmann/json/pull/29", "diff_url": "https://github.com/nlohmann/json/pull/29.diff", "patch_url": "https://github.com/nlohmann/json/pull/29.patch"}, "body": "If you like, login to http://appveyor.com to add windows CI for the json project. the configuration is in appveyor.yml\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/28", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/28/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/28/events", "html_url": "https://github.com/nlohmann/json/issues/28", "id": 54226464, "node_id": "MDU6SXNzdWU1NDIyNjQ2NA==", "number": 28, "title": "segmentation fault when iterating over empty arrays/objects", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2015-01-13T18:06:51Z", "updated_at": "2015-01-13T18:12:34Z", "closed_at": "2015-01-13T18:07:58Z", "author_association": "OWNER", "body": "From an email:\n\n> Anyway, a quite serious bug is when one tries to iterate over a empty container (array or object), which results in a segmentation fault due to a 0x0 this pointer. I fixed this by changing the iterator constructors to check if the container is empty, and in that case set the \u201cobject_\u201d pointer to a nullptr.\n\nThe proposed code fix:\n\n``` cpp\njson::const_iterator::const_iterator(const json* j) : object_(j)\n{\n    if (object_ != nullptr)\n    {\n        if (object_->type_ == value_type::array)\n        {\n            if (object_->empty())\n// Explicit empty check added\n            {\n                object_ = nullptr;\n            }\n            else\n            {\n                vi_ = new array_t::const_iterator(object_->value_.array->begin());\n            }\n        }\n        else if (object_->type_ == value_type::object)\n// *else if* is mandatory since the previous\n        {\n// block can set pointer to nullptr!\n            if (object_->empty())\n// Explicit empty check added\n            {\n                object_ = nullptr;\n            }\n            else\n            {\n                oi_ = new object_t::const_iterator(object_->value_.object->begin());\n            }\n        }\n    }\n}\n```\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/27", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/27/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/27/events", "html_url": "https://github.com/nlohmann/json/issues/27", "id": 54162671, "node_id": "MDU6SXNzdWU1NDE2MjY3MQ==", "number": 27, "title": "Creating an empty array", "user": {"login": "edi9999", "id": 2071336, "node_id": "MDQ6VXNlcjIwNzEzMzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2071336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edi9999", "html_url": "https://github.com/edi9999", "followers_url": "https://api.github.com/users/edi9999/followers", "following_url": "https://api.github.com/users/edi9999/following{/other_user}", "gists_url": "https://api.github.com/users/edi9999/gists{/gist_id}", "starred_url": "https://api.github.com/users/edi9999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edi9999/subscriptions", "organizations_url": "https://api.github.com/users/edi9999/orgs", "repos_url": "https://api.github.com/users/edi9999/repos", "events_url": "https://api.github.com/users/edi9999/events{/privacy}", "received_events_url": "https://api.github.com/users/edi9999/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2015-01-13T08:26:38Z", "updated_at": "2016-11-13T22:38:20Z", "closed_at": "2015-01-24T19:42:27Z", "author_association": "NONE", "body": "I'm using the following code right now:\n\n```\njson customers;\n\nfor (...)\n{\n  customers.push_back(...)\n}\n\ncout << customers;\n```\n\nHowever, if the for loop doesnt happen, I would like to return an empty array (eg `[]`)\n\nIs they an other way to get this behaviour without doing `json customers= json::parse(\"[]\");`  ?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/26", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/26/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/26/events", "html_url": "https://github.com/nlohmann/json/pull/26", "id": 54048339, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcxOTA3NjE=", "number": 26, "title": "Fix string conversion under Clang", "user": {"login": "wancw", "id": 28702, "node_id": "MDQ6VXNlcjI4NzAy", "avatar_url": "https://avatars3.githubusercontent.com/u/28702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wancw", "html_url": "https://github.com/wancw", "followers_url": "https://api.github.com/users/wancw/followers", "following_url": "https://api.github.com/users/wancw/following{/other_user}", "gists_url": "https://api.github.com/users/wancw/gists{/gist_id}", "starred_url": "https://api.github.com/users/wancw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wancw/subscriptions", "organizations_url": "https://api.github.com/users/wancw/orgs", "repos_url": "https://api.github.com/users/wancw/repos", "events_url": "https://api.github.com/users/wancw/events{/privacy}", "received_events_url": "https://api.github.com/users/wancw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-12T12:30:02Z", "updated_at": "2015-01-12T21:54:39Z", "closed_at": "2015-01-12T21:54:39Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/26", "html_url": "https://github.com/nlohmann/json/pull/26", "diff_url": "https://github.com/nlohmann/json/pull/26.diff", "patch_url": "https://github.com/nlohmann/json/pull/26.patch"}, "body": "Explicit conversion to `std::string` by `static_cast<>` causes compilation error when using Clang (3.5).\n(Casting to `const std::string` doesn't work either.)\n\nThis PR fixed it by removing `const` from the casting operator.\nAnd I think it also makes casting operator more consistent with `get<>()` method.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/25", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/25/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/25/events", "html_url": "https://github.com/nlohmann/json/issues/25", "id": 53993772, "node_id": "MDU6SXNzdWU1Mzk5Mzc3Mg==", "number": 25, "title": "Custom allocator support", "user": {"login": "Teemperor", "id": 736001, "node_id": "MDQ6VXNlcjczNjAwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/736001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Teemperor", "html_url": "https://github.com/Teemperor", "followers_url": "https://api.github.com/users/Teemperor/followers", "following_url": "https://api.github.com/users/Teemperor/following{/other_user}", "gists_url": "https://api.github.com/users/Teemperor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Teemperor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Teemperor/subscriptions", "organizations_url": "https://api.github.com/users/Teemperor/orgs", "repos_url": "https://api.github.com/users/Teemperor/repos", "events_url": "https://api.github.com/users/Teemperor/events{/privacy}", "received_events_url": "https://api.github.com/users/Teemperor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-11T14:54:05Z", "updated_at": "2016-11-13T22:38:19Z", "closed_at": "2015-02-18T23:07:26Z", "author_association": "CONTRIBUTOR", "body": "Similar to a STL container json should support a custom allocator.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/24", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/24/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/24/events", "html_url": "https://github.com/nlohmann/json/pull/24", "id": 53971401, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcxNTQ2MDA=", "number": 24, "title": "Fixed dumping of strings", "user": {"login": "Teemperor", "id": 736001, "node_id": "MDQ6VXNlcjczNjAwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/736001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Teemperor", "html_url": "https://github.com/Teemperor", "followers_url": "https://api.github.com/users/Teemperor/followers", "following_url": "https://api.github.com/users/Teemperor/following{/other_user}", "gists_url": "https://api.github.com/users/Teemperor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Teemperor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Teemperor/subscriptions", "organizations_url": "https://api.github.com/users/Teemperor/orgs", "repos_url": "https://api.github.com/users/Teemperor/repos", "events_url": "https://api.github.com/users/Teemperor/events{/privacy}", "received_events_url": "https://api.github.com/users/Teemperor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-10T21:09:32Z", "updated_at": "2015-01-11T13:03:57Z", "closed_at": "2015-01-11T13:03:53Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/24", "html_url": "https://github.com/nlohmann/json/pull/24", "diff_url": "https://github.com/nlohmann/json/pull/24.diff", "patch_url": "https://github.com/nlohmann/json/pull/24.patch"}, "body": "Dumping strings containing special characters such as quotes, backslashes, newlines and so on results in invalid results.\n\nThis patch adds a escaping mechanism that fixes this problem.\n\nA possible (but not required by the standard) escaping of unicode characters is not included in this patch.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/23", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/23/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/23/events", "html_url": "https://github.com/nlohmann/json/pull/23", "id": 53964356, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcxNTE1Njc=", "number": 23, "title": "Added a remark to the readme that coverage is GCC only for now", "user": {"login": "Teemperor", "id": 736001, "node_id": "MDQ6VXNlcjczNjAwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/736001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Teemperor", "html_url": "https://github.com/Teemperor", "followers_url": "https://api.github.com/users/Teemperor/followers", "following_url": "https://api.github.com/users/Teemperor/following{/other_user}", "gists_url": "https://api.github.com/users/Teemperor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Teemperor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Teemperor/subscriptions", "organizations_url": "https://api.github.com/users/Teemperor/orgs", "repos_url": "https://api.github.com/users/Teemperor/repos", "events_url": "https://api.github.com/users/Teemperor/events{/privacy}", "received_events_url": "https://api.github.com/users/Teemperor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-10T17:10:46Z", "updated_at": "2015-01-11T11:47:03Z", "closed_at": "2015-01-11T11:47:00Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/23", "html_url": "https://github.com/nlohmann/json/pull/23", "diff_url": "https://github.com/nlohmann/json/pull/23.diff", "patch_url": "https://github.com/nlohmann/json/pull/23.patch"}, "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/22", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/22/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/22/events", "html_url": "https://github.com/nlohmann/json/pull/22", "id": 53962988, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcxNTA5Njk=", "number": 22, "title": "Unicode escaping", "user": {"login": "Teemperor", "id": 736001, "node_id": "MDQ6VXNlcjczNjAwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/736001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Teemperor", "html_url": "https://github.com/Teemperor", "followers_url": "https://api.github.com/users/Teemperor/followers", "following_url": "https://api.github.com/users/Teemperor/following{/other_user}", "gists_url": "https://api.github.com/users/Teemperor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Teemperor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Teemperor/subscriptions", "organizations_url": "https://api.github.com/users/Teemperor/orgs", "repos_url": "https://api.github.com/users/Teemperor/repos", "events_url": "https://api.github.com/users/Teemperor/events{/privacy}", "received_events_url": "https://api.github.com/users/Teemperor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-01-10T16:27:13Z", "updated_at": "2015-01-11T14:16:50Z", "closed_at": "2015-01-11T14:08:13Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/22", "html_url": "https://github.com/nlohmann/json/pull/22", "diff_url": "https://github.com/nlohmann/json/pull/22.diff", "patch_url": "https://github.com/nlohmann/json/pull/22.patch"}, "body": "Implements the \\uXXXX and \\uXXXX\\uXXXX unicode escape mechanisms of JSON.\n\nThis branch has a problem with code coverage as there is one method which has a untestable case (line 2215).\nThis code is only reachable if\n1. there is a bug somewhere else that calls the function with the wrong argument\n2. we have access to the private method.\n\nSo we need a way to directly access the `codePointToUTF8` method from the test header to get the line coverage back to 100%.\n\nAny recommendation how we do that in a nice way?\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/21", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/21/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/21/events", "html_url": "https://github.com/nlohmann/json/pull/21", "id": 53902783, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcxMjEzODI=", "number": 21, "title": "Implemented the JSON spec for string parsing for everything but the \\uXXXX escaping", "user": {"login": "Teemperor", "id": 736001, "node_id": "MDQ6VXNlcjczNjAwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/736001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Teemperor", "html_url": "https://github.com/Teemperor", "followers_url": "https://api.github.com/users/Teemperor/followers", "following_url": "https://api.github.com/users/Teemperor/following{/other_user}", "gists_url": "https://api.github.com/users/Teemperor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Teemperor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Teemperor/subscriptions", "organizations_url": "https://api.github.com/users/Teemperor/orgs", "repos_url": "https://api.github.com/users/Teemperor/repos", "events_url": "https://api.github.com/users/Teemperor/events{/privacy}", "received_events_url": "https://api.github.com/users/Teemperor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-09T19:06:28Z", "updated_at": "2015-01-09T19:39:46Z", "closed_at": "2015-01-09T19:32:08Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/21", "html_url": "https://github.com/nlohmann/json/pull/21", "diff_url": "https://github.com/nlohmann/json/pull/21.diff", "patch_url": "https://github.com/nlohmann/json/pull/21.patch"}, "body": "Everything that is mentioned in #12 (beside the \\uXXXX escaping) is fixed in this branch.\n\nThe \\uXXXX-PR follows ASAP.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/20", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/20/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/20/events", "html_url": "https://github.com/nlohmann/json/issues/20", "id": 53892153, "node_id": "MDU6SXNzdWU1Mzg5MjE1Mw==", "number": 20, "title": "make the type of the used string container customizable", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-09T17:24:23Z", "updated_at": "2016-11-13T22:38:19Z", "closed_at": "2015-02-18T23:09:35Z", "author_association": "OWNER", "body": "As proposed in http://www.reddit.com/r/cpp/comments/2rbhn3/json_for_modern_c_what_if_json_was_part_of_modern/cnh7ox4, it would be nice to template the string container that is used inside the json class.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/19", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/19/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/19/events", "html_url": "https://github.com/nlohmann/json/pull/19", "id": 53880927, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcxMDc4NTY=", "number": 19, "title": "add the std iterator typedefs to iterator and const_iterator", "user": {"login": "kirkshoop", "id": 982716, "node_id": "MDQ6VXNlcjk4MjcxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/982716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirkshoop", "html_url": "https://github.com/kirkshoop", "followers_url": "https://api.github.com/users/kirkshoop/followers", "following_url": "https://api.github.com/users/kirkshoop/following{/other_user}", "gists_url": "https://api.github.com/users/kirkshoop/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirkshoop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirkshoop/subscriptions", "organizations_url": "https://api.github.com/users/kirkshoop/orgs", "repos_url": "https://api.github.com/users/kirkshoop/repos", "events_url": "https://api.github.com/users/kirkshoop/events{/privacy}", "received_events_url": "https://api.github.com/users/kirkshoop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-09T15:46:15Z", "updated_at": "2015-01-09T16:37:46Z", "closed_at": "2015-01-09T16:37:42Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/19", "html_url": "https://github.com/nlohmann/json/pull/19", "diff_url": "https://github.com/nlohmann/json/pull/19.diff", "patch_url": "https://github.com/nlohmann/json/pull/19.patch"}, "body": "really enjoying this library.\nwhen composing it with another library, I needed the iterators to have the std typedefs.\nThis also required that `json::value_type` be disambiguated in the iterators.\nNOTE: since collections are also supposed to have `value_type`, the enum name may need to change in the future.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/18", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/18/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/18/events", "html_url": "https://github.com/nlohmann/json/pull/18", "id": 53804627, "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwNjIwODY=", "number": 18, "title": "Fixed escaped quotes", "user": {"login": "Teemperor", "id": 736001, "node_id": "MDQ6VXNlcjczNjAwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/736001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Teemperor", "html_url": "https://github.com/Teemperor", "followers_url": "https://api.github.com/users/Teemperor/followers", "following_url": "https://api.github.com/users/Teemperor/following{/other_user}", "gists_url": "https://api.github.com/users/Teemperor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Teemperor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Teemperor/subscriptions", "organizations_url": "https://api.github.com/users/Teemperor/orgs", "repos_url": "https://api.github.com/users/Teemperor/repos", "events_url": "https://api.github.com/users/Teemperor/events{/privacy}", "received_events_url": "https://api.github.com/users/Teemperor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-08T21:40:53Z", "updated_at": "2015-01-09T15:32:44Z", "closed_at": "2015-01-09T15:32:39Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/18", "html_url": "https://github.com/nlohmann/json/pull/18", "diff_url": "https://github.com/nlohmann/json/pull/18.diff", "patch_url": "https://github.com/nlohmann/json/pull/18.patch"}, "body": "Fixes #17 \nAlso added a test to prevent regressions.\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/17", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/17/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/17/events", "html_url": "https://github.com/nlohmann/json/issues/17", "id": 53571891, "node_id": "MDU6SXNzdWU1MzU3MTg5MQ==", "number": 17, "title": "Improper parsing of JSON string \"\\\\\"", "user": {"login": "cmaloney", "id": 751088, "node_id": "MDQ6VXNlcjc1MTA4OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/751088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmaloney", "html_url": "https://github.com/cmaloney", "followers_url": "https://api.github.com/users/cmaloney/followers", "following_url": "https://api.github.com/users/cmaloney/following{/other_user}", "gists_url": "https://api.github.com/users/cmaloney/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmaloney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmaloney/subscriptions", "organizations_url": "https://api.github.com/users/cmaloney/orgs", "repos_url": "https://api.github.com/users/cmaloney/repos", "events_url": "https://api.github.com/users/cmaloney/events{/privacy}", "received_events_url": "https://api.github.com/users/cmaloney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-06T22:27:48Z", "updated_at": "2015-01-10T21:28:23Z", "closed_at": "2015-01-09T15:32:39Z", "author_association": "NONE", "body": "Currently the parser assumes if a '\\' is before a double quote, the double quote isn't the end of the string.\n\nNote that there are more complicated cases like this (and their expansion) which need to be handled properly which probably will take more code to support properly: (\"\\\\\"\", \"\\\\\") of arbitrary length. A reverse search which checks if the number of '\\' preceding the quote is even or odd would do it: https://github.com/nlohmann/json/blob/master/src/json.cc#L2050\n\nPerformance in backslash-heavy strings may suffer a lot though. Might be better to do a pure forward scan of the string counting backslashes as you go (Lots of memory access, but it should all be prefetched + L1 cached by current x86, x64 CPUs).\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/16", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/16/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/16/events", "html_url": "https://github.com/nlohmann/json/issues/16", "id": 53562580, "node_id": "MDU6SXNzdWU1MzU2MjU4MA==", "number": 16, "title": "create a header-only version", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2015-01-06T21:00:12Z", "updated_at": "2016-11-13T22:38:19Z", "closed_at": "2015-02-18T23:07:49Z", "author_association": "OWNER", "body": "As wished in http://www.reddit.com/r/cpp/comments/2rbhn3/json_for_modern_c_what_if_json_was_part_of_modern/cnelnzq:\n\n> I think this would be fare more useful as a header only library. I'm down for sending a PR with the change if you are.\n\nAnd as I wrote:\n\n> Good idea! But I think it would be more useful if there would be a script that reads the source files json.cc and json.h and creates a header-only version. That way, both approaches can be followed at the same time.\n"}]