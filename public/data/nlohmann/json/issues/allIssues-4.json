[{"url": "https://api.github.com/repos/nlohmann/json/issues/1098", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1098/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1098/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1098/events", "html_url": "https://github.com/nlohmann/json/issues/1098", "id": 324244420, "node_id": "MDU6SXNzdWUzMjQyNDQ0MjA=", "number": 1098, "title": "accessing key by reference", "user": {"login": "crusader-mike", "id": 22357016, "node_id": "MDQ6VXNlcjIyMzU3MDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/22357016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusader-mike", "html_url": "https://github.com/crusader-mike", "followers_url": "https://api.github.com/users/crusader-mike/followers", "following_url": "https://api.github.com/users/crusader-mike/following{/other_user}", "gists_url": "https://api.github.com/users/crusader-mike/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusader-mike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusader-mike/subscriptions", "organizations_url": "https://api.github.com/users/crusader-mike/orgs", "repos_url": "https://api.github.com/users/crusader-mike/repos", "events_url": "https://api.github.com/users/crusader-mike/events{/privacy}", "received_events_url": "https://api.github.com/users/crusader-mike/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374233, "node_id": "MDU6TGFiZWw0NjM3NDIzMw==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20enhancement/improvement", "name": "kind: enhancement/improvement", "color": "207de5", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 11, "created_at": "2018-05-18T01:58:22Z", "updated_at": "2018-05-28T01:36:23Z", "closed_at": "2018-05-27T20:26:33Z", "author_association": "NONE", "body": "Is there any way to access `key` in object by reference? Currently `(const_)iterator::key()` returns string by value causing extra copy every time I need to access it.\r\n\r\nIs there any reason why that string gets returned by value?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1097", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1097/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1097/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1097/events", "html_url": "https://github.com/nlohmann/json/issues/1097", "id": 324191756, "node_id": "MDU6SXNzdWUzMjQxOTE3NTY=", "number": 1097, "title": "clang 3.8.0 croaks while trying to compile with debug symbols", "user": {"login": "TurpentineDistillery", "id": 23583218, "node_id": "MDQ6VXNlcjIzNTgzMjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/23583218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurpentineDistillery", "html_url": "https://github.com/TurpentineDistillery", "followers_url": "https://api.github.com/users/TurpentineDistillery/followers", "following_url": "https://api.github.com/users/TurpentineDistillery/following{/other_user}", "gists_url": "https://api.github.com/users/TurpentineDistillery/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurpentineDistillery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurpentineDistillery/subscriptions", "organizations_url": "https://api.github.com/users/TurpentineDistillery/orgs", "repos_url": "https://api.github.com/users/TurpentineDistillery/repos", "events_url": "https://api.github.com/users/TurpentineDistillery/events{/privacy}", "received_events_url": "https://api.github.com/users/TurpentineDistillery/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-17T21:26:09Z", "updated_at": "2018-05-29T16:04:59Z", "closed_at": "2018-05-29T16:03:20Z", "author_association": "NONE", "body": "To clarify: the compiler aborts, rather than a mere compilation error.\r\nInitial problematic commit: 8e681d1e570b2274a799521aad83292ed719e172\r\n\r\nTo reproduce:\r\n```c++\r\n//main.cpp\r\n#include \"nlohmann/json.hpp\"\r\n#include <iostream>\r\nint main()\r\n{\r\n    nlohmann::json j; \r\n    std::cin >> j; \r\n    return 0; \r\n}\r\n```\r\n\r\n```\r\n>>clang++ -std=c++11  -g main.cpp\r\nclang: /usr/local/llvm/3.8.0/src/llvm-3.8.0.src/lib/IR/Metadata.cpp:192: void llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata*): Assertion `!(MD && isa<MDNode>(MD) && cast<MDNode>(MD)->isTemporary()) && \"Expected non-temp node\"' failed.\r\n...\r\nclang: error: unable to execute command: Aborted\r\nclang: error: clang frontend command failed due to signal (use -v to see invocation)\r\nclang version 3.8.0 (tags/RELEASE_380/final)\r\n...\r\n```\r\n\r\nProposed workaround:\r\n1) Move `parse_event_t` outside of `parser` into `detail`\r\n2) Remove `using parse_event_t = typename parser::parse_event_t;` in `basic_json`\r\n3) Replace `using parser_callback_t = typename parser::parser_callback_t;` with `using parser_callback_t = std::function<bool(int depth, detail::parse_event_t event, basic_json& parsed)>;`\r\n\r\n```diff\r\ndiff --git a/single_include/nlohmann/json.hpp b/single_include/nlohmann/json.hpp\r\nindex 8c9942b..d7f133d 100644\r\n--- a/single_include/nlohmann/json.hpp\r\n+++ b/single_include/nlohmann/json.hpp\r\n@@ -3321,6 +3321,24 @@ namespace nlohmann\r\n {\r\n namespace detail\r\n {\r\n+\r\n+enum class parse_event_t : uint8_t\r\n+{\r\n+    /// the parser read `{` and started to process a JSON object\r\n+    object_start,\r\n+    /// the parser read `}` and finished processing a JSON object\r\n+    object_end,\r\n+    /// the parser read `[` and started to process a JSON array\r\n+    array_start,\r\n+    /// the parser read `]` and finished processing a JSON array\r\n+    array_end,\r\n+    /// the parser read a key of a value in an object\r\n+    key,\r\n+    /// the parser finished reading a JSON value\r\n+    value\r\n+};\r\n+\r\n+    \r\n ////////////\r\n // parser //\r\n ////////////\r\n@@ -3341,21 +3359,6 @@ class parser\r\n     using token_type = typename lexer_t::token_type;\r\n \r\n   public:\r\n-    enum class parse_event_t : uint8_t\r\n-    {\r\n-        /// the parser read `{` and started to process a JSON object\r\n-        object_start,\r\n-        /// the parser read `}` and finished processing a JSON object\r\n-        object_end,\r\n-        /// the parser read `[` and started to process a JSON array\r\n-        array_start,\r\n-        /// the parser read `]` and finished processing a JSON array\r\n-        array_end,\r\n-        /// the parser read a key of a value in an object\r\n-        key,\r\n-        /// the parser finished reading a JSON value\r\n-        value\r\n-    };\r\n \r\n     using parser_callback_t =\r\n         std::function<bool(int depth, parse_event_t event, BasicJsonType& parsed)>;\r\n@@ -10859,23 +10862,6 @@ class basic_json\r\n     //////////////////////////\r\n \r\n     /*!\r\n-    @brief parser event types\r\n-\r\n-    The parser callback distinguishes the following events:\r\n-    - `object_start`: the parser read `{` and started to process a JSON object\r\n-    - `key`: the parser read a key of a value in an object\r\n-    - `object_end`: the parser read `}` and finished processing a JSON object\r\n-    - `array_start`: the parser read `[` and started to process a JSON array\r\n-    - `array_end`: the parser read `]` and finished processing a JSON array\r\n-    - `value`: the parser finished reading a JSON value\r\n-\r\n-    @image html callback_events.png \"Example when certain parse events are triggered\"\r\n-\r\n-    @sa @ref parser_callback_t for more information and examples\r\n-    */\r\n-    using parse_event_t = typename parser::parse_event_t;\r\n-\r\n-    /*!\r\n     @brief per-element parser callback type\r\n \r\n     With a parser callback function, the result of parsing a JSON text can be\r\n@@ -10924,7 +10910,7 @@ class basic_json\r\n \r\n     @since version 1.0.0\r\n     */\r\n-    using parser_callback_t = typename parser::parser_callback_t;\r\n+    using parser_callback_t = std::function<bool(int depth, detail::parse_event_t event, basic_json& parsed)>;\r\n \r\n \r\n     //////////////////\r\n```\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1096", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1096/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1096/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1096/events", "html_url": "https://github.com/nlohmann/json/issues/1096", "id": 324161803, "node_id": "MDU6SXNzdWUzMjQxNjE4MDM=", "number": 1096, "title": "Serialize a list of class objects with json", "user": {"login": "AncaMRG", "id": 39385676, "node_id": "MDQ6VXNlcjM5Mzg1Njc2", "avatar_url": "https://avatars0.githubusercontent.com/u/39385676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AncaMRG", "html_url": "https://github.com/AncaMRG", "followers_url": "https://api.github.com/users/AncaMRG/followers", "following_url": "https://api.github.com/users/AncaMRG/following{/other_user}", "gists_url": "https://api.github.com/users/AncaMRG/gists{/gist_id}", "starred_url": "https://api.github.com/users/AncaMRG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AncaMRG/subscriptions", "organizations_url": "https://api.github.com/users/AncaMRG/orgs", "repos_url": "https://api.github.com/users/AncaMRG/repos", "events_url": "https://api.github.com/users/AncaMRG/events{/privacy}", "received_events_url": "https://api.github.com/users/AncaMRG/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-17T19:51:07Z", "updated_at": "2018-05-30T07:49:46Z", "closed_at": "2018-05-30T07:49:46Z", "author_association": "NONE", "body": "Hello,\r\nI want to serialize a list which contains a class objects. How can I do that using json. For a list of regular types I understand, but when I try to use json j_list(listName), and the listName is a list of objects I receive some errors from to_json method and 'force_msvc_stacktrace'.\r\n\r\nThis is the code.\r\n\r\n       std::list<Student>studentList;\r\n\r\n// populate studentList with objects of Student class\r\n\r\n\tstring filename = \"StudentList.json\";\r\n\tstd::ofstream output(filename, std::ofstream::out);\r\n\tjson js_list(studentList);\r\n\toutput << js_list;\r\n\toutput.close();\r\n\r\nWhat should I do to I make this work? \r\nThank you! :D"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1095", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1095/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1095/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1095/events", "html_url": "https://github.com/nlohmann/json/issues/1095", "id": 324066087, "node_id": "MDU6SXNzdWUzMjQwNjYwODc=", "number": 1095, "title": "Null bytes in files are treated like EOF", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 730407699, "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale", "name": "state: stale", "color": "999999", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-17T15:08:56Z", "updated_at": "2018-06-23T15:39:28Z", "closed_at": "2018-06-23T15:39:28Z", "author_association": "OWNER", "body": "- What is the issue you have?\r\n\r\nWhen reading parsing JSON from a file, null bytes are treated as EOF. The reason for this is explicit code in the JSON lexer to treat `\\0` as EOF to properly parse string literals.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nParse file https://github.com/nst/JSONTestSuite/blob/master/test_parsing/n_multidigit_number_then_00.json, e.g. by\r\n\r\n```cpp\r\nstd::ifstream f(\"n_multidigit_number_then_00.json\");\r\njson::parse(f);\r\n```\r\n\r\n- What is the expected behavior?\r\n\r\nParse error: unexpected null byte after reading `123`.\r\n\r\n- And what is the actual behavior instead?\r\n\r\nThe file is successfully parsed as number `123`.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nApple LLVM version 9.1.0.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n`develop`.\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nN/A"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1094", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1094/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1094/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1094/events", "html_url": "https://github.com/nlohmann/json/issues/1094", "id": 323965053, "node_id": "MDU6SXNzdWUzMjM5NjUwNTM=", "number": 1094, "title": "Small question", "user": {"login": "martinnnnnn", "id": 12356294, "node_id": "MDQ6VXNlcjEyMzU2Mjk0", "avatar_url": "https://avatars0.githubusercontent.com/u/12356294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinnnnnn", "html_url": "https://github.com/martinnnnnn", "followers_url": "https://api.github.com/users/martinnnnnn/followers", "following_url": "https://api.github.com/users/martinnnnnn/following{/other_user}", "gists_url": "https://api.github.com/users/martinnnnnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinnnnnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinnnnnn/subscriptions", "organizations_url": "https://api.github.com/users/martinnnnnn/orgs", "repos_url": "https://api.github.com/users/martinnnnnn/repos", "events_url": "https://api.github.com/users/martinnnnnn/events{/privacy}", "received_events_url": "https://api.github.com/users/martinnnnnn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-17T10:33:01Z", "updated_at": "2018-05-17T14:48:46Z", "closed_at": "2018-05-17T14:48:46Z", "author_association": "NONE", "body": "Hi,\r\nThanks for the library, it's really easy to setup and use :) I only have one small question :\r\nIs it possible to set pretty print when printing a json object without setting it for arrays in the object ? I end up with \r\n`\"obj1\": {`\r\n`        \"key1\": \"value1\",`\r\n`        \"key2\": [`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0,`\r\n   `         0.0`\r\n   `     ]`\r\n   ` },`\r\n(there should be tabs but I couldn't get the code insertion to do what I want ^^')\r\nwhich doesn't look very good.. Any way I can set the array to print in 1 line ? I could probably iterate thought each objects and check when there is an array and print it differenlty but that seems like a lot of work !\r\nThanks :)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1093", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1093/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1093/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1093/events", "html_url": "https://github.com/nlohmann/json/issues/1093", "id": 323902756, "node_id": "MDU6SXNzdWUzMjM5MDI3NTY=", "number": 1093, "title": "Upgrading to 3.x: to_/from_json with enum class", "user": {"login": "endorph-soft", "id": 6407517, "node_id": "MDQ6VXNlcjY0MDc1MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6407517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/endorph-soft", "html_url": "https://github.com/endorph-soft", "followers_url": "https://api.github.com/users/endorph-soft/followers", "following_url": "https://api.github.com/users/endorph-soft/following{/other_user}", "gists_url": "https://api.github.com/users/endorph-soft/gists{/gist_id}", "starred_url": "https://api.github.com/users/endorph-soft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/endorph-soft/subscriptions", "organizations_url": "https://api.github.com/users/endorph-soft/orgs", "repos_url": "https://api.github.com/users/endorph-soft/repos", "events_url": "https://api.github.com/users/endorph-soft/events{/privacy}", "received_events_url": "https://api.github.com/users/endorph-soft/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-05-17T07:28:57Z", "updated_at": "2018-07-10T21:02:11Z", "closed_at": "2018-07-10T20:14:44Z", "author_association": "NONE", "body": "I'm in the process of updating a project from version 2.1.1 to the version 3.x series.\r\n\r\nI have the following two functions defined to handle enum classes:\r\n\r\n```cpp\r\ntemplate <typename JSON, typename Enum>\r\nvoid to_json(JSON & j, Enum e) {\r\n  j = ToString(e);\r\n}\r\n\r\ntemplate <typename JSON, typename Enum>\r\nvoid from_json(const JSON & j, Enum & e) {\r\n  if (!FromString(e, j)) {\r\n    throw std::invalid_argument(\"Badness...\");\r\n  }\r\n}\r\n```\r\n\r\nThere are definitions of `ToString` and `FromString` for all the enumerations of interest. I'm not using SFINAE to restrict `Enum` to enumerations, because it's not currently needed. With version 2.1.1, everything is working fine.\r\n\r\nWith the update to 3.x, these functions are no longer found by the lookup. If I comment out the new enum `to_json` and `from_json` inside the library, the errors disappear, and all is well again.\r\n\r\nHow can I make my functions work? Do I need a more specific signature? I don't want to define a function for every enumeration, if I can get away with it."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1092", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1092/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1092/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1092/events", "html_url": "https://github.com/nlohmann/json/issues/1092", "id": 323812440, "node_id": "MDU6SXNzdWUzMjM4MTI0NDA=", "number": 1092, "title": "Q: few questions about json construction", "user": {"login": "crusader-mike", "id": 22357016, "node_id": "MDQ6VXNlcjIyMzU3MDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/22357016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusader-mike", "html_url": "https://github.com/crusader-mike", "followers_url": "https://api.github.com/users/crusader-mike/followers", "following_url": "https://api.github.com/users/crusader-mike/following{/other_user}", "gists_url": "https://api.github.com/users/crusader-mike/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusader-mike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusader-mike/subscriptions", "organizations_url": "https://api.github.com/users/crusader-mike/orgs", "repos_url": "https://api.github.com/users/crusader-mike/repos", "events_url": "https://api.github.com/users/crusader-mike/events{/privacy}", "received_events_url": "https://api.github.com/users/crusader-mike/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2018-05-16T22:39:29Z", "updated_at": "2018-05-18T16:38:21Z", "closed_at": "2018-05-16T23:58:59Z", "author_association": "NONE", "body": "I was digging in json.hpp (v2.1.0) in order to understand how stuff gets created and check for unnecessary copies/allocations in simple cases like:\r\n```\r\njson x = { {\"val1\", 1}, {\"val2\", true} };\r\n```\r\n\r\nAs I see it:\r\n\r\n- `basic_json` has expensive copy semantics as evidenced by it's cctor and op=:\r\n```\r\n    basic_json(const basic_json& other)\r\n        : m_type(other.m_type)\r\n    {\r\n        ...\r\n        switch (m_type)\r\n        {\r\n            case value_t::object:\r\n            {\r\n                m_value = *other.m_value.object;   <-- mem alloc + cctor call\r\n                break;\r\n            }\r\n        ...\r\n\r\n    reference& operator=(basic_json other) ...    <-- note lack of const&\r\n    {\r\n        ...\r\n        using std::swap;\r\n        swap(m_type, other.m_type);\r\n        swap(m_value, other.m_value);\r\n```\r\n\r\n- which means in my example we will end up copying the same data many times (depending how deep in hierarchy given piece of data is)\r\n\r\n- `{\"val1\", 1}` will be used to create a `basic_json` of type array that contains two `basic_json` objects of types `string` and `whatever` respectively (underlying vector will be allocated on heap, same for that string)\r\n\r\n- then it will be used to populate an `std::map` entry in `basic_json` object of type _object_ here:\r\n```\r\n    basic_json(std::initializer_list<basic_json> init,\r\n               bool type_deduction = true,\r\n               value_t manual_type = value_t::array)\r\n    {\r\n        ...\r\n            std::for_each(init.begin(), init.end(), [this](const basic_json & element)\r\n            {\r\n                m_value.object->emplace(*(element[0].m_value.string), element[1]);\r\n            });\r\n```\r\nwhere `m_value.object` is of type `std::map<string, basic_json>` and `emplace` will end up passing a `string&` to related constructor (which will have to make another copy of a string)\r\n\r\n- and at some point `initializer_list` instances will be destroyed causing destruction of related `basic_json` objects and aforementioned `vector` and `string` objects will be deallocated\r\n\r\nPlease, correct me if this is incorrect or I missed smth important. \r\n\r\nNow, as I see it there is a quick and easy way to avoid few copies:\r\n```\r\nm_value.object->emplace(std::move(*(element[0].m_value.string)), std::move(element[1]));\r\n```\r\n\r\nQ1: do you think it is ok? if not -- why?\r\n\r\nQ2: this process has a lot of extra allocations (basic_json copies, underlying vectors and strings) -- is there an approach to construct my json object and avoid them?\r\n\r\nQ3: pushing it further a bit -- inserting new sub-element into object means `std::map` lookup, can I avoid it somehow? For example by providing sub-elements in proper order and forcing related `std::map::emplace/insert` to use `end()` as a hint.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1091", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1091/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1091/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1091/events", "html_url": "https://github.com/nlohmann/json/issues/1091", "id": 323664868, "node_id": "MDU6SXNzdWUzMjM2NjQ4Njg=", "number": 1091, "title": "general crayCC compilation failure", "user": {"login": "cpranger", "id": 39338887, "node_id": "MDQ6VXNlcjM5MzM4ODg3", "avatar_url": "https://avatars0.githubusercontent.com/u/39338887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpranger", "html_url": "https://github.com/cpranger", "followers_url": "https://api.github.com/users/cpranger/followers", "following_url": "https://api.github.com/users/cpranger/following{/other_user}", "gists_url": "https://api.github.com/users/cpranger/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpranger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpranger/subscriptions", "organizations_url": "https://api.github.com/users/cpranger/orgs", "repos_url": "https://api.github.com/users/cpranger/repos", "events_url": "https://api.github.com/users/cpranger/events{/privacy}", "received_events_url": "https://api.github.com/users/cpranger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-05-16T15:10:14Z", "updated_at": "2018-05-20T09:54:11Z", "closed_at": "2018-05-20T09:54:11Z", "author_association": "NONE", "body": "I am very interested to use this amazing JSON library for my project. However, I am virtually tied to using the Cray Compiling Environment (CCE) and the Cray C++ compiler (crayCC). I realise that what I am reporting below may well be outside the scope of the developer(s), and that moreover, CrayCC is not on the list of supported compilers. Yet I want to make mention of this, and leave it up to the author to decide what to do with this information. Any help would be appreciated!\r\n\r\nI have constructed a minimal working example (hello world) which does absolutely nothing with JSON except include the single header file:\r\n\r\n```\r\n#include <iostream>\r\n#include \"nlohmann/json.hpp\"\r\n\r\nint main()\r\n\t{ std::cout << \"hello world!\" << std::endl; }\r\n```\r\n\r\nthis program is compiled with either gcc 7.2.0 producing expected behaviour (hello world!), and with crayCC 8.6.5 (https://pubs.cray.com/content/S-2179/8.6/cray-c-and-c++-reference-manual-s-2179-86/about-the-cray-and-c++-reference-manual).\r\n\r\n```\r\n> CC hello_json.cpp\r\n```\r\n\r\nthe output is:\r\n\r\n```\r\n/tmp/pe_38754/hello_json_1.o: In function `std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()':\r\n/opt/gcc/6.1.0/snos/include/g++/bits/shared_ptr_base.h:147: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/opt/gcc/6.1.0/snos/include/g++/bits/shared_ptr_base.h:162: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/tmp/pe_38754/hello_json_1.o: In function `std::__shared_ptr<nlohmann::detail::input_adapter_protocol, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()':\r\n/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:1: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:1: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/tmp/pe_38754/hello_json_1.o: In function `std::__shared_ptr<nlohmann::detail::output_adapter_protocol<char>, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()':\r\n/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:7488: undefined reference to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main'\r\n/tmp/pe_38754/hello_json_1.o:/users/cpranger/garnet/experiments/json_compilation/hello_json.cpp:7488: more undefined references to `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main' follow\r\n/tmp/pe_38754/hello_json_1.o: In function `std::unique_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::create<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)#1}>::~unique_ptr()':\r\n/opt/gcc/6.1.0/snos/include/g++/bits/unique_ptr.h:236: undefined reference to `_ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_ENKUlPS8_E_clESJ_$$CFE_id_b13fd261_main'\r\n/opt/cray/pe/cce/8.6.5/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: link errors found, deleting executable `a.out'\r\n/usr/bin/X11/sha1sum: a.out: No such file or directory\r\n```\r\n\r\nFYI, `_ZN23_INTERNAL_b13fd261_main9__gnu_cxx27__exchange_and_add_dispatchEPii$$CFE_id_b13fd261_main` demangles to \r\n```\r\n_INTERNAL_b13fd261_main::__gnu_cxx::__exchange_and_add_dispatch(int*, int)$$CFE_id_b13fd261_main\r\n```\r\nand `_ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_ENKUlPS8_E_clESJ_$$CFE_id_b13fd261_main` demangles to \r\n```\r\nstd::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::create<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)#1}::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const$$CFE_id_b13fd261_main\r\n```\r\n\r\nPlease let me know if any more information is required!\r\n\r\nCasper"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1090", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1090/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1090/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1090/events", "html_url": "https://github.com/nlohmann/json/issues/1090", "id": 323074845, "node_id": "MDU6SXNzdWUzMjMwNzQ4NDU=", "number": 1090, "title": "Merge Patch clears original data", "user": {"login": "FlowShowcontrol", "id": 10196339, "node_id": "MDQ6VXNlcjEwMTk2MzM5", "avatar_url": "https://avatars3.githubusercontent.com/u/10196339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlowShowcontrol", "html_url": "https://github.com/FlowShowcontrol", "followers_url": "https://api.github.com/users/FlowShowcontrol/followers", "following_url": "https://api.github.com/users/FlowShowcontrol/following{/other_user}", "gists_url": "https://api.github.com/users/FlowShowcontrol/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlowShowcontrol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlowShowcontrol/subscriptions", "organizations_url": "https://api.github.com/users/FlowShowcontrol/orgs", "repos_url": "https://api.github.com/users/FlowShowcontrol/repos", "events_url": "https://api.github.com/users/FlowShowcontrol/events{/privacy}", "received_events_url": "https://api.github.com/users/FlowShowcontrol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374231, "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug", "name": "kind: bug", "color": "fc2929", "default": false}, {"id": 46374234, "node_id": "MDU6TGFiZWw0NjM3NDIzNA==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid", "name": "solution: invalid", "color": "e6e6e6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-15T05:48:51Z", "updated_at": "2018-05-16T07:49:28Z", "closed_at": "2018-05-16T07:23:08Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nI have two objects which I want to merge using the `merge_patch()` function. An example of my objects:\r\n```\r\n\r\nA {c : [{a : \"1\", b: \"2\"}], d: \"5\"}\r\n\r\nB{c: [{a: \"2\"}]}\r\n\r\nresult:\r\n\r\nC{c:[{a:\"2\"}], d:\"5\"}\r\n```\r\n\r\nWhen merging B into A, the library seems to delete value A{c[{b}]}. \r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\nI was expecting for all the original values to remain because they are not defined in the patch object\r\n- And what is the actual behavior instead?\r\nThe original values that are not defined are removed\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nlatest version\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1089", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1089/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1089/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1089/events", "html_url": "https://github.com/nlohmann/json/pull/1089", "id": 322747730, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg3Nzc0ODcx", "number": 1089, "title": "Provide a from_json overload for std::map", "user": {"login": "theodelrieu", "id": 15652306, "node_id": "MDQ6VXNlcjE1NjUyMzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/15652306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theodelrieu", "html_url": "https://github.com/theodelrieu", "followers_url": "https://api.github.com/users/theodelrieu/followers", "following_url": "https://api.github.com/users/theodelrieu/following{/other_user}", "gists_url": "https://api.github.com/users/theodelrieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/theodelrieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theodelrieu/subscriptions", "organizations_url": "https://api.github.com/users/theodelrieu/orgs", "repos_url": "https://api.github.com/users/theodelrieu/repos", "events_url": "https://api.github.com/users/theodelrieu/events{/privacy}", "received_events_url": "https://api.github.com/users/theodelrieu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 10, "created_at": "2018-05-14T09:56:24Z", "updated_at": "2018-05-28T14:34:04Z", "closed_at": "2018-05-28T12:53:24Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1089", "html_url": "https://github.com/nlohmann/json/pull/1089", "diff_url": "https://github.com/nlohmann/json/pull/1089.diff", "patch_url": "https://github.com/nlohmann/json/pull/1089.patch"}, "body": "This overload is chosen only when BasicJsonType::string_t\r\nis not constructible from std::map::key_type.\r\n\r\nCurrently, converting a map to json treats it as an array of pairs.\r\n\r\nfixes #1079 \r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\nRead the [Contribution Guidelines](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md) for detailed information.\r\n\r\n- [x]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [x]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [x]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src).\r\n- [x]  The source code is amalgamated; that is, after making changes to the sources in the `include/nlohmann` directory, run `make amalgamate` to create the single-header file `single_include/nlohmann/json.hpp`. The whole process is described [here](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md#files-to-change).\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1088", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1088/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1088/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1088/events", "html_url": "https://github.com/nlohmann/json/issues/1088", "id": 322695859, "node_id": "MDU6SXNzdWUzMjI2OTU4NTk=", "number": 1088, "title": "[Question] how to use nlohmann/json in c++?", "user": {"login": "boddumanohar", "id": 9148277, "node_id": "MDQ6VXNlcjkxNDgyNzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9148277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boddumanohar", "html_url": "https://github.com/boddumanohar", "followers_url": "https://api.github.com/users/boddumanohar/followers", "following_url": "https://api.github.com/users/boddumanohar/following{/other_user}", "gists_url": "https://api.github.com/users/boddumanohar/gists{/gist_id}", "starred_url": "https://api.github.com/users/boddumanohar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boddumanohar/subscriptions", "organizations_url": "https://api.github.com/users/boddumanohar/orgs", "repos_url": "https://api.github.com/users/boddumanohar/repos", "events_url": "https://api.github.com/users/boddumanohar/events{/privacy}", "received_events_url": "https://api.github.com/users/boddumanohar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-05-14T07:08:22Z", "updated_at": "2018-05-17T14:44:50Z", "closed_at": "2018-05-17T14:44:50Z", "author_association": "NONE", "body": "I am working on an application where two process exchange data through shared memory. So instead of using structs to pack the data, I choose to use JSON so that I won't face any issues due to compilers.\r\n\r\nMy sender side is written in C++14 and the receiver side is written in C\r\n\r\nOn the reciver side, which is C, how do I read  the json data?\r\n\r\nI really appreciate the help."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1087", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1087/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1087/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1087/events", "html_url": "https://github.com/nlohmann/json/issues/1087", "id": 322653701, "node_id": "MDU6SXNzdWUzMjI2NTM3MDE=", "number": 1087, "title": "C++17 decomposition declaration support", "user": {"login": "kenjichanhkg", "id": 7701160, "node_id": "MDQ6VXNlcjc3MDExNjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7701160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenjichanhkg", "html_url": "https://github.com/kenjichanhkg", "followers_url": "https://api.github.com/users/kenjichanhkg/followers", "following_url": "https://api.github.com/users/kenjichanhkg/following{/other_user}", "gists_url": "https://api.github.com/users/kenjichanhkg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenjichanhkg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenjichanhkg/subscriptions", "organizations_url": "https://api.github.com/users/kenjichanhkg/orgs", "repos_url": "https://api.github.com/users/kenjichanhkg/repos", "events_url": "https://api.github.com/users/kenjichanhkg/events{/privacy}", "received_events_url": "https://api.github.com/users/kenjichanhkg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-14T02:29:35Z", "updated_at": "2018-05-23T07:09:49Z", "closed_at": "2018-05-23T07:09:49Z", "author_association": "NONE", "body": "Possible to support this syntax in the library?\r\n```\r\nauto j = \"{\\\"abc\\\":[34]}\"_json;\r\nfor (auto& [k, v] : j){ // compile error\r\n}\r\n```\r\nstd::map example:\r\n```\r\nstd::map<int, int> m;\r\nfor (auto& [k, v] : m){ // this works\r\n}\r\n```"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1086", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1086/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1086/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1086/events", "html_url": "https://github.com/nlohmann/json/issues/1086", "id": 322573666, "node_id": "MDU6SXNzdWUzMjI1NzM2NjY=", "number": 1086, "title": "[Question] Access multi-level json objects", "user": {"login": "JimmySnails", "id": 7029836, "node_id": "MDQ6VXNlcjcwMjk4MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7029836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimmySnails", "html_url": "https://github.com/JimmySnails", "followers_url": "https://api.github.com/users/JimmySnails/followers", "following_url": "https://api.github.com/users/JimmySnails/following{/other_user}", "gists_url": "https://api.github.com/users/JimmySnails/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimmySnails/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimmySnails/subscriptions", "organizations_url": "https://api.github.com/users/JimmySnails/orgs", "repos_url": "https://api.github.com/users/JimmySnails/repos", "events_url": "https://api.github.com/users/JimmySnails/events{/privacy}", "received_events_url": "https://api.github.com/users/JimmySnails/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-13T08:08:58Z", "updated_at": "2018-05-14T19:15:05Z", "closed_at": "2018-05-14T19:15:05Z", "author_association": "NONE", "body": "Sry for posting a question here, but you don't have a forum and i couldn't figure out how to do this properly.\r\n\r\nFor my game, i want to store information about sprites in a json file.\r\nFirst Level - Sprite type (Terrain, Building, Water, ...)\r\nSecond Level - Sprite ID (Unique ID to access sprites)\r\nThird Level - Detail Information (Filename, which can vary)\r\n\r\nMy Implementation:\r\n```cpp\r\n  #include <iostream>\r\n  #include <nlohmann/json.hpp>\r\n\r\n  using json = nlohmann::json;\r\n\r\n  void accessTileData(std::string TileType, int tileID);\r\n  json _json;\r\n\r\n  int main() {\r\n      // create a JSON object\r\n\r\n        _json[\"terrain\"][\"0\"][\"filename\"] = std::string(\"images/floor/floor.png\");\r\n        _json[\"terrain\"][\"0\"][\"isPowered\"] = true;\r\n        _json[\"terrain\"][\"1\"][\"filename\"] = std::string(\"images/floor/floor2.png\");\r\n        _json[\"terrain\"][\"1\"][\"isPowered\"] = true;\r\n        _json[\"terrain\"][\"2\"][\"filename\"] = std::string(\"images/floor/floor3.png\");\r\n        _json[\"terrain\"][\"2\"][\"isPowered\"] = true;\r\n        _json[\"terrain\"][\"3\"][\"filename\"] = std::string(\"images/floor/floor4.png\");\r\n        _json[\"terrain\"][\"3\"][\"isPowered\"] = true;\r\n        _json[\"buildings\"][\"4\"][\"filename\"] = std::string(\"images/buildings/house1.png\");\r\n        _json[\"buildings\"][\"4\"][\"type\"] = \"building\";\r\n        _json[\"buildings\"][\"4\"][\"zone\"] = \"residential\";\r\n\r\n        accessTileData(\"terrain\", 2);\r\n      \r\n  }\r\n\r\n\r\n  void accessTileData(std::string TileType, int tileID) {\r\n    for (json::iterator it = _json.begin(); it != _json.end(); ++it) {\r\n      if (it.key() == TileType) {\r\n        std::cout << \"Terrain Tiles:\\n\\t\" << it.value() << std::endl;            \r\n              \r\n              // This retrieves more then just the filename value\r\n              std::string retrievedFileName = _json[it.key()][std::to_string(tileID)][\"filename\"].dump();\r\n              std::cout << \"Filename of Tile \" << tileID  << std::endl << retrievedFileName;\r\n              // Output:\r\n              // Filename of Tile 2\r\n              // \"images/floor/floor3.png\"\t0  {\"filename\":\"images/floor/floor.png\",\"isPowered\":true}\r\n\r\n              \r\n              // this does not work\r\n        for (json::iterator it_meta = it.value().begin(); it_meta != it.value().end(); ++it) {\r\n          std::cout << \"\\t\" << it_meta.key() << \"  \" << it_meta.value() << std::endl;\r\n        }\r\n              // Error Message\r\n              // prog.exe: ./nlohmann/json.hpp:4087: nlohmann::detail::iter_impl<BasicJsonType>::reference nlohmann::detail::iter_impl<BasicJsonType>::operator*() const [with BasicJsonType = nlohmann::basic_json<>; nlohmann::detail::iter_impl<BasicJsonType>::reference = nlohmann::basic_json<>&]: Assertion `m_it.object_iterator != m_object->m_value.object->end()' failed.\r\n      }\r\n    }\r\n  }\r\n\r\n```\r\n\r\nHow do i properly retrieve all the informations of a tileID ?\r\nIs there a possibility to retrieve a tile id (second key) from the json object without specifying the first key (type)?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1085", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1085/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1085/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1085/events", "html_url": "https://github.com/nlohmann/json/issues/1085", "id": 322490989, "node_id": "MDU6SXNzdWUzMjI0OTA5ODk=", "number": 1085, "title": "Serializing vector", "user": {"login": "yuvalyo", "id": 39211494, "node_id": "MDQ6VXNlcjM5MjExNDk0", "avatar_url": "https://avatars2.githubusercontent.com/u/39211494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuvalyo", "html_url": "https://github.com/yuvalyo", "followers_url": "https://api.github.com/users/yuvalyo/followers", "following_url": "https://api.github.com/users/yuvalyo/following{/other_user}", "gists_url": "https://api.github.com/users/yuvalyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuvalyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuvalyo/subscriptions", "organizations_url": "https://api.github.com/users/yuvalyo/orgs", "repos_url": "https://api.github.com/users/yuvalyo/repos", "events_url": "https://api.github.com/users/yuvalyo/events{/privacy}", "received_events_url": "https://api.github.com/users/yuvalyo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374235, "node_id": "MDU6TGFiZWw0NjM3NDIzNQ==", "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20question", "name": "kind: question", "color": "cc317c", "default": false}, {"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-05-12T07:35:48Z", "updated_at": "2018-06-03T19:07:49Z", "closed_at": "2018-06-03T19:07:49Z", "author_association": "NONE", "body": "at this moment i'm working on a little project and i'm trying to serialize a vector\r\n\r\nthe current code is:\r\n\r\n```cpp\r\nstd::string JsonResponsePacketSerializer::serializeResponse(HighscoreResponse response)\r\n{\r\n\tjson j;\r\n\tj[\"status\"] = response.status;\r\n\tj[\"highscores\"] = {};\r\n\tfor (auto iter = response.highscores.begin(); iter != response.highscores.end(); ++iter)\r\n\t{\r\n\t\tj[\"highscores\"].push_back(*iter);\r\n\t}\r\n\r\n\r\n\treturn j.dump();\r\n}\r\n```\r\n\r\nas you can see in the struct the \"highscores\" is a vector\r\nbut i'm gettting all kind of erros such as:\r\n1) could not find to_json() method in T's namespace\r\n2)forcing MSVC stacktrace to show which T we're talking about.\r\n\r\nthanks for your help \ud83d\udc4d "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1084", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1084/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1084/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1084/events", "html_url": "https://github.com/nlohmann/json/issues/1084", "id": 322115645, "node_id": "MDU6SXNzdWUzMjIxMTU2NDU=", "number": 1084, "title": "update nested value in multi hierarchy json object", "user": {"login": "HaseebMazhar1", "id": 36299949, "node_id": "MDQ6VXNlcjM2Mjk5OTQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/36299949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HaseebMazhar1", "html_url": "https://github.com/HaseebMazhar1", "followers_url": "https://api.github.com/users/HaseebMazhar1/followers", "following_url": "https://api.github.com/users/HaseebMazhar1/following{/other_user}", "gists_url": "https://api.github.com/users/HaseebMazhar1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HaseebMazhar1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HaseebMazhar1/subscriptions", "organizations_url": "https://api.github.com/users/HaseebMazhar1/orgs", "repos_url": "https://api.github.com/users/HaseebMazhar1/repos", "events_url": "https://api.github.com/users/HaseebMazhar1/events{/privacy}", "received_events_url": "https://api.github.com/users/HaseebMazhar1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-10T23:04:53Z", "updated_at": "2018-05-15T06:29:54Z", "closed_at": "2018-05-15T06:29:54Z", "author_association": "NONE", "body": "Hi, I was trying to integrate nlohmann json library in our project. I was stuck in an issue and could not find any workaround. The issue is I did not know about the level of JSON data and depending upon the key, I have to update the value and return the whole JSON object. The key and data can be of any level.\r\nMy json data would be like this \r\n` \"logger\": {\r\n    \"channels\": {\r\n      \"log_configure\": \"acquired\"\r\n    }}`\r\nkey would be like this logger.channels.log_configure.\r\nI have to change the value of above key to \"not acquired\".\r\n Is this functionality currently supported?"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1083", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1083/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1083/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1083/events", "html_url": "https://github.com/nlohmann/json/issues/1083", "id": 322073545, "node_id": "MDU6SXNzdWUzMjIwNzM1NDU=", "number": 1083, "title": "Overriding default values?", "user": {"login": "simulationcloud", "id": 33330174, "node_id": "MDQ6VXNlcjMzMzMwMTc0", "avatar_url": "https://avatars3.githubusercontent.com/u/33330174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simulationcloud", "html_url": "https://github.com/simulationcloud", "followers_url": "https://api.github.com/users/simulationcloud/followers", "following_url": "https://api.github.com/users/simulationcloud/following{/other_user}", "gists_url": "https://api.github.com/users/simulationcloud/gists{/gist_id}", "starred_url": "https://api.github.com/users/simulationcloud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simulationcloud/subscriptions", "organizations_url": "https://api.github.com/users/simulationcloud/orgs", "repos_url": "https://api.github.com/users/simulationcloud/repos", "events_url": "https://api.github.com/users/simulationcloud/events{/privacy}", "received_events_url": "https://api.github.com/users/simulationcloud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-10T20:30:08Z", "updated_at": "2018-06-07T19:39:30Z", "closed_at": "2018-06-07T19:39:30Z", "author_association": "NONE", "body": "I have a json file that I read in using nlohmann:json. It contains nested dicts/lists that are configurations specified by users.\r\n\r\nOnly when a user specifies a value in this file (read in to a json object) should it override the default value, which is specified by another json object. \r\n\r\nMy question is: what's the easiest way to replace all the items in one json object with that of another json object, if that item exists in the other json object?\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1082", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1082/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1082/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1082/events", "html_url": "https://github.com/nlohmann/json/issues/1082", "id": 320985611, "node_id": "MDU6SXNzdWUzMjA5ODU2MTE=", "number": 1082, "title": "detail namespace collision with Cereal?", "user": {"login": "RPGillespie6", "id": 9853156, "node_id": "MDQ6VXNlcjk4NTMxNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9853156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RPGillespie6", "html_url": "https://github.com/RPGillespie6", "followers_url": "https://api.github.com/users/RPGillespie6/followers", "following_url": "https://api.github.com/users/RPGillespie6/following{/other_user}", "gists_url": "https://api.github.com/users/RPGillespie6/gists{/gist_id}", "starred_url": "https://api.github.com/users/RPGillespie6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RPGillespie6/subscriptions", "organizations_url": "https://api.github.com/users/RPGillespie6/orgs", "repos_url": "https://api.github.com/users/RPGillespie6/repos", "events_url": "https://api.github.com/users/RPGillespie6/events{/privacy}", "received_events_url": "https://api.github.com/users/RPGillespie6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-07T22:52:27Z", "updated_at": "2018-05-27T16:54:47Z", "closed_at": "2018-05-27T16:52:48Z", "author_association": "NONE", "body": "I'm seeing a very strange bug when using your library in conjunction with C++ Cereal: https://github.com/USCiLab/cereal\r\n\r\nReproduce with the following:\r\n\r\n```c++\r\n#include <json.hpp>\r\n\r\n#include <cereal/types/polymorphic.hpp>\r\n#include <cereal/archives/binary.hpp>\r\n#include <cereal/access.hpp>       //So we can make serialize private so developers aren't tempted to call it.\r\n#include <cereal/types/string.hpp> //This is needed to serialize std::string. There are similar ones for the other std containers\r\n#include <cereal/types/vector.hpp> //This is needed to serialize std::vector. There are similar ones for the other std containers\r\n\r\nusing namespace std;\r\n\r\n//Pure virtual base class\r\nclass Serializable\r\n{\r\n    public:\r\n        virtual int getType() = 0;\r\n\r\n    protected:\r\n        template<class Archive> void serialize(Archive & ar);\r\n};\r\n\r\nclass Bug: public Serializable\r\n{\r\n    public:\r\n        std::string text;\r\n        int getType() {return 1;};\r\n        void load(const nlohmann::json & s) {};\r\n\r\n    private:\r\n        friend class cereal::access;\r\n        template <class Archive> void serialize(Archive &ar) {ar(text);};\r\n};\r\n\r\n// Register Bug\r\nCEREAL_REGISTER_TYPE(Bug);\r\nCEREAL_REGISTER_POLYMORPHIC_RELATION(Serializable, Bug);\r\n\r\nint main()\r\n{\r\n    auto obj = make_shared<Bug>();\r\n\r\n    std::ostringstream os;\r\n    {\r\n        cereal::BinaryOutputArchive oarchive(os);\r\n        oarchive(dynamic_pointer_cast<Serializable>(obj));\r\n    }\r\n\r\n    shared_ptr<Serializable> obj2;\r\n    std::istringstream is(os.str());\r\n    {\r\n        cereal::BinaryInputArchive iarchive(is);\r\n        iarchive(obj2);\r\n    }\r\n\r\n    auto m = dynamic_pointer_cast<Bug>(obj2);\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThis code, when compiled with the latest `nlohmann::json` throws the following:\r\n\r\n```\r\nTrying to load an unregistered polymorphic type (Bug).\r\nMake sure your type is registered with CEREAL_REGISTER_TYPE and that the archive you are using was included (and registered with CEREAL_REGISTER_ARCHIVE) prior to calling CEREAL_REGISTER_TYPE.\r\nIf your type is already registered and you still see this error, you may need to use CEREAL_REGISTER_DYNAMIC_INIT.\r\n```\r\nCuriously though, compiling against a 2.X version of `nlohmann::json` does not produce this exception. \r\n\r\nI noticed this only happens when the method in the `Bug` class is `load`, which is why I'm opening an issue with cereal as well. \r\n\r\nI noticed one change from `nlohmann::json` 2.X->3.X is the inclusion of the `nlohmann::detail` namespace. Could this be somehow conflicting with `cereal::detail`? I will also open an issue against `cereal` as well.\r\n\r\nStill trying to figure out root cause of this. It may not be your library, just trying to figure out why I can no longer use `nlohmann::json` with Cereal when I upgrade from 2.X to 3.X\r\n\r\nCereal issue: https://github.com/USCiLab/cereal/issues/499"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1081", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1081/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1081/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1081/events", "html_url": "https://github.com/nlohmann/json/issues/1081", "id": 320968076, "node_id": "MDU6SXNzdWUzMjA5NjgwNzY=", "number": 1081, "title": "Error using json.dump();", "user": {"login": "Jerajo", "id": 26252994, "node_id": "MDQ6VXNlcjI2MjUyOTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26252994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jerajo", "html_url": "https://github.com/Jerajo", "followers_url": "https://api.github.com/users/Jerajo/followers", "following_url": "https://api.github.com/users/Jerajo/following{/other_user}", "gists_url": "https://api.github.com/users/Jerajo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jerajo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jerajo/subscriptions", "organizations_url": "https://api.github.com/users/Jerajo/orgs", "repos_url": "https://api.github.com/users/Jerajo/repos", "events_url": "https://api.github.com/users/Jerajo/events{/privacy}", "received_events_url": "https://api.github.com/users/Jerajo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-07T21:41:35Z", "updated_at": "2018-05-07T22:07:00Z", "closed_at": "2018-05-07T22:07:00Z", "author_association": "NONE", "body": "I'm using visual studio and I got this error. on the `xutility file`\r\n\r\n```console\r\nException thrown: write access violation.\r\nthis was 0xAFE3D714.\r\n```\r\n\r\n I'm doing a \"C\" compatible DLL in C++. Here is the code:\r\n\r\n```C++\r\n#define gmx extern \"C\" __declspec(dllexport)\r\nusing json = nlohmann::json;\r\n\r\nstatic json jsonDoc;\r\n\r\ngmx double read(char* path) {\r\n\ttry\r\n\t{\r\n\t\tifstream jsonFile(path);\r\n\t\tjsonFile >> jsonDoc;\r\n\t}\r\n\tcatch (const std::exception& error)\r\n\t{\r\n\t\tcout << error.what() << endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\ngmx string getJsonFile() {\r\n\treturn jsonDoc.dump();\r\n}\r\n```\r\nThen I implement it like this.\r\n\r\n```C++\r\n_read(file);\r\nstring output = _getJsonFile();\r\ncout << output.c_str();\r\n```\r\nI don't know what I doing wrong. I hope someone can help me.\r\n---\r\nwindows 10 x86 Visual Studio 2017 (v141):\r\nprint screen:\r\n![image](https://user-images.githubusercontent.com/26252994/39726609-9740ba46-521d-11e8-8c0a-fa493f726d7d.png)"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1080", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1080/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1080/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1080/events", "html_url": "https://github.com/nlohmann/json/issues/1080", "id": 320873400, "node_id": "MDU6SXNzdWUzMjA4NzM0MDA=", "number": 1080, "title": "Consuming TCP Stream", "user": {"login": "DogFive", "id": 1100426, "node_id": "MDQ6VXNlcjExMDA0MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DogFive", "html_url": "https://github.com/DogFive", "followers_url": "https://api.github.com/users/DogFive/followers", "following_url": "https://api.github.com/users/DogFive/following{/other_user}", "gists_url": "https://api.github.com/users/DogFive/gists{/gist_id}", "starred_url": "https://api.github.com/users/DogFive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DogFive/subscriptions", "organizations_url": "https://api.github.com/users/DogFive/orgs", "repos_url": "https://api.github.com/users/DogFive/repos", "events_url": "https://api.github.com/users/DogFive/events{/privacy}", "received_events_url": "https://api.github.com/users/DogFive/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-07T16:41:28Z", "updated_at": "2018-05-08T20:26:11Z", "closed_at": "2018-05-08T20:26:11Z", "author_association": "NONE", "body": "This is a question not an issue. I saw various issues back from this time last year about streams. Would the stream parser be able to parse/consume a TCP stream's buffer?\r\n\r\nFor example, it parses to the end of the buffer and the completing JSON isn't queued yet so it can rewind on buffer when new data has been queued. "}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1079", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1079/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1079/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1079/events", "html_url": "https://github.com/nlohmann/json/issues/1079", "id": 320715888, "node_id": "MDU6SXNzdWUzMjA3MTU4ODg=", "number": 1079, "title": "Compilation error with strong typed enums in map in combination with namespaces", "user": {"login": "an-ky", "id": 6542281, "node_id": "MDQ6VXNlcjY1NDIyODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6542281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/an-ky", "html_url": "https://github.com/an-ky", "followers_url": "https://api.github.com/users/an-ky/followers", "following_url": "https://api.github.com/users/an-ky/following{/other_user}", "gists_url": "https://api.github.com/users/an-ky/gists{/gist_id}", "starred_url": "https://api.github.com/users/an-ky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/an-ky/subscriptions", "organizations_url": "https://api.github.com/users/an-ky/orgs", "repos_url": "https://api.github.com/users/an-ky/repos", "events_url": "https://api.github.com/users/an-ky/events{/privacy}", "received_events_url": "https://api.github.com/users/an-ky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-07T08:20:43Z", "updated_at": "2018-05-28T12:53:24Z", "closed_at": "2018-05-28T12:53:24Z", "author_association": "NONE", "body": "- What is the issue you have?\r\nCompilation error.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nCompiling the small program below results in C2166: l-value specifies const object (see full compiler output below). When putting the map and the to/from_json in the same namespace it compiles. It boilds down to an assignment/construction of the map's value type.\r\n```\r\n#include <json/json.hpp>\r\n#include <map>\r\n#include <string>\r\n\r\nnamespace bla\r\n{\r\nenum class foo : uint16_t\r\n{\r\n\tbar, baz\r\n};\r\n} // comment this out and the lines above main in and it will compile\r\nusing foo_map = std::map<foo, std::string>;\r\n\r\nvoid to_json(nlohmann::json& j, const foo_map& m)\r\n{\r\n\r\n}\r\n\r\nvoid from_json(const nlohmann::json& j, foo_map& m)\r\n{\r\n\r\n}\r\n//}\r\n//using bla::foo_map;\r\nint main(int, char**)\r\n{\r\n\tnlohmann::json j;\r\n\tfoo_map m = j;\r\n}\r\n```\r\n\r\n- What is the expected behavior?\r\nIt should compile without errors \r\n\r\n- And what is the actual behavior instead?\r\nCompilation errors\r\n```\r\ncompiling main.cpp\r\nC:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.13.26128/bin/HostX64/x64/cl.exe /nologo /c /EHsc /Od /Zi /MDd \"/IC:\\Program Files (x86)\\IntelSWTools\\compilers_and_libraries\\windows\\ipp\\include\" /IC:\\Qt\\Qt5.9.5\\5.9.5\\msvc2017_64\\include /IC:\\Qt\\Qt5.9.5\\5.9.5\\msvc2017_64\\include\\QtCore /IC:\\Qt\\Qt5.9.5\\5.9.5\\msvc2017_64\\mkspecs\\win32-msvc /IC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\build-scratchpad-VC17ohneQt-Debug\\qtc_VC17_91031919-debug\\scratchpad.a434f584\\qt.headers /IC:\\Projekte\\thirdparty\\boost /IC:\\Projekte\\thirdparty\\fmt /IC:\\Projekte\\thirdparty\\json /IC:\\Projekte\\thirdparty\\nonius\\nonius /IC:\\Projekte\\thirdparty\\range-v3\\range-v3-vs2015\\include /DUNICODE /D_UNICODE /DWIN32 /DQT_CORE_LIB /DBOOST_LIB_DIAGNOSTIC /DBOOST_AUTO_LINK_TAGGED /DBOOST_RESULT_OF_USE_DECLTYPE /DBOOST_QT_PUSHBACK_WORKAROUND \"/DBOOST_QT_LISTOF_WORKAROUND=1\" \"/DWINVER=0x0502\" \"/D_WIN32_WINNT=0x0502\" \"/D_WIN32_WINDOWS=0x0502\" /FoC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\build-scratchpad-VC17ohneQt-Debug\\qtc_VC17_91031919-debug\\scratchpad.a434f584\\3a52ce780950d4d9\\main.cpp.obj C:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\scratchpad\\main.cpp /TP /FS /permissive- /std:c++latest /Zm200\r\n:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\utility(268): error C2166: l-value specifies const object\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\utility(267): note: while compiling class template member function 'std::pair<const _Kty,_Ty> &std::pair<const _Kty,_Ty>::operator =(std::pair<const _Kty,_Ty> &&) noexcept(false)'\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\nC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\monalysis-porsche\\thirdparty\\json\\json/json.hpp(1172): note: see reference to function template instantiation 'std::pair<const _Kty,_Ty> &std::pair<const _Kty,_Ty>::operator =(std::pair<const _Kty,_Ty> &&) noexcept(false)' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(443): note: see reference to class template instantiation 'std::pair<const _Kty,_Ty>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(739): note: see reference to class template instantiation 'std::_Tree_node<std::pair<const _Kty,_Ty>,std::_Default_allocator_traits<_Alloc>::void_pointer>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(738): note: while compiling class template member function 'void std::_Tree_comp_alloc<_Traits>::_Freeheadnode(std::_Tree_node<std::pair<const _Kty,_Ty>,std::_Default_allocator_traits<_Alloc>::void_pointer> *)'\r\n        with\r\n        [\r\n            _Traits=std::_Tmap_traits<bla::foo,std::string,std::less<bla::foo>,std::allocator<std::pair<const bla::foo,std::string>>,false>,\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(631): note: see reference to function template instantiation 'void std::_Tree_comp_alloc<_Traits>::_Freeheadnode(std::_Tree_node<std::pair<const _Kty,_Ty>,std::_Default_allocator_traits<_Alloc>::void_pointer> *)' being compiled\r\n        with\r\n        [\r\n            _Traits=std::_Tmap_traits<bla::foo,std::string,std::less<bla::foo>,std::allocator<std::pair<const bla::foo,std::string>>,false>,\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\xtree(842): note: see reference to class template instantiation 'std::_Tree_comp_alloc<_Traits>' being compiled\r\n        with\r\n        [\r\n            _Traits=std::_Tmap_traits<bla::foo,std::string,std::less<bla::foo>,std::allocator<std::pair<const bla::foo,std::string>>,false>\r\n        ]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.13.26128\\include\\map(81): note: see reference to class template instantiation 'std::_Tree<std::_Tmap_traits<_Kty,_Ty,_Pr,_Alloc,false>>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string,\r\n            _Pr=std::less<bla::foo>,\r\n            _Alloc=std::allocator<std::pair<const bla::foo,std::string>>\r\n        ]\r\nC:\\Projekte\\monalysis\\Entwicklung\\Quellen\\Projekte\\scratchpad\\main.cpp(212): note: see reference to class template instantiation 'std::map<bla::foo,std::string,std::less<_Kty>,std::allocator<std::pair<const _Kty,_Ty>>>' being compiled\r\n        with\r\n        [\r\n            _Kty=bla::foo,\r\n            _Ty=std::string\r\n        ]\r\n```\r\n\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nMSVC 2017 (15.6.6); MSVC 19.0.24215.1 (CMake output)\r\nNot directly supported.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nRelease 3.1.2\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\nTried but ctest gives error `Test not available without configuration.  (Missing \"-C <config>\"?)` for every test case. If told how to fix this I'll happily execute the tests."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1078", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1078/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1078/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1078/events", "html_url": "https://github.com/nlohmann/json/pull/1078", "id": 320073584, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg1ODMyOTk3", "number": 1078, "title": "fix typo in README", "user": {"login": "martin-mfg", "id": 2026226, "node_id": "MDQ6VXNlcjIwMjYyMjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2026226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martin-mfg", "html_url": "https://github.com/martin-mfg", "followers_url": "https://api.github.com/users/martin-mfg/followers", "following_url": "https://api.github.com/users/martin-mfg/following{/other_user}", "gists_url": "https://api.github.com/users/martin-mfg/gists{/gist_id}", "starred_url": "https://api.github.com/users/martin-mfg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martin-mfg/subscriptions", "organizations_url": "https://api.github.com/users/martin-mfg/orgs", "repos_url": "https://api.github.com/users/martin-mfg/repos", "events_url": "https://api.github.com/users/martin-mfg/events{/privacy}", "received_events_url": "https://api.github.com/users/martin-mfg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 395133926, "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=", "url": "https://api.github.com/repos/nlohmann/json/labels/documentation", "name": "documentation", "color": "0e8a16", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/nlohmann/json/milestones/24", "html_url": "https://github.com/nlohmann/json/milestone/24", "labels_url": "https://api.github.com/repos/nlohmann/json/milestones/24/labels", "id": 3188647, "node_id": "MDk6TWlsZXN0b25lMzE4ODY0Nw==", "number": 24, "title": "Release 3.1.3", "description": "The next release when backwards compatible bux fixes are made", "creator": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 33, "state": "open", "created_at": "2018-03-14T21:05:47Z", "updated_at": "2018-07-21T12:46:17Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2018-05-03T20:44:53Z", "updated_at": "2018-05-04T15:04:42Z", "closed_at": "2018-05-04T15:04:36Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1078", "html_url": "https://github.com/nlohmann/json/pull/1078", "diff_url": "https://github.com/nlohmann/json/pull/1078.diff", "patch_url": "https://github.com/nlohmann/json/pull/1078.patch"}, "body": "The README says:\r\n> \"The library itself contains of a single header file ...\"\r\n\r\nI guess \"consists of a\" is the wording that was intended here. Alternatively, \"contains a\" might also be what was intended. Either way, I think both versions work equally well and thus choose the one that I believe was intended."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1077", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1077/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1077/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1077/events", "html_url": "https://github.com/nlohmann/json/pull/1077", "id": 319992859, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg1NzcxNjgx", "number": 1077, "title": "Update issue templates", "user": {"login": "nlohmann", "id": 159488, "node_id": "MDQ6VXNlcjE1OTQ4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/159488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlohmann", "html_url": "https://github.com/nlohmann", "followers_url": "https://api.github.com/users/nlohmann/followers", "following_url": "https://api.github.com/users/nlohmann/following{/other_user}", "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions", "organizations_url": "https://api.github.com/users/nlohmann/orgs", "repos_url": "https://api.github.com/users/nlohmann/repos", "events_url": "https://api.github.com/users/nlohmann/events{/privacy}", "received_events_url": "https://api.github.com/users/nlohmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-03T16:29:25Z", "updated_at": "2018-05-03T16:29:46Z", "closed_at": "2018-05-03T16:29:42Z", "author_association": "OWNER", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1077", "html_url": "https://github.com/nlohmann/json/pull/1077", "diff_url": "https://github.com/nlohmann/json/pull/1077.diff", "patch_url": "https://github.com/nlohmann/json/pull/1077.patch"}, "body": ""}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1076", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1076/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1076/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1076/events", "html_url": "https://github.com/nlohmann/json/issues/1076", "id": 319772333, "node_id": "MDU6SXNzdWUzMTk3NzIzMzM=", "number": 1076, "title": "cassert error", "user": {"login": "sburnwal", "id": 18064711, "node_id": "MDQ6VXNlcjE4MDY0NzEx", "avatar_url": "https://avatars1.githubusercontent.com/u/18064711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sburnwal", "html_url": "https://github.com/sburnwal", "followers_url": "https://api.github.com/users/sburnwal/followers", "following_url": "https://api.github.com/users/sburnwal/following{/other_user}", "gists_url": "https://api.github.com/users/sburnwal/gists{/gist_id}", "starred_url": "https://api.github.com/users/sburnwal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sburnwal/subscriptions", "organizations_url": "https://api.github.com/users/sburnwal/orgs", "repos_url": "https://api.github.com/users/sburnwal/repos", "events_url": "https://api.github.com/users/sburnwal/events{/privacy}", "received_events_url": "https://api.github.com/users/sburnwal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 46374236, "node_id": "MDU6TGFiZWw0NjM3NDIzNg==", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix", "name": "solution: wontfix", "color": "000000", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-03T02:44:15Z", "updated_at": "2018-05-27T16:19:32Z", "closed_at": "2018-05-27T16:19:32Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\nI know you have mentioned that this json lib works great with gcc 4.9. However, my project is big and it uses gcc 4.8 which is not easy to migrate to 4.9. When I write a small program, it works great. I can test json sample programs as you have mentioned in documentation. However, I want to use it in my project that is gcc 4.8.2 based. I took off the gcc 9 check from json.hpp and compiled fine and ran some tests that was all fine. But once in my poroject, my build does not go through. It gives this error:\r\n\r\n```\r\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\r\n from ../security/src/libjwt/include/jwt/json.hpp:34,\r\n\r\nAt line 34 in json.hpp: \r\n   32 #include <algorithm> // all_of, copy, fill, find, for_each, none_of, remove, reverse, transform\r\n   33 #include <array>   // array\r\n   34 #include <cassert> // assert\r\n   35 #include <cctype>  // isdigit\r\n\r\n../security/src/libjwt/include/jwt/json.hpp:6055:31:   required from \u2018static nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer> nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::parse(IteratorType, IteratorType, nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::parser_callback_t) [with IteratorType = const char*; typename std::enable_if<std::is_base_of<std::random_access_iterator_tag, typename std::iterator_traits<_II1>::iterator_category>::value, int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::adl_serializer; nlohmann::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer>::parser_callback_t = std::function<bool(int, nlohmann::basic_json<>::parse_event_t, nlohmann::basic_json<>&)>]\u2019\r\n\r\n../security/src/libjwt/include/jwt/json.hpp:11764:40:   required from here\r\n../security/src/libjwt/include/jwt/json.hpp:1579:19: error: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second: [-Werror]\r\n     assert(object != nullptr);\r\n\r\n```\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\nSorry, I cannot myself repro it but want to know if anyone has faced it and what is the likely way to get out of it ? Any hint would be helpful.\r\n\r\n- What is the expected behavior?\r\nCompilation should succeed.\r\n\r\n- And what is the actual behavior instead?\r\nCompilation error.\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1075", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1075/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1075/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1075/events", "html_url": "https://github.com/nlohmann/json/issues/1075", "id": 319758831, "node_id": "MDU6SXNzdWUzMTk3NTg4MzE=", "number": 1075, "title": "Valid json data not being parsed", "user": {"login": "moshe-rabaev", "id": 12215501, "node_id": "MDQ6VXNlcjEyMjE1NTAx", "avatar_url": "https://avatars3.githubusercontent.com/u/12215501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moshe-rabaev", "html_url": "https://github.com/moshe-rabaev", "followers_url": "https://api.github.com/users/moshe-rabaev/followers", "following_url": "https://api.github.com/users/moshe-rabaev/following{/other_user}", "gists_url": "https://api.github.com/users/moshe-rabaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/moshe-rabaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moshe-rabaev/subscriptions", "organizations_url": "https://api.github.com/users/moshe-rabaev/orgs", "repos_url": "https://api.github.com/users/moshe-rabaev/repos", "events_url": "https://api.github.com/users/moshe-rabaev/events{/privacy}", "received_events_url": "https://api.github.com/users/moshe-rabaev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-03T00:56:46Z", "updated_at": "2018-05-23T17:38:07Z", "closed_at": "2018-05-23T17:38:07Z", "author_association": "NONE", "body": "libc++abi.dylib: terminating with uncaught exception of type nlohmann::detail::parse_error: [json.exception.parse_error.101] parse error at 1: syntax error - unexpected end of input; expected '[', '{', or a literal\r\nAbort trap: 6\r\n\r\nI'm parsing sport json data from a website and I get the text and parse it but it throws me the error\r\nabove. I validated the data using a tool online, it shows there are no errors so it must be nlohmann::json.\r\n\r\nThis is the data:\r\n{\"fullgameschedule\":{\"lastUpdatedOn\":\"2018-04-13 2:44:29 AM\",\"gameentry\":[{\"id\":\"33943\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-25\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"101\",\"City\":\"Golden State\",\"Name\":\"Warriors\",\"Abbreviation\":\"GSW\"},\"location\":\"Oracle Arena\"},{\"id\":\"33956\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-27\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"location\":\"Sleep Train Arena\"},{\"id\":\"33972\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-29\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"33977\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-10-30\",\"time\":\"6:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"92\",\"City\":\"Miami\",\"Name\":\"Heat\",\"Abbreviation\":\"MIA\"},\"location\":\"American Airlines Arena\"},{\"id\":\"33993\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-01\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34017\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-04\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"location\":\"Vivint Smart Home Arena\"},{\"id\":\"34026\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-05\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34054\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-09\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34067\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-11\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"88\",\"City\":\"Detroit\",\"Name\":\"Pistons\",\"Abbreviation\":\"DET\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34074\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-12\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"location\":\"Toyota Center\"},{\"id\":\"34090\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-14\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"92\",\"City\":\"Miami\",\"Name\":\"Heat\",\"Abbreviation\":\"MIA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34108\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-16\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"location\":\"Sleep Train Arena\"},{\"id\":\"34122\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-18\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"location\":\"Staples Center\"},{\"id\":\"34146\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-21\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34153\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-23\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"93\",\"City\":\"Charlotte\",\"Name\":\"Hornets\",\"Abbreviation\":\"CHA\"},\"location\":\"Spectrum Center\"},{\"id\":\"34165\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-25\",\"time\":\"1:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"82\",\"City\":\"Boston\",\"Name\":\"Celtics\",\"Abbreviation\":\"BOS\"},\"location\":\"TD Garden\"},{\"id\":\"34180\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-26\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"94\",\"City\":\"Washington\",\"Name\":\"Wizards\",\"Abbreviation\":\"WAS\"},\"location\":\"Verizon Center\"},{\"id\":\"34204\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-29\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"95\",\"City\":\"Orlando\",\"Name\":\"Magic\",\"Abbreviation\":\"ORL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34212\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-11-30\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"location\":\"American Airlines Center\"},{\"id\":\"34229\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-02\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"94\",\"City\":\"Washington\",\"Name\":\"Wizards\",\"Abbreviation\":\"WAS\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34249\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-05\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"90\",\"City\":\"Milwaukee\",\"Name\":\"Bucks\",\"Abbreviation\":\"MIL\"},\"location\":\"BMO Bradley Harris Center\"},{\"id\":\"34259\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-06\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"location\":\"Target Center\"},{\"id\":\"34276\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-08\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"89\",\"City\":\"Chicago\",\"Name\":\"Bulls\",\"Abbreviation\":\"CHI\"},\"location\":\"KeyBank Center\"},{\"id\":\"34293\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-10\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"84\",\"City\":\"Brooklyn\",\"Name\":\"Nets\",\"Abbreviation\":\"BRO\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34323\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-14\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"82\",\"City\":\"Boston\",\"Name\":\"Celtics\",\"Abbreviation\":\"BOS\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"40235\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-15\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"104\",\"City\":\"Phoenix\",\"Name\":\"Suns\",\"Abbreviation\":\"PHX\"},\"location\":\"Talking Stick Resort Arena\"},{\"id\":\"34352\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-18\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34365\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-20\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"location\":\"Toyota Center\"},{\"id\":\"34381\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-22\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"location\":\"Staples Center\"},{\"id\":\"34394\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-23\",\"time\":\"10:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"location\":\"Moda Center\"},{\"id\":\"34398\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-25\",\"time\":\"5:00PM\",\"awayTeam\":{\"ID\":\"89\",\"City\":\"Chicago\",\"Name\":\"Bulls\",\"Abbreviation\":\"CHI\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34422\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-28\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"104\",\"City\":\"Phoenix\",\"Name\":\"Suns\",\"Abbreviation\":\"PHX\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34439\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2016-12-30\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34448\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-01\",\"time\":\"6:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"91\",\"City\":\"Atlanta\",\"Name\":\"Hawks\",\"Abbreviation\":\"ATL\"},\"location\":\"Philips Arena\"},{\"id\":\"34465\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-03\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"81\",\"City\":\"Toronto\",\"Name\":\"Raptors\",\"Abbreviation\":\"TOR\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34483\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-05\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"99\",\"City\":\"Denver\",\"Name\":\"Nuggets\",\"Abbreviation\":\"DEN\"},\"location\":\"Pepsi Center\"},{\"id\":\"34498\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-07\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"93\",\"City\":\"Charlotte\",\"Name\":\"Hornets\",\"Abbreviation\":\"CHA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34515\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-10\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"90\",\"City\":\"Milwaukee\",\"Name\":\"Bucks\",\"Abbreviation\":\"MIL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34529\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-12\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34543\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-14\",\"time\":\"6:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"104\",\"City\":\"Phoenix\",\"Name\":\"Suns\",\"Abbreviation\":\"PHX\"},\"location\":\"Talking Stick Resort Arena\"},{\"id\":\"34565\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-17\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34579\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-19\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"99\",\"City\":\"Denver\",\"Name\":\"Nuggets\",\"Abbreviation\":\"DEN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34597\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-21\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"86\",\"City\":\"Cleveland\",\"Name\":\"Cavaliers\",\"Abbreviation\":\"CLE\"},\"location\":\"Quicken Loans Arena\"},{\"id\":\"34606\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-23\",\"time\":\"7:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"84\",\"City\":\"Brooklyn\",\"Name\":\"Nets\",\"Abbreviation\":\"BRO\"},\"location\":\"Barclays Center\"},{\"id\":\"34614\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-24\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"81\",\"City\":\"Toronto\",\"Name\":\"Raptors\",\"Abbreviation\":\"TOR\"},\"location\":\"Air Canada Center\"},{\"id\":\"34641\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-27\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"location\":\"Smoothie King Center\"},{\"id\":\"34657\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-29\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34667\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-01-31\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"96\",\"City\":\"Oklahoma City\",\"Name\":\"Thunder\",\"Abbreviation\":\"OKL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34684\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-02\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"85\",\"City\":\"Philadelphia\",\"Name\":\"76ers\",\"Abbreviation\":\"PHI\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34702\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-04\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"99\",\"City\":\"Denver\",\"Name\":\"Nuggets\",\"Abbreviation\":\"DEN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34717\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-06\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"location\":\"FedEx Forum\"},{\"id\":\"34722\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-08\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"85\",\"City\":\"Philadelphia\",\"Name\":\"76ers\",\"Abbreviation\":\"PHI\"},\"location\":\"Wells Fargo Center\"},{\"id\":\"34741\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-10\",\"time\":\"7:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"88\",\"City\":\"Detroit\",\"Name\":\"Pistons\",\"Abbreviation\":\"DET\"},\"location\":\"The Palace of Auburn Hills\"},{\"id\":\"34757\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-12\",\"time\":\"3:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"83\",\"City\":\"New York\",\"Name\":\"Knicks\",\"Abbreviation\":\"NYK\"},\"location\":\"Madison Square Garden\"},{\"id\":\"34765\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-13\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"87\",\"City\":\"Indiana\",\"Name\":\"Pacers\",\"Abbreviation\":\"IND\"},\"location\":\"Bankers Life Fieldhouse\"},{\"id\":\"34774\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-15\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"95\",\"City\":\"Orlando\",\"Name\":\"Magic\",\"Abbreviation\":\"ORL\"},\"location\":\"Amway Center\"},{\"id\":\"34805\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-24\",\"time\":\"10:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"location\":\"Staples Center\"},{\"id\":\"34814\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-02-26\",\"time\":\"3:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"location\":\"Staples Center\"},{\"id\":\"34842\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-01\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"87\",\"City\":\"Indiana\",\"Name\":\"Pacers\",\"Abbreviation\":\"IND\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34857\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-03\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"110\",\"City\":\"New Orleans\",\"Name\":\"Pelicans\",\"Abbreviation\":\"NOP\"},\"location\":\"Smoothie King Center\"},{\"id\":\"34865\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-04\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34882\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-06\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"109\",\"City\":\"Houston\",\"Name\":\"Rockets\",\"Abbreviation\":\"HOU\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34897\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-08\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34902\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-09\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"96\",\"City\":\"Oklahoma City\",\"Name\":\"Thunder\",\"Abbreviation\":\"OKL\"},\"location\":\"Chesapeake Energy Arena\"},{\"id\":\"34920\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-11\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"101\",\"City\":\"Golden State\",\"Name\":\"Warriors\",\"Abbreviation\":\"GSW\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34934\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-13\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"91\",\"City\":\"Atlanta\",\"Name\":\"Hawks\",\"Abbreviation\":\"ATL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34951\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-15\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34973\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-18\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"location\":\"FedEx Forum\"},{\"id\":\"34982\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-19\",\"time\":\"7:00PM\",\"awayTeam\":{\"ID\":\"103\",\"City\":\"Sacramento\",\"Name\":\"Kings\",\"Abbreviation\":\"SAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"34996\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-21\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"100\",\"City\":\"Minnesota\",\"Name\":\"Timberwolves\",\"Abbreviation\":\"MIN\"},\"location\":\"Target Center\"},{\"id\":\"35010\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-23\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35025\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-25\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"83\",\"City\":\"New York\",\"Name\":\"Knicks\",\"Abbreviation\":\"NYK\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35039\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-27\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"86\",\"City\":\"Cleveland\",\"Name\":\"Cavaliers\",\"Abbreviation\":\"CLE\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35058\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-29\",\"time\":\"9:30PM\",\"awayTeam\":{\"ID\":\"101\",\"City\":\"Golden State\",\"Name\":\"Warriors\",\"Abbreviation\":\"GSW\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35075\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-03-31\",\"time\":\"8:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"96\",\"City\":\"Oklahoma City\",\"Name\":\"Thunder\",\"Abbreviation\":\"OKL\"},\"location\":\"Chesapeake Energy Arena\"},{\"id\":\"35086\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-02\",\"time\":\"3:30PM\",\"awayTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35101\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-04\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"107\",\"City\":\"Memphis\",\"Name\":\"Grizzlies\",\"Abbreviation\":\"MEM\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35110\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-05\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"105\",\"City\":\"Los Angeles\",\"Name\":\"Lakers\",\"Abbreviation\":\"LAL\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35123\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-07\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"108\",\"City\":\"Dallas\",\"Name\":\"Mavericks\",\"Abbreviation\":\"DAL\"},\"location\":\"American Airlines Center\"},{\"id\":\"35133\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-08\",\"time\":\"8:30PM\",\"awayTeam\":{\"ID\":\"102\",\"City\":\"Los Angeles\",\"Name\":\"Clippers\",\"Abbreviation\":\"LAC\"},\"homeTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"location\":\"AT&T Center\"},{\"id\":\"35149\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-10\",\"time\":\"10:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"97\",\"City\":\"Portland\",\"Name\":\"Trail Blazers\",\"Abbreviation\":\"POR\"},\"location\":\"Moda Center\"},{\"id\":\"35167\",\"scheduleStatus\":\"Normal\",\"originalDate\":null,\"originalTime\":null,\"delayedOrPostponedReason\":null,\"date\":\"2017-04-12\",\"time\":\"9:00PM\",\"awayTeam\":{\"ID\":\"106\",\"City\":\"San Antonio\",\"Name\":\"Spurs\",\"Abbreviation\":\"SAS\"},\"homeTeam\":{\"ID\":\"98\",\"City\":\"Utah\",\"Name\":\"Jazz\",\"Abbreviation\":\"UTA\"},\"location\":\"Vivint Smart Home Arena\"}]}}\r\n\r\nStore the above in a std::string and parse it using:\r\njson::parse(str.begin(), str.end())\r\n\r\n- What is the expected behavior?\r\nTo parse the data with no errors\r\n\r\n- And what is the actual behavior instead?\r\nIt throws an exception\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\nIt's not a runtime error so this question isn't applicable.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\nThe develop version."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1074", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1074/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1074/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1074/events", "html_url": "https://github.com/nlohmann/json/issues/1074", "id": 319728329, "node_id": "MDU6SXNzdWUzMTk3MjgzMjk=", "number": 1074, "title": "Feature request :: Better testing for key existance without try/catch", "user": {"login": "mlfarrell", "id": 7664370, "node_id": "MDQ6VXNlcjc2NjQzNzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7664370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlfarrell", "html_url": "https://github.com/mlfarrell", "followers_url": "https://api.github.com/users/mlfarrell/followers", "following_url": "https://api.github.com/users/mlfarrell/following{/other_user}", "gists_url": "https://api.github.com/users/mlfarrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlfarrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlfarrell/subscriptions", "organizations_url": "https://api.github.com/users/mlfarrell/orgs", "repos_url": "https://api.github.com/users/mlfarrell/repos", "events_url": "https://api.github.com/users/mlfarrell/events{/privacy}", "received_events_url": "https://api.github.com/users/mlfarrell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-02T22:04:41Z", "updated_at": "2018-05-04T17:03:20Z", "closed_at": "2018-05-04T17:03:20Z", "author_association": "NONE", "body": "Correct me if I'm wrong, but using a const json obj + .at() + try/catch is the only way safe to test for object key exists.  This seems REALLY brutal compared to the ease of use using the rest of the library\r\n\r\nPerhaps there'd be some way to return a bool operator comparable for object gets along the lines of\r\n```\r\nif(auto possibleVal = json[\"maybeExists\"])\r\n{\r\n  //possibleVal exists\r\n}\r\n```\r\n\r\nor.. at the very least, a .exists(const std::string &) method would be helpful.."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1073", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1073/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1073/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1073/events", "html_url": "https://github.com/nlohmann/json/issues/1073", "id": 319285271, "node_id": "MDU6SXNzdWUzMTkyODUyNzE=", "number": 1073, "title": "Hi, I have input like a.b.c and want to convert it to \\\"a\\\"{\\\"b\\\": \\\"c\\\"} form. Any suggestions how do I do this? Thanks.", "user": {"login": "dmg10", "id": 14875270, "node_id": "MDQ6VXNlcjE0ODc1Mjcw", "avatar_url": "https://avatars1.githubusercontent.com/u/14875270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmg10", "html_url": "https://github.com/dmg10", "followers_url": "https://api.github.com/users/dmg10/followers", "following_url": "https://api.github.com/users/dmg10/following{/other_user}", "gists_url": "https://api.github.com/users/dmg10/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmg10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmg10/subscriptions", "organizations_url": "https://api.github.com/users/dmg10/orgs", "repos_url": "https://api.github.com/users/dmg10/repos", "events_url": "https://api.github.com/users/dmg10/events{/privacy}", "received_events_url": "https://api.github.com/users/dmg10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-01T18:38:19Z", "updated_at": "2018-05-01T21:44:06Z", "closed_at": "2018-05-01T21:44:06Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\n- What is the expected behavior?\r\n\r\n- And what is the actual behavior instead?\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n\r\n**Feature Request**\r\n\r\n- Describe the feature in as much detail as possible.\r\n\r\n- Include sample usage where appropriate.\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1072", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1072/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1072/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1072/events", "html_url": "https://github.com/nlohmann/json/issues/1072", "id": 319276708, "node_id": "MDU6SXNzdWUzMTkyNzY3MDg=", "number": 1072, "title": "ADL deserializer not picked up for non default-constructible type", "user": {"login": "SylvainCorlay", "id": 2397974, "node_id": "MDQ6VXNlcjIzOTc5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2397974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvainCorlay", "html_url": "https://github.com/SylvainCorlay", "followers_url": "https://api.github.com/users/SylvainCorlay/followers", "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}", "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions", "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs", "repos_url": "https://api.github.com/users/SylvainCorlay/repos", "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-01T18:08:45Z", "updated_at": "2018-05-01T18:24:35Z", "closed_at": "2018-05-01T18:24:35Z", "author_association": "NONE", "body": "**Bug Report**\r\n\r\n- What is the issue you have?\r\n\r\nI am seeing a situation where\r\n\r\n```cpp\r\nv = j;\r\n```\r\npicks up the default deserializer, which yields in my case\r\n\r\n```\r\nStandard Exception: [json.exception.type_error.302] type must be number, but is array\r\n```\r\n\r\nwhile an unqualified call to `from_Json` like\r\n\r\n```\r\nfrom_json(j, v);\r\n```\r\n\r\nresults in the right overload being picked up through ADL.\r\n\r\n- Please describe the steps to reproduce the issue. Can you provide a small but working code example?\r\n\r\nThis came up in the xtensor PR https://github.com/QuantStack/xtensor/pull/830 in which I joined an example notebook:\r\n\r\nhttps://github.com/SylvainCorlay/xtensor/blob/d4a67ac488fc10a99b7238d9314a9970f5562c34/notebooks/json.ipynb\r\n\r\n<img width=\"742\" alt=\"screen shot 2018-05-01 at 8 18 39 pm\" src=\"https://user-images.githubusercontent.com/2397974/39486566-ea6ed0e0-4d7c-11e8-8e59-5b03052a6aa1.png\">\r\n\r\n- Which compiler and operating system are you using? Is it a [supported compiler](https://github.com/nlohmann/json#supported-compilers)?\r\n\r\nClang (through cling) for the example, but I see the same thing in gcc.\r\n\r\n- Did you use a released version of the library or the version from the `develop` branch?\r\n\r\nno\r\n\r\n- If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\nno compilation error"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1071", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1071/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1071/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1071/events", "html_url": "https://github.com/nlohmann/json/issues/1071", "id": 319027651, "node_id": "MDU6SXNzdWUzMTkwMjc2NTE=", "number": 1071, "title": "Deserializing std::array doesn't compiler (no insert())", "user": {"login": "Yitzi2", "id": 24446322, "node_id": "MDQ6VXNlcjI0NDQ2MzIy", "avatar_url": "https://avatars2.githubusercontent.com/u/24446322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yitzi2", "html_url": "https://github.com/Yitzi2", "followers_url": "https://api.github.com/users/Yitzi2/followers", "following_url": "https://api.github.com/users/Yitzi2/following{/other_user}", "gists_url": "https://api.github.com/users/Yitzi2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yitzi2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yitzi2/subscriptions", "organizations_url": "https://api.github.com/users/Yitzi2/orgs", "repos_url": "https://api.github.com/users/Yitzi2/repos", "events_url": "https://api.github.com/users/Yitzi2/events{/privacy}", "received_events_url": "https://api.github.com/users/Yitzi2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 735376215, "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=", "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info", "name": "state: needs more info", "color": "f9d0c4", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-30T20:39:33Z", "updated_at": "2018-05-02T14:40:07Z", "closed_at": "2018-05-02T14:40:07Z", "author_association": "NONE", "body": "I've found that, at least in Visual Studio (but I suspect everywhere), attempting to convert a JSON into a std::array fails to compile, since std::array has a value type (and therefore uses the container deserializer), but no insert() method (which is used by the container deserializer).  While not all that hard to work around, it'd be nice to have it fixed."}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1070", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1070/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1070/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1070/events", "html_url": "https://github.com/nlohmann/json/issues/1070", "id": 318957460, "node_id": "MDU6SXNzdWUzMTg5NTc0NjA=", "number": 1070, "title": "Serializing OpenCV Mat problem", "user": {"login": "ArkadiuszRaj", "id": 16072469, "node_id": "MDQ6VXNlcjE2MDcyNDY5", "avatar_url": "https://avatars3.githubusercontent.com/u/16072469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArkadiuszRaj", "html_url": "https://github.com/ArkadiuszRaj", "followers_url": "https://api.github.com/users/ArkadiuszRaj/followers", "following_url": "https://api.github.com/users/ArkadiuszRaj/following{/other_user}", "gists_url": "https://api.github.com/users/ArkadiuszRaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArkadiuszRaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArkadiuszRaj/subscriptions", "organizations_url": "https://api.github.com/users/ArkadiuszRaj/orgs", "repos_url": "https://api.github.com/users/ArkadiuszRaj/repos", "events_url": "https://api.github.com/users/ArkadiuszRaj/events{/privacy}", "received_events_url": "https://api.github.com/users/ArkadiuszRaj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 558418062, "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=", "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix", "name": "solution: proposed fix", "color": "00bb00", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-30T16:45:55Z", "updated_at": "2018-05-25T05:45:39Z", "closed_at": "2018-05-24T20:20:00Z", "author_association": "NONE", "body": "Hello,\r\n\r\nTrying to serialise Mat object taken from camera\r\n\r\n```cpp\r\n        json j;\t\r\n        Mat image;\r\n\tj[\"PREVIEW\"] = {\r\n\t\t{\"GAIN\", gain()},\r\n\t\t{\"EXPOSURE\", exposure()},\r\n\t\t{\"IMAGE\", image},\r\n\t};\r\n```\r\nOf course specialised serializer is prepared, for the sake of clarity only one Mat depth is shown:\r\n```cpp\r\nvoid to_json(json& j, const Mat& m)  \r\n{\r\n\tjson array = json::array();\r\n\r\n\tint cols = m.cols;\r\n\tint rows = m.rows;\r\n\tint depth = m.depth();\r\n\t\r\n\tif( m.isContinuous() ) {\r\n\t\tcols *= rows,\r\n\t\trows = 1;\r\n\t}\r\n\tswitch(depth) {\r\n\t\tcase CV_8U:\r\n\t\t\tfor(int row = 0; row < rows; row++) {\r\n\t\t\t\tauto vp = m.ptr<uchar>(row);\r\n\t\t\t\tfor(int col=0; col < cols; col++, vp++)\r\n\t\t\t\t\tarray.push_back(*vp); \r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\tj = json{\r\n\t\t{\"COLS\", cols},\r\n\t\t{\"ROWS\", rows},\r\n\t\t{\"TYPE\", depth},\r\n\t\t{\"DATA\", array}\r\n\t};\r\n}\r\n\r\n```\r\nBut code throws:\r\n```\r\nOpenCV(4.0.0-pre) /usr/local/include/opencv2/core/mat.inl.hpp:183: error: (-210:Unsupported format or combination of formats) in function '_OutputArray'\r\n> std::vector<bool> cannot be an output array\r\n```\r\nIt seems that somewhere under the hood the Mat type is changed while calling serializer.\r\n\r\nBut code works when I am explicitly calling serializer by myself:\r\n```cpp\r\n\tj[\"PREVIEW\"] = {\r\n\t\t{\"GAIN\", gain()},\r\n\t\t{\"EXPOSURE\", exposure()}\r\n\t};\r\n       to_json(j[\"PREVIEW\"][\"IMAGE\"], image) ;\r\n```\r\nWhy first version does not?\r\nAdditionally, while pushing to array, json dump() (or serializing to stream in general) puts single value per line, making file unreadable. Is there possibility to set  number of values per line?\r\nAnd can I serialize in such a way 3Mpx image? yes, finally I will put some base64 encoding yet still I need to serialize full image from time to time\r\n\r\n"}, {"url": "https://api.github.com/repos/nlohmann/json/issues/1069", "repository_url": "https://api.github.com/repos/nlohmann/json", "labels_url": "https://api.github.com/repos/nlohmann/json/issues/1069/labels{/name}", "comments_url": "https://api.github.com/repos/nlohmann/json/issues/1069/comments", "events_url": "https://api.github.com/repos/nlohmann/json/issues/1069/events", "html_url": "https://github.com/nlohmann/json/pull/1069", "id": 317890657, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg0MjM1NzI2", "number": 1069, "title": "Create blackblox.json", "user": {"login": "NateBu", "id": 3534004, "node_id": "MDQ6VXNlcjM1MzQwMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3534004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NateBu", "html_url": "https://github.com/NateBu", "followers_url": "https://api.github.com/users/NateBu/followers", "following_url": "https://api.github.com/users/NateBu/following{/other_user}", "gists_url": "https://api.github.com/users/NateBu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NateBu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NateBu/subscriptions", "organizations_url": "https://api.github.com/users/NateBu/orgs", "repos_url": "https://api.github.com/users/NateBu/repos", "events_url": "https://api.github.com/users/NateBu/events{/privacy}", "received_events_url": "https://api.github.com/users/NateBu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-26T06:13:59Z", "updated_at": "2018-04-26T07:35:57Z", "closed_at": "2018-04-26T06:14:15Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/nlohmann/json/pulls/1069", "html_url": "https://github.com/nlohmann/json/pull/1069", "diff_url": "https://github.com/nlohmann/json/pull/1069.diff", "patch_url": "https://github.com/nlohmann/json/pull/1069.patch"}, "body": "[Describe your pull request here. Please read the text below the line, and make sure you follow the checklist.]\r\n\r\n* * *\r\n\r\n## Pull request checklist\r\n\r\nRead the [Contribution Guidelines](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md) for detailed information.\r\n\r\n- [ ]  Changes are described in the pull request, or an [existing issue is referenced](https://github.com/nlohmann/json/issues).\r\n- [ ]  The test suite [compiles and runs](https://github.com/nlohmann/json/blob/develop/README.md#execute-unit-tests) without error.\r\n- [ ]  [Code coverage](https://coveralls.io/github/nlohmann/json) is 100%. Test cases can be added by editing the [test suite](https://github.com/nlohmann/json/tree/develop/test/src).\r\n- [ ]  The source code is amalgamated; that is, after making changes to the sources in the `include/nlohmann` directory, run `make amalgamate` to create the single-header file `single_include/nlohmann/json.hpp`. The whole process is described [here](https://github.com/nlohmann/json/blob/develop/.github/CONTRIBUTING.md#files-to-change).\r\n\r\n## Please don't\r\n\r\n- The C++11 support varies between different **compilers** and versions. Please note the [list of supported compilers](https://github.com/nlohmann/json/blob/master/README.md#supported-compilers). Some compilers like GCC 4.8 (and earlier), Clang 3.3 (and earlier), or Microsoft Visual Studio 13.0 and earlier are known not to work due to missing or incomplete C++11 support. Please refrain from proposing changes that work around these compiler's limitations with `#ifdef`s or other means.\r\n- Specifically, I am aware of compilation problems with **Microsoft Visual Studio** (there even is an [issue label](https://github.com/nlohmann/json/issues?utf8=\u2713&q=label%3A%22visual+studio%22+) for these kind of bugs). I understand that even in 2016, complete C++11 support isn't there yet. But please also understand that I do not want to drop features or uglify the code just to make Microsoft's sub-standard compiler happy. The past has shown that there are ways to express the functionality such that the code compiles with the most recent MSVC - unfortunately, this is not the main objective of the project.\r\n- Please refrain from proposing changes that would **break [JSON](http://json.org) conformance**. If you propose a conformant extension of JSON to be supported by the library, please motivate this extension.\r\n- Please do not open pull requests that address **multiple issues**.\r\n"}]