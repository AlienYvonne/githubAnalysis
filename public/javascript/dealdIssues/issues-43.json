[{"url": "https://api.github.com/repos/airbnb/javascript/issues/454", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/454/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/454/events", "html_url": "https://github.com/airbnb/javascript/issues/454", "id": 99094748, "node_id": "MDU6SXNzdWU5OTA5NDc0OA==", "number": 454, "title": "Missing no-undef in .eslintrc", "user": {"login": "BaoDelta", "id": 142703, "node_id": "MDQ6VXNlcjE0MjcwMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/142703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BaoDelta", "html_url": "https://github.com/BaoDelta", "followers_url": "https://api.github.com/users/BaoDelta/followers", "following_url": "https://api.github.com/users/BaoDelta/following{/other_user}", "gists_url": "https://api.github.com/users/BaoDelta/gists{/gist_id}", "starred_url": "https://api.github.com/users/BaoDelta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BaoDelta/subscriptions", "organizations_url": "https://api.github.com/users/BaoDelta/orgs", "repos_url": "https://api.github.com/users/BaoDelta/repos", "events_url": "https://api.github.com/users/BaoDelta/events{/privacy}", "received_events_url": "https://api.github.com/users/BaoDelta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2015-08-05T01:14:09Z", "updated_at": "2015-09-07T03:55:01Z", "closed_at": "2015-08-05T01:28:58Z", "author_association": "NONE", "body": "I think you should turn this rule on by default.\n\nhttp://eslint.org/docs/rules/no-undef\n\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the var keyword in a for loop initializer).\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/451", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/451/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/451/events", "html_url": "https://github.com/airbnb/javascript/issues/451", "id": 98624070, "node_id": "MDU6SXNzdWU5ODYyNDA3MA==", "number": 451, "title": "Can I use eslint-config-airbnb without eslint-plugin-react?", "user": {"login": "txchen", "id": 713074, "node_id": "MDQ6VXNlcjcxMzA3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/713074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/txchen", "html_url": "https://github.com/txchen", "followers_url": "https://api.github.com/users/txchen/followers", "following_url": "https://api.github.com/users/txchen/following{/other_user}", "gists_url": "https://api.github.com/users/txchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/txchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/txchen/subscriptions", "organizations_url": "https://api.github.com/users/txchen/orgs", "repos_url": "https://api.github.com/users/txchen/repos", "events_url": "https://api.github.com/users/txchen/events{/privacy}", "received_events_url": "https://api.github.com/users/txchen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2015-08-02T17:40:08Z", "updated_at": "2018-01-31T16:35:42Z", "closed_at": "2015-08-21T21:24:32Z", "author_association": "NONE", "body": "I am not using react, so it would be better for me to just install eslint.\n\nIs it possible to move the jsx related configs to a separated file?\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/450", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/450/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/450/events", "html_url": "https://github.com/airbnb/javascript/issues/450", "id": 98374595, "node_id": "MDU6SXNzdWU5ODM3NDU5NQ==", "number": 450, "title": "Consider allowing anonymous function expressions", "user": {"login": "architectcodes", "id": 4624660, "node_id": "MDQ6VXNlcjQ2MjQ2NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4624660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/architectcodes", "html_url": "https://github.com/architectcodes", "followers_url": "https://api.github.com/users/architectcodes/followers", "following_url": "https://api.github.com/users/architectcodes/following{/other_user}", "gists_url": "https://api.github.com/users/architectcodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/architectcodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/architectcodes/subscriptions", "organizations_url": "https://api.github.com/users/architectcodes/orgs", "repos_url": "https://api.github.com/users/architectcodes/repos", "events_url": "https://api.github.com/users/architectcodes/events{/privacy}", "received_events_url": "https://api.github.com/users/architectcodes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361061166, "node_id": "MDU6TGFiZWwzNjEwNjExNjY=", "url": "https://api.github.com/repos/airbnb/javascript/labels/needs%20eslint%20rule%20change/addition", "name": "needs eslint rule change/addition", "color": "d4c5f9", "default": false}, {"id": 303239021, "node_id": "MDU6TGFiZWwzMDMyMzkwMjE=", "url": "https://api.github.com/repos/airbnb/javascript/labels/pull%20request%20wanted", "name": "pull request wanted", "color": "fbca04", "default": false}, {"id": 18135606, "node_id": "MDU6TGFiZWwxODEzNTYwNg==", "url": "https://api.github.com/repos/airbnb/javascript/labels/question", "name": "question", "color": "cc317c", "default": true}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-07-31T11:45:37Z", "updated_at": "2016-04-20T04:23:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "At the moment [you forbid](https://github.com/airbnb/javascript/blob/ea093e0373cc4dfa07c69ef7c75d81bd06bdf0c2/packages/eslint-config-airbnb/.eslintrc#L140) unnamed function expressions like `function() {}`. That\u2019s a good thing.\n\nBut when using the new function bind syntax with **[trine](https://github.com/jussi-kalliokoski/trine)**-style [libraries](https://github.com/roobie/mori-ext), you can\u2019t use arrow functions because they inherit `this` from the outer scope.\n\nSo a good old anonymous function expression:\n\n``` js\n[my, collection]::map(function() {\n  return !!this;\n});\n```\n\n\u2026often feels more natural than inventing obscure names:\n\n``` js\n[my, collection]::map(function justCastToBoolean() {\n  return !!this;\n});\n```\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/445", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/445/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/445/events", "html_url": "https://github.com/airbnb/javascript/issues/445", "id": 98199121, "node_id": "MDU6SXNzdWU5ODE5OTEyMQ==", "number": 445, "title": "`if` statements \u2013 one line vs. one expression", "user": {"login": "architectcodes", "id": 4624660, "node_id": "MDQ6VXNlcjQ2MjQ2NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4624660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/architectcodes", "html_url": "https://github.com/architectcodes", "followers_url": "https://api.github.com/users/architectcodes/followers", "following_url": "https://api.github.com/users/architectcodes/following{/other_user}", "gists_url": "https://api.github.com/users/architectcodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/architectcodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/architectcodes/subscriptions", "organizations_url": "https://api.github.com/users/architectcodes/orgs", "repos_url": "https://api.github.com/users/architectcodes/repos", "events_url": "https://api.github.com/users/architectcodes/events{/privacy}", "received_events_url": "https://api.github.com/users/architectcodes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361061166, "node_id": "MDU6TGFiZWwzNjEwNjExNjY=", "url": "https://api.github.com/repos/airbnb/javascript/labels/needs%20eslint%20rule%20change/addition", "name": "needs eslint rule change/addition", "color": "d4c5f9", "default": false}, {"id": 18135606, "node_id": "MDU6TGFiZWwxODEzNTYwNg==", "url": "https://api.github.com/repos/airbnb/javascript/labels/question", "name": "question", "color": "cc317c", "default": true}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-07-30T15:37:27Z", "updated_at": "2017-08-22T01:11:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body": "Until I started using ESLint with your configuration I saw nothing against the rules in this:\n\n``` js\n$ cat if.js\nconst [one, two] = [1, 2];\n\nif (one !== two) throw new Error(\n  'One does not equal two'\n);\n```\n\nBut ESLint does:\n\n``` sh\n$ eslint if.js \n\nif.js\n  3:0  error  Expected { after 'if' condition  curly\n\n\u2716 1 problem (1 error, 0 warnings)\n```\n\nIs this intended? In my opinion the pattern I\u2019ve been using is explicit \u2013 and more readable than this:\n\n``` js\nif (one !== two) {\n  throw new Error(\n    'One does not equal two'\n  );\n}\n```\n\nThe parens form a visual brace-like block much like in #438.\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/441", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/441/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/441/events", "html_url": "https://github.com/airbnb/javascript/issues/441", "id": 97998077, "node_id": "MDU6SXNzdWU5Nzk5ODA3Nw==", "number": 441, "title": "JSON declaration - single vs. double quotes", "user": {"login": "dthree", "id": 10319897, "node_id": "MDQ6VXNlcjEwMzE5ODk3", "avatar_url": "https://avatars3.githubusercontent.com/u/10319897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dthree", "html_url": "https://github.com/dthree", "followers_url": "https://api.github.com/users/dthree/followers", "following_url": "https://api.github.com/users/dthree/following{/other_user}", "gists_url": "https://api.github.com/users/dthree/gists{/gist_id}", "starred_url": "https://api.github.com/users/dthree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dthree/subscriptions", "organizations_url": "https://api.github.com/users/dthree/orgs", "repos_url": "https://api.github.com/users/dthree/repos", "events_url": "https://api.github.com/users/dthree/events{/privacy}", "received_events_url": "https://api.github.com/users/dthree/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-29T18:17:17Z", "updated_at": "2015-07-29T18:48:08Z", "closed_at": "2015-07-29T18:48:08Z", "author_association": "NONE", "body": "JSON is standardized to use double-quotes, to the degree that this would not be considered standard JSON and would error in a JSON parser.\n\n``` js\nvar foo = {\n 'bar': 'foobar'\n}\n```\n\nHowever, to keep consistent with single-quoting strings, wouldn't this create a conflict?\n\nI suppose I could use double-quotes for JSON objects only, however this is then going to create an inconsistency in my linter if I specify single-quotes as the preference.\n\nSugesttions?\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/440", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/440/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/440/events", "html_url": "https://github.com/airbnb/javascript/issues/440", "id": 97903556, "node_id": "MDU6SXNzdWU5NzkwMzU1Ng==", "number": 440, "title": "More frequent versions bumps", "user": {"login": "einarlove", "id": 1495211, "node_id": "MDQ6VXNlcjE0OTUyMTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1495211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/einarlove", "html_url": "https://github.com/einarlove", "followers_url": "https://api.github.com/users/einarlove/followers", "following_url": "https://api.github.com/users/einarlove/following{/other_user}", "gists_url": "https://api.github.com/users/einarlove/gists{/gist_id}", "starred_url": "https://api.github.com/users/einarlove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/einarlove/subscriptions", "organizations_url": "https://api.github.com/users/einarlove/orgs", "repos_url": "https://api.github.com/users/einarlove/repos", "events_url": "https://api.github.com/users/einarlove/events{/privacy}", "received_events_url": "https://api.github.com/users/einarlove/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-29T10:08:32Z", "updated_at": "2015-12-23T21:22:21Z", "closed_at": "2015-12-23T21:22:21Z", "author_association": "NONE", "body": "Have been trying to figure out why the rules in the [README](https://github.com/airbnb/javascript/blob/master/README.md) are not applied to my linter, but I see now that the styleguide has not been updated to [NPM](https://www.npmjs.com/package/airbnb-style) in over 2 months.\n\nI would encourage more frequent [versions bumps](https://github.com/airbnb/javascript/commit/df5029b5a55602a0b65f6a0a8dd7ac9a757caea8) and updates to the [NPM module](https://www.npmjs.com/package/airbnb-style).\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/439", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/439/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/439/events", "html_url": "https://github.com/airbnb/javascript/issues/439", "id": 97864275, "node_id": "MDU6SXNzdWU5Nzg2NDI3NQ==", "number": 439, "title": "Why is whitespace set to 2?", "user": {"login": "icirellik", "id": 403814, "node_id": "MDQ6VXNlcjQwMzgxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/403814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icirellik", "html_url": "https://github.com/icirellik", "followers_url": "https://api.github.com/users/icirellik/followers", "following_url": "https://api.github.com/users/icirellik/following{/other_user}", "gists_url": "https://api.github.com/users/icirellik/gists{/gist_id}", "starred_url": "https://api.github.com/users/icirellik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icirellik/subscriptions", "organizations_url": "https://api.github.com/users/icirellik/orgs", "repos_url": "https://api.github.com/users/icirellik/repos", "events_url": "https://api.github.com/users/icirellik/events{/privacy}", "received_events_url": "https://api.github.com/users/icirellik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-07-29T05:34:44Z", "updated_at": "2015-07-29T06:12:51Z", "closed_at": "2015-07-29T06:12:22Z", "author_association": "NONE", "body": "I did a quick search a couldn't find another issue on this topic, just wondering if there is any compelling argument for using 2 spaces over 4. Being a long time node developer, I just accepted that it won the war long before I joined.\n\nMy question is due to the fact that my workplace is primarily a Java shop and we are quickly switching over to node/react and a war has broken out over 2 vs 4 spaces (Oh how I long for the days of tabs vs spaces.)\n\nJust wondering if someone could provide any insight as to how your team arrived at 2.\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/438", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/438/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/438/events", "html_url": "https://github.com/airbnb/javascript/issues/438", "id": 97784529, "node_id": "MDU6SXNzdWU5Nzc4NDUyOQ==", "number": 438, "title": "Implicit return \u2013 one line vs. one expression", "user": {"login": "architectcodes", "id": 4624660, "node_id": "MDQ6VXNlcjQ2MjQ2NjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4624660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/architectcodes", "html_url": "https://github.com/architectcodes", "followers_url": "https://api.github.com/users/architectcodes/followers", "following_url": "https://api.github.com/users/architectcodes/following{/other_user}", "gists_url": "https://api.github.com/users/architectcodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/architectcodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/architectcodes/subscriptions", "organizations_url": "https://api.github.com/users/architectcodes/orgs", "repos_url": "https://api.github.com/users/architectcodes/repos", "events_url": "https://api.github.com/users/architectcodes/events{/privacy}", "received_events_url": "https://api.github.com/users/architectcodes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-28T19:34:47Z", "updated_at": "2015-08-13T16:44:17Z", "closed_at": "2015-08-13T16:44:17Z", "author_association": "CONTRIBUTOR", "body": "Hello again. I have a subjective suggestion.\n\nPoint [8.2](https://github.com/airbnb/javascript/tree/63bece1234b446ec0f1354ca5d8b62e18914383c#8.2) says: _\u201cIf the function body fits on one line and there is only a single argument, feel free to omit the braces and parentheses, and use the implicit return. Otherwise, add the parentheses, braces, and use a return statement.\u201d_. To be honest, this is the only rule I don\u2019t keep to in my projects.\n\nSimple function expressions \u2013 a set of arguments mapping to a single expression \u2013 are at the very heart of functional languages like JavaScript.\n\nConsider this example:\n\n``` js\n[/* \u2026 */]\n  .map(number => `A string containing the ${number}.`)\n  /* \u2026 */\n\n// As time goes by, the code evolves\u2026\n[/* \u2026 */]\n  .map((number) => (\n    `The string containing the ${number} now became much longer. A common ` +\n    'thing to do when a line of code outgrows its 80 character limit is to ' +\n    'break it over multiple lines.'\n  ))\n  /* \u2026 */\n\n// That looks more natural to the language than:\n[/* \u2026 */]\n  .map((number) => {\n    return (\n      `The string containing the ${number} now became much longer. A common ` +\n      'thing to do when a line of code outgrows its 80 character limit is to ' +\n      'break it over multiple lines.'\n    );\n  ))\n  /* \u2026 */\n```\n\nI suggest changing that guideline to the following:\n\n> If the function body ~~fits on one line and there is only a single argument~~ **consists of a single expression**, feel free to omit the braces ~~and parentheses,~~ and use the implicit return. **When your expression spans over multiple lines, wrap it in parentheses for better readability.** Otherwise, add the ~~parentheses,~~ braces and use a return statement.\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/435", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/435/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/435/events", "html_url": "https://github.com/airbnb/javascript/issues/435", "id": 96856379, "node_id": "MDU6SXNzdWU5Njg1NjM3OQ==", "number": 435, "title": "Unused variables when destructuring?", "user": {"login": "olalonde", "id": 416585, "node_id": "MDQ6VXNlcjQxNjU4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/416585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olalonde", "html_url": "https://github.com/olalonde", "followers_url": "https://api.github.com/users/olalonde/followers", "following_url": "https://api.github.com/users/olalonde/following{/other_user}", "gists_url": "https://api.github.com/users/olalonde/gists{/gist_id}", "starred_url": "https://api.github.com/users/olalonde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olalonde/subscriptions", "organizations_url": "https://api.github.com/users/olalonde/orgs", "repos_url": "https://api.github.com/users/olalonde/repos", "events_url": "https://api.github.com/users/olalonde/events{/privacy}", "received_events_url": "https://api.github.com/users/olalonde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-23T16:46:59Z", "updated_at": "2015-07-25T16:48:48Z", "closed_at": "2015-07-25T16:48:48Z", "author_association": "NONE", "body": "I just wrote this code:\n\n``` javascript\n  dirtyProperties() {\n    return this._getProperties()\n      .filter(([ prop ]) => prop.isDirty())\n      .map(([ _, propName ]) => propName);\n  }\n```\n\nand eslint threw a `no-unused-vars` error because of the `_` variable. \n\nIs this against the Airbnb style guide? I feel like using _ to ignore the first destructured variable should be pretty well understood and not using destructuring would make the code more verboe.\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/434", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/434/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/434/events", "html_url": "https://github.com/airbnb/javascript/issues/434", "id": 96537678, "node_id": "MDU6SXNzdWU5NjUzNzY3OA==", "number": 434, "title": "block-scoped-var error when using destructuring in function argument", "user": {"login": "olalonde", "id": 416585, "node_id": "MDQ6VXNlcjQxNjU4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/416585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olalonde", "html_url": "https://github.com/olalonde", "followers_url": "https://api.github.com/users/olalonde/followers", "following_url": "https://api.github.com/users/olalonde/following{/other_user}", "gists_url": "https://api.github.com/users/olalonde/gists{/gist_id}", "starred_url": "https://api.github.com/users/olalonde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olalonde/subscriptions", "organizations_url": "https://api.github.com/users/olalonde/orgs", "repos_url": "https://api.github.com/users/olalonde/repos", "events_url": "https://api.github.com/users/olalonde/events{/privacy}", "received_events_url": "https://api.github.com/users/olalonde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-07-22T11:03:58Z", "updated_at": "2015-07-22T15:04:12Z", "closed_at": "2015-07-22T14:24:27Z", "author_association": "NONE", "body": "I am refactoring an Express app to es6 and tried to do this:\n\n``` javascript\nmodule.exports = {\n  index: ({\n    app,\n    query: { limit = 10, page = 1, type },\n    params: { param1, param2 },\n  }, res, next) => {\n     // some code\n  },\n};\n```\n\nIt runs and compiles as expected using babel. However, eslint gives me a bunch of `block-scoped-var` errors:\n\n```\n\"limit\" used outside of binding context. (block-scoped-var)\netc.\n```\n\nIs this against the Airbnb style guide? Is there a way to fix the `.eslintrc` for that use case?\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/433", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/433/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/433/events", "html_url": "https://github.com/airbnb/javascript/issues/433", "id": 96473164, "node_id": "MDU6SXNzdWU5NjQ3MzE2NA==", "number": 433, "title": "Mocha tests: Missing function expression name. (func-names)", "user": {"login": "olalonde", "id": 416585, "node_id": "MDQ6VXNlcjQxNjU4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/416585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olalonde", "html_url": "https://github.com/olalonde", "followers_url": "https://api.github.com/users/olalonde/followers", "following_url": "https://api.github.com/users/olalonde/following{/other_user}", "gists_url": "https://api.github.com/users/olalonde/gists{/gist_id}", "starred_url": "https://api.github.com/users/olalonde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olalonde/subscriptions", "organizations_url": "https://api.github.com/users/olalonde/orgs", "repos_url": "https://api.github.com/users/olalonde/repos", "events_url": "https://api.github.com/users/olalonde/events{/privacy}", "received_events_url": "https://api.github.com/users/olalonde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2015-07-22T04:34:51Z", "updated_at": "2017-04-16T07:42:54Z", "closed_at": "2015-07-22T11:01:47Z", "author_association": "NONE", "body": "When writing Mocha tests, it is not possible to use fat arrow functions because we sometimes need to use the `this` keyword to change the test's timeout for example.\n\n``` javascript\ndescribe('some description', function () {\n  before('blabla', function () {\n    this.timeout(10000);\n    return somePromise();\n  });\n});\n```\n\nThis results in the following eslint error:\n\n```\nMissing function expression name. (func-names)\n```\n\nI was wondering what was the guidelines for this case. Naming the functions is out of the question as it would add a lot of noise.\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/430", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/430/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/430/events", "html_url": "https://github.com/airbnb/javascript/issues/430", "id": 95828776, "node_id": "MDU6SXNzdWU5NTgyODc3Ng==", "number": 430, "title": "Conflicting Comments example in 17.4 and 17.5", "user": {"login": "dciccale", "id": 539546, "node_id": "MDQ6VXNlcjUzOTU0Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/539546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dciccale", "html_url": "https://github.com/dciccale", "followers_url": "https://api.github.com/users/dciccale/followers", "following_url": "https://api.github.com/users/dciccale/following{/other_user}", "gists_url": "https://api.github.com/users/dciccale/gists{/gist_id}", "starred_url": "https://api.github.com/users/dciccale/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dciccale/subscriptions", "organizations_url": "https://api.github.com/users/dciccale/orgs", "repos_url": "https://api.github.com/users/dciccale/repos", "events_url": "https://api.github.com/users/dciccale/events{/privacy}", "received_events_url": "https://api.github.com/users/dciccale/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-07-18T14:17:10Z", "updated_at": "2015-07-24T07:17:22Z", "closed_at": "2015-07-24T07:17:22Z", "author_association": "NONE", "body": "[17.2](https://github.com/airbnb/javascript/blob/master/README.md#17.2) Use // for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment.\n\nThis specifies putting an empty line before the comment. I don't see examples [17.4](https://github.com/airbnb/javascript/blob/master/README.md#17.4) and [17.5](https://github.com/airbnb/javascript/blob/master/README.md#17.5) following that statement.\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/429", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/429/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/429/events", "html_url": "https://github.com/airbnb/javascript/issues/429", "id": 95808025, "node_id": "MDU6SXNzdWU5NTgwODAyNQ==", "number": 429, "title": "javascript\u7b14\u8bb0", "user": {"login": "Jey100", "id": 13391931, "node_id": "MDQ6VXNlcjEzMzkxOTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/13391931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jey100", "html_url": "https://github.com/Jey100", "followers_url": "https://api.github.com/users/Jey100/followers", "following_url": "https://api.github.com/users/Jey100/following{/other_user}", "gists_url": "https://api.github.com/users/Jey100/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jey100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jey100/subscriptions", "organizations_url": "https://api.github.com/users/Jey100/orgs", "repos_url": "https://api.github.com/users/Jey100/repos", "events_url": "https://api.github.com/users/Jey100/events{/privacy}", "received_events_url": "https://api.github.com/users/Jey100/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-18T09:29:04Z", "updated_at": "2015-12-14T09:05:10Z", "closed_at": "2015-12-14T09:05:10Z", "author_association": "NONE", "body": "1,NaN\n  NaN \u662f\u4e00\u4e2a\u503c(\u975e\u5e38\u7279\u6b8a\u7684\u503c)\uff0c\u7c7b\u578b\u4e3aNumber;\n  \u4f8b\u5982\uff1a\n  var name;\n  var value = parseInt(name);\n  alert(value);  //\u6b64\u65f6\u5f39\u51faNaN\n  alert(value === NaN)  //\u5168\u7b49\u5224\u65ad\uff0c\u8fd4\u56defalse\n  alert(value == NaN)   //\u7b49\u503c\u5224\u65ad\uff0c\u8fd4\u56defalse\n  alert(Number.isNaN(AV));     //\u5224\u65ad\u662f\u5426\u662fNaN \u8fd4\u56detrue\n\n  alert(typeof value)  // Number \u7c7b\u578b\n\n  **(\u4e0d\u8981\u7528\u4e00\u4e2aNaN\uff0c\u53bb\u5224\u65ad\u662f\u5426\u7b49\u4e8eNaN,\u56e0\u4e3a\u4ed6\u81ea\u5df1\u4e5f\u4e0d\u7b49\u4e8e\u81ea\u5df1\uff0c\u8fd9\u662fjs\u7684\u7279\u4f8b\uff0c\u591a\u4e48\u795e\u5947)\n\n2\uff0c\u7a7a\u5b57\u7b26\u4e32\u4e5f\u53ef\u4ee5\u505a\u4e3a\u5bf9\u8c61\u7684\u6210\u5458\u540d\n   aa ={\n        \"\\0\":\"kobe\",\n    '':\"bryant\",\n        ' ':123\n    }\n\n```\nalert(aa[\"\\0\"]); //kobe \uff08\\0\u8868\u793aNul\u5b57\u7b26\uff09\nalert(aa[\"\"]);   //bryant\nalert(aa[\" \"]);  //123\n```\n\n3\uff0c==\u76f8\u7b49   (\u503c\u76f8\u540c)  \n   ===\u76f8\u540c  \uff08\u503c\u76f8\u540c\uff0c\u7c7b\u578b\u76f8\u540c\uff09\n\n  \u4f8b\u5b501\n  var str1 = \"aa\";\n  var obj1 = new String(str1);\n  alert(obj1 == str1);  //true\n  alert(obj1 === str1); //false \uff08\u503c\u7c7b\u578b\u4e0e\u5f15\u7528\u7c7b\u578b\uff0c\u5fc5\u7136\u4e0d\u540c\uff09\n\n  \u4f8b\u5b502\n  var obj1 = new String(str1);\n  var obj2 = new String(str1);\n\n  alert(obj1 == obj2);   //false \n  alert(obj1 === obj2);  //false\n\n  **\uff08\u4e24\u4e2a\u5f15\u7528\u7c7b\u578b\u7684\u6bd4\u8f83\u8f83\u8fd0\u7b97\u4e2d\uff0c==\u548c===\u59cb\u7ec8\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u4e3afalse,\n      \u56e0\u4e3a\u4ed6\u4eec\u90fd\u6307\u5411\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\uff0c\u5373\u4e0d\u540c\u7684\u6307\u9488\uff09\n\n4,\u5b57\u7b26\u53c2\u4e0e\u5e8f\u5217\u68c0\u6d4b\n    var s1 = \"abc\";\n    var s2 = \"ab\";\n    var s3 = true;\n    var s4 = \"10\"\n    var s5 = 9;\n    alert(s1 > s2) // true,\u4e24\u4e2a\u5b57\u7b26\u6bd4\u8f83\u65f6\uff0c\u6bd4\u8f83\u5e8f\u5217\u503c\n    alert(s1 > s3) //false \u6b64\u65f6\uff0cs1\u4f1a\u8f6c\u6362\u4e3a\u6570\u503c\uff0c\u5e76\u4e14\u4e3aNaN,s3\u4f1a\u8f6c\u6362\u4e3a\u6570\u503c1\uff0c\u7531\u4e8eNaN\u4e0e\u4efb\u4f55\u503c\u6bd4\u8f83\u90fd\u662ffalse,\u6240\u6709\u8fd4\u56defalse\n    alert(s4 > s5) //true \u6b64\u65f6\uff0cs4\u4f1a\u8f6c\u6362\u4e3a\u6570\u503c\uff0c\u4e3a10\uff0c\n\n```\n**(js\u4e2d\uff0c\u5f53\u975eNumber\u7c7b\u578b\u53d8\u91cf\u53c2\u4e0e\u6bd4\u8f83\u65f6\uff0c\u90fd\u4f1a\u5c06\u81ea\u5df1\u5148\u8f6c\u6362\u4e3a Number\u7c7b\u578b\uff0c\u8fdb\u884c\u6bd4\u8f83(\u5b57\u7b26\u4e0e\u5b57\u7b26\u6bd4\u8f83\u9664\u5916\uff0c\u4ed6\u4eec\u6bd4\u8f83\u5e8f\u5217\u503c\uff0c\u8fd9\u4e2a\u4e5f\u7279\u6b8a ))\n```\n\n5\uff0c\u591a\u91cd\u6c42\u503c\",\"\n    var i = 100;\n    alert(i += 10,i*=2,i+=100,\"value:\"+i); //\u8fd4\u56de\u6700\u540e\u8868\u8fbe\u5f0f\u7684\u503c value:320\n\n6\uff0cvoid \u8fd0\u7b97\u7b26\n    void\u662f\u5c06\u5176\u540e\u7684\u5b57\u9762\u91cf\u5f53\u5143\u8868\u8fbe\u5f0f\u6267\u884c\uff0c\u5e76\u6c38\u8fdc\u8fd4\u56deundefined\u3002\u540c\u65f6undefined\u4e0d\u662f\u5173\u952e\u8bcd\u3002\u3002\n    void\u6709\u5982\u4e0b\u4f5c\u7528\uff1a\n        a,\u901a\u8fc7\u91c7\u7528void 0\u53d6undefined\u6bd4\u91c7\u7528\u5b57\u9762\u4e0a\u7684undefined\u66f4\u9760\u8c31\u66f4\u5b89\u5168\uff0c\u5e94\u8be5\u4f18\u5148\u91c7\u7528void 0\u8fd9\u79cd\u65b9\u5f0f\u3002\n        b,\u586b\u5145<a>\u7684href\u786e\u4fdd\u70b9\u51fb\u65f6\u4e0d\u4f1a\u4ea7\u751f\u9875\u9762\u8df3\u8f6c; \u586b\u5145<image>\u7684src=\"javascript:void(0)\"\uff0c\u786e\u4fdd\u4e0d\u4f1a\u5411\u670d\u52a1\u5668\u53d1\u51fa\u5783\u573e\u8bf7\u6c42\u3002\n\n7,eval()\u51fd\u6570\n    var x = eval(\"1+2;var x =5;;;3+5;;function f(){};\");\n    var x2 = eval(\"1+2;var x =5;;;3+9;;function f(){return 100};f();\");\n    alert(x);  //\u8fd4\u56de8\n    alert(x2);  //\u8fd4\u56de100(f()\u7684\u8fd4\u56de\u503c)\n\n```\n**(\u5f53\u6211\u4eec\u8bd5\u56fe\u7528eval()\u6267\u884c\u4e00\u6279\u8bed\u53e5\u5e76\u8fd4\u56de\u7ed3\u679c\u503c\u662f\uff0c\u8fd9\u4e9b\u8bed\u53e5\u90fd\u5c06\u88ab\u5ffd\u7565\uff0c\u7136\u540e\u8fd4\u56de\"\u6700\u540e\u6267\u884c\u5230\u7684\uff0c\u6709\u8fd4\u56de\u503c\"\u7684\u90a3\u6761\u8bed\u53e5\u7684\u503c)\n```\n\n8,\u51fd\u6570\u8c03\u7528\n   //\u65b9\u6cd51\n  (function(A){\n    alert(A);\n    })(1);\n\n```\n//\u65b9\u6cd52\n(function(C){\n    alert(C);\n}(2));\n\n//\u65b9\u6cd53\nvoid function(D){\n   alert(D);\n}(3);\n\n//\u9519\u8bef4\uff08\u9519\u8bef\u7684\u8c03\u7528 \uff09\nfunction(D){\n   alert(D);\n}(3);\n\n** \u65b9\u6cd53\u4e2d\uff0c\u5982\u679c\u6ca1\u6709void\u8fd0\u7b97\u7b26\uff0c\u8bb2\u53d1\u751f\u8bed\u6cd5\u9519\u8bef\uff0c\u56e0\u4e3a\u9519\u8bef4\u4f1a\u6309\u7167\u5b8c\u6574\u7684\u51fd\u6570\u58f0\u660e\u6765\u89e3\u91ca\uff0c\u811a\u672c\u5f15\u64ce\u4f1a\u89e3\u6790\u6210\uff1a\n   function(D){\n       alert(D)\n   };(3)   //\u6b64\u65f6;(3)\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u901a\u8fc7\n```\n\n9,get/set\n  var per={\n    _name:null,\n    _age:0,\n    set name(a){this._name = a},\n    get name(){return this._name},\n  }\n    per.name=\"kobe\";\n    alert(per.name);  //kobe    Ecmascript5 \u624d\u652f\u6301\u7684\u5199\u6cd5\uff0cie9+ \u624d\u53ef\u4ee5\u652f\u6301\n\n10,with \u8bed\u53e5\u53ef\u4ee5\u65b9\u4fbf\u5730\u7528\u6765\u5f15\u7528\u67d0\u4e2a\u7279\u5b9a\u5bf9\u8c61\u4e2d\u5df2\u6709\u7684\u5c5e\u6027(\u4e25\u683c\u6a21\u5f0f\u4e0b\uff0c\u4f1a\u88ab\u7981\u7528)\n    function foo(){\n        this.name=\"kobe\";\n        this.say = function(){alert(123)}\n    }\n    var per = new foo();\n    with(per){\n     name=\"yaoming\";\n    }\n\n```\nalert(per.name);  //yaoming\n```\n\n11,\u5173\u4e8e\u4e25\u683c\u6a21\u5f0f\n  \u4e25\u683c\u6a21\u5f0f\u6307\u793a\u524d\u7f00\u5982\u679c\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d\u95f4\uff0c\u5219\u5b83\u5c06\u88ab\u5ffd\u7565\n  \"use strict\"\n  var eval;  //\u4e25\u683c\u6a21\u5f0f\n\n  var xa;\n  \"use strict\"  //\u7531\u4e8e\u524d\u9762\u6709\u4ee3\u7801\uff0c\u8fd9\u884c\uff0c\u5c06\u88ab\u5ffd\u7565\n  ;\"use strict\"  //\u6216\u8005\u8fd9\u6837\uff0c\uff0c\u8fd9\u884c\uff0c\u5c06\u88ab\u5ffd\u7565\n  var eval; \n\n12,js\u7684\u4e8c\u4e49\u6027\n  12.1 \"+\"\n      alert(\"3\"-1);  //2\n      alert(\"3\"+1);  //31\n\n  12.2 \"()\"\n      alert((1,2,3));  //3\n      alert(1,2,3);    //1\n\n13, \u65e0\u8bba\u901a\u8fc7 arguments \u8fd8\u662f\u5f62\u5f0f\u53c2\u6570\uff0c\u90fd\u53ef\u4ee5\u4fee\u6539\u5165\u53e3\u53c2\u6570\u7684\u503c\n14, \u6c38\u8fdc\u4e0d\u53ef\u80fd\u901a\u8fc7\u4fee\u6539\u53c2\u6570\u6765\u5f71\u54cd\u5230\u51fd\u6570\u5916\u90e8\u7684\u666e\u901a\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u53ef\u4ee5\u4fee\u6539\u5bf9\u8c61\u7684\u6210\u5458\n    var name = \"aa\"\n    function F(p1){\n        p1 = 123; //\u4fee\u6539\u53c2\u6570\n    }\n    F(name);\n    alert(name) // \u4f9d\u7136\u662faa\n\n```\n----------------------------------------\n\nvar obj = {name:\"cc\"};\nfunction F(p1){\n    p1.name = 234 //\u4fee\u6539\u53c2\u6570\u6210\u5458\u5c5e\u6027\n}\nF(obj);\nalert(obj.name); //\u6b64\u65f6\u5df2\u7ecf\u53d8\u6210 234 \n***\u4f20\u5165\u7684obj\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6307\u9488\u5730\u5740\uff0c\u6216\u8005\u5e94\u7528\uff0c\u81ea\u5df1\u603b\u7ed3\n```\n"}, {"url": "https://api.github.com/repos/airbnb/javascript/issues/426", "repository_url": "https://api.github.com/repos/airbnb/javascript", "labels_url": "https://api.github.com/repos/airbnb/javascript/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/426/comments", "events_url": "https://api.github.com/repos/airbnb/javascript/issues/426/events", "html_url": "https://github.com/airbnb/javascript/issues/426", "id": 95565842, "node_id": "MDU6SXNzdWU5NTU2NTg0Mg==", "number": 426, "title": "Why does the .eslintrc prohibit unused function parameters? ", "user": {"login": "ariporad", "id": 1817508, "node_id": "MDQ6VXNlcjE4MTc1MDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1817508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ariporad", "html_url": "https://github.com/ariporad", "followers_url": "https://api.github.com/users/ariporad/followers", "following_url": "https://api.github.com/users/ariporad/following{/other_user}", "gists_url": "https://api.github.com/users/ariporad/gists{/gist_id}", "starred_url": "https://api.github.com/users/ariporad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ariporad/subscriptions", "organizations_url": "https://api.github.com/users/ariporad/orgs", "repos_url": "https://api.github.com/users/ariporad/repos", "events_url": "https://api.github.com/users/ariporad/events{/privacy}", "received_events_url": "https://api.github.com/users/ariporad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-17T01:41:30Z", "updated_at": "2015-12-23T21:20:32Z", "closed_at": "2015-12-23T21:20:32Z", "author_association": "CONTRIBUTOR", "body": "Hi,\n\nI'm coming at this from a node point of view, so sorry if it's weird for client side JS.\n\nWhy do you prohibit unused function parameters in the .eslintrc? In node, (and AFAIK in the browser), ignoring one or more of your parameters for now isn't that big a deal (for example, if a callback gets err, info, res, ignoring info is fine.)\n\nThanks!\nAri\n"}]